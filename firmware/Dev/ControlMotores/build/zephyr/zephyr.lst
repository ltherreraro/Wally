
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000ed0 10003525 10004e9b 100034e1     ... %5...N...4..
	...
1000012c:	1000331d 00000000 00000000 100032bd     .3...........2..
1000013c:	100039cd                                .9..

10000140 <_irq_vector_table>:
10000140:	1000338d 1000338d 1000338d 1000338d     .3...3...3...3..
10000150:	1000338d 1000338d 1000338d 1000338d     .3...3...3...3..
10000160:	1000338d 1000338d 1000338d 1000338d     .3...3...3...3..
10000170:	1000338d 1000338d 1000338d 1000338d     .3...3...3...3..
10000180:	1000338d 1000338d 1000338d 1000338d     .3...3...3...3..
10000190:	1000338d 1000338d 1000338d 1000338d     .3...3...3...3..
100001a0:	1000338d 1000338d                       .3...3..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__aeabi_cdrcmple>:
10000260:	4684      	mov	ip, r0
10000262:	0010      	movs	r0, r2
10000264:	4662      	mov	r2, ip
10000266:	468c      	mov	ip, r1
10000268:	0019      	movs	r1, r3
1000026a:	4663      	mov	r3, ip
1000026c:	e000      	b.n	10000270 <__aeabi_cdcmpeq>
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_cdcmpeq>:
10000270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10000272:	f000 fd77 	bl	10000d64 <__ledf2>
10000276:	2800      	cmp	r0, #0
10000278:	d401      	bmi.n	1000027e <__aeabi_cdcmpeq+0xe>
1000027a:	2100      	movs	r1, #0
1000027c:	42c8      	cmn	r0, r1
1000027e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10000280 <__aeabi_dcmpeq>:
10000280:	b510      	push	{r4, lr}
10000282:	f000 fcb7 	bl	10000bf4 <__eqdf2>
10000286:	4240      	negs	r0, r0
10000288:	3001      	adds	r0, #1
1000028a:	bd10      	pop	{r4, pc}

1000028c <__aeabi_dcmplt>:
1000028c:	b510      	push	{r4, lr}
1000028e:	f000 fd69 	bl	10000d64 <__ledf2>
10000292:	2800      	cmp	r0, #0
10000294:	db01      	blt.n	1000029a <__aeabi_dcmplt+0xe>
10000296:	2000      	movs	r0, #0
10000298:	bd10      	pop	{r4, pc}
1000029a:	2001      	movs	r0, #1
1000029c:	bd10      	pop	{r4, pc}
1000029e:	46c0      	nop			; (mov r8, r8)

100002a0 <__aeabi_dcmple>:
100002a0:	b510      	push	{r4, lr}
100002a2:	f000 fd5f 	bl	10000d64 <__ledf2>
100002a6:	2800      	cmp	r0, #0
100002a8:	dd01      	ble.n	100002ae <__aeabi_dcmple+0xe>
100002aa:	2000      	movs	r0, #0
100002ac:	bd10      	pop	{r4, pc}
100002ae:	2001      	movs	r0, #1
100002b0:	bd10      	pop	{r4, pc}
100002b2:	46c0      	nop			; (mov r8, r8)

100002b4 <__aeabi_dcmpgt>:
100002b4:	b510      	push	{r4, lr}
100002b6:	f000 fcdf 	bl	10000c78 <__gedf2>
100002ba:	2800      	cmp	r0, #0
100002bc:	dc01      	bgt.n	100002c2 <__aeabi_dcmpgt+0xe>
100002be:	2000      	movs	r0, #0
100002c0:	bd10      	pop	{r4, pc}
100002c2:	2001      	movs	r0, #1
100002c4:	bd10      	pop	{r4, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__aeabi_dcmpge>:
100002c8:	b510      	push	{r4, lr}
100002ca:	f000 fcd5 	bl	10000c78 <__gedf2>
100002ce:	2800      	cmp	r0, #0
100002d0:	da01      	bge.n	100002d6 <__aeabi_dcmpge+0xe>
100002d2:	2000      	movs	r0, #0
100002d4:	bd10      	pop	{r4, pc}
100002d6:	2001      	movs	r0, #1
100002d8:	bd10      	pop	{r4, pc}
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__clzsi2>:
100002dc:	211c      	movs	r1, #28
100002de:	2301      	movs	r3, #1
100002e0:	041b      	lsls	r3, r3, #16
100002e2:	4298      	cmp	r0, r3
100002e4:	d301      	bcc.n	100002ea <__clzsi2+0xe>
100002e6:	0c00      	lsrs	r0, r0, #16
100002e8:	3910      	subs	r1, #16
100002ea:	0a1b      	lsrs	r3, r3, #8
100002ec:	4298      	cmp	r0, r3
100002ee:	d301      	bcc.n	100002f4 <__clzsi2+0x18>
100002f0:	0a00      	lsrs	r0, r0, #8
100002f2:	3908      	subs	r1, #8
100002f4:	091b      	lsrs	r3, r3, #4
100002f6:	4298      	cmp	r0, r3
100002f8:	d301      	bcc.n	100002fe <__clzsi2+0x22>
100002fa:	0900      	lsrs	r0, r0, #4
100002fc:	3904      	subs	r1, #4
100002fe:	a202      	add	r2, pc, #8	; (adr r2, 10000308 <__clzsi2+0x2c>)
10000300:	5c10      	ldrb	r0, [r2, r0]
10000302:	1840      	adds	r0, r0, r1
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)
10000308:	02020304 	.word	0x02020304
1000030c:	01010101 	.word	0x01010101
	...

10000318 <__ctzsi2>:
10000318:	4241      	negs	r1, r0
1000031a:	4008      	ands	r0, r1
1000031c:	211c      	movs	r1, #28
1000031e:	2301      	movs	r3, #1
10000320:	041b      	lsls	r3, r3, #16
10000322:	4298      	cmp	r0, r3
10000324:	d301      	bcc.n	1000032a <__ctzsi2+0x12>
10000326:	0c00      	lsrs	r0, r0, #16
10000328:	3910      	subs	r1, #16
1000032a:	0a1b      	lsrs	r3, r3, #8
1000032c:	4298      	cmp	r0, r3
1000032e:	d301      	bcc.n	10000334 <__ctzsi2+0x1c>
10000330:	0a00      	lsrs	r0, r0, #8
10000332:	3908      	subs	r1, #8
10000334:	091b      	lsrs	r3, r3, #4
10000336:	4298      	cmp	r0, r3
10000338:	d301      	bcc.n	1000033e <__ctzsi2+0x26>
1000033a:	0900      	lsrs	r0, r0, #4
1000033c:	3904      	subs	r1, #4
1000033e:	a202      	add	r2, pc, #8	; (adr r2, 10000348 <__ctzsi2+0x30>)
10000340:	5c10      	ldrb	r0, [r2, r0]
10000342:	1a40      	subs	r0, r0, r1
10000344:	4770      	bx	lr
10000346:	46c0      	nop			; (mov r8, r8)
10000348:	1d1d1c1b 	.word	0x1d1d1c1b
1000034c:	1e1e1e1e 	.word	0x1e1e1e1e
10000350:	1f1f1f1f 	.word	0x1f1f1f1f
10000354:	1f1f1f1f 	.word	0x1f1f1f1f

10000358 <__aeabi_uldivmod>:
10000358:	2b00      	cmp	r3, #0
1000035a:	d111      	bne.n	10000380 <__aeabi_uldivmod+0x28>
1000035c:	2a00      	cmp	r2, #0
1000035e:	d10f      	bne.n	10000380 <__aeabi_uldivmod+0x28>
10000360:	2900      	cmp	r1, #0
10000362:	d100      	bne.n	10000366 <__aeabi_uldivmod+0xe>
10000364:	2800      	cmp	r0, #0
10000366:	d002      	beq.n	1000036e <__aeabi_uldivmod+0x16>
10000368:	2100      	movs	r1, #0
1000036a:	43c9      	mvns	r1, r1
1000036c:	0008      	movs	r0, r1
1000036e:	b407      	push	{r0, r1, r2}
10000370:	4802      	ldr	r0, [pc, #8]	; (1000037c <__aeabi_uldivmod+0x24>)
10000372:	a102      	add	r1, pc, #8	; (adr r1, 1000037c <__aeabi_uldivmod+0x24>)
10000374:	1840      	adds	r0, r0, r1
10000376:	9002      	str	r0, [sp, #8]
10000378:	bd03      	pop	{r0, r1, pc}
1000037a:	46c0      	nop			; (mov r8, r8)
1000037c:	fffffee1 	.word	0xfffffee1
10000380:	b403      	push	{r0, r1}
10000382:	4668      	mov	r0, sp
10000384:	b501      	push	{r0, lr}
10000386:	9802      	ldr	r0, [sp, #8]
10000388:	f001 fc24 	bl	10001bd4 <__udivmoddi4>
1000038c:	9b01      	ldr	r3, [sp, #4]
1000038e:	469e      	mov	lr, r3
10000390:	b002      	add	sp, #8
10000392:	bc0c      	pop	{r2, r3}
10000394:	4770      	bx	lr
10000396:	46c0      	nop			; (mov r8, r8)

10000398 <__aeabi_f2ulz>:
10000398:	b5d0      	push	{r4, r6, r7, lr}
1000039a:	f001 fab9 	bl	10001910 <__aeabi_f2d>
1000039e:	2200      	movs	r2, #0
100003a0:	4b0b      	ldr	r3, [pc, #44]	; (100003d0 <__aeabi_f2ulz+0x38>)
100003a2:	0006      	movs	r6, r0
100003a4:	000f      	movs	r7, r1
100003a6:	f000 fd55 	bl	10000e54 <__aeabi_dmul>
100003aa:	f001 fba3 	bl	10001af4 <__aeabi_d2uiz>
100003ae:	0004      	movs	r4, r0
100003b0:	f001 fa8e 	bl	100018d0 <__aeabi_ui2d>
100003b4:	2200      	movs	r2, #0
100003b6:	4b07      	ldr	r3, [pc, #28]	; (100003d4 <__aeabi_f2ulz+0x3c>)
100003b8:	f000 fd4c 	bl	10000e54 <__aeabi_dmul>
100003bc:	0002      	movs	r2, r0
100003be:	000b      	movs	r3, r1
100003c0:	0030      	movs	r0, r6
100003c2:	0039      	movs	r1, r7
100003c4:	f000 ff70 	bl	100012a8 <__aeabi_dsub>
100003c8:	f001 fb94 	bl	10001af4 <__aeabi_d2uiz>
100003cc:	0021      	movs	r1, r4
100003ce:	bdd0      	pop	{r4, r6, r7, pc}
100003d0:	3df00000 	.word	0x3df00000
100003d4:	41f00000 	.word	0x41f00000

100003d8 <__aeabi_fdiv>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	0fc3      	lsrs	r3, r0, #31
100003dc:	b085      	sub	sp, #20
100003de:	0244      	lsls	r4, r0, #9
100003e0:	0045      	lsls	r5, r0, #1
100003e2:	1c0f      	adds	r7, r1, #0
100003e4:	0a64      	lsrs	r4, r4, #9
100003e6:	0e2d      	lsrs	r5, r5, #24
100003e8:	9303      	str	r3, [sp, #12]
100003ea:	9302      	str	r3, [sp, #8]
100003ec:	d00a      	beq.n	10000404 <__aeabi_fdiv+0x2c>
100003ee:	2dff      	cmp	r5, #255	; 0xff
100003f0:	d03b      	beq.n	1000046a <__aeabi_fdiv+0x92>
100003f2:	2380      	movs	r3, #128	; 0x80
100003f4:	00e4      	lsls	r4, r4, #3
100003f6:	04db      	lsls	r3, r3, #19
100003f8:	431c      	orrs	r4, r3
100003fa:	2300      	movs	r3, #0
100003fc:	3d7f      	subs	r5, #127	; 0x7f
100003fe:	9501      	str	r5, [sp, #4]
10000400:	9300      	str	r3, [sp, #0]
10000402:	e00e      	b.n	10000422 <__aeabi_fdiv+0x4a>
10000404:	2301      	movs	r3, #1
10000406:	9401      	str	r4, [sp, #4]
10000408:	9300      	str	r3, [sp, #0]
1000040a:	2c00      	cmp	r4, #0
1000040c:	d009      	beq.n	10000422 <__aeabi_fdiv+0x4a>
1000040e:	0020      	movs	r0, r4
10000410:	f7ff ff64 	bl	100002dc <__clzsi2>
10000414:	1f43      	subs	r3, r0, #5
10000416:	409c      	lsls	r4, r3
10000418:	2376      	movs	r3, #118	; 0x76
1000041a:	425b      	negs	r3, r3
1000041c:	1a1b      	subs	r3, r3, r0
1000041e:	9301      	str	r3, [sp, #4]
10000420:	9500      	str	r5, [sp, #0]
10000422:	027d      	lsls	r5, r7, #9
10000424:	007e      	lsls	r6, r7, #1
10000426:	0a6d      	lsrs	r5, r5, #9
10000428:	0e36      	lsrs	r6, r6, #24
1000042a:	0fff      	lsrs	r7, r7, #31
1000042c:	2e00      	cmp	r6, #0
1000042e:	d023      	beq.n	10000478 <__aeabi_fdiv+0xa0>
10000430:	2eff      	cmp	r6, #255	; 0xff
10000432:	d02e      	beq.n	10000492 <__aeabi_fdiv+0xba>
10000434:	2380      	movs	r3, #128	; 0x80
10000436:	00ed      	lsls	r5, r5, #3
10000438:	04db      	lsls	r3, r3, #19
1000043a:	431d      	orrs	r5, r3
1000043c:	0033      	movs	r3, r6
1000043e:	3b7f      	subs	r3, #127	; 0x7f
10000440:	2200      	movs	r2, #0
10000442:	9801      	ldr	r0, [sp, #4]
10000444:	9903      	ldr	r1, [sp, #12]
10000446:	1ac3      	subs	r3, r0, r3
10000448:	9800      	ldr	r0, [sp, #0]
1000044a:	4079      	eors	r1, r7
1000044c:	0080      	lsls	r0, r0, #2
1000044e:	4310      	orrs	r0, r2
10000450:	3801      	subs	r0, #1
10000452:	280e      	cmp	r0, #14
10000454:	d823      	bhi.n	1000049e <__aeabi_fdiv+0xc6>
10000456:	f7ff fea7 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000045a:	994d      	.short	0x994d
1000045c:	99929973 	.word	0x99929973
10000460:	924d4d73 	.word	0x924d4d73
10000464:	61616173 	.word	0x61616173
10000468:	53          	.byte	0x53
10000469:	00          	.byte	0x00
1000046a:	2302      	movs	r3, #2
1000046c:	9501      	str	r5, [sp, #4]
1000046e:	9300      	str	r3, [sp, #0]
10000470:	2c00      	cmp	r4, #0
10000472:	d0d6      	beq.n	10000422 <__aeabi_fdiv+0x4a>
10000474:	3301      	adds	r3, #1
10000476:	e7c3      	b.n	10000400 <__aeabi_fdiv+0x28>
10000478:	002b      	movs	r3, r5
1000047a:	2201      	movs	r2, #1
1000047c:	2d00      	cmp	r5, #0
1000047e:	d0e0      	beq.n	10000442 <__aeabi_fdiv+0x6a>
10000480:	0028      	movs	r0, r5
10000482:	f7ff ff2b 	bl	100002dc <__clzsi2>
10000486:	1f43      	subs	r3, r0, #5
10000488:	409d      	lsls	r5, r3
1000048a:	2376      	movs	r3, #118	; 0x76
1000048c:	425b      	negs	r3, r3
1000048e:	1a1b      	subs	r3, r3, r0
10000490:	e7d6      	b.n	10000440 <__aeabi_fdiv+0x68>
10000492:	0033      	movs	r3, r6
10000494:	2202      	movs	r2, #2
10000496:	2d00      	cmp	r5, #0
10000498:	d0d3      	beq.n	10000442 <__aeabi_fdiv+0x6a>
1000049a:	3201      	adds	r2, #1
1000049c:	e7d1      	b.n	10000442 <__aeabi_fdiv+0x6a>
1000049e:	0164      	lsls	r4, r4, #5
100004a0:	016d      	lsls	r5, r5, #5
100004a2:	42ac      	cmp	r4, r5
100004a4:	d328      	bcc.n	100004f8 <__aeabi_fdiv+0x120>
100004a6:	201a      	movs	r0, #26
100004a8:	2201      	movs	r2, #1
100004aa:	1b64      	subs	r4, r4, r5
100004ac:	2601      	movs	r6, #1
100004ae:	0027      	movs	r7, r4
100004b0:	0052      	lsls	r2, r2, #1
100004b2:	0064      	lsls	r4, r4, #1
100004b4:	2f00      	cmp	r7, #0
100004b6:	db01      	blt.n	100004bc <__aeabi_fdiv+0xe4>
100004b8:	42a5      	cmp	r5, r4
100004ba:	d801      	bhi.n	100004c0 <__aeabi_fdiv+0xe8>
100004bc:	1b64      	subs	r4, r4, r5
100004be:	4332      	orrs	r2, r6
100004c0:	3801      	subs	r0, #1
100004c2:	2800      	cmp	r0, #0
100004c4:	d1f3      	bne.n	100004ae <__aeabi_fdiv+0xd6>
100004c6:	1e60      	subs	r0, r4, #1
100004c8:	4184      	sbcs	r4, r0
100004ca:	4314      	orrs	r4, r2
100004cc:	0018      	movs	r0, r3
100004ce:	307f      	adds	r0, #127	; 0x7f
100004d0:	2800      	cmp	r0, #0
100004d2:	dd38      	ble.n	10000546 <__aeabi_fdiv+0x16e>
100004d4:	0762      	lsls	r2, r4, #29
100004d6:	d004      	beq.n	100004e2 <__aeabi_fdiv+0x10a>
100004d8:	220f      	movs	r2, #15
100004da:	4022      	ands	r2, r4
100004dc:	2a04      	cmp	r2, #4
100004de:	d000      	beq.n	100004e2 <__aeabi_fdiv+0x10a>
100004e0:	3404      	adds	r4, #4
100004e2:	0122      	lsls	r2, r4, #4
100004e4:	d503      	bpl.n	100004ee <__aeabi_fdiv+0x116>
100004e6:	3380      	adds	r3, #128	; 0x80
100004e8:	0018      	movs	r0, r3
100004ea:	4a2b      	ldr	r2, [pc, #172]	; (10000598 <__aeabi_fdiv+0x1c0>)
100004ec:	4014      	ands	r4, r2
100004ee:	08e5      	lsrs	r5, r4, #3
100004f0:	28fe      	cmp	r0, #254	; 0xfe
100004f2:	dd1d      	ble.n	10000530 <__aeabi_fdiv+0x158>
100004f4:	2500      	movs	r5, #0
100004f6:	e00f      	b.n	10000518 <__aeabi_fdiv+0x140>
100004f8:	201b      	movs	r0, #27
100004fa:	2200      	movs	r2, #0
100004fc:	3b01      	subs	r3, #1
100004fe:	e7d5      	b.n	100004ac <__aeabi_fdiv+0xd4>
10000500:	2380      	movs	r3, #128	; 0x80
10000502:	03db      	lsls	r3, r3, #15
10000504:	421c      	tst	r4, r3
10000506:	d003      	beq.n	10000510 <__aeabi_fdiv+0x138>
10000508:	421d      	tst	r5, r3
1000050a:	d101      	bne.n	10000510 <__aeabi_fdiv+0x138>
1000050c:	002c      	movs	r4, r5
1000050e:	9702      	str	r7, [sp, #8]
10000510:	2580      	movs	r5, #128	; 0x80
10000512:	9902      	ldr	r1, [sp, #8]
10000514:	03ed      	lsls	r5, r5, #15
10000516:	4325      	orrs	r5, r4
10000518:	20ff      	movs	r0, #255	; 0xff
1000051a:	e009      	b.n	10000530 <__aeabi_fdiv+0x158>
1000051c:	9903      	ldr	r1, [sp, #12]
1000051e:	9a00      	ldr	r2, [sp, #0]
10000520:	2a02      	cmp	r2, #2
10000522:	d0e7      	beq.n	100004f4 <__aeabi_fdiv+0x11c>
10000524:	2a03      	cmp	r2, #3
10000526:	d02f      	beq.n	10000588 <__aeabi_fdiv+0x1b0>
10000528:	2500      	movs	r5, #0
1000052a:	0028      	movs	r0, r5
1000052c:	2a01      	cmp	r2, #1
1000052e:	d1cd      	bne.n	100004cc <__aeabi_fdiv+0xf4>
10000530:	026d      	lsls	r5, r5, #9
10000532:	0a6d      	lsrs	r5, r5, #9
10000534:	05c0      	lsls	r0, r0, #23
10000536:	4328      	orrs	r0, r5
10000538:	07c9      	lsls	r1, r1, #31
1000053a:	4308      	orrs	r0, r1
1000053c:	b005      	add	sp, #20
1000053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000540:	002c      	movs	r4, r5
10000542:	0039      	movs	r1, r7
10000544:	e7ec      	b.n	10000520 <__aeabi_fdiv+0x148>
10000546:	2201      	movs	r2, #1
10000548:	2500      	movs	r5, #0
1000054a:	1a12      	subs	r2, r2, r0
1000054c:	0028      	movs	r0, r5
1000054e:	2a1b      	cmp	r2, #27
10000550:	dcee      	bgt.n	10000530 <__aeabi_fdiv+0x158>
10000552:	339e      	adds	r3, #158	; 0x9e
10000554:	0025      	movs	r5, r4
10000556:	409c      	lsls	r4, r3
10000558:	40d5      	lsrs	r5, r2
1000055a:	1e63      	subs	r3, r4, #1
1000055c:	419c      	sbcs	r4, r3
1000055e:	4325      	orrs	r5, r4
10000560:	076b      	lsls	r3, r5, #29
10000562:	d004      	beq.n	1000056e <__aeabi_fdiv+0x196>
10000564:	230f      	movs	r3, #15
10000566:	402b      	ands	r3, r5
10000568:	2b04      	cmp	r3, #4
1000056a:	d000      	beq.n	1000056e <__aeabi_fdiv+0x196>
1000056c:	3504      	adds	r5, #4
1000056e:	2380      	movs	r3, #128	; 0x80
10000570:	0028      	movs	r0, r5
10000572:	04db      	lsls	r3, r3, #19
10000574:	4018      	ands	r0, r3
10000576:	421d      	tst	r5, r3
10000578:	d10b      	bne.n	10000592 <__aeabi_fdiv+0x1ba>
1000057a:	08ed      	lsrs	r5, r5, #3
1000057c:	e7d8      	b.n	10000530 <__aeabi_fdiv+0x158>
1000057e:	2480      	movs	r4, #128	; 0x80
10000580:	2300      	movs	r3, #0
10000582:	03e4      	lsls	r4, r4, #15
10000584:	9302      	str	r3, [sp, #8]
10000586:	e7c3      	b.n	10000510 <__aeabi_fdiv+0x138>
10000588:	9102      	str	r1, [sp, #8]
1000058a:	e7c1      	b.n	10000510 <__aeabi_fdiv+0x138>
1000058c:	2500      	movs	r5, #0
1000058e:	0028      	movs	r0, r5
10000590:	e7ce      	b.n	10000530 <__aeabi_fdiv+0x158>
10000592:	2500      	movs	r5, #0
10000594:	2001      	movs	r0, #1
10000596:	e7cb      	b.n	10000530 <__aeabi_fdiv+0x158>
10000598:	f7ffffff 	.word	0xf7ffffff

1000059c <__aeabi_ui2f>:
1000059c:	2300      	movs	r3, #0
1000059e:	b570      	push	{r4, r5, r6, lr}
100005a0:	0004      	movs	r4, r0
100005a2:	4298      	cmp	r0, r3
100005a4:	d009      	beq.n	100005ba <__aeabi_ui2f+0x1e>
100005a6:	f7ff fe99 	bl	100002dc <__clzsi2>
100005aa:	239e      	movs	r3, #158	; 0x9e
100005ac:	1a1b      	subs	r3, r3, r0
100005ae:	2b96      	cmp	r3, #150	; 0x96
100005b0:	dc08      	bgt.n	100005c4 <__aeabi_ui2f+0x28>
100005b2:	2808      	cmp	r0, #8
100005b4:	d029      	beq.n	1000060a <__aeabi_ui2f+0x6e>
100005b6:	3808      	subs	r0, #8
100005b8:	4084      	lsls	r4, r0
100005ba:	0264      	lsls	r4, r4, #9
100005bc:	05d8      	lsls	r0, r3, #23
100005be:	0a64      	lsrs	r4, r4, #9
100005c0:	4320      	orrs	r0, r4
100005c2:	bd70      	pop	{r4, r5, r6, pc}
100005c4:	2b99      	cmp	r3, #153	; 0x99
100005c6:	dd1b      	ble.n	10000600 <__aeabi_ui2f+0x64>
100005c8:	0002      	movs	r2, r0
100005ca:	0021      	movs	r1, r4
100005cc:	321b      	adds	r2, #27
100005ce:	4091      	lsls	r1, r2
100005d0:	000a      	movs	r2, r1
100005d2:	1e51      	subs	r1, r2, #1
100005d4:	418a      	sbcs	r2, r1
100005d6:	2105      	movs	r1, #5
100005d8:	1a09      	subs	r1, r1, r0
100005da:	40cc      	lsrs	r4, r1
100005dc:	4314      	orrs	r4, r2
100005de:	0022      	movs	r2, r4
100005e0:	4d0b      	ldr	r5, [pc, #44]	; (10000610 <__aeabi_ui2f+0x74>)
100005e2:	402a      	ands	r2, r5
100005e4:	0761      	lsls	r1, r4, #29
100005e6:	d004      	beq.n	100005f2 <__aeabi_ui2f+0x56>
100005e8:	210f      	movs	r1, #15
100005ea:	4021      	ands	r1, r4
100005ec:	2904      	cmp	r1, #4
100005ee:	d000      	beq.n	100005f2 <__aeabi_ui2f+0x56>
100005f0:	3204      	adds	r2, #4
100005f2:	0151      	lsls	r1, r2, #5
100005f4:	d502      	bpl.n	100005fc <__aeabi_ui2f+0x60>
100005f6:	239f      	movs	r3, #159	; 0x9f
100005f8:	402a      	ands	r2, r5
100005fa:	1a1b      	subs	r3, r3, r0
100005fc:	08d4      	lsrs	r4, r2, #3
100005fe:	e7dc      	b.n	100005ba <__aeabi_ui2f+0x1e>
10000600:	1f42      	subs	r2, r0, #5
10000602:	2805      	cmp	r0, #5
10000604:	d0eb      	beq.n	100005de <__aeabi_ui2f+0x42>
10000606:	4094      	lsls	r4, r2
10000608:	e7e9      	b.n	100005de <__aeabi_ui2f+0x42>
1000060a:	2396      	movs	r3, #150	; 0x96
1000060c:	e7d5      	b.n	100005ba <__aeabi_ui2f+0x1e>
1000060e:	46c0      	nop			; (mov r8, r8)
10000610:	fbffffff 	.word	0xfbffffff

10000614 <__aeabi_dadd>:
10000614:	b5f0      	push	{r4, r5, r6, r7, lr}
10000616:	b087      	sub	sp, #28
10000618:	9204      	str	r2, [sp, #16]
1000061a:	9305      	str	r3, [sp, #20]
1000061c:	0fcb      	lsrs	r3, r1, #31
1000061e:	9301      	str	r3, [sp, #4]
10000620:	9b05      	ldr	r3, [sp, #20]
10000622:	030d      	lsls	r5, r1, #12
10000624:	004c      	lsls	r4, r1, #1
10000626:	0a6d      	lsrs	r5, r5, #9
10000628:	0f41      	lsrs	r1, r0, #29
1000062a:	005f      	lsls	r7, r3, #1
1000062c:	4329      	orrs	r1, r5
1000062e:	031d      	lsls	r5, r3, #12
10000630:	0d7b      	lsrs	r3, r7, #21
10000632:	9302      	str	r3, [sp, #8]
10000634:	9b05      	ldr	r3, [sp, #20]
10000636:	0a6d      	lsrs	r5, r5, #9
10000638:	0fdb      	lsrs	r3, r3, #31
1000063a:	9303      	str	r3, [sp, #12]
1000063c:	9b04      	ldr	r3, [sp, #16]
1000063e:	9a04      	ldr	r2, [sp, #16]
10000640:	0f5b      	lsrs	r3, r3, #29
10000642:	432b      	orrs	r3, r5
10000644:	9e01      	ldr	r6, [sp, #4]
10000646:	9d02      	ldr	r5, [sp, #8]
10000648:	9f03      	ldr	r7, [sp, #12]
1000064a:	0d64      	lsrs	r4, r4, #21
1000064c:	00c0      	lsls	r0, r0, #3
1000064e:	00d2      	lsls	r2, r2, #3
10000650:	1b65      	subs	r5, r4, r5
10000652:	42be      	cmp	r6, r7
10000654:	d000      	beq.n	10000658 <__aeabi_dadd+0x44>
10000656:	e12c      	b.n	100008b2 <__aeabi_dadd+0x29e>
10000658:	4ebb      	ldr	r6, [pc, #748]	; (10000948 <__aeabi_dadd+0x334>)
1000065a:	46b4      	mov	ip, r6
1000065c:	2d00      	cmp	r5, #0
1000065e:	dc00      	bgt.n	10000662 <__aeabi_dadd+0x4e>
10000660:	e070      	b.n	10000744 <__aeabi_dadd+0x130>
10000662:	9e02      	ldr	r6, [sp, #8]
10000664:	2e00      	cmp	r6, #0
10000666:	d11e      	bne.n	100006a6 <__aeabi_dadd+0x92>
10000668:	001e      	movs	r6, r3
1000066a:	4316      	orrs	r6, r2
1000066c:	d100      	bne.n	10000670 <__aeabi_dadd+0x5c>
1000066e:	e29b      	b.n	10000ba8 <__aeabi_dadd+0x594>
10000670:	1e6e      	subs	r6, r5, #1
10000672:	2d01      	cmp	r5, #1
10000674:	d113      	bne.n	1000069e <__aeabi_dadd+0x8a>
10000676:	1882      	adds	r2, r0, r2
10000678:	4282      	cmp	r2, r0
1000067a:	4180      	sbcs	r0, r0
1000067c:	18c9      	adds	r1, r1, r3
1000067e:	4240      	negs	r0, r0
10000680:	1809      	adds	r1, r1, r0
10000682:	2401      	movs	r4, #1
10000684:	0010      	movs	r0, r2
10000686:	020b      	lsls	r3, r1, #8
10000688:	d400      	bmi.n	1000068c <__aeabi_dadd+0x78>
1000068a:	e072      	b.n	10000772 <__aeabi_dadd+0x15e>
1000068c:	2402      	movs	r4, #2
1000068e:	4baf      	ldr	r3, [pc, #700]	; (1000094c <__aeabi_dadd+0x338>)
10000690:	0842      	lsrs	r2, r0, #1
10000692:	400b      	ands	r3, r1
10000694:	2101      	movs	r1, #1
10000696:	4001      	ands	r1, r0
10000698:	430a      	orrs	r2, r1
1000069a:	07d8      	lsls	r0, r3, #31
1000069c:	e106      	b.n	100008ac <__aeabi_dadd+0x298>
1000069e:	4565      	cmp	r5, ip
100006a0:	d11c      	bne.n	100006dc <__aeabi_dadd+0xc8>
100006a2:	4ca9      	ldr	r4, [pc, #676]	; (10000948 <__aeabi_dadd+0x334>)
100006a4:	e065      	b.n	10000772 <__aeabi_dadd+0x15e>
100006a6:	4564      	cmp	r4, ip
100006a8:	d063      	beq.n	10000772 <__aeabi_dadd+0x15e>
100006aa:	2d38      	cmp	r5, #56	; 0x38
100006ac:	dc47      	bgt.n	1000073e <__aeabi_dadd+0x12a>
100006ae:	2680      	movs	r6, #128	; 0x80
100006b0:	0436      	lsls	r6, r6, #16
100006b2:	4333      	orrs	r3, r6
100006b4:	002e      	movs	r6, r5
100006b6:	2e1f      	cmp	r6, #31
100006b8:	dc2f      	bgt.n	1000071a <__aeabi_dadd+0x106>
100006ba:	2520      	movs	r5, #32
100006bc:	001f      	movs	r7, r3
100006be:	1bad      	subs	r5, r5, r6
100006c0:	40af      	lsls	r7, r5
100006c2:	9502      	str	r5, [sp, #8]
100006c4:	003d      	movs	r5, r7
100006c6:	0017      	movs	r7, r2
100006c8:	40f7      	lsrs	r7, r6
100006ca:	432f      	orrs	r7, r5
100006cc:	9d02      	ldr	r5, [sp, #8]
100006ce:	40f3      	lsrs	r3, r6
100006d0:	40aa      	lsls	r2, r5
100006d2:	1e55      	subs	r5, r2, #1
100006d4:	41aa      	sbcs	r2, r5
100006d6:	001d      	movs	r5, r3
100006d8:	4317      	orrs	r7, r2
100006da:	e003      	b.n	100006e4 <__aeabi_dadd+0xd0>
100006dc:	2701      	movs	r7, #1
100006de:	9d02      	ldr	r5, [sp, #8]
100006e0:	2e38      	cmp	r6, #56	; 0x38
100006e2:	dde8      	ble.n	100006b6 <__aeabi_dadd+0xa2>
100006e4:	183f      	adds	r7, r7, r0
100006e6:	4287      	cmp	r7, r0
100006e8:	4180      	sbcs	r0, r0
100006ea:	1869      	adds	r1, r5, r1
100006ec:	4240      	negs	r0, r0
100006ee:	1809      	adds	r1, r1, r0
100006f0:	0038      	movs	r0, r7
100006f2:	020b      	lsls	r3, r1, #8
100006f4:	d53d      	bpl.n	10000772 <__aeabi_dadd+0x15e>
100006f6:	2500      	movs	r5, #0
100006f8:	3401      	adds	r4, #1
100006fa:	002f      	movs	r7, r5
100006fc:	4564      	cmp	r4, ip
100006fe:	d1c6      	bne.n	1000068e <__aeabi_dadd+0x7a>
10000700:	4b93      	ldr	r3, [pc, #588]	; (10000950 <__aeabi_dadd+0x33c>)
10000702:	0524      	lsls	r4, r4, #20
10000704:	401c      	ands	r4, r3
10000706:	033b      	lsls	r3, r7, #12
10000708:	0b1b      	lsrs	r3, r3, #12
1000070a:	431c      	orrs	r4, r3
1000070c:	9b01      	ldr	r3, [sp, #4]
1000070e:	0028      	movs	r0, r5
10000710:	07db      	lsls	r3, r3, #31
10000712:	431c      	orrs	r4, r3
10000714:	0021      	movs	r1, r4
10000716:	b007      	add	sp, #28
10000718:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000071a:	0035      	movs	r5, r6
1000071c:	001f      	movs	r7, r3
1000071e:	3d20      	subs	r5, #32
10000720:	40ef      	lsrs	r7, r5
10000722:	003d      	movs	r5, r7
10000724:	2700      	movs	r7, #0
10000726:	2e20      	cmp	r6, #32
10000728:	d003      	beq.n	10000732 <__aeabi_dadd+0x11e>
1000072a:	3740      	adds	r7, #64	; 0x40
1000072c:	1bbf      	subs	r7, r7, r6
1000072e:	40bb      	lsls	r3, r7
10000730:	001f      	movs	r7, r3
10000732:	4317      	orrs	r7, r2
10000734:	1e7b      	subs	r3, r7, #1
10000736:	419f      	sbcs	r7, r3
10000738:	432f      	orrs	r7, r5
1000073a:	2500      	movs	r5, #0
1000073c:	e7d2      	b.n	100006e4 <__aeabi_dadd+0xd0>
1000073e:	2500      	movs	r5, #0
10000740:	2701      	movs	r7, #1
10000742:	e7cf      	b.n	100006e4 <__aeabi_dadd+0xd0>
10000744:	2d00      	cmp	r5, #0
10000746:	d06f      	beq.n	10000828 <__aeabi_dadd+0x214>
10000748:	9d02      	ldr	r5, [sp, #8]
1000074a:	1b2e      	subs	r6, r5, r4
1000074c:	2c00      	cmp	r4, #0
1000074e:	d130      	bne.n	100007b2 <__aeabi_dadd+0x19e>
10000750:	000d      	movs	r5, r1
10000752:	4305      	orrs	r5, r0
10000754:	d100      	bne.n	10000758 <__aeabi_dadd+0x144>
10000756:	e221      	b.n	10000b9c <__aeabi_dadd+0x588>
10000758:	1e75      	subs	r5, r6, #1
1000075a:	2e01      	cmp	r6, #1
1000075c:	d124      	bne.n	100007a8 <__aeabi_dadd+0x194>
1000075e:	1880      	adds	r0, r0, r2
10000760:	4290      	cmp	r0, r2
10000762:	4192      	sbcs	r2, r2
10000764:	18c9      	adds	r1, r1, r3
10000766:	4252      	negs	r2, r2
10000768:	1889      	adds	r1, r1, r2
1000076a:	3401      	adds	r4, #1
1000076c:	020b      	lsls	r3, r1, #8
1000076e:	d500      	bpl.n	10000772 <__aeabi_dadd+0x15e>
10000770:	e78c      	b.n	1000068c <__aeabi_dadd+0x78>
10000772:	0743      	lsls	r3, r0, #29
10000774:	d009      	beq.n	1000078a <__aeabi_dadd+0x176>
10000776:	230f      	movs	r3, #15
10000778:	4003      	ands	r3, r0
1000077a:	2b04      	cmp	r3, #4
1000077c:	d005      	beq.n	1000078a <__aeabi_dadd+0x176>
1000077e:	1d03      	adds	r3, r0, #4
10000780:	4283      	cmp	r3, r0
10000782:	4180      	sbcs	r0, r0
10000784:	4240      	negs	r0, r0
10000786:	1809      	adds	r1, r1, r0
10000788:	0018      	movs	r0, r3
1000078a:	4b6f      	ldr	r3, [pc, #444]	; (10000948 <__aeabi_dadd+0x334>)
1000078c:	020a      	lsls	r2, r1, #8
1000078e:	d400      	bmi.n	10000792 <__aeabi_dadd+0x17e>
10000790:	e210      	b.n	10000bb4 <__aeabi_dadd+0x5a0>
10000792:	2500      	movs	r5, #0
10000794:	3401      	adds	r4, #1
10000796:	002f      	movs	r7, r5
10000798:	429c      	cmp	r4, r3
1000079a:	d0b1      	beq.n	10000700 <__aeabi_dadd+0xec>
1000079c:	4b6b      	ldr	r3, [pc, #428]	; (1000094c <__aeabi_dadd+0x338>)
1000079e:	08c0      	lsrs	r0, r0, #3
100007a0:	400b      	ands	r3, r1
100007a2:	075d      	lsls	r5, r3, #29
100007a4:	4305      	orrs	r5, r0
100007a6:	e1f2      	b.n	10000b8e <__aeabi_dadd+0x57a>
100007a8:	4566      	cmp	r6, ip
100007aa:	d11d      	bne.n	100007e8 <__aeabi_dadd+0x1d4>
100007ac:	0019      	movs	r1, r3
100007ae:	0010      	movs	r0, r2
100007b0:	e777      	b.n	100006a2 <__aeabi_dadd+0x8e>
100007b2:	9c02      	ldr	r4, [sp, #8]
100007b4:	4564      	cmp	r4, ip
100007b6:	d0f9      	beq.n	100007ac <__aeabi_dadd+0x198>
100007b8:	2e38      	cmp	r6, #56	; 0x38
100007ba:	dc32      	bgt.n	10000822 <__aeabi_dadd+0x20e>
100007bc:	2480      	movs	r4, #128	; 0x80
100007be:	0035      	movs	r5, r6
100007c0:	0424      	lsls	r4, r4, #16
100007c2:	4321      	orrs	r1, r4
100007c4:	2d1f      	cmp	r5, #31
100007c6:	dc1a      	bgt.n	100007fe <__aeabi_dadd+0x1ea>
100007c8:	2420      	movs	r4, #32
100007ca:	000e      	movs	r6, r1
100007cc:	1b67      	subs	r7, r4, r5
100007ce:	40be      	lsls	r6, r7
100007d0:	0034      	movs	r4, r6
100007d2:	0006      	movs	r6, r0
100007d4:	40b8      	lsls	r0, r7
100007d6:	40ee      	lsrs	r6, r5
100007d8:	4334      	orrs	r4, r6
100007da:	0006      	movs	r6, r0
100007dc:	40e9      	lsrs	r1, r5
100007de:	1e70      	subs	r0, r6, #1
100007e0:	4186      	sbcs	r6, r0
100007e2:	4326      	orrs	r6, r4
100007e4:	000c      	movs	r4, r1
100007e6:	e002      	b.n	100007ee <__aeabi_dadd+0x1da>
100007e8:	2601      	movs	r6, #1
100007ea:	2d38      	cmp	r5, #56	; 0x38
100007ec:	ddea      	ble.n	100007c4 <__aeabi_dadd+0x1b0>
100007ee:	18b0      	adds	r0, r6, r2
100007f0:	4290      	cmp	r0, r2
100007f2:	4192      	sbcs	r2, r2
100007f4:	18e4      	adds	r4, r4, r3
100007f6:	4252      	negs	r2, r2
100007f8:	18a1      	adds	r1, r4, r2
100007fa:	9c02      	ldr	r4, [sp, #8]
100007fc:	e779      	b.n	100006f2 <__aeabi_dadd+0xde>
100007fe:	002c      	movs	r4, r5
10000800:	000e      	movs	r6, r1
10000802:	3c20      	subs	r4, #32
10000804:	40e6      	lsrs	r6, r4
10000806:	0034      	movs	r4, r6
10000808:	2600      	movs	r6, #0
1000080a:	2d20      	cmp	r5, #32
1000080c:	d003      	beq.n	10000816 <__aeabi_dadd+0x202>
1000080e:	3640      	adds	r6, #64	; 0x40
10000810:	1b76      	subs	r6, r6, r5
10000812:	40b1      	lsls	r1, r6
10000814:	000e      	movs	r6, r1
10000816:	4306      	orrs	r6, r0
10000818:	1e71      	subs	r1, r6, #1
1000081a:	418e      	sbcs	r6, r1
1000081c:	4326      	orrs	r6, r4
1000081e:	2400      	movs	r4, #0
10000820:	e7e5      	b.n	100007ee <__aeabi_dadd+0x1da>
10000822:	2400      	movs	r4, #0
10000824:	2601      	movs	r6, #1
10000826:	e7e2      	b.n	100007ee <__aeabi_dadd+0x1da>
10000828:	4f4a      	ldr	r7, [pc, #296]	; (10000954 <__aeabi_dadd+0x340>)
1000082a:	1c66      	adds	r6, r4, #1
1000082c:	423e      	tst	r6, r7
1000082e:	d130      	bne.n	10000892 <__aeabi_dadd+0x27e>
10000830:	000d      	movs	r5, r1
10000832:	4305      	orrs	r5, r0
10000834:	2c00      	cmp	r4, #0
10000836:	d112      	bne.n	1000085e <__aeabi_dadd+0x24a>
10000838:	2d00      	cmp	r5, #0
1000083a:	d100      	bne.n	1000083e <__aeabi_dadd+0x22a>
1000083c:	e1b1      	b.n	10000ba2 <__aeabi_dadd+0x58e>
1000083e:	001d      	movs	r5, r3
10000840:	4315      	orrs	r5, r2
10000842:	d096      	beq.n	10000772 <__aeabi_dadd+0x15e>
10000844:	1882      	adds	r2, r0, r2
10000846:	4282      	cmp	r2, r0
10000848:	4180      	sbcs	r0, r0
1000084a:	18c9      	adds	r1, r1, r3
1000084c:	4240      	negs	r0, r0
1000084e:	1809      	adds	r1, r1, r0
10000850:	0010      	movs	r0, r2
10000852:	020b      	lsls	r3, r1, #8
10000854:	d58d      	bpl.n	10000772 <__aeabi_dadd+0x15e>
10000856:	4b3d      	ldr	r3, [pc, #244]	; (1000094c <__aeabi_dadd+0x338>)
10000858:	4019      	ands	r1, r3
1000085a:	0034      	movs	r4, r6
1000085c:	e789      	b.n	10000772 <__aeabi_dadd+0x15e>
1000085e:	2d00      	cmp	r5, #0
10000860:	d0a4      	beq.n	100007ac <__aeabi_dadd+0x198>
10000862:	001d      	movs	r5, r3
10000864:	4664      	mov	r4, ip
10000866:	4315      	orrs	r5, r2
10000868:	d083      	beq.n	10000772 <__aeabi_dadd+0x15e>
1000086a:	2580      	movs	r5, #128	; 0x80
1000086c:	074c      	lsls	r4, r1, #29
1000086e:	08c0      	lsrs	r0, r0, #3
10000870:	08c9      	lsrs	r1, r1, #3
10000872:	032d      	lsls	r5, r5, #12
10000874:	4320      	orrs	r0, r4
10000876:	4229      	tst	r1, r5
10000878:	d006      	beq.n	10000888 <__aeabi_dadd+0x274>
1000087a:	08dc      	lsrs	r4, r3, #3
1000087c:	422c      	tst	r4, r5
1000087e:	d103      	bne.n	10000888 <__aeabi_dadd+0x274>
10000880:	0021      	movs	r1, r4
10000882:	08d0      	lsrs	r0, r2, #3
10000884:	075b      	lsls	r3, r3, #29
10000886:	4318      	orrs	r0, r3
10000888:	00cb      	lsls	r3, r1, #3
1000088a:	0f41      	lsrs	r1, r0, #29
1000088c:	4319      	orrs	r1, r3
1000088e:	00c0      	lsls	r0, r0, #3
10000890:	e707      	b.n	100006a2 <__aeabi_dadd+0x8e>
10000892:	0034      	movs	r4, r6
10000894:	002f      	movs	r7, r5
10000896:	4566      	cmp	r6, ip
10000898:	d100      	bne.n	1000089c <__aeabi_dadd+0x288>
1000089a:	e731      	b.n	10000700 <__aeabi_dadd+0xec>
1000089c:	1882      	adds	r2, r0, r2
1000089e:	4282      	cmp	r2, r0
100008a0:	4180      	sbcs	r0, r0
100008a2:	18cb      	adds	r3, r1, r3
100008a4:	4240      	negs	r0, r0
100008a6:	181b      	adds	r3, r3, r0
100008a8:	07d8      	lsls	r0, r3, #31
100008aa:	0852      	lsrs	r2, r2, #1
100008ac:	4310      	orrs	r0, r2
100008ae:	0859      	lsrs	r1, r3, #1
100008b0:	e75f      	b.n	10000772 <__aeabi_dadd+0x15e>
100008b2:	2d00      	cmp	r5, #0
100008b4:	dd65      	ble.n	10000982 <__aeabi_dadd+0x36e>
100008b6:	9e02      	ldr	r6, [sp, #8]
100008b8:	2e00      	cmp	r6, #0
100008ba:	d125      	bne.n	10000908 <__aeabi_dadd+0x2f4>
100008bc:	001e      	movs	r6, r3
100008be:	4316      	orrs	r6, r2
100008c0:	d100      	bne.n	100008c4 <__aeabi_dadd+0x2b0>
100008c2:	e171      	b.n	10000ba8 <__aeabi_dadd+0x594>
100008c4:	1e6e      	subs	r6, r5, #1
100008c6:	2d01      	cmp	r5, #1
100008c8:	d10e      	bne.n	100008e8 <__aeabi_dadd+0x2d4>
100008ca:	1a82      	subs	r2, r0, r2
100008cc:	4290      	cmp	r0, r2
100008ce:	4180      	sbcs	r0, r0
100008d0:	1ac9      	subs	r1, r1, r3
100008d2:	4240      	negs	r0, r0
100008d4:	1a09      	subs	r1, r1, r0
100008d6:	2401      	movs	r4, #1
100008d8:	0010      	movs	r0, r2
100008da:	020b      	lsls	r3, r1, #8
100008dc:	d400      	bmi.n	100008e0 <__aeabi_dadd+0x2cc>
100008de:	e748      	b.n	10000772 <__aeabi_dadd+0x15e>
100008e0:	0249      	lsls	r1, r1, #9
100008e2:	0006      	movs	r6, r0
100008e4:	0a4d      	lsrs	r5, r1, #9
100008e6:	e107      	b.n	10000af8 <__aeabi_dadd+0x4e4>
100008e8:	4f17      	ldr	r7, [pc, #92]	; (10000948 <__aeabi_dadd+0x334>)
100008ea:	42bd      	cmp	r5, r7
100008ec:	d100      	bne.n	100008f0 <__aeabi_dadd+0x2dc>
100008ee:	e6d8      	b.n	100006a2 <__aeabi_dadd+0x8e>
100008f0:	2501      	movs	r5, #1
100008f2:	9f02      	ldr	r7, [sp, #8]
100008f4:	2e38      	cmp	r6, #56	; 0x38
100008f6:	dd11      	ble.n	1000091c <__aeabi_dadd+0x308>
100008f8:	1b45      	subs	r5, r0, r5
100008fa:	42a8      	cmp	r0, r5
100008fc:	4180      	sbcs	r0, r0
100008fe:	1bc9      	subs	r1, r1, r7
10000900:	4240      	negs	r0, r0
10000902:	1a09      	subs	r1, r1, r0
10000904:	0028      	movs	r0, r5
10000906:	e7e8      	b.n	100008da <__aeabi_dadd+0x2c6>
10000908:	4e0f      	ldr	r6, [pc, #60]	; (10000948 <__aeabi_dadd+0x334>)
1000090a:	42b4      	cmp	r4, r6
1000090c:	d100      	bne.n	10000910 <__aeabi_dadd+0x2fc>
1000090e:	e730      	b.n	10000772 <__aeabi_dadd+0x15e>
10000910:	2d38      	cmp	r5, #56	; 0x38
10000912:	dc33      	bgt.n	1000097c <__aeabi_dadd+0x368>
10000914:	2680      	movs	r6, #128	; 0x80
10000916:	0436      	lsls	r6, r6, #16
10000918:	4333      	orrs	r3, r6
1000091a:	002e      	movs	r6, r5
1000091c:	2e1f      	cmp	r6, #31
1000091e:	dc1b      	bgt.n	10000958 <__aeabi_dadd+0x344>
10000920:	2720      	movs	r7, #32
10000922:	1bbd      	subs	r5, r7, r6
10000924:	9502      	str	r5, [sp, #8]
10000926:	001d      	movs	r5, r3
10000928:	9f02      	ldr	r7, [sp, #8]
1000092a:	40f3      	lsrs	r3, r6
1000092c:	40bd      	lsls	r5, r7
1000092e:	46ac      	mov	ip, r5
10000930:	0015      	movs	r5, r2
10000932:	4667      	mov	r7, ip
10000934:	40f5      	lsrs	r5, r6
10000936:	433d      	orrs	r5, r7
10000938:	9f02      	ldr	r7, [sp, #8]
1000093a:	40ba      	lsls	r2, r7
1000093c:	1e57      	subs	r7, r2, #1
1000093e:	41ba      	sbcs	r2, r7
10000940:	001f      	movs	r7, r3
10000942:	4315      	orrs	r5, r2
10000944:	e7d8      	b.n	100008f8 <__aeabi_dadd+0x2e4>
10000946:	46c0      	nop			; (mov r8, r8)
10000948:	000007ff 	.word	0x000007ff
1000094c:	ff7fffff 	.word	0xff7fffff
10000950:	7ff00000 	.word	0x7ff00000
10000954:	000007fe 	.word	0x000007fe
10000958:	0035      	movs	r5, r6
1000095a:	001f      	movs	r7, r3
1000095c:	3d20      	subs	r5, #32
1000095e:	40ef      	lsrs	r7, r5
10000960:	003d      	movs	r5, r7
10000962:	2700      	movs	r7, #0
10000964:	2e20      	cmp	r6, #32
10000966:	d003      	beq.n	10000970 <__aeabi_dadd+0x35c>
10000968:	3740      	adds	r7, #64	; 0x40
1000096a:	1bbe      	subs	r6, r7, r6
1000096c:	40b3      	lsls	r3, r6
1000096e:	001f      	movs	r7, r3
10000970:	4317      	orrs	r7, r2
10000972:	1e7b      	subs	r3, r7, #1
10000974:	419f      	sbcs	r7, r3
10000976:	433d      	orrs	r5, r7
10000978:	2700      	movs	r7, #0
1000097a:	e7bd      	b.n	100008f8 <__aeabi_dadd+0x2e4>
1000097c:	2700      	movs	r7, #0
1000097e:	2501      	movs	r5, #1
10000980:	e7ba      	b.n	100008f8 <__aeabi_dadd+0x2e4>
10000982:	2d00      	cmp	r5, #0
10000984:	d059      	beq.n	10000a3a <__aeabi_dadd+0x426>
10000986:	9d02      	ldr	r5, [sp, #8]
10000988:	1b2e      	subs	r6, r5, r4
1000098a:	2c00      	cmp	r4, #0
1000098c:	d116      	bne.n	100009bc <__aeabi_dadd+0x3a8>
1000098e:	000d      	movs	r5, r1
10000990:	4305      	orrs	r5, r0
10000992:	d00f      	beq.n	100009b4 <__aeabi_dadd+0x3a0>
10000994:	1e75      	subs	r5, r6, #1
10000996:	2e01      	cmp	r6, #1
10000998:	d109      	bne.n	100009ae <__aeabi_dadd+0x39a>
1000099a:	1a10      	subs	r0, r2, r0
1000099c:	4282      	cmp	r2, r0
1000099e:	4192      	sbcs	r2, r2
100009a0:	1a59      	subs	r1, r3, r1
100009a2:	9b03      	ldr	r3, [sp, #12]
100009a4:	4252      	negs	r2, r2
100009a6:	1a89      	subs	r1, r1, r2
100009a8:	9301      	str	r3, [sp, #4]
100009aa:	3401      	adds	r4, #1
100009ac:	e795      	b.n	100008da <__aeabi_dadd+0x2c6>
100009ae:	4f8e      	ldr	r7, [pc, #568]	; (10000be8 <__aeabi_dadd+0x5d4>)
100009b0:	42be      	cmp	r6, r7
100009b2:	d121      	bne.n	100009f8 <__aeabi_dadd+0x3e4>
100009b4:	0019      	movs	r1, r3
100009b6:	0010      	movs	r0, r2
100009b8:	0034      	movs	r4, r6
100009ba:	e050      	b.n	10000a5e <__aeabi_dadd+0x44a>
100009bc:	4c8a      	ldr	r4, [pc, #552]	; (10000be8 <__aeabi_dadd+0x5d4>)
100009be:	9d02      	ldr	r5, [sp, #8]
100009c0:	42a5      	cmp	r5, r4
100009c2:	d100      	bne.n	100009c6 <__aeabi_dadd+0x3b2>
100009c4:	e0f2      	b.n	10000bac <__aeabi_dadd+0x598>
100009c6:	2e38      	cmp	r6, #56	; 0x38
100009c8:	dc34      	bgt.n	10000a34 <__aeabi_dadd+0x420>
100009ca:	2480      	movs	r4, #128	; 0x80
100009cc:	0035      	movs	r5, r6
100009ce:	0424      	lsls	r4, r4, #16
100009d0:	4321      	orrs	r1, r4
100009d2:	2d1f      	cmp	r5, #31
100009d4:	dc1d      	bgt.n	10000a12 <__aeabi_dadd+0x3fe>
100009d6:	2620      	movs	r6, #32
100009d8:	000c      	movs	r4, r1
100009da:	1b76      	subs	r6, r6, r5
100009dc:	40b4      	lsls	r4, r6
100009de:	46a4      	mov	ip, r4
100009e0:	0004      	movs	r4, r0
100009e2:	40b0      	lsls	r0, r6
100009e4:	40ec      	lsrs	r4, r5
100009e6:	4667      	mov	r7, ip
100009e8:	1e46      	subs	r6, r0, #1
100009ea:	41b0      	sbcs	r0, r6
100009ec:	40e9      	lsrs	r1, r5
100009ee:	433c      	orrs	r4, r7
100009f0:	4304      	orrs	r4, r0
100009f2:	0026      	movs	r6, r4
100009f4:	000c      	movs	r4, r1
100009f6:	e002      	b.n	100009fe <__aeabi_dadd+0x3ea>
100009f8:	2601      	movs	r6, #1
100009fa:	2d38      	cmp	r5, #56	; 0x38
100009fc:	dde9      	ble.n	100009d2 <__aeabi_dadd+0x3be>
100009fe:	1b90      	subs	r0, r2, r6
10000a00:	4282      	cmp	r2, r0
10000a02:	4192      	sbcs	r2, r2
10000a04:	1b1c      	subs	r4, r3, r4
10000a06:	9b03      	ldr	r3, [sp, #12]
10000a08:	4252      	negs	r2, r2
10000a0a:	1aa1      	subs	r1, r4, r2
10000a0c:	9301      	str	r3, [sp, #4]
10000a0e:	9c02      	ldr	r4, [sp, #8]
10000a10:	e763      	b.n	100008da <__aeabi_dadd+0x2c6>
10000a12:	002c      	movs	r4, r5
10000a14:	000e      	movs	r6, r1
10000a16:	3c20      	subs	r4, #32
10000a18:	40e6      	lsrs	r6, r4
10000a1a:	2400      	movs	r4, #0
10000a1c:	2d20      	cmp	r5, #32
10000a1e:	d003      	beq.n	10000a28 <__aeabi_dadd+0x414>
10000a20:	3440      	adds	r4, #64	; 0x40
10000a22:	1b64      	subs	r4, r4, r5
10000a24:	40a1      	lsls	r1, r4
10000a26:	000c      	movs	r4, r1
10000a28:	4304      	orrs	r4, r0
10000a2a:	1e61      	subs	r1, r4, #1
10000a2c:	418c      	sbcs	r4, r1
10000a2e:	4326      	orrs	r6, r4
10000a30:	2400      	movs	r4, #0
10000a32:	e7e4      	b.n	100009fe <__aeabi_dadd+0x3ea>
10000a34:	2400      	movs	r4, #0
10000a36:	2601      	movs	r6, #1
10000a38:	e7e1      	b.n	100009fe <__aeabi_dadd+0x3ea>
10000a3a:	4e6c      	ldr	r6, [pc, #432]	; (10000bec <__aeabi_dadd+0x5d8>)
10000a3c:	1c65      	adds	r5, r4, #1
10000a3e:	4235      	tst	r5, r6
10000a40:	d14a      	bne.n	10000ad8 <__aeabi_dadd+0x4c4>
10000a42:	000d      	movs	r5, r1
10000a44:	001f      	movs	r7, r3
10000a46:	4305      	orrs	r5, r0
10000a48:	4317      	orrs	r7, r2
10000a4a:	2c00      	cmp	r4, #0
10000a4c:	d123      	bne.n	10000a96 <__aeabi_dadd+0x482>
10000a4e:	2d00      	cmp	r5, #0
10000a50:	d108      	bne.n	10000a64 <__aeabi_dadd+0x450>
10000a52:	1e3d      	subs	r5, r7, #0
10000a54:	9701      	str	r7, [sp, #4]
10000a56:	d100      	bne.n	10000a5a <__aeabi_dadd+0x446>
10000a58:	e652      	b.n	10000700 <__aeabi_dadd+0xec>
10000a5a:	0019      	movs	r1, r3
10000a5c:	0010      	movs	r0, r2
10000a5e:	9b03      	ldr	r3, [sp, #12]
10000a60:	9301      	str	r3, [sp, #4]
10000a62:	e686      	b.n	10000772 <__aeabi_dadd+0x15e>
10000a64:	2f00      	cmp	r7, #0
10000a66:	d100      	bne.n	10000a6a <__aeabi_dadd+0x456>
10000a68:	e683      	b.n	10000772 <__aeabi_dadd+0x15e>
10000a6a:	1a86      	subs	r6, r0, r2
10000a6c:	42b0      	cmp	r0, r6
10000a6e:	41bf      	sbcs	r7, r7
10000a70:	1acd      	subs	r5, r1, r3
10000a72:	427f      	negs	r7, r7
10000a74:	1bed      	subs	r5, r5, r7
10000a76:	022f      	lsls	r7, r5, #8
10000a78:	d506      	bpl.n	10000a88 <__aeabi_dadd+0x474>
10000a7a:	1a10      	subs	r0, r2, r0
10000a7c:	4282      	cmp	r2, r0
10000a7e:	4192      	sbcs	r2, r2
10000a80:	1a59      	subs	r1, r3, r1
10000a82:	4252      	negs	r2, r2
10000a84:	1a89      	subs	r1, r1, r2
10000a86:	e7ea      	b.n	10000a5e <__aeabi_dadd+0x44a>
10000a88:	0037      	movs	r7, r6
10000a8a:	432f      	orrs	r7, r5
10000a8c:	d100      	bne.n	10000a90 <__aeabi_dadd+0x47c>
10000a8e:	e0a5      	b.n	10000bdc <__aeabi_dadd+0x5c8>
10000a90:	0029      	movs	r1, r5
10000a92:	0030      	movs	r0, r6
10000a94:	e66d      	b.n	10000772 <__aeabi_dadd+0x15e>
10000a96:	2d00      	cmp	r5, #0
10000a98:	d107      	bne.n	10000aaa <__aeabi_dadd+0x496>
10000a9a:	2f00      	cmp	r7, #0
10000a9c:	d100      	bne.n	10000aa0 <__aeabi_dadd+0x48c>
10000a9e:	e094      	b.n	10000bca <__aeabi_dadd+0x5b6>
10000aa0:	0019      	movs	r1, r3
10000aa2:	9b03      	ldr	r3, [sp, #12]
10000aa4:	0010      	movs	r0, r2
10000aa6:	9301      	str	r3, [sp, #4]
10000aa8:	e5fb      	b.n	100006a2 <__aeabi_dadd+0x8e>
10000aaa:	2f00      	cmp	r7, #0
10000aac:	d100      	bne.n	10000ab0 <__aeabi_dadd+0x49c>
10000aae:	e5f8      	b.n	100006a2 <__aeabi_dadd+0x8e>
10000ab0:	2580      	movs	r5, #128	; 0x80
10000ab2:	074c      	lsls	r4, r1, #29
10000ab4:	08c0      	lsrs	r0, r0, #3
10000ab6:	08c9      	lsrs	r1, r1, #3
10000ab8:	032d      	lsls	r5, r5, #12
10000aba:	4320      	orrs	r0, r4
10000abc:	4229      	tst	r1, r5
10000abe:	d100      	bne.n	10000ac2 <__aeabi_dadd+0x4ae>
10000ac0:	e6e2      	b.n	10000888 <__aeabi_dadd+0x274>
10000ac2:	08dc      	lsrs	r4, r3, #3
10000ac4:	422c      	tst	r4, r5
10000ac6:	d000      	beq.n	10000aca <__aeabi_dadd+0x4b6>
10000ac8:	e6de      	b.n	10000888 <__aeabi_dadd+0x274>
10000aca:	075b      	lsls	r3, r3, #29
10000acc:	08d0      	lsrs	r0, r2, #3
10000ace:	4318      	orrs	r0, r3
10000ad0:	9b03      	ldr	r3, [sp, #12]
10000ad2:	0021      	movs	r1, r4
10000ad4:	9301      	str	r3, [sp, #4]
10000ad6:	e6d7      	b.n	10000888 <__aeabi_dadd+0x274>
10000ad8:	1a86      	subs	r6, r0, r2
10000ada:	42b0      	cmp	r0, r6
10000adc:	41bf      	sbcs	r7, r7
10000ade:	1acd      	subs	r5, r1, r3
10000ae0:	427f      	negs	r7, r7
10000ae2:	1bed      	subs	r5, r5, r7
10000ae4:	022f      	lsls	r7, r5, #8
10000ae6:	d528      	bpl.n	10000b3a <__aeabi_dadd+0x526>
10000ae8:	1a16      	subs	r6, r2, r0
10000aea:	42b2      	cmp	r2, r6
10000aec:	4192      	sbcs	r2, r2
10000aee:	1a5b      	subs	r3, r3, r1
10000af0:	4252      	negs	r2, r2
10000af2:	1a9d      	subs	r5, r3, r2
10000af4:	9b03      	ldr	r3, [sp, #12]
10000af6:	9301      	str	r3, [sp, #4]
10000af8:	2d00      	cmp	r5, #0
10000afa:	d025      	beq.n	10000b48 <__aeabi_dadd+0x534>
10000afc:	0028      	movs	r0, r5
10000afe:	f7ff fbed 	bl	100002dc <__clzsi2>
10000b02:	0003      	movs	r3, r0
10000b04:	3b08      	subs	r3, #8
10000b06:	2220      	movs	r2, #32
10000b08:	0031      	movs	r1, r6
10000b0a:	1ad2      	subs	r2, r2, r3
10000b0c:	409d      	lsls	r5, r3
10000b0e:	40d1      	lsrs	r1, r2
10000b10:	4329      	orrs	r1, r5
10000b12:	0035      	movs	r5, r6
10000b14:	409d      	lsls	r5, r3
10000b16:	429c      	cmp	r4, r3
10000b18:	dc3b      	bgt.n	10000b92 <__aeabi_dadd+0x57e>
10000b1a:	1b1a      	subs	r2, r3, r4
10000b1c:	3201      	adds	r2, #1
10000b1e:	2320      	movs	r3, #32
10000b20:	0008      	movs	r0, r1
10000b22:	1a9b      	subs	r3, r3, r2
10000b24:	002c      	movs	r4, r5
10000b26:	409d      	lsls	r5, r3
10000b28:	4098      	lsls	r0, r3
10000b2a:	40d4      	lsrs	r4, r2
10000b2c:	1e6b      	subs	r3, r5, #1
10000b2e:	419d      	sbcs	r5, r3
10000b30:	40d1      	lsrs	r1, r2
10000b32:	4320      	orrs	r0, r4
10000b34:	4328      	orrs	r0, r5
10000b36:	2400      	movs	r4, #0
10000b38:	e61b      	b.n	10000772 <__aeabi_dadd+0x15e>
10000b3a:	0037      	movs	r7, r6
10000b3c:	432f      	orrs	r7, r5
10000b3e:	d1db      	bne.n	10000af8 <__aeabi_dadd+0x4e4>
10000b40:	003d      	movs	r5, r7
10000b42:	003c      	movs	r4, r7
10000b44:	9701      	str	r7, [sp, #4]
10000b46:	e5db      	b.n	10000700 <__aeabi_dadd+0xec>
10000b48:	0030      	movs	r0, r6
10000b4a:	f7ff fbc7 	bl	100002dc <__clzsi2>
10000b4e:	0003      	movs	r3, r0
10000b50:	3318      	adds	r3, #24
10000b52:	2b1f      	cmp	r3, #31
10000b54:	ddd7      	ble.n	10000b06 <__aeabi_dadd+0x4f2>
10000b56:	0031      	movs	r1, r6
10000b58:	3808      	subs	r0, #8
10000b5a:	4081      	lsls	r1, r0
10000b5c:	429c      	cmp	r4, r3
10000b5e:	dc12      	bgt.n	10000b86 <__aeabi_dadd+0x572>
10000b60:	1b1b      	subs	r3, r3, r4
10000b62:	1c5a      	adds	r2, r3, #1
10000b64:	2a1f      	cmp	r2, #31
10000b66:	ddda      	ble.n	10000b1e <__aeabi_dadd+0x50a>
10000b68:	000c      	movs	r4, r1
10000b6a:	3b1f      	subs	r3, #31
10000b6c:	40dc      	lsrs	r4, r3
10000b6e:	0028      	movs	r0, r5
10000b70:	2a20      	cmp	r2, #32
10000b72:	d003      	beq.n	10000b7c <__aeabi_dadd+0x568>
10000b74:	2340      	movs	r3, #64	; 0x40
10000b76:	1a9b      	subs	r3, r3, r2
10000b78:	4099      	lsls	r1, r3
10000b7a:	0008      	movs	r0, r1
10000b7c:	1e43      	subs	r3, r0, #1
10000b7e:	4198      	sbcs	r0, r3
10000b80:	2100      	movs	r1, #0
10000b82:	4320      	orrs	r0, r4
10000b84:	e7d7      	b.n	10000b36 <__aeabi_dadd+0x522>
10000b86:	1ae4      	subs	r4, r4, r3
10000b88:	4b19      	ldr	r3, [pc, #100]	; (10000bf0 <__aeabi_dadd+0x5dc>)
10000b8a:	400b      	ands	r3, r1
10000b8c:	075d      	lsls	r5, r3, #29
10000b8e:	08df      	lsrs	r7, r3, #3
10000b90:	e5b6      	b.n	10000700 <__aeabi_dadd+0xec>
10000b92:	1ae4      	subs	r4, r4, r3
10000b94:	4b16      	ldr	r3, [pc, #88]	; (10000bf0 <__aeabi_dadd+0x5dc>)
10000b96:	0028      	movs	r0, r5
10000b98:	4019      	ands	r1, r3
10000b9a:	e5ea      	b.n	10000772 <__aeabi_dadd+0x15e>
10000b9c:	0019      	movs	r1, r3
10000b9e:	0010      	movs	r0, r2
10000ba0:	e65b      	b.n	1000085a <__aeabi_dadd+0x246>
10000ba2:	0019      	movs	r1, r3
10000ba4:	0010      	movs	r0, r2
10000ba6:	e5e4      	b.n	10000772 <__aeabi_dadd+0x15e>
10000ba8:	002c      	movs	r4, r5
10000baa:	e5e2      	b.n	10000772 <__aeabi_dadd+0x15e>
10000bac:	0019      	movs	r1, r3
10000bae:	0010      	movs	r0, r2
10000bb0:	9c02      	ldr	r4, [sp, #8]
10000bb2:	e754      	b.n	10000a5e <__aeabi_dadd+0x44a>
10000bb4:	074a      	lsls	r2, r1, #29
10000bb6:	08c7      	lsrs	r7, r0, #3
10000bb8:	4317      	orrs	r7, r2
10000bba:	003d      	movs	r5, r7
10000bbc:	08c9      	lsrs	r1, r1, #3
10000bbe:	429c      	cmp	r4, r3
10000bc0:	d10f      	bne.n	10000be2 <__aeabi_dadd+0x5ce>
10000bc2:	430d      	orrs	r5, r1
10000bc4:	d104      	bne.n	10000bd0 <__aeabi_dadd+0x5bc>
10000bc6:	002f      	movs	r7, r5
10000bc8:	e59a      	b.n	10000700 <__aeabi_dadd+0xec>
10000bca:	2180      	movs	r1, #128	; 0x80
10000bcc:	9701      	str	r7, [sp, #4]
10000bce:	0309      	lsls	r1, r1, #12
10000bd0:	003d      	movs	r5, r7
10000bd2:	2780      	movs	r7, #128	; 0x80
10000bd4:	033f      	lsls	r7, r7, #12
10000bd6:	4c04      	ldr	r4, [pc, #16]	; (10000be8 <__aeabi_dadd+0x5d4>)
10000bd8:	430f      	orrs	r7, r1
10000bda:	e591      	b.n	10000700 <__aeabi_dadd+0xec>
10000bdc:	003d      	movs	r5, r7
10000bde:	9701      	str	r7, [sp, #4]
10000be0:	e58e      	b.n	10000700 <__aeabi_dadd+0xec>
10000be2:	000f      	movs	r7, r1
10000be4:	e58c      	b.n	10000700 <__aeabi_dadd+0xec>
10000be6:	46c0      	nop			; (mov r8, r8)
10000be8:	000007ff 	.word	0x000007ff
10000bec:	000007fe 	.word	0x000007fe
10000bf0:	ff7fffff 	.word	0xff7fffff

10000bf4 <__eqdf2>:
10000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10000bf6:	000d      	movs	r5, r1
10000bf8:	b087      	sub	sp, #28
10000bfa:	9200      	str	r2, [sp, #0]
10000bfc:	9301      	str	r3, [sp, #4]
10000bfe:	0004      	movs	r4, r0
10000c00:	9004      	str	r0, [sp, #16]
10000c02:	9801      	ldr	r0, [sp, #4]
10000c04:	0feb      	lsrs	r3, r5, #31
10000c06:	0046      	lsls	r6, r0, #1
10000c08:	0fc7      	lsrs	r7, r0, #31
10000c0a:	481a      	ldr	r0, [pc, #104]	; (10000c74 <__eqdf2+0x80>)
10000c0c:	9303      	str	r3, [sp, #12]
10000c0e:	4684      	mov	ip, r0
10000c10:	9b00      	ldr	r3, [sp, #0]
10000c12:	0309      	lsls	r1, r1, #12
10000c14:	9305      	str	r3, [sp, #20]
10000c16:	9b01      	ldr	r3, [sp, #4]
10000c18:	006a      	lsls	r2, r5, #1
10000c1a:	031b      	lsls	r3, r3, #12
10000c1c:	2001      	movs	r0, #1
10000c1e:	0b09      	lsrs	r1, r1, #12
10000c20:	0d52      	lsrs	r2, r2, #21
10000c22:	0b1b      	lsrs	r3, r3, #12
10000c24:	0d76      	lsrs	r6, r6, #21
10000c26:	4562      	cmp	r2, ip
10000c28:	d003      	beq.n	10000c32 <__eqdf2+0x3e>
10000c2a:	4566      	cmp	r6, ip
10000c2c:	d10d      	bne.n	10000c4a <__eqdf2+0x56>
10000c2e:	b007      	add	sp, #28
10000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000c32:	4296      	cmp	r6, r2
10000c34:	d1fb      	bne.n	10000c2e <__eqdf2+0x3a>
10000c36:	9a00      	ldr	r2, [sp, #0]
10000c38:	430b      	orrs	r3, r1
10000c3a:	4313      	orrs	r3, r2
10000c3c:	4323      	orrs	r3, r4
10000c3e:	d1f6      	bne.n	10000c2e <__eqdf2+0x3a>
10000c40:	9b03      	ldr	r3, [sp, #12]
10000c42:	1bd8      	subs	r0, r3, r7
10000c44:	1e43      	subs	r3, r0, #1
10000c46:	4198      	sbcs	r0, r3
10000c48:	e7f1      	b.n	10000c2e <__eqdf2+0x3a>
10000c4a:	2001      	movs	r0, #1
10000c4c:	42b2      	cmp	r2, r6
10000c4e:	d1ee      	bne.n	10000c2e <__eqdf2+0x3a>
10000c50:	4299      	cmp	r1, r3
10000c52:	d1ec      	bne.n	10000c2e <__eqdf2+0x3a>
10000c54:	9b04      	ldr	r3, [sp, #16]
10000c56:	9e05      	ldr	r6, [sp, #20]
10000c58:	42b3      	cmp	r3, r6
10000c5a:	d1e8      	bne.n	10000c2e <__eqdf2+0x3a>
10000c5c:	9b03      	ldr	r3, [sp, #12]
10000c5e:	42bb      	cmp	r3, r7
10000c60:	d006      	beq.n	10000c70 <__eqdf2+0x7c>
10000c62:	2a00      	cmp	r2, #0
10000c64:	d1e3      	bne.n	10000c2e <__eqdf2+0x3a>
10000c66:	4321      	orrs	r1, r4
10000c68:	1e4b      	subs	r3, r1, #1
10000c6a:	4199      	sbcs	r1, r3
10000c6c:	0008      	movs	r0, r1
10000c6e:	e7de      	b.n	10000c2e <__eqdf2+0x3a>
10000c70:	2000      	movs	r0, #0
10000c72:	e7dc      	b.n	10000c2e <__eqdf2+0x3a>
10000c74:	000007ff 	.word	0x000007ff

10000c78 <__gedf2>:
10000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c7a:	b087      	sub	sp, #28
10000c7c:	9000      	str	r0, [sp, #0]
10000c7e:	9101      	str	r1, [sp, #4]
10000c80:	001d      	movs	r5, r3
10000c82:	9b00      	ldr	r3, [sp, #0]
10000c84:	0014      	movs	r4, r2
10000c86:	9304      	str	r3, [sp, #16]
10000c88:	9b01      	ldr	r3, [sp, #4]
10000c8a:	0329      	lsls	r1, r5, #12
10000c8c:	031a      	lsls	r2, r3, #12
10000c8e:	0b13      	lsrs	r3, r2, #12
10000c90:	4a33      	ldr	r2, [pc, #204]	; (10000d60 <__gedf2+0xe8>)
10000c92:	9303      	str	r3, [sp, #12]
10000c94:	4694      	mov	ip, r2
10000c96:	9b01      	ldr	r3, [sp, #4]
10000c98:	0068      	lsls	r0, r5, #1
10000c9a:	005f      	lsls	r7, r3, #1
10000c9c:	0d7b      	lsrs	r3, r7, #21
10000c9e:	9302      	str	r3, [sp, #8]
10000ca0:	9a02      	ldr	r2, [sp, #8]
10000ca2:	9b01      	ldr	r3, [sp, #4]
10000ca4:	9405      	str	r4, [sp, #20]
10000ca6:	0fdb      	lsrs	r3, r3, #31
10000ca8:	0b09      	lsrs	r1, r1, #12
10000caa:	0d40      	lsrs	r0, r0, #21
10000cac:	0fee      	lsrs	r6, r5, #31
10000cae:	4562      	cmp	r2, ip
10000cb0:	d112      	bne.n	10000cd8 <__gedf2+0x60>
10000cb2:	9a00      	ldr	r2, [sp, #0]
10000cb4:	9f03      	ldr	r7, [sp, #12]
10000cb6:	4317      	orrs	r7, r2
10000cb8:	d14f      	bne.n	10000d5a <__gedf2+0xe2>
10000cba:	9a02      	ldr	r2, [sp, #8]
10000cbc:	4290      	cmp	r0, r2
10000cbe:	d004      	beq.n	10000cca <__gedf2+0x52>
10000cc0:	2001      	movs	r0, #1
10000cc2:	2b00      	cmp	r3, #0
10000cc4:	d006      	beq.n	10000cd4 <__gedf2+0x5c>
10000cc6:	3802      	subs	r0, #2
10000cc8:	e004      	b.n	10000cd4 <__gedf2+0x5c>
10000cca:	4321      	orrs	r1, r4
10000ccc:	1e08      	subs	r0, r1, #0
10000cce:	d144      	bne.n	10000d5a <__gedf2+0xe2>
10000cd0:	42b3      	cmp	r3, r6
10000cd2:	d1f5      	bne.n	10000cc0 <__gedf2+0x48>
10000cd4:	b007      	add	sp, #28
10000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000cd8:	4560      	cmp	r0, ip
10000cda:	d111      	bne.n	10000d00 <__gedf2+0x88>
10000cdc:	4321      	orrs	r1, r4
10000cde:	d13c      	bne.n	10000d5a <__gedf2+0xe2>
10000ce0:	9a02      	ldr	r2, [sp, #8]
10000ce2:	2a00      	cmp	r2, #0
10000ce4:	d004      	beq.n	10000cf0 <__gedf2+0x78>
10000ce6:	42b3      	cmp	r3, r6
10000ce8:	d1ea      	bne.n	10000cc0 <__gedf2+0x48>
10000cea:	1e18      	subs	r0, r3, #0
10000cec:	d1f2      	bne.n	10000cd4 <__gedf2+0x5c>
10000cee:	e005      	b.n	10000cfc <__gedf2+0x84>
10000cf0:	9a00      	ldr	r2, [sp, #0]
10000cf2:	9903      	ldr	r1, [sp, #12]
10000cf4:	4311      	orrs	r1, r2
10000cf6:	d1f6      	bne.n	10000ce6 <__gedf2+0x6e>
10000cf8:	1e30      	subs	r0, r6, #0
10000cfa:	d1eb      	bne.n	10000cd4 <__gedf2+0x5c>
10000cfc:	2001      	movs	r0, #1
10000cfe:	e02d      	b.n	10000d5c <__gedf2+0xe4>
10000d00:	9a02      	ldr	r2, [sp, #8]
10000d02:	2a00      	cmp	r2, #0
10000d04:	d017      	beq.n	10000d36 <__gedf2+0xbe>
10000d06:	2800      	cmp	r0, #0
10000d08:	d0da      	beq.n	10000cc0 <__gedf2+0x48>
10000d0a:	42b3      	cmp	r3, r6
10000d0c:	d1d8      	bne.n	10000cc0 <__gedf2+0x48>
10000d0e:	9a02      	ldr	r2, [sp, #8]
10000d10:	4282      	cmp	r2, r0
10000d12:	dcd5      	bgt.n	10000cc0 <__gedf2+0x48>
10000d14:	9a02      	ldr	r2, [sp, #8]
10000d16:	4282      	cmp	r2, r0
10000d18:	dbe7      	blt.n	10000cea <__gedf2+0x72>
10000d1a:	9a03      	ldr	r2, [sp, #12]
10000d1c:	428a      	cmp	r2, r1
10000d1e:	d8cf      	bhi.n	10000cc0 <__gedf2+0x48>
10000d20:	d1e3      	bne.n	10000cea <__gedf2+0x72>
10000d22:	9a04      	ldr	r2, [sp, #16]
10000d24:	9905      	ldr	r1, [sp, #20]
10000d26:	428a      	cmp	r2, r1
10000d28:	d8ca      	bhi.n	10000cc0 <__gedf2+0x48>
10000d2a:	9a04      	ldr	r2, [sp, #16]
10000d2c:	9905      	ldr	r1, [sp, #20]
10000d2e:	2000      	movs	r0, #0
10000d30:	428a      	cmp	r2, r1
10000d32:	d2cf      	bcs.n	10000cd4 <__gedf2+0x5c>
10000d34:	e7d9      	b.n	10000cea <__gedf2+0x72>
10000d36:	9f00      	ldr	r7, [sp, #0]
10000d38:	9a03      	ldr	r2, [sp, #12]
10000d3a:	4317      	orrs	r7, r2
10000d3c:	2800      	cmp	r0, #0
10000d3e:	d002      	beq.n	10000d46 <__gedf2+0xce>
10000d40:	2f00      	cmp	r7, #0
10000d42:	d0d9      	beq.n	10000cf8 <__gedf2+0x80>
10000d44:	e7cf      	b.n	10000ce6 <__gedf2+0x6e>
10000d46:	430c      	orrs	r4, r1
10000d48:	d004      	beq.n	10000d54 <__gedf2+0xdc>
10000d4a:	2f00      	cmp	r7, #0
10000d4c:	d0d4      	beq.n	10000cf8 <__gedf2+0x80>
10000d4e:	42b3      	cmp	r3, r6
10000d50:	d0e3      	beq.n	10000d1a <__gedf2+0xa2>
10000d52:	e7b5      	b.n	10000cc0 <__gedf2+0x48>
10000d54:	2f00      	cmp	r7, #0
10000d56:	d0bd      	beq.n	10000cd4 <__gedf2+0x5c>
10000d58:	e7b2      	b.n	10000cc0 <__gedf2+0x48>
10000d5a:	2002      	movs	r0, #2
10000d5c:	4240      	negs	r0, r0
10000d5e:	e7b9      	b.n	10000cd4 <__gedf2+0x5c>
10000d60:	000007ff 	.word	0x000007ff

10000d64 <__ledf2>:
10000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d66:	b087      	sub	sp, #28
10000d68:	9000      	str	r0, [sp, #0]
10000d6a:	9101      	str	r1, [sp, #4]
10000d6c:	001d      	movs	r5, r3
10000d6e:	9b00      	ldr	r3, [sp, #0]
10000d70:	0014      	movs	r4, r2
10000d72:	9304      	str	r3, [sp, #16]
10000d74:	9b01      	ldr	r3, [sp, #4]
10000d76:	0068      	lsls	r0, r5, #1
10000d78:	031a      	lsls	r2, r3, #12
10000d7a:	0b13      	lsrs	r3, r2, #12
10000d7c:	4a34      	ldr	r2, [pc, #208]	; (10000e50 <__ledf2+0xec>)
10000d7e:	9303      	str	r3, [sp, #12]
10000d80:	4694      	mov	ip, r2
10000d82:	9b01      	ldr	r3, [sp, #4]
10000d84:	9405      	str	r4, [sp, #20]
10000d86:	005f      	lsls	r7, r3, #1
10000d88:	0d7b      	lsrs	r3, r7, #21
10000d8a:	9302      	str	r3, [sp, #8]
10000d8c:	9b01      	ldr	r3, [sp, #4]
10000d8e:	9a02      	ldr	r2, [sp, #8]
10000d90:	0fd9      	lsrs	r1, r3, #31
10000d92:	032b      	lsls	r3, r5, #12
10000d94:	0b1b      	lsrs	r3, r3, #12
10000d96:	0d40      	lsrs	r0, r0, #21
10000d98:	0fee      	lsrs	r6, r5, #31
10000d9a:	4562      	cmp	r2, ip
10000d9c:	d113      	bne.n	10000dc6 <__ledf2+0x62>
10000d9e:	9a00      	ldr	r2, [sp, #0]
10000da0:	9f03      	ldr	r7, [sp, #12]
10000da2:	4317      	orrs	r7, r2
10000da4:	d152      	bne.n	10000e4c <__ledf2+0xe8>
10000da6:	9a02      	ldr	r2, [sp, #8]
10000da8:	4290      	cmp	r0, r2
10000daa:	d004      	beq.n	10000db6 <__ledf2+0x52>
10000dac:	2001      	movs	r0, #1
10000dae:	2900      	cmp	r1, #0
10000db0:	d007      	beq.n	10000dc2 <__ledf2+0x5e>
10000db2:	3802      	subs	r0, #2
10000db4:	e005      	b.n	10000dc2 <__ledf2+0x5e>
10000db6:	2002      	movs	r0, #2
10000db8:	4323      	orrs	r3, r4
10000dba:	d102      	bne.n	10000dc2 <__ledf2+0x5e>
10000dbc:	0018      	movs	r0, r3
10000dbe:	42b1      	cmp	r1, r6
10000dc0:	d1f4      	bne.n	10000dac <__ledf2+0x48>
10000dc2:	b007      	add	sp, #28
10000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000dc6:	4560      	cmp	r0, ip
10000dc8:	d113      	bne.n	10000df2 <__ledf2+0x8e>
10000dca:	2002      	movs	r0, #2
10000dcc:	4323      	orrs	r3, r4
10000dce:	d1f8      	bne.n	10000dc2 <__ledf2+0x5e>
10000dd0:	9b02      	ldr	r3, [sp, #8]
10000dd2:	2b00      	cmp	r3, #0
10000dd4:	d004      	beq.n	10000de0 <__ledf2+0x7c>
10000dd6:	42b1      	cmp	r1, r6
10000dd8:	d1e8      	bne.n	10000dac <__ledf2+0x48>
10000dda:	1e08      	subs	r0, r1, #0
10000ddc:	d1f1      	bne.n	10000dc2 <__ledf2+0x5e>
10000dde:	e005      	b.n	10000dec <__ledf2+0x88>
10000de0:	9b00      	ldr	r3, [sp, #0]
10000de2:	9a03      	ldr	r2, [sp, #12]
10000de4:	431a      	orrs	r2, r3
10000de6:	d1f6      	bne.n	10000dd6 <__ledf2+0x72>
10000de8:	1e30      	subs	r0, r6, #0
10000dea:	d1ea      	bne.n	10000dc2 <__ledf2+0x5e>
10000dec:	2001      	movs	r0, #1
10000dee:	4240      	negs	r0, r0
10000df0:	e7e7      	b.n	10000dc2 <__ledf2+0x5e>
10000df2:	9a02      	ldr	r2, [sp, #8]
10000df4:	2a00      	cmp	r2, #0
10000df6:	d017      	beq.n	10000e28 <__ledf2+0xc4>
10000df8:	2800      	cmp	r0, #0
10000dfa:	d0d7      	beq.n	10000dac <__ledf2+0x48>
10000dfc:	42b1      	cmp	r1, r6
10000dfe:	d1d5      	bne.n	10000dac <__ledf2+0x48>
10000e00:	9a02      	ldr	r2, [sp, #8]
10000e02:	4282      	cmp	r2, r0
10000e04:	dcd2      	bgt.n	10000dac <__ledf2+0x48>
10000e06:	9a02      	ldr	r2, [sp, #8]
10000e08:	4282      	cmp	r2, r0
10000e0a:	dbe6      	blt.n	10000dda <__ledf2+0x76>
10000e0c:	9a03      	ldr	r2, [sp, #12]
10000e0e:	429a      	cmp	r2, r3
10000e10:	d8cc      	bhi.n	10000dac <__ledf2+0x48>
10000e12:	d1e2      	bne.n	10000dda <__ledf2+0x76>
10000e14:	9b04      	ldr	r3, [sp, #16]
10000e16:	9a05      	ldr	r2, [sp, #20]
10000e18:	4293      	cmp	r3, r2
10000e1a:	d8c7      	bhi.n	10000dac <__ledf2+0x48>
10000e1c:	9b04      	ldr	r3, [sp, #16]
10000e1e:	9a05      	ldr	r2, [sp, #20]
10000e20:	2000      	movs	r0, #0
10000e22:	4293      	cmp	r3, r2
10000e24:	d2cd      	bcs.n	10000dc2 <__ledf2+0x5e>
10000e26:	e7d8      	b.n	10000dda <__ledf2+0x76>
10000e28:	9f00      	ldr	r7, [sp, #0]
10000e2a:	9a03      	ldr	r2, [sp, #12]
10000e2c:	4317      	orrs	r7, r2
10000e2e:	2800      	cmp	r0, #0
10000e30:	d002      	beq.n	10000e38 <__ledf2+0xd4>
10000e32:	2f00      	cmp	r7, #0
10000e34:	d0d8      	beq.n	10000de8 <__ledf2+0x84>
10000e36:	e7ce      	b.n	10000dd6 <__ledf2+0x72>
10000e38:	431c      	orrs	r4, r3
10000e3a:	d004      	beq.n	10000e46 <__ledf2+0xe2>
10000e3c:	2f00      	cmp	r7, #0
10000e3e:	d0d3      	beq.n	10000de8 <__ledf2+0x84>
10000e40:	42b1      	cmp	r1, r6
10000e42:	d0e3      	beq.n	10000e0c <__ledf2+0xa8>
10000e44:	e7b2      	b.n	10000dac <__ledf2+0x48>
10000e46:	2f00      	cmp	r7, #0
10000e48:	d0bb      	beq.n	10000dc2 <__ledf2+0x5e>
10000e4a:	e7af      	b.n	10000dac <__ledf2+0x48>
10000e4c:	2002      	movs	r0, #2
10000e4e:	e7b8      	b.n	10000dc2 <__ledf2+0x5e>
10000e50:	000007ff 	.word	0x000007ff

10000e54 <__aeabi_dmul>:
10000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e56:	b08b      	sub	sp, #44	; 0x2c
10000e58:	9200      	str	r2, [sp, #0]
10000e5a:	9301      	str	r3, [sp, #4]
10000e5c:	030d      	lsls	r5, r1, #12
10000e5e:	004b      	lsls	r3, r1, #1
10000e60:	0fca      	lsrs	r2, r1, #31
10000e62:	0006      	movs	r6, r0
10000e64:	0b2d      	lsrs	r5, r5, #12
10000e66:	0d5b      	lsrs	r3, r3, #21
10000e68:	9205      	str	r2, [sp, #20]
10000e6a:	d100      	bne.n	10000e6e <__aeabi_dmul+0x1a>
10000e6c:	e114      	b.n	10001098 <__aeabi_dmul+0x244>
10000e6e:	4acf      	ldr	r2, [pc, #828]	; (100011ac <__aeabi_dmul+0x358>)
10000e70:	4293      	cmp	r3, r2
10000e72:	d100      	bne.n	10000e76 <__aeabi_dmul+0x22>
10000e74:	e138      	b.n	100010e8 <__aeabi_dmul+0x294>
10000e76:	00ed      	lsls	r5, r5, #3
10000e78:	0f42      	lsrs	r2, r0, #29
10000e7a:	432a      	orrs	r2, r5
10000e7c:	2580      	movs	r5, #128	; 0x80
10000e7e:	042d      	lsls	r5, r5, #16
10000e80:	4315      	orrs	r5, r2
10000e82:	4acb      	ldr	r2, [pc, #812]	; (100011b0 <__aeabi_dmul+0x35c>)
10000e84:	00c4      	lsls	r4, r0, #3
10000e86:	189b      	adds	r3, r3, r2
10000e88:	9303      	str	r3, [sp, #12]
10000e8a:	2300      	movs	r3, #0
10000e8c:	9302      	str	r3, [sp, #8]
10000e8e:	9b01      	ldr	r3, [sp, #4]
10000e90:	9800      	ldr	r0, [sp, #0]
10000e92:	031e      	lsls	r6, r3, #12
10000e94:	005a      	lsls	r2, r3, #1
10000e96:	0fdb      	lsrs	r3, r3, #31
10000e98:	0b36      	lsrs	r6, r6, #12
10000e9a:	0d52      	lsrs	r2, r2, #21
10000e9c:	9304      	str	r3, [sp, #16]
10000e9e:	d100      	bne.n	10000ea2 <__aeabi_dmul+0x4e>
10000ea0:	e131      	b.n	10001106 <__aeabi_dmul+0x2b2>
10000ea2:	4bc2      	ldr	r3, [pc, #776]	; (100011ac <__aeabi_dmul+0x358>)
10000ea4:	429a      	cmp	r2, r3
10000ea6:	d100      	bne.n	10000eaa <__aeabi_dmul+0x56>
10000ea8:	e153      	b.n	10001152 <__aeabi_dmul+0x2fe>
10000eaa:	0f43      	lsrs	r3, r0, #29
10000eac:	00f6      	lsls	r6, r6, #3
10000eae:	4333      	orrs	r3, r6
10000eb0:	2680      	movs	r6, #128	; 0x80
10000eb2:	49bf      	ldr	r1, [pc, #764]	; (100011b0 <__aeabi_dmul+0x35c>)
10000eb4:	0436      	lsls	r6, r6, #16
10000eb6:	431e      	orrs	r6, r3
10000eb8:	00c3      	lsls	r3, r0, #3
10000eba:	1850      	adds	r0, r2, r1
10000ebc:	2200      	movs	r2, #0
10000ebe:	9905      	ldr	r1, [sp, #20]
10000ec0:	9f04      	ldr	r7, [sp, #16]
10000ec2:	4079      	eors	r1, r7
10000ec4:	9100      	str	r1, [sp, #0]
10000ec6:	9903      	ldr	r1, [sp, #12]
10000ec8:	1841      	adds	r1, r0, r1
10000eca:	9106      	str	r1, [sp, #24]
10000ecc:	3101      	adds	r1, #1
10000ece:	9103      	str	r1, [sp, #12]
10000ed0:	9902      	ldr	r1, [sp, #8]
10000ed2:	0088      	lsls	r0, r1, #2
10000ed4:	4310      	orrs	r0, r2
10000ed6:	280a      	cmp	r0, #10
10000ed8:	dd00      	ble.n	10000edc <__aeabi_dmul+0x88>
10000eda:	e173      	b.n	100011c4 <__aeabi_dmul+0x370>
10000edc:	2802      	cmp	r0, #2
10000ede:	dd00      	ble.n	10000ee2 <__aeabi_dmul+0x8e>
10000ee0:	e146      	b.n	10001170 <__aeabi_dmul+0x31c>
10000ee2:	3801      	subs	r0, #1
10000ee4:	2801      	cmp	r0, #1
10000ee6:	d800      	bhi.n	10000eea <__aeabi_dmul+0x96>
10000ee8:	e155      	b.n	10001196 <__aeabi_dmul+0x342>
10000eea:	0c19      	lsrs	r1, r3, #16
10000eec:	b29b      	uxth	r3, r3
10000eee:	9102      	str	r1, [sp, #8]
10000ef0:	0019      	movs	r1, r3
10000ef2:	0c22      	lsrs	r2, r4, #16
10000ef4:	b2a4      	uxth	r4, r4
10000ef6:	4351      	muls	r1, r2
10000ef8:	0020      	movs	r0, r4
10000efa:	468c      	mov	ip, r1
10000efc:	9f02      	ldr	r7, [sp, #8]
10000efe:	9902      	ldr	r1, [sp, #8]
10000f00:	4358      	muls	r0, r3
10000f02:	4351      	muls	r1, r2
10000f04:	4367      	muls	r7, r4
10000f06:	9105      	str	r1, [sp, #20]
10000f08:	4467      	add	r7, ip
10000f0a:	0c01      	lsrs	r1, r0, #16
10000f0c:	19c9      	adds	r1, r1, r7
10000f0e:	9004      	str	r0, [sp, #16]
10000f10:	458c      	cmp	ip, r1
10000f12:	d905      	bls.n	10000f20 <__aeabi_dmul+0xcc>
10000f14:	2080      	movs	r0, #128	; 0x80
10000f16:	0240      	lsls	r0, r0, #9
10000f18:	4684      	mov	ip, r0
10000f1a:	9f05      	ldr	r7, [sp, #20]
10000f1c:	4467      	add	r7, ip
10000f1e:	9705      	str	r7, [sp, #20]
10000f20:	0c08      	lsrs	r0, r1, #16
10000f22:	4684      	mov	ip, r0
10000f24:	4668      	mov	r0, sp
10000f26:	8a00      	ldrh	r0, [r0, #16]
10000f28:	0409      	lsls	r1, r1, #16
10000f2a:	1809      	adds	r1, r1, r0
10000f2c:	9109      	str	r1, [sp, #36]	; 0x24
10000f2e:	0c31      	lsrs	r1, r6, #16
10000f30:	b2b6      	uxth	r6, r6
10000f32:	9104      	str	r1, [sp, #16]
10000f34:	0030      	movs	r0, r6
10000f36:	0021      	movs	r1, r4
10000f38:	9f04      	ldr	r7, [sp, #16]
10000f3a:	4350      	muls	r0, r2
10000f3c:	437c      	muls	r4, r7
10000f3e:	4371      	muls	r1, r6
10000f40:	437a      	muls	r2, r7
10000f42:	1824      	adds	r4, r4, r0
10000f44:	0c0f      	lsrs	r7, r1, #16
10000f46:	193c      	adds	r4, r7, r4
10000f48:	42a0      	cmp	r0, r4
10000f4a:	d902      	bls.n	10000f52 <__aeabi_dmul+0xfe>
10000f4c:	2080      	movs	r0, #128	; 0x80
10000f4e:	0240      	lsls	r0, r0, #9
10000f50:	1812      	adds	r2, r2, r0
10000f52:	0c20      	lsrs	r0, r4, #16
10000f54:	1882      	adds	r2, r0, r2
10000f56:	0424      	lsls	r4, r4, #16
10000f58:	b289      	uxth	r1, r1
10000f5a:	9207      	str	r2, [sp, #28]
10000f5c:	1862      	adds	r2, r4, r1
10000f5e:	9208      	str	r2, [sp, #32]
10000f60:	9908      	ldr	r1, [sp, #32]
10000f62:	4662      	mov	r2, ip
10000f64:	468c      	mov	ip, r1
10000f66:	0c29      	lsrs	r1, r5, #16
10000f68:	b2ad      	uxth	r5, r5
10000f6a:	0028      	movs	r0, r5
10000f6c:	9f02      	ldr	r7, [sp, #8]
10000f6e:	4358      	muls	r0, r3
10000f70:	436f      	muls	r7, r5
10000f72:	434b      	muls	r3, r1
10000f74:	4462      	add	r2, ip
10000f76:	4694      	mov	ip, r2
10000f78:	9c02      	ldr	r4, [sp, #8]
10000f7a:	18ff      	adds	r7, r7, r3
10000f7c:	0c02      	lsrs	r2, r0, #16
10000f7e:	19d2      	adds	r2, r2, r7
10000f80:	434c      	muls	r4, r1
10000f82:	4293      	cmp	r3, r2
10000f84:	d902      	bls.n	10000f8c <__aeabi_dmul+0x138>
10000f86:	2380      	movs	r3, #128	; 0x80
10000f88:	025b      	lsls	r3, r3, #9
10000f8a:	18e4      	adds	r4, r4, r3
10000f8c:	0c13      	lsrs	r3, r2, #16
10000f8e:	191b      	adds	r3, r3, r4
10000f90:	9302      	str	r3, [sp, #8]
10000f92:	002b      	movs	r3, r5
10000f94:	b280      	uxth	r0, r0
10000f96:	0412      	lsls	r2, r2, #16
10000f98:	1812      	adds	r2, r2, r0
10000f9a:	9804      	ldr	r0, [sp, #16]
10000f9c:	4373      	muls	r3, r6
10000f9e:	4345      	muls	r5, r0
10000fa0:	434e      	muls	r6, r1
10000fa2:	4341      	muls	r1, r0
10000fa4:	19a8      	adds	r0, r5, r6
10000fa6:	0c1d      	lsrs	r5, r3, #16
10000fa8:	182d      	adds	r5, r5, r0
10000faa:	42ae      	cmp	r6, r5
10000fac:	d902      	bls.n	10000fb4 <__aeabi_dmul+0x160>
10000fae:	2080      	movs	r0, #128	; 0x80
10000fb0:	0240      	lsls	r0, r0, #9
10000fb2:	1809      	adds	r1, r1, r0
10000fb4:	9c05      	ldr	r4, [sp, #20]
10000fb6:	4660      	mov	r0, ip
10000fb8:	46a4      	mov	ip, r4
10000fba:	9c08      	ldr	r4, [sp, #32]
10000fbc:	4460      	add	r0, ip
10000fbe:	42a0      	cmp	r0, r4
10000fc0:	41bf      	sbcs	r7, r7
10000fc2:	1880      	adds	r0, r0, r2
10000fc4:	4290      	cmp	r0, r2
10000fc6:	4192      	sbcs	r2, r2
10000fc8:	042e      	lsls	r6, r5, #16
10000fca:	b29b      	uxth	r3, r3
10000fcc:	18f6      	adds	r6, r6, r3
10000fce:	9b07      	ldr	r3, [sp, #28]
10000fd0:	427f      	negs	r7, r7
10000fd2:	18f6      	adds	r6, r6, r3
10000fd4:	4253      	negs	r3, r2
10000fd6:	9304      	str	r3, [sp, #16]
10000fd8:	9b02      	ldr	r3, [sp, #8]
10000fda:	19f4      	adds	r4, r6, r7
10000fdc:	469c      	mov	ip, r3
10000fde:	44a4      	add	ip, r4
10000fe0:	4663      	mov	r3, ip
10000fe2:	9a04      	ldr	r2, [sp, #16]
10000fe4:	42bc      	cmp	r4, r7
10000fe6:	41a4      	sbcs	r4, r4
10000fe8:	189b      	adds	r3, r3, r2
10000fea:	9a07      	ldr	r2, [sp, #28]
10000fec:	4264      	negs	r4, r4
10000fee:	4296      	cmp	r6, r2
10000ff0:	41b6      	sbcs	r6, r6
10000ff2:	9a02      	ldr	r2, [sp, #8]
10000ff4:	4276      	negs	r6, r6
10000ff6:	4334      	orrs	r4, r6
10000ff8:	0c2d      	lsrs	r5, r5, #16
10000ffa:	1964      	adds	r4, r4, r5
10000ffc:	4594      	cmp	ip, r2
10000ffe:	41ad      	sbcs	r5, r5
10001000:	9a04      	ldr	r2, [sp, #16]
10001002:	426d      	negs	r5, r5
10001004:	4293      	cmp	r3, r2
10001006:	4192      	sbcs	r2, r2
10001008:	4252      	negs	r2, r2
1000100a:	4315      	orrs	r5, r2
1000100c:	1964      	adds	r4, r4, r5
1000100e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001010:	1864      	adds	r4, r4, r1
10001012:	0241      	lsls	r1, r0, #9
10001014:	4311      	orrs	r1, r2
10001016:	1e4a      	subs	r2, r1, #1
10001018:	4191      	sbcs	r1, r2
1000101a:	0dc0      	lsrs	r0, r0, #23
1000101c:	0dde      	lsrs	r6, r3, #23
1000101e:	0264      	lsls	r4, r4, #9
10001020:	4301      	orrs	r1, r0
10001022:	025b      	lsls	r3, r3, #9
10001024:	4326      	orrs	r6, r4
10001026:	430b      	orrs	r3, r1
10001028:	01e4      	lsls	r4, r4, #7
1000102a:	d400      	bmi.n	1000102e <__aeabi_dmul+0x1da>
1000102c:	e0df      	b.n	100011ee <__aeabi_dmul+0x39a>
1000102e:	2101      	movs	r1, #1
10001030:	085a      	lsrs	r2, r3, #1
10001032:	400b      	ands	r3, r1
10001034:	431a      	orrs	r2, r3
10001036:	07f3      	lsls	r3, r6, #31
10001038:	40ce      	lsrs	r6, r1
1000103a:	4313      	orrs	r3, r2
1000103c:	9a03      	ldr	r2, [sp, #12]
1000103e:	495d      	ldr	r1, [pc, #372]	; (100011b4 <__aeabi_dmul+0x360>)
10001040:	1852      	adds	r2, r2, r1
10001042:	2a00      	cmp	r2, #0
10001044:	dc00      	bgt.n	10001048 <__aeabi_dmul+0x1f4>
10001046:	e0d5      	b.n	100011f4 <__aeabi_dmul+0x3a0>
10001048:	0759      	lsls	r1, r3, #29
1000104a:	d009      	beq.n	10001060 <__aeabi_dmul+0x20c>
1000104c:	210f      	movs	r1, #15
1000104e:	4019      	ands	r1, r3
10001050:	2904      	cmp	r1, #4
10001052:	d005      	beq.n	10001060 <__aeabi_dmul+0x20c>
10001054:	1d19      	adds	r1, r3, #4
10001056:	4299      	cmp	r1, r3
10001058:	419b      	sbcs	r3, r3
1000105a:	425b      	negs	r3, r3
1000105c:	18f6      	adds	r6, r6, r3
1000105e:	000b      	movs	r3, r1
10001060:	01f1      	lsls	r1, r6, #7
10001062:	d506      	bpl.n	10001072 <__aeabi_dmul+0x21e>
10001064:	2180      	movs	r1, #128	; 0x80
10001066:	00c9      	lsls	r1, r1, #3
10001068:	468c      	mov	ip, r1
1000106a:	4a53      	ldr	r2, [pc, #332]	; (100011b8 <__aeabi_dmul+0x364>)
1000106c:	4016      	ands	r6, r2
1000106e:	9a03      	ldr	r2, [sp, #12]
10001070:	4462      	add	r2, ip
10001072:	4952      	ldr	r1, [pc, #328]	; (100011bc <__aeabi_dmul+0x368>)
10001074:	428a      	cmp	r2, r1
10001076:	dd00      	ble.n	1000107a <__aeabi_dmul+0x226>
10001078:	e109      	b.n	1000128e <__aeabi_dmul+0x43a>
1000107a:	0774      	lsls	r4, r6, #29
1000107c:	08db      	lsrs	r3, r3, #3
1000107e:	431c      	orrs	r4, r3
10001080:	08f6      	lsrs	r6, r6, #3
10001082:	0513      	lsls	r3, r2, #20
10001084:	0336      	lsls	r6, r6, #12
10001086:	9a00      	ldr	r2, [sp, #0]
10001088:	0b36      	lsrs	r6, r6, #12
1000108a:	4333      	orrs	r3, r6
1000108c:	07d2      	lsls	r2, r2, #31
1000108e:	4313      	orrs	r3, r2
10001090:	0020      	movs	r0, r4
10001092:	0019      	movs	r1, r3
10001094:	b00b      	add	sp, #44	; 0x2c
10001096:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001098:	002c      	movs	r4, r5
1000109a:	4304      	orrs	r4, r0
1000109c:	d02b      	beq.n	100010f6 <__aeabi_dmul+0x2a2>
1000109e:	2d00      	cmp	r5, #0
100010a0:	d016      	beq.n	100010d0 <__aeabi_dmul+0x27c>
100010a2:	0028      	movs	r0, r5
100010a4:	f7ff f91a 	bl	100002dc <__clzsi2>
100010a8:	0004      	movs	r4, r0
100010aa:	0002      	movs	r2, r0
100010ac:	3c0b      	subs	r4, #11
100010ae:	231d      	movs	r3, #29
100010b0:	0030      	movs	r0, r6
100010b2:	1b1b      	subs	r3, r3, r4
100010b4:	0011      	movs	r1, r2
100010b6:	40d8      	lsrs	r0, r3
100010b8:	3908      	subs	r1, #8
100010ba:	408d      	lsls	r5, r1
100010bc:	0003      	movs	r3, r0
100010be:	432b      	orrs	r3, r5
100010c0:	0035      	movs	r5, r6
100010c2:	408d      	lsls	r5, r1
100010c4:	493e      	ldr	r1, [pc, #248]	; (100011c0 <__aeabi_dmul+0x36c>)
100010c6:	002c      	movs	r4, r5
100010c8:	1a8a      	subs	r2, r1, r2
100010ca:	001d      	movs	r5, r3
100010cc:	9203      	str	r2, [sp, #12]
100010ce:	e6dc      	b.n	10000e8a <__aeabi_dmul+0x36>
100010d0:	f7ff f904 	bl	100002dc <__clzsi2>
100010d4:	0004      	movs	r4, r0
100010d6:	0002      	movs	r2, r0
100010d8:	3415      	adds	r4, #21
100010da:	3220      	adds	r2, #32
100010dc:	2c1c      	cmp	r4, #28
100010de:	dde6      	ble.n	100010ae <__aeabi_dmul+0x25a>
100010e0:	0033      	movs	r3, r6
100010e2:	3808      	subs	r0, #8
100010e4:	4083      	lsls	r3, r0
100010e6:	e7ed      	b.n	100010c4 <__aeabi_dmul+0x270>
100010e8:	0004      	movs	r4, r0
100010ea:	432c      	orrs	r4, r5
100010ec:	d007      	beq.n	100010fe <__aeabi_dmul+0x2aa>
100010ee:	9303      	str	r3, [sp, #12]
100010f0:	0004      	movs	r4, r0
100010f2:	2303      	movs	r3, #3
100010f4:	e6ca      	b.n	10000e8c <__aeabi_dmul+0x38>
100010f6:	0025      	movs	r5, r4
100010f8:	2301      	movs	r3, #1
100010fa:	9403      	str	r4, [sp, #12]
100010fc:	e6c6      	b.n	10000e8c <__aeabi_dmul+0x38>
100010fe:	9303      	str	r3, [sp, #12]
10001100:	0025      	movs	r5, r4
10001102:	2302      	movs	r3, #2
10001104:	e6c2      	b.n	10000e8c <__aeabi_dmul+0x38>
10001106:	9b00      	ldr	r3, [sp, #0]
10001108:	4333      	orrs	r3, r6
1000110a:	d029      	beq.n	10001160 <__aeabi_dmul+0x30c>
1000110c:	2e00      	cmp	r6, #0
1000110e:	d014      	beq.n	1000113a <__aeabi_dmul+0x2e6>
10001110:	0030      	movs	r0, r6
10001112:	f7ff f8e3 	bl	100002dc <__clzsi2>
10001116:	0001      	movs	r1, r0
10001118:	0003      	movs	r3, r0
1000111a:	390b      	subs	r1, #11
1000111c:	221d      	movs	r2, #29
1000111e:	0018      	movs	r0, r3
10001120:	1a52      	subs	r2, r2, r1
10001122:	9900      	ldr	r1, [sp, #0]
10001124:	3808      	subs	r0, #8
10001126:	4086      	lsls	r6, r0
10001128:	40d1      	lsrs	r1, r2
1000112a:	4331      	orrs	r1, r6
1000112c:	9e00      	ldr	r6, [sp, #0]
1000112e:	4086      	lsls	r6, r0
10001130:	4823      	ldr	r0, [pc, #140]	; (100011c0 <__aeabi_dmul+0x36c>)
10001132:	1ac0      	subs	r0, r0, r3
10001134:	0033      	movs	r3, r6
10001136:	000e      	movs	r6, r1
10001138:	e6c0      	b.n	10000ebc <__aeabi_dmul+0x68>
1000113a:	f7ff f8cf 	bl	100002dc <__clzsi2>
1000113e:	0001      	movs	r1, r0
10001140:	0003      	movs	r3, r0
10001142:	3115      	adds	r1, #21
10001144:	3320      	adds	r3, #32
10001146:	291c      	cmp	r1, #28
10001148:	dde8      	ble.n	1000111c <__aeabi_dmul+0x2c8>
1000114a:	9900      	ldr	r1, [sp, #0]
1000114c:	3808      	subs	r0, #8
1000114e:	4081      	lsls	r1, r0
10001150:	e7ee      	b.n	10001130 <__aeabi_dmul+0x2dc>
10001152:	9b00      	ldr	r3, [sp, #0]
10001154:	4333      	orrs	r3, r6
10001156:	d007      	beq.n	10001168 <__aeabi_dmul+0x314>
10001158:	0003      	movs	r3, r0
1000115a:	0010      	movs	r0, r2
1000115c:	2203      	movs	r2, #3
1000115e:	e6ae      	b.n	10000ebe <__aeabi_dmul+0x6a>
10001160:	001e      	movs	r6, r3
10001162:	0018      	movs	r0, r3
10001164:	2201      	movs	r2, #1
10001166:	e6aa      	b.n	10000ebe <__aeabi_dmul+0x6a>
10001168:	0010      	movs	r0, r2
1000116a:	001e      	movs	r6, r3
1000116c:	2202      	movs	r2, #2
1000116e:	e6a6      	b.n	10000ebe <__aeabi_dmul+0x6a>
10001170:	2101      	movs	r1, #1
10001172:	4081      	lsls	r1, r0
10001174:	20a6      	movs	r0, #166	; 0xa6
10001176:	000f      	movs	r7, r1
10001178:	00c0      	lsls	r0, r0, #3
1000117a:	4007      	ands	r7, r0
1000117c:	4201      	tst	r1, r0
1000117e:	d127      	bne.n	100011d0 <__aeabi_dmul+0x37c>
10001180:	2090      	movs	r0, #144	; 0x90
10001182:	0080      	lsls	r0, r0, #2
10001184:	4201      	tst	r1, r0
10001186:	d177      	bne.n	10001278 <__aeabi_dmul+0x424>
10001188:	38b9      	subs	r0, #185	; 0xb9
1000118a:	38ff      	subs	r0, #255	; 0xff
1000118c:	4201      	tst	r1, r0
1000118e:	d100      	bne.n	10001192 <__aeabi_dmul+0x33e>
10001190:	e6ab      	b.n	10000eea <__aeabi_dmul+0x96>
10001192:	9904      	ldr	r1, [sp, #16]
10001194:	9100      	str	r1, [sp, #0]
10001196:	2a02      	cmp	r2, #2
10001198:	d079      	beq.n	1000128e <__aeabi_dmul+0x43a>
1000119a:	2a03      	cmp	r2, #3
1000119c:	d075      	beq.n	1000128a <__aeabi_dmul+0x436>
1000119e:	2a01      	cmp	r2, #1
100011a0:	d000      	beq.n	100011a4 <__aeabi_dmul+0x350>
100011a2:	e74b      	b.n	1000103c <__aeabi_dmul+0x1e8>
100011a4:	2600      	movs	r6, #0
100011a6:	0034      	movs	r4, r6
100011a8:	0032      	movs	r2, r6
100011aa:	e76a      	b.n	10001082 <__aeabi_dmul+0x22e>
100011ac:	000007ff 	.word	0x000007ff
100011b0:	fffffc01 	.word	0xfffffc01
100011b4:	000003ff 	.word	0x000003ff
100011b8:	feffffff 	.word	0xfeffffff
100011bc:	000007fe 	.word	0x000007fe
100011c0:	fffffc0d 	.word	0xfffffc0d
100011c4:	9905      	ldr	r1, [sp, #20]
100011c6:	9100      	str	r1, [sp, #0]
100011c8:	280f      	cmp	r0, #15
100011ca:	d005      	beq.n	100011d8 <__aeabi_dmul+0x384>
100011cc:	280b      	cmp	r0, #11
100011ce:	d0e0      	beq.n	10001192 <__aeabi_dmul+0x33e>
100011d0:	002e      	movs	r6, r5
100011d2:	0023      	movs	r3, r4
100011d4:	9a02      	ldr	r2, [sp, #8]
100011d6:	e7de      	b.n	10001196 <__aeabi_dmul+0x342>
100011d8:	2280      	movs	r2, #128	; 0x80
100011da:	0312      	lsls	r2, r2, #12
100011dc:	4215      	tst	r5, r2
100011de:	d04f      	beq.n	10001280 <__aeabi_dmul+0x42c>
100011e0:	4216      	tst	r6, r2
100011e2:	d14d      	bne.n	10001280 <__aeabi_dmul+0x42c>
100011e4:	0035      	movs	r5, r6
100011e6:	9a04      	ldr	r2, [sp, #16]
100011e8:	9200      	str	r2, [sp, #0]
100011ea:	001c      	movs	r4, r3
100011ec:	e048      	b.n	10001280 <__aeabi_dmul+0x42c>
100011ee:	9a06      	ldr	r2, [sp, #24]
100011f0:	9203      	str	r2, [sp, #12]
100011f2:	e723      	b.n	1000103c <__aeabi_dmul+0x1e8>
100011f4:	2001      	movs	r0, #1
100011f6:	1a80      	subs	r0, r0, r2
100011f8:	2838      	cmp	r0, #56	; 0x38
100011fa:	dcd3      	bgt.n	100011a4 <__aeabi_dmul+0x350>
100011fc:	281f      	cmp	r0, #31
100011fe:	dc27      	bgt.n	10001250 <__aeabi_dmul+0x3fc>
10001200:	4926      	ldr	r1, [pc, #152]	; (1000129c <__aeabi_dmul+0x448>)
10001202:	9a03      	ldr	r2, [sp, #12]
10001204:	468c      	mov	ip, r1
10001206:	001c      	movs	r4, r3
10001208:	4462      	add	r2, ip
1000120a:	0031      	movs	r1, r6
1000120c:	4093      	lsls	r3, r2
1000120e:	4091      	lsls	r1, r2
10001210:	40c4      	lsrs	r4, r0
10001212:	001a      	movs	r2, r3
10001214:	4321      	orrs	r1, r4
10001216:	1e53      	subs	r3, r2, #1
10001218:	419a      	sbcs	r2, r3
1000121a:	000b      	movs	r3, r1
1000121c:	40c6      	lsrs	r6, r0
1000121e:	4313      	orrs	r3, r2
10001220:	075a      	lsls	r2, r3, #29
10001222:	d009      	beq.n	10001238 <__aeabi_dmul+0x3e4>
10001224:	220f      	movs	r2, #15
10001226:	401a      	ands	r2, r3
10001228:	2a04      	cmp	r2, #4
1000122a:	d005      	beq.n	10001238 <__aeabi_dmul+0x3e4>
1000122c:	1d1a      	adds	r2, r3, #4
1000122e:	429a      	cmp	r2, r3
10001230:	419b      	sbcs	r3, r3
10001232:	425b      	negs	r3, r3
10001234:	18f6      	adds	r6, r6, r3
10001236:	0013      	movs	r3, r2
10001238:	2180      	movs	r1, #128	; 0x80
1000123a:	0030      	movs	r0, r6
1000123c:	0409      	lsls	r1, r1, #16
1000123e:	4008      	ands	r0, r1
10001240:	420e      	tst	r6, r1
10001242:	d127      	bne.n	10001294 <__aeabi_dmul+0x440>
10001244:	0774      	lsls	r4, r6, #29
10001246:	08db      	lsrs	r3, r3, #3
10001248:	0002      	movs	r2, r0
1000124a:	431c      	orrs	r4, r3
1000124c:	08f6      	lsrs	r6, r6, #3
1000124e:	e718      	b.n	10001082 <__aeabi_dmul+0x22e>
10001250:	211f      	movs	r1, #31
10001252:	4249      	negs	r1, r1
10001254:	1a8a      	subs	r2, r1, r2
10001256:	0031      	movs	r1, r6
10001258:	40d1      	lsrs	r1, r2
1000125a:	2200      	movs	r2, #0
1000125c:	2820      	cmp	r0, #32
1000125e:	d005      	beq.n	1000126c <__aeabi_dmul+0x418>
10001260:	480f      	ldr	r0, [pc, #60]	; (100012a0 <__aeabi_dmul+0x44c>)
10001262:	9a03      	ldr	r2, [sp, #12]
10001264:	4684      	mov	ip, r0
10001266:	4462      	add	r2, ip
10001268:	4096      	lsls	r6, r2
1000126a:	0032      	movs	r2, r6
1000126c:	4313      	orrs	r3, r2
1000126e:	1e5a      	subs	r2, r3, #1
10001270:	4193      	sbcs	r3, r2
10001272:	2600      	movs	r6, #0
10001274:	430b      	orrs	r3, r1
10001276:	e7d3      	b.n	10001220 <__aeabi_dmul+0x3cc>
10001278:	2580      	movs	r5, #128	; 0x80
1000127a:	003c      	movs	r4, r7
1000127c:	032d      	lsls	r5, r5, #12
1000127e:	9700      	str	r7, [sp, #0]
10001280:	2680      	movs	r6, #128	; 0x80
10001282:	0336      	lsls	r6, r6, #12
10001284:	432e      	orrs	r6, r5
10001286:	4a07      	ldr	r2, [pc, #28]	; (100012a4 <__aeabi_dmul+0x450>)
10001288:	e6fb      	b.n	10001082 <__aeabi_dmul+0x22e>
1000128a:	0035      	movs	r5, r6
1000128c:	e7ad      	b.n	100011ea <__aeabi_dmul+0x396>
1000128e:	2600      	movs	r6, #0
10001290:	0034      	movs	r4, r6
10001292:	e7f8      	b.n	10001286 <__aeabi_dmul+0x432>
10001294:	2600      	movs	r6, #0
10001296:	2201      	movs	r2, #1
10001298:	0034      	movs	r4, r6
1000129a:	e6f2      	b.n	10001082 <__aeabi_dmul+0x22e>
1000129c:	0000041e 	.word	0x0000041e
100012a0:	0000043e 	.word	0x0000043e
100012a4:	000007ff 	.word	0x000007ff

100012a8 <__aeabi_dsub>:
100012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100012aa:	b085      	sub	sp, #20
100012ac:	9200      	str	r2, [sp, #0]
100012ae:	9301      	str	r3, [sp, #4]
100012b0:	0fcb      	lsrs	r3, r1, #31
100012b2:	030d      	lsls	r5, r1, #12
100012b4:	9302      	str	r3, [sp, #8]
100012b6:	9b01      	ldr	r3, [sp, #4]
100012b8:	004c      	lsls	r4, r1, #1
100012ba:	0a6d      	lsrs	r5, r5, #9
100012bc:	0f41      	lsrs	r1, r0, #29
100012be:	4329      	orrs	r1, r5
100012c0:	005d      	lsls	r5, r3, #1
100012c2:	031e      	lsls	r6, r3, #12
100012c4:	0d6b      	lsrs	r3, r5, #21
100012c6:	469c      	mov	ip, r3
100012c8:	9b01      	ldr	r3, [sp, #4]
100012ca:	0a76      	lsrs	r6, r6, #9
100012cc:	0fdd      	lsrs	r5, r3, #31
100012ce:	9b00      	ldr	r3, [sp, #0]
100012d0:	9a00      	ldr	r2, [sp, #0]
100012d2:	0f5b      	lsrs	r3, r3, #29
100012d4:	4333      	orrs	r3, r6
100012d6:	4ebe      	ldr	r6, [pc, #760]	; (100015d0 <__aeabi_dsub+0x328>)
100012d8:	0d64      	lsrs	r4, r4, #21
100012da:	00c0      	lsls	r0, r0, #3
100012dc:	00d2      	lsls	r2, r2, #3
100012de:	45b4      	cmp	ip, r6
100012e0:	d123      	bne.n	1000132a <__aeabi_dsub+0x82>
100012e2:	001e      	movs	r6, r3
100012e4:	4316      	orrs	r6, r2
100012e6:	9603      	str	r6, [sp, #12]
100012e8:	9f03      	ldr	r7, [sp, #12]
100012ea:	4eba      	ldr	r6, [pc, #744]	; (100015d4 <__aeabi_dsub+0x32c>)
100012ec:	19a6      	adds	r6, r4, r6
100012ee:	2f00      	cmp	r7, #0
100012f0:	d00c      	beq.n	1000130c <__aeabi_dsub+0x64>
100012f2:	9f02      	ldr	r7, [sp, #8]
100012f4:	9500      	str	r5, [sp, #0]
100012f6:	42af      	cmp	r7, r5
100012f8:	d000      	beq.n	100012fc <__aeabi_dsub+0x54>
100012fa:	e1b5      	b.n	10001668 <__aeabi_dsub+0x3c0>
100012fc:	2e00      	cmp	r6, #0
100012fe:	d100      	bne.n	10001302 <__aeabi_dsub+0x5a>
10001300:	e104      	b.n	1000150c <__aeabi_dsub+0x264>
10001302:	2c00      	cmp	r4, #0
10001304:	d000      	beq.n	10001308 <__aeabi_dsub+0x60>
10001306:	e2ba      	b.n	1000187e <__aeabi_dsub+0x5d6>
10001308:	4664      	mov	r4, ip
1000130a:	e0b8      	b.n	1000147e <__aeabi_dsub+0x1d6>
1000130c:	2701      	movs	r7, #1
1000130e:	406f      	eors	r7, r5
10001310:	9d02      	ldr	r5, [sp, #8]
10001312:	9700      	str	r7, [sp, #0]
10001314:	42bd      	cmp	r5, r7
10001316:	d000      	beq.n	1000131a <__aeabi_dsub+0x72>
10001318:	e1af      	b.n	1000167a <__aeabi_dsub+0x3d2>
1000131a:	2e00      	cmp	r6, #0
1000131c:	d100      	bne.n	10001320 <__aeabi_dsub+0x78>
1000131e:	e0f5      	b.n	1000150c <__aeabi_dsub+0x264>
10001320:	2c00      	cmp	r4, #0
10001322:	d0f1      	beq.n	10001308 <__aeabi_dsub+0x60>
10001324:	9903      	ldr	r1, [sp, #12]
10001326:	0008      	movs	r0, r1
10001328:	e02f      	b.n	1000138a <__aeabi_dsub+0xe2>
1000132a:	2601      	movs	r6, #1
1000132c:	4075      	eors	r5, r6
1000132e:	9500      	str	r5, [sp, #0]
10001330:	4665      	mov	r5, ip
10001332:	9f02      	ldr	r7, [sp, #8]
10001334:	9e00      	ldr	r6, [sp, #0]
10001336:	1b65      	subs	r5, r4, r5
10001338:	42b7      	cmp	r7, r6
1000133a:	d000      	beq.n	1000133e <__aeabi_dsub+0x96>
1000133c:	e12e      	b.n	1000159c <__aeabi_dsub+0x2f4>
1000133e:	2d00      	cmp	r5, #0
10001340:	dc00      	bgt.n	10001344 <__aeabi_dsub+0x9c>
10001342:	e076      	b.n	10001432 <__aeabi_dsub+0x18a>
10001344:	4667      	mov	r7, ip
10001346:	2f00      	cmp	r7, #0
10001348:	d121      	bne.n	1000138e <__aeabi_dsub+0xe6>
1000134a:	001f      	movs	r7, r3
1000134c:	4317      	orrs	r7, r2
1000134e:	d100      	bne.n	10001352 <__aeabi_dsub+0xaa>
10001350:	e122      	b.n	10001598 <__aeabi_dsub+0x2f0>
10001352:	1e6f      	subs	r7, r5, #1
10001354:	2d01      	cmp	r5, #1
10001356:	d115      	bne.n	10001384 <__aeabi_dsub+0xdc>
10001358:	1882      	adds	r2, r0, r2
1000135a:	4282      	cmp	r2, r0
1000135c:	4180      	sbcs	r0, r0
1000135e:	18c9      	adds	r1, r1, r3
10001360:	4240      	negs	r0, r0
10001362:	1809      	adds	r1, r1, r0
10001364:	2401      	movs	r4, #1
10001366:	0010      	movs	r0, r2
10001368:	020b      	lsls	r3, r1, #8
1000136a:	d400      	bmi.n	1000136e <__aeabi_dsub+0xc6>
1000136c:	e096      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000136e:	2402      	movs	r4, #2
10001370:	4b99      	ldr	r3, [pc, #612]	; (100015d8 <__aeabi_dsub+0x330>)
10001372:	0842      	lsrs	r2, r0, #1
10001374:	400b      	ands	r3, r1
10001376:	2101      	movs	r1, #1
10001378:	4001      	ands	r1, r0
1000137a:	430a      	orrs	r2, r1
1000137c:	07d8      	lsls	r0, r3, #31
1000137e:	4310      	orrs	r0, r2
10001380:	0859      	lsrs	r1, r3, #1
10001382:	e08b      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001384:	4e92      	ldr	r6, [pc, #584]	; (100015d0 <__aeabi_dsub+0x328>)
10001386:	42b5      	cmp	r5, r6
10001388:	d122      	bne.n	100013d0 <__aeabi_dsub+0x128>
1000138a:	4c91      	ldr	r4, [pc, #580]	; (100015d0 <__aeabi_dsub+0x328>)
1000138c:	e086      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000138e:	4e90      	ldr	r6, [pc, #576]	; (100015d0 <__aeabi_dsub+0x328>)
10001390:	42b4      	cmp	r4, r6
10001392:	d100      	bne.n	10001396 <__aeabi_dsub+0xee>
10001394:	e082      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001396:	2600      	movs	r6, #0
10001398:	46b4      	mov	ip, r6
1000139a:	3601      	adds	r6, #1
1000139c:	2d38      	cmp	r5, #56	; 0x38
1000139e:	dc1a      	bgt.n	100013d6 <__aeabi_dsub+0x12e>
100013a0:	2680      	movs	r6, #128	; 0x80
100013a2:	002f      	movs	r7, r5
100013a4:	0436      	lsls	r6, r6, #16
100013a6:	4333      	orrs	r3, r6
100013a8:	2f1f      	cmp	r7, #31
100013aa:	dc31      	bgt.n	10001410 <__aeabi_dsub+0x168>
100013ac:	2520      	movs	r5, #32
100013ae:	001e      	movs	r6, r3
100013b0:	1bed      	subs	r5, r5, r7
100013b2:	40ae      	lsls	r6, r5
100013b4:	46b4      	mov	ip, r6
100013b6:	0016      	movs	r6, r2
100013b8:	9500      	str	r5, [sp, #0]
100013ba:	40fe      	lsrs	r6, r7
100013bc:	4665      	mov	r5, ip
100013be:	432e      	orrs	r6, r5
100013c0:	9d00      	ldr	r5, [sp, #0]
100013c2:	40fb      	lsrs	r3, r7
100013c4:	40aa      	lsls	r2, r5
100013c6:	1e55      	subs	r5, r2, #1
100013c8:	41aa      	sbcs	r2, r5
100013ca:	4316      	orrs	r6, r2
100013cc:	469c      	mov	ip, r3
100013ce:	e002      	b.n	100013d6 <__aeabi_dsub+0x12e>
100013d0:	2601      	movs	r6, #1
100013d2:	2f38      	cmp	r7, #56	; 0x38
100013d4:	dde8      	ble.n	100013a8 <__aeabi_dsub+0x100>
100013d6:	1836      	adds	r6, r6, r0
100013d8:	4286      	cmp	r6, r0
100013da:	4180      	sbcs	r0, r0
100013dc:	4461      	add	r1, ip
100013de:	4240      	negs	r0, r0
100013e0:	1809      	adds	r1, r1, r0
100013e2:	0030      	movs	r0, r6
100013e4:	020b      	lsls	r3, r1, #8
100013e6:	d559      	bpl.n	1000149c <__aeabi_dsub+0x1f4>
100013e8:	2600      	movs	r6, #0
100013ea:	4b79      	ldr	r3, [pc, #484]	; (100015d0 <__aeabi_dsub+0x328>)
100013ec:	3401      	adds	r4, #1
100013ee:	46b4      	mov	ip, r6
100013f0:	429c      	cmp	r4, r3
100013f2:	d1bd      	bne.n	10001370 <__aeabi_dsub+0xc8>
100013f4:	4b79      	ldr	r3, [pc, #484]	; (100015dc <__aeabi_dsub+0x334>)
100013f6:	0524      	lsls	r4, r4, #20
100013f8:	401c      	ands	r4, r3
100013fa:	4663      	mov	r3, ip
100013fc:	031b      	lsls	r3, r3, #12
100013fe:	0b1b      	lsrs	r3, r3, #12
10001400:	431c      	orrs	r4, r3
10001402:	9b02      	ldr	r3, [sp, #8]
10001404:	0030      	movs	r0, r6
10001406:	07db      	lsls	r3, r3, #31
10001408:	431c      	orrs	r4, r3
1000140a:	0021      	movs	r1, r4
1000140c:	b005      	add	sp, #20
1000140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001410:	003d      	movs	r5, r7
10001412:	001e      	movs	r6, r3
10001414:	3d20      	subs	r5, #32
10001416:	40ee      	lsrs	r6, r5
10001418:	2500      	movs	r5, #0
1000141a:	2f20      	cmp	r7, #32
1000141c:	d003      	beq.n	10001426 <__aeabi_dsub+0x17e>
1000141e:	3540      	adds	r5, #64	; 0x40
10001420:	1bed      	subs	r5, r5, r7
10001422:	40ab      	lsls	r3, r5
10001424:	001d      	movs	r5, r3
10001426:	4315      	orrs	r5, r2
10001428:	1e6b      	subs	r3, r5, #1
1000142a:	419d      	sbcs	r5, r3
1000142c:	2300      	movs	r3, #0
1000142e:	432e      	orrs	r6, r5
10001430:	e7cc      	b.n	100013cc <__aeabi_dsub+0x124>
10001432:	2d00      	cmp	r5, #0
10001434:	d06a      	beq.n	1000150c <__aeabi_dsub+0x264>
10001436:	4665      	mov	r5, ip
10001438:	1b2d      	subs	r5, r5, r4
1000143a:	2c00      	cmp	r4, #0
1000143c:	d01e      	beq.n	1000147c <__aeabi_dsub+0x1d4>
1000143e:	2400      	movs	r4, #0
10001440:	2601      	movs	r6, #1
10001442:	2d38      	cmp	r5, #56	; 0x38
10001444:	dc12      	bgt.n	1000146c <__aeabi_dsub+0x1c4>
10001446:	2480      	movs	r4, #128	; 0x80
10001448:	0424      	lsls	r4, r4, #16
1000144a:	4321      	orrs	r1, r4
1000144c:	2d1f      	cmp	r5, #31
1000144e:	dc4b      	bgt.n	100014e8 <__aeabi_dsub+0x240>
10001450:	2420      	movs	r4, #32
10001452:	000f      	movs	r7, r1
10001454:	0006      	movs	r6, r0
10001456:	1b64      	subs	r4, r4, r5
10001458:	40a0      	lsls	r0, r4
1000145a:	40a7      	lsls	r7, r4
1000145c:	40ee      	lsrs	r6, r5
1000145e:	4337      	orrs	r7, r6
10001460:	0006      	movs	r6, r0
10001462:	40e9      	lsrs	r1, r5
10001464:	1e70      	subs	r0, r6, #1
10001466:	4186      	sbcs	r6, r0
10001468:	000c      	movs	r4, r1
1000146a:	433e      	orrs	r6, r7
1000146c:	18b0      	adds	r0, r6, r2
1000146e:	4290      	cmp	r0, r2
10001470:	4192      	sbcs	r2, r2
10001472:	18e4      	adds	r4, r4, r3
10001474:	4252      	negs	r2, r2
10001476:	18a1      	adds	r1, r4, r2
10001478:	4664      	mov	r4, ip
1000147a:	e7b3      	b.n	100013e4 <__aeabi_dsub+0x13c>
1000147c:	002c      	movs	r4, r5
1000147e:	000d      	movs	r5, r1
10001480:	4305      	orrs	r5, r0
10001482:	d029      	beq.n	100014d8 <__aeabi_dsub+0x230>
10001484:	1e65      	subs	r5, r4, #1
10001486:	2c01      	cmp	r4, #1
10001488:	d123      	bne.n	100014d2 <__aeabi_dsub+0x22a>
1000148a:	1880      	adds	r0, r0, r2
1000148c:	4290      	cmp	r0, r2
1000148e:	4192      	sbcs	r2, r2
10001490:	18c9      	adds	r1, r1, r3
10001492:	4252      	negs	r2, r2
10001494:	1889      	adds	r1, r1, r2
10001496:	020b      	lsls	r3, r1, #8
10001498:	d500      	bpl.n	1000149c <__aeabi_dsub+0x1f4>
1000149a:	e768      	b.n	1000136e <__aeabi_dsub+0xc6>
1000149c:	0743      	lsls	r3, r0, #29
1000149e:	d009      	beq.n	100014b4 <__aeabi_dsub+0x20c>
100014a0:	230f      	movs	r3, #15
100014a2:	4003      	ands	r3, r0
100014a4:	2b04      	cmp	r3, #4
100014a6:	d005      	beq.n	100014b4 <__aeabi_dsub+0x20c>
100014a8:	1d03      	adds	r3, r0, #4
100014aa:	4283      	cmp	r3, r0
100014ac:	4180      	sbcs	r0, r0
100014ae:	4240      	negs	r0, r0
100014b0:	1809      	adds	r1, r1, r0
100014b2:	0018      	movs	r0, r3
100014b4:	020b      	lsls	r3, r1, #8
100014b6:	d400      	bmi.n	100014ba <__aeabi_dsub+0x212>
100014b8:	e1e4      	b.n	10001884 <__aeabi_dsub+0x5dc>
100014ba:	2600      	movs	r6, #0
100014bc:	4b44      	ldr	r3, [pc, #272]	; (100015d0 <__aeabi_dsub+0x328>)
100014be:	3401      	adds	r4, #1
100014c0:	46b4      	mov	ip, r6
100014c2:	429c      	cmp	r4, r3
100014c4:	d096      	beq.n	100013f4 <__aeabi_dsub+0x14c>
100014c6:	4b44      	ldr	r3, [pc, #272]	; (100015d8 <__aeabi_dsub+0x330>)
100014c8:	08c0      	lsrs	r0, r0, #3
100014ca:	400b      	ands	r3, r1
100014cc:	075e      	lsls	r6, r3, #29
100014ce:	4306      	orrs	r6, r0
100014d0:	e1cd      	b.n	1000186e <__aeabi_dsub+0x5c6>
100014d2:	4e3f      	ldr	r6, [pc, #252]	; (100015d0 <__aeabi_dsub+0x328>)
100014d4:	42b4      	cmp	r4, r6
100014d6:	d102      	bne.n	100014de <__aeabi_dsub+0x236>
100014d8:	0019      	movs	r1, r3
100014da:	0010      	movs	r0, r2
100014dc:	e7de      	b.n	1000149c <__aeabi_dsub+0x1f4>
100014de:	2d38      	cmp	r5, #56	; 0x38
100014e0:	ddb4      	ble.n	1000144c <__aeabi_dsub+0x1a4>
100014e2:	2400      	movs	r4, #0
100014e4:	2601      	movs	r6, #1
100014e6:	e7c1      	b.n	1000146c <__aeabi_dsub+0x1c4>
100014e8:	002c      	movs	r4, r5
100014ea:	000e      	movs	r6, r1
100014ec:	3c20      	subs	r4, #32
100014ee:	40e6      	lsrs	r6, r4
100014f0:	0034      	movs	r4, r6
100014f2:	2600      	movs	r6, #0
100014f4:	2d20      	cmp	r5, #32
100014f6:	d003      	beq.n	10001500 <__aeabi_dsub+0x258>
100014f8:	3640      	adds	r6, #64	; 0x40
100014fa:	1b76      	subs	r6, r6, r5
100014fc:	40b1      	lsls	r1, r6
100014fe:	000e      	movs	r6, r1
10001500:	4306      	orrs	r6, r0
10001502:	1e71      	subs	r1, r6, #1
10001504:	418e      	sbcs	r6, r1
10001506:	4326      	orrs	r6, r4
10001508:	2400      	movs	r4, #0
1000150a:	e7af      	b.n	1000146c <__aeabi_dsub+0x1c4>
1000150c:	4e34      	ldr	r6, [pc, #208]	; (100015e0 <__aeabi_dsub+0x338>)
1000150e:	1c65      	adds	r5, r4, #1
10001510:	4235      	tst	r5, r6
10001512:	d133      	bne.n	1000157c <__aeabi_dsub+0x2d4>
10001514:	000d      	movs	r5, r1
10001516:	4305      	orrs	r5, r0
10001518:	2c00      	cmp	r4, #0
1000151a:	d111      	bne.n	10001540 <__aeabi_dsub+0x298>
1000151c:	2d00      	cmp	r5, #0
1000151e:	d0db      	beq.n	100014d8 <__aeabi_dsub+0x230>
10001520:	001d      	movs	r5, r3
10001522:	4315      	orrs	r5, r2
10001524:	d0ba      	beq.n	1000149c <__aeabi_dsub+0x1f4>
10001526:	1882      	adds	r2, r0, r2
10001528:	4282      	cmp	r2, r0
1000152a:	4180      	sbcs	r0, r0
1000152c:	18c9      	adds	r1, r1, r3
1000152e:	4240      	negs	r0, r0
10001530:	1809      	adds	r1, r1, r0
10001532:	0010      	movs	r0, r2
10001534:	020b      	lsls	r3, r1, #8
10001536:	d5b1      	bpl.n	1000149c <__aeabi_dsub+0x1f4>
10001538:	4b27      	ldr	r3, [pc, #156]	; (100015d8 <__aeabi_dsub+0x330>)
1000153a:	3401      	adds	r4, #1
1000153c:	4019      	ands	r1, r3
1000153e:	e7ad      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001540:	2d00      	cmp	r5, #0
10001542:	d100      	bne.n	10001546 <__aeabi_dsub+0x29e>
10001544:	e19b      	b.n	1000187e <__aeabi_dsub+0x5d6>
10001546:	001c      	movs	r4, r3
10001548:	4314      	orrs	r4, r2
1000154a:	2c00      	cmp	r4, #0
1000154c:	d100      	bne.n	10001550 <__aeabi_dsub+0x2a8>
1000154e:	e71c      	b.n	1000138a <__aeabi_dsub+0xe2>
10001550:	074c      	lsls	r4, r1, #29
10001552:	08c0      	lsrs	r0, r0, #3
10001554:	4320      	orrs	r0, r4
10001556:	2480      	movs	r4, #128	; 0x80
10001558:	08c9      	lsrs	r1, r1, #3
1000155a:	0324      	lsls	r4, r4, #12
1000155c:	4221      	tst	r1, r4
1000155e:	d008      	beq.n	10001572 <__aeabi_dsub+0x2ca>
10001560:	08dd      	lsrs	r5, r3, #3
10001562:	4225      	tst	r5, r4
10001564:	d105      	bne.n	10001572 <__aeabi_dsub+0x2ca>
10001566:	0029      	movs	r1, r5
10001568:	075b      	lsls	r3, r3, #29
1000156a:	08d0      	lsrs	r0, r2, #3
1000156c:	4318      	orrs	r0, r3
1000156e:	9b00      	ldr	r3, [sp, #0]
10001570:	9302      	str	r3, [sp, #8]
10001572:	00cb      	lsls	r3, r1, #3
10001574:	0f41      	lsrs	r1, r0, #29
10001576:	4319      	orrs	r1, r3
10001578:	00c0      	lsls	r0, r0, #3
1000157a:	e706      	b.n	1000138a <__aeabi_dsub+0xe2>
1000157c:	4c14      	ldr	r4, [pc, #80]	; (100015d0 <__aeabi_dsub+0x328>)
1000157e:	42a5      	cmp	r5, r4
10001580:	d100      	bne.n	10001584 <__aeabi_dsub+0x2dc>
10001582:	e196      	b.n	100018b2 <__aeabi_dsub+0x60a>
10001584:	1882      	adds	r2, r0, r2
10001586:	4282      	cmp	r2, r0
10001588:	4180      	sbcs	r0, r0
1000158a:	18cb      	adds	r3, r1, r3
1000158c:	4240      	negs	r0, r0
1000158e:	181b      	adds	r3, r3, r0
10001590:	07d8      	lsls	r0, r3, #31
10001592:	0852      	lsrs	r2, r2, #1
10001594:	4310      	orrs	r0, r2
10001596:	0859      	lsrs	r1, r3, #1
10001598:	002c      	movs	r4, r5
1000159a:	e77f      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000159c:	2d00      	cmp	r5, #0
1000159e:	dd76      	ble.n	1000168e <__aeabi_dsub+0x3e6>
100015a0:	4666      	mov	r6, ip
100015a2:	2e00      	cmp	r6, #0
100015a4:	d12e      	bne.n	10001604 <__aeabi_dsub+0x35c>
100015a6:	001f      	movs	r7, r3
100015a8:	4317      	orrs	r7, r2
100015aa:	d0f5      	beq.n	10001598 <__aeabi_dsub+0x2f0>
100015ac:	1e6f      	subs	r7, r5, #1
100015ae:	2d01      	cmp	r5, #1
100015b0:	d118      	bne.n	100015e4 <__aeabi_dsub+0x33c>
100015b2:	1a82      	subs	r2, r0, r2
100015b4:	4290      	cmp	r0, r2
100015b6:	4180      	sbcs	r0, r0
100015b8:	1ac9      	subs	r1, r1, r3
100015ba:	4240      	negs	r0, r0
100015bc:	1a09      	subs	r1, r1, r0
100015be:	2401      	movs	r4, #1
100015c0:	0010      	movs	r0, r2
100015c2:	020b      	lsls	r3, r1, #8
100015c4:	d400      	bmi.n	100015c8 <__aeabi_dsub+0x320>
100015c6:	e769      	b.n	1000149c <__aeabi_dsub+0x1f4>
100015c8:	0249      	lsls	r1, r1, #9
100015ca:	0006      	movs	r6, r0
100015cc:	0a4d      	lsrs	r5, r1, #9
100015ce:	e102      	b.n	100017d6 <__aeabi_dsub+0x52e>
100015d0:	000007ff 	.word	0x000007ff
100015d4:	fffff801 	.word	0xfffff801
100015d8:	ff7fffff 	.word	0xff7fffff
100015dc:	7ff00000 	.word	0x7ff00000
100015e0:	000007fe 	.word	0x000007fe
100015e4:	4eb7      	ldr	r6, [pc, #732]	; (100018c4 <__aeabi_dsub+0x61c>)
100015e6:	42b5      	cmp	r5, r6
100015e8:	d100      	bne.n	100015ec <__aeabi_dsub+0x344>
100015ea:	e6ce      	b.n	1000138a <__aeabi_dsub+0xe2>
100015ec:	2601      	movs	r6, #1
100015ee:	2f38      	cmp	r7, #56	; 0x38
100015f0:	dd15      	ble.n	1000161e <__aeabi_dsub+0x376>
100015f2:	1b86      	subs	r6, r0, r6
100015f4:	4663      	mov	r3, ip
100015f6:	42b0      	cmp	r0, r6
100015f8:	4180      	sbcs	r0, r0
100015fa:	1ac9      	subs	r1, r1, r3
100015fc:	4240      	negs	r0, r0
100015fe:	1a09      	subs	r1, r1, r0
10001600:	0030      	movs	r0, r6
10001602:	e7de      	b.n	100015c2 <__aeabi_dsub+0x31a>
10001604:	4eaf      	ldr	r6, [pc, #700]	; (100018c4 <__aeabi_dsub+0x61c>)
10001606:	42b4      	cmp	r4, r6
10001608:	d100      	bne.n	1000160c <__aeabi_dsub+0x364>
1000160a:	e747      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000160c:	2600      	movs	r6, #0
1000160e:	46b4      	mov	ip, r6
10001610:	3601      	adds	r6, #1
10001612:	2d38      	cmp	r5, #56	; 0x38
10001614:	dced      	bgt.n	100015f2 <__aeabi_dsub+0x34a>
10001616:	2680      	movs	r6, #128	; 0x80
10001618:	002f      	movs	r7, r5
1000161a:	0436      	lsls	r6, r6, #16
1000161c:	4333      	orrs	r3, r6
1000161e:	2f1f      	cmp	r7, #31
10001620:	dc11      	bgt.n	10001646 <__aeabi_dsub+0x39e>
10001622:	2520      	movs	r5, #32
10001624:	001e      	movs	r6, r3
10001626:	1bed      	subs	r5, r5, r7
10001628:	40ae      	lsls	r6, r5
1000162a:	46b4      	mov	ip, r6
1000162c:	0016      	movs	r6, r2
1000162e:	9500      	str	r5, [sp, #0]
10001630:	40fe      	lsrs	r6, r7
10001632:	4665      	mov	r5, ip
10001634:	432e      	orrs	r6, r5
10001636:	9d00      	ldr	r5, [sp, #0]
10001638:	40fb      	lsrs	r3, r7
1000163a:	40aa      	lsls	r2, r5
1000163c:	1e55      	subs	r5, r2, #1
1000163e:	41aa      	sbcs	r2, r5
10001640:	4316      	orrs	r6, r2
10001642:	469c      	mov	ip, r3
10001644:	e7d5      	b.n	100015f2 <__aeabi_dsub+0x34a>
10001646:	003d      	movs	r5, r7
10001648:	001e      	movs	r6, r3
1000164a:	3d20      	subs	r5, #32
1000164c:	40ee      	lsrs	r6, r5
1000164e:	2500      	movs	r5, #0
10001650:	2f20      	cmp	r7, #32
10001652:	d003      	beq.n	1000165c <__aeabi_dsub+0x3b4>
10001654:	3540      	adds	r5, #64	; 0x40
10001656:	1bed      	subs	r5, r5, r7
10001658:	40ab      	lsls	r3, r5
1000165a:	001d      	movs	r5, r3
1000165c:	4315      	orrs	r5, r2
1000165e:	1e6b      	subs	r3, r5, #1
10001660:	419d      	sbcs	r5, r3
10001662:	2300      	movs	r3, #0
10001664:	432e      	orrs	r6, r5
10001666:	e7ec      	b.n	10001642 <__aeabi_dsub+0x39a>
10001668:	2e00      	cmp	r6, #0
1000166a:	d067      	beq.n	1000173c <__aeabi_dsub+0x494>
1000166c:	2c00      	cmp	r4, #0
1000166e:	d025      	beq.n	100016bc <__aeabi_dsub+0x414>
10001670:	0019      	movs	r1, r3
10001672:	0010      	movs	r0, r2
10001674:	4c93      	ldr	r4, [pc, #588]	; (100018c4 <__aeabi_dsub+0x61c>)
10001676:	9502      	str	r5, [sp, #8]
10001678:	e710      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000167a:	2e00      	cmp	r6, #0
1000167c:	d05e      	beq.n	1000173c <__aeabi_dsub+0x494>
1000167e:	2c00      	cmp	r4, #0
10001680:	d01f      	beq.n	100016c2 <__aeabi_dsub+0x41a>
10001682:	9903      	ldr	r1, [sp, #12]
10001684:	4c8f      	ldr	r4, [pc, #572]	; (100018c4 <__aeabi_dsub+0x61c>)
10001686:	0008      	movs	r0, r1
10001688:	9b00      	ldr	r3, [sp, #0]
1000168a:	9302      	str	r3, [sp, #8]
1000168c:	e706      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000168e:	2d00      	cmp	r5, #0
10001690:	d054      	beq.n	1000173c <__aeabi_dsub+0x494>
10001692:	4665      	mov	r5, ip
10001694:	1b2d      	subs	r5, r5, r4
10001696:	2c00      	cmp	r4, #0
10001698:	d11f      	bne.n	100016da <__aeabi_dsub+0x432>
1000169a:	9c00      	ldr	r4, [sp, #0]
1000169c:	9402      	str	r4, [sp, #8]
1000169e:	002c      	movs	r4, r5
100016a0:	000d      	movs	r5, r1
100016a2:	4305      	orrs	r5, r0
100016a4:	d100      	bne.n	100016a8 <__aeabi_dsub+0x400>
100016a6:	e717      	b.n	100014d8 <__aeabi_dsub+0x230>
100016a8:	1e65      	subs	r5, r4, #1
100016aa:	2c01      	cmp	r4, #1
100016ac:	d10c      	bne.n	100016c8 <__aeabi_dsub+0x420>
100016ae:	1a10      	subs	r0, r2, r0
100016b0:	4282      	cmp	r2, r0
100016b2:	4192      	sbcs	r2, r2
100016b4:	1a59      	subs	r1, r3, r1
100016b6:	4252      	negs	r2, r2
100016b8:	1a89      	subs	r1, r1, r2
100016ba:	e782      	b.n	100015c2 <__aeabi_dsub+0x31a>
100016bc:	9502      	str	r5, [sp, #8]
100016be:	4664      	mov	r4, ip
100016c0:	e7ee      	b.n	100016a0 <__aeabi_dsub+0x3f8>
100016c2:	9c00      	ldr	r4, [sp, #0]
100016c4:	9402      	str	r4, [sp, #8]
100016c6:	e7fa      	b.n	100016be <__aeabi_dsub+0x416>
100016c8:	4e7e      	ldr	r6, [pc, #504]	; (100018c4 <__aeabi_dsub+0x61c>)
100016ca:	42b4      	cmp	r4, r6
100016cc:	d100      	bne.n	100016d0 <__aeabi_dsub+0x428>
100016ce:	e703      	b.n	100014d8 <__aeabi_dsub+0x230>
100016d0:	2d38      	cmp	r5, #56	; 0x38
100016d2:	dd09      	ble.n	100016e8 <__aeabi_dsub+0x440>
100016d4:	2100      	movs	r1, #0
100016d6:	2601      	movs	r6, #1
100016d8:	e014      	b.n	10001704 <__aeabi_dsub+0x45c>
100016da:	2d38      	cmp	r5, #56	; 0x38
100016dc:	dc2b      	bgt.n	10001736 <__aeabi_dsub+0x48e>
100016de:	2480      	movs	r4, #128	; 0x80
100016e0:	0424      	lsls	r4, r4, #16
100016e2:	4321      	orrs	r1, r4
100016e4:	9c00      	ldr	r4, [sp, #0]
100016e6:	9402      	str	r4, [sp, #8]
100016e8:	2d1f      	cmp	r5, #31
100016ea:	dc13      	bgt.n	10001714 <__aeabi_dsub+0x46c>
100016ec:	2420      	movs	r4, #32
100016ee:	000f      	movs	r7, r1
100016f0:	1b64      	subs	r4, r4, r5
100016f2:	0006      	movs	r6, r0
100016f4:	40a0      	lsls	r0, r4
100016f6:	40a7      	lsls	r7, r4
100016f8:	40ee      	lsrs	r6, r5
100016fa:	1e44      	subs	r4, r0, #1
100016fc:	41a0      	sbcs	r0, r4
100016fe:	40e9      	lsrs	r1, r5
10001700:	433e      	orrs	r6, r7
10001702:	4306      	orrs	r6, r0
10001704:	1b90      	subs	r0, r2, r6
10001706:	4282      	cmp	r2, r0
10001708:	4192      	sbcs	r2, r2
1000170a:	1a59      	subs	r1, r3, r1
1000170c:	4252      	negs	r2, r2
1000170e:	4664      	mov	r4, ip
10001710:	1a89      	subs	r1, r1, r2
10001712:	e756      	b.n	100015c2 <__aeabi_dsub+0x31a>
10001714:	002c      	movs	r4, r5
10001716:	000e      	movs	r6, r1
10001718:	3c20      	subs	r4, #32
1000171a:	40e6      	lsrs	r6, r4
1000171c:	2400      	movs	r4, #0
1000171e:	2d20      	cmp	r5, #32
10001720:	d003      	beq.n	1000172a <__aeabi_dsub+0x482>
10001722:	3440      	adds	r4, #64	; 0x40
10001724:	1b64      	subs	r4, r4, r5
10001726:	40a1      	lsls	r1, r4
10001728:	000c      	movs	r4, r1
1000172a:	4304      	orrs	r4, r0
1000172c:	1e61      	subs	r1, r4, #1
1000172e:	418c      	sbcs	r4, r1
10001730:	2100      	movs	r1, #0
10001732:	4326      	orrs	r6, r4
10001734:	e7e6      	b.n	10001704 <__aeabi_dsub+0x45c>
10001736:	9900      	ldr	r1, [sp, #0]
10001738:	9102      	str	r1, [sp, #8]
1000173a:	e7cb      	b.n	100016d4 <__aeabi_dsub+0x42c>
1000173c:	4e62      	ldr	r6, [pc, #392]	; (100018c8 <__aeabi_dsub+0x620>)
1000173e:	1c65      	adds	r5, r4, #1
10001740:	4235      	tst	r5, r6
10001742:	d138      	bne.n	100017b6 <__aeabi_dsub+0x50e>
10001744:	001d      	movs	r5, r3
10001746:	4315      	orrs	r5, r2
10001748:	46ac      	mov	ip, r5
1000174a:	000d      	movs	r5, r1
1000174c:	4305      	orrs	r5, r0
1000174e:	2c00      	cmp	r4, #0
10001750:	d125      	bne.n	1000179e <__aeabi_dsub+0x4f6>
10001752:	2d00      	cmp	r5, #0
10001754:	d108      	bne.n	10001768 <__aeabi_dsub+0x4c0>
10001756:	4661      	mov	r1, ip
10001758:	0026      	movs	r6, r4
1000175a:	9402      	str	r4, [sp, #8]
1000175c:	2900      	cmp	r1, #0
1000175e:	d100      	bne.n	10001762 <__aeabi_dsub+0x4ba>
10001760:	e648      	b.n	100013f4 <__aeabi_dsub+0x14c>
10001762:	0019      	movs	r1, r3
10001764:	0010      	movs	r0, r2
10001766:	e78f      	b.n	10001688 <__aeabi_dsub+0x3e0>
10001768:	4665      	mov	r5, ip
1000176a:	2d00      	cmp	r5, #0
1000176c:	d100      	bne.n	10001770 <__aeabi_dsub+0x4c8>
1000176e:	e695      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001770:	1a86      	subs	r6, r0, r2
10001772:	42b0      	cmp	r0, r6
10001774:	41bf      	sbcs	r7, r7
10001776:	1acd      	subs	r5, r1, r3
10001778:	427f      	negs	r7, r7
1000177a:	1bed      	subs	r5, r5, r7
1000177c:	022f      	lsls	r7, r5, #8
1000177e:	d506      	bpl.n	1000178e <__aeabi_dsub+0x4e6>
10001780:	1a10      	subs	r0, r2, r0
10001782:	4282      	cmp	r2, r0
10001784:	4192      	sbcs	r2, r2
10001786:	1a59      	subs	r1, r3, r1
10001788:	4252      	negs	r2, r2
1000178a:	1a89      	subs	r1, r1, r2
1000178c:	e77c      	b.n	10001688 <__aeabi_dsub+0x3e0>
1000178e:	0033      	movs	r3, r6
10001790:	432b      	orrs	r3, r5
10001792:	469c      	mov	ip, r3
10001794:	d100      	bne.n	10001798 <__aeabi_dsub+0x4f0>
10001796:	e08f      	b.n	100018b8 <__aeabi_dsub+0x610>
10001798:	0029      	movs	r1, r5
1000179a:	0030      	movs	r0, r6
1000179c:	e67e      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000179e:	2d00      	cmp	r5, #0
100017a0:	d107      	bne.n	100017b2 <__aeabi_dsub+0x50a>
100017a2:	4661      	mov	r1, ip
100017a4:	2900      	cmp	r1, #0
100017a6:	d07a      	beq.n	1000189e <__aeabi_dsub+0x5f6>
100017a8:	0019      	movs	r1, r3
100017aa:	9b00      	ldr	r3, [sp, #0]
100017ac:	0010      	movs	r0, r2
100017ae:	9302      	str	r3, [sp, #8]
100017b0:	e5eb      	b.n	1000138a <__aeabi_dsub+0xe2>
100017b2:	4664      	mov	r4, ip
100017b4:	e6c9      	b.n	1000154a <__aeabi_dsub+0x2a2>
100017b6:	1a86      	subs	r6, r0, r2
100017b8:	42b0      	cmp	r0, r6
100017ba:	41bf      	sbcs	r7, r7
100017bc:	1acd      	subs	r5, r1, r3
100017be:	427f      	negs	r7, r7
100017c0:	1bed      	subs	r5, r5, r7
100017c2:	022f      	lsls	r7, r5, #8
100017c4:	d528      	bpl.n	10001818 <__aeabi_dsub+0x570>
100017c6:	1a16      	subs	r6, r2, r0
100017c8:	42b2      	cmp	r2, r6
100017ca:	4192      	sbcs	r2, r2
100017cc:	1a5b      	subs	r3, r3, r1
100017ce:	4252      	negs	r2, r2
100017d0:	1a9d      	subs	r5, r3, r2
100017d2:	9b00      	ldr	r3, [sp, #0]
100017d4:	9302      	str	r3, [sp, #8]
100017d6:	2d00      	cmp	r5, #0
100017d8:	d026      	beq.n	10001828 <__aeabi_dsub+0x580>
100017da:	0028      	movs	r0, r5
100017dc:	f7fe fd7e 	bl	100002dc <__clzsi2>
100017e0:	0003      	movs	r3, r0
100017e2:	3b08      	subs	r3, #8
100017e4:	2220      	movs	r2, #32
100017e6:	0031      	movs	r1, r6
100017e8:	1ad2      	subs	r2, r2, r3
100017ea:	409d      	lsls	r5, r3
100017ec:	40d1      	lsrs	r1, r2
100017ee:	4329      	orrs	r1, r5
100017f0:	0035      	movs	r5, r6
100017f2:	409d      	lsls	r5, r3
100017f4:	429c      	cmp	r4, r3
100017f6:	dc3d      	bgt.n	10001874 <__aeabi_dsub+0x5cc>
100017f8:	1b1a      	subs	r2, r3, r4
100017fa:	3201      	adds	r2, #1
100017fc:	2320      	movs	r3, #32
100017fe:	0008      	movs	r0, r1
10001800:	1a9b      	subs	r3, r3, r2
10001802:	002c      	movs	r4, r5
10001804:	409d      	lsls	r5, r3
10001806:	4098      	lsls	r0, r3
10001808:	40d4      	lsrs	r4, r2
1000180a:	1e6b      	subs	r3, r5, #1
1000180c:	419d      	sbcs	r5, r3
1000180e:	40d1      	lsrs	r1, r2
10001810:	4320      	orrs	r0, r4
10001812:	4328      	orrs	r0, r5
10001814:	2400      	movs	r4, #0
10001816:	e641      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001818:	0033      	movs	r3, r6
1000181a:	432b      	orrs	r3, r5
1000181c:	469c      	mov	ip, r3
1000181e:	d1da      	bne.n	100017d6 <__aeabi_dsub+0x52e>
10001820:	001e      	movs	r6, r3
10001822:	001c      	movs	r4, r3
10001824:	9302      	str	r3, [sp, #8]
10001826:	e5e5      	b.n	100013f4 <__aeabi_dsub+0x14c>
10001828:	0030      	movs	r0, r6
1000182a:	f7fe fd57 	bl	100002dc <__clzsi2>
1000182e:	0003      	movs	r3, r0
10001830:	3318      	adds	r3, #24
10001832:	2b1f      	cmp	r3, #31
10001834:	ddd6      	ble.n	100017e4 <__aeabi_dsub+0x53c>
10001836:	0031      	movs	r1, r6
10001838:	3808      	subs	r0, #8
1000183a:	4081      	lsls	r1, r0
1000183c:	429c      	cmp	r4, r3
1000183e:	dc12      	bgt.n	10001866 <__aeabi_dsub+0x5be>
10001840:	1b1b      	subs	r3, r3, r4
10001842:	1c5a      	adds	r2, r3, #1
10001844:	2a1f      	cmp	r2, #31
10001846:	ddd9      	ble.n	100017fc <__aeabi_dsub+0x554>
10001848:	000c      	movs	r4, r1
1000184a:	3b1f      	subs	r3, #31
1000184c:	40dc      	lsrs	r4, r3
1000184e:	0028      	movs	r0, r5
10001850:	2a20      	cmp	r2, #32
10001852:	d003      	beq.n	1000185c <__aeabi_dsub+0x5b4>
10001854:	2340      	movs	r3, #64	; 0x40
10001856:	1a9b      	subs	r3, r3, r2
10001858:	4099      	lsls	r1, r3
1000185a:	0008      	movs	r0, r1
1000185c:	1e43      	subs	r3, r0, #1
1000185e:	4198      	sbcs	r0, r3
10001860:	2100      	movs	r1, #0
10001862:	4320      	orrs	r0, r4
10001864:	e7d6      	b.n	10001814 <__aeabi_dsub+0x56c>
10001866:	1ae4      	subs	r4, r4, r3
10001868:	4b18      	ldr	r3, [pc, #96]	; (100018cc <__aeabi_dsub+0x624>)
1000186a:	400b      	ands	r3, r1
1000186c:	075e      	lsls	r6, r3, #29
1000186e:	08db      	lsrs	r3, r3, #3
10001870:	469c      	mov	ip, r3
10001872:	e5bf      	b.n	100013f4 <__aeabi_dsub+0x14c>
10001874:	1ae4      	subs	r4, r4, r3
10001876:	4b15      	ldr	r3, [pc, #84]	; (100018cc <__aeabi_dsub+0x624>)
10001878:	0028      	movs	r0, r5
1000187a:	4019      	ands	r1, r3
1000187c:	e60e      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000187e:	0019      	movs	r1, r3
10001880:	0010      	movs	r0, r2
10001882:	e582      	b.n	1000138a <__aeabi_dsub+0xe2>
10001884:	074b      	lsls	r3, r1, #29
10001886:	08c0      	lsrs	r0, r0, #3
10001888:	4303      	orrs	r3, r0
1000188a:	469c      	mov	ip, r3
1000188c:	4b0d      	ldr	r3, [pc, #52]	; (100018c4 <__aeabi_dsub+0x61c>)
1000188e:	4666      	mov	r6, ip
10001890:	08c9      	lsrs	r1, r1, #3
10001892:	429c      	cmp	r4, r3
10001894:	d113      	bne.n	100018be <__aeabi_dsub+0x616>
10001896:	430e      	orrs	r6, r1
10001898:	d104      	bne.n	100018a4 <__aeabi_dsub+0x5fc>
1000189a:	46b4      	mov	ip, r6
1000189c:	e5aa      	b.n	100013f4 <__aeabi_dsub+0x14c>
1000189e:	9102      	str	r1, [sp, #8]
100018a0:	2180      	movs	r1, #128	; 0x80
100018a2:	0309      	lsls	r1, r1, #12
100018a4:	2380      	movs	r3, #128	; 0x80
100018a6:	031b      	lsls	r3, r3, #12
100018a8:	430b      	orrs	r3, r1
100018aa:	4666      	mov	r6, ip
100018ac:	4c05      	ldr	r4, [pc, #20]	; (100018c4 <__aeabi_dsub+0x61c>)
100018ae:	469c      	mov	ip, r3
100018b0:	e5a0      	b.n	100013f4 <__aeabi_dsub+0x14c>
100018b2:	2600      	movs	r6, #0
100018b4:	4c03      	ldr	r4, [pc, #12]	; (100018c4 <__aeabi_dsub+0x61c>)
100018b6:	e7f0      	b.n	1000189a <__aeabi_dsub+0x5f2>
100018b8:	0026      	movs	r6, r4
100018ba:	9402      	str	r4, [sp, #8]
100018bc:	e59a      	b.n	100013f4 <__aeabi_dsub+0x14c>
100018be:	468c      	mov	ip, r1
100018c0:	e598      	b.n	100013f4 <__aeabi_dsub+0x14c>
100018c2:	46c0      	nop			; (mov r8, r8)
100018c4:	000007ff 	.word	0x000007ff
100018c8:	000007fe 	.word	0x000007fe
100018cc:	ff7fffff 	.word	0xff7fffff

100018d0 <__aeabi_ui2d>:
100018d0:	b510      	push	{r4, lr}
100018d2:	0003      	movs	r3, r0
100018d4:	0004      	movs	r4, r0
100018d6:	1e02      	subs	r2, r0, #0
100018d8:	d00c      	beq.n	100018f4 <__aeabi_ui2d+0x24>
100018da:	f7fe fcff 	bl	100002dc <__clzsi2>
100018de:	4a0b      	ldr	r2, [pc, #44]	; (1000190c <__aeabi_ui2d+0x3c>)
100018e0:	1a12      	subs	r2, r2, r0
100018e2:	280a      	cmp	r0, #10
100018e4:	dc0d      	bgt.n	10001902 <__aeabi_ui2d+0x32>
100018e6:	230b      	movs	r3, #11
100018e8:	0021      	movs	r1, r4
100018ea:	1a1b      	subs	r3, r3, r0
100018ec:	40d9      	lsrs	r1, r3
100018ee:	3015      	adds	r0, #21
100018f0:	000b      	movs	r3, r1
100018f2:	4084      	lsls	r4, r0
100018f4:	031b      	lsls	r3, r3, #12
100018f6:	0b1b      	lsrs	r3, r3, #12
100018f8:	0512      	lsls	r2, r2, #20
100018fa:	431a      	orrs	r2, r3
100018fc:	0020      	movs	r0, r4
100018fe:	0011      	movs	r1, r2
10001900:	bd10      	pop	{r4, pc}
10001902:	0023      	movs	r3, r4
10001904:	380b      	subs	r0, #11
10001906:	4083      	lsls	r3, r0
10001908:	2400      	movs	r4, #0
1000190a:	e7f3      	b.n	100018f4 <__aeabi_ui2d+0x24>
1000190c:	0000041e 	.word	0x0000041e

10001910 <__aeabi_f2d>:
10001910:	22fe      	movs	r2, #254	; 0xfe
10001912:	b570      	push	{r4, r5, r6, lr}
10001914:	0044      	lsls	r4, r0, #1
10001916:	0e24      	lsrs	r4, r4, #24
10001918:	0243      	lsls	r3, r0, #9
1000191a:	1c61      	adds	r1, r4, #1
1000191c:	0a5d      	lsrs	r5, r3, #9
1000191e:	0fc6      	lsrs	r6, r0, #31
10001920:	4211      	tst	r1, r2
10001922:	d00d      	beq.n	10001940 <__aeabi_f2d+0x30>
10001924:	22e0      	movs	r2, #224	; 0xe0
10001926:	0092      	lsls	r2, r2, #2
10001928:	18a4      	adds	r4, r4, r2
1000192a:	0b1b      	lsrs	r3, r3, #12
1000192c:	076d      	lsls	r5, r5, #29
1000192e:	031b      	lsls	r3, r3, #12
10001930:	0b1b      	lsrs	r3, r3, #12
10001932:	0524      	lsls	r4, r4, #20
10001934:	07f6      	lsls	r6, r6, #31
10001936:	431c      	orrs	r4, r3
10001938:	4334      	orrs	r4, r6
1000193a:	0028      	movs	r0, r5
1000193c:	0021      	movs	r1, r4
1000193e:	bd70      	pop	{r4, r5, r6, pc}
10001940:	2c00      	cmp	r4, #0
10001942:	d118      	bne.n	10001976 <__aeabi_f2d+0x66>
10001944:	0023      	movs	r3, r4
10001946:	2d00      	cmp	r5, #0
10001948:	d0f1      	beq.n	1000192e <__aeabi_f2d+0x1e>
1000194a:	0028      	movs	r0, r5
1000194c:	f7fe fcc6 	bl	100002dc <__clzsi2>
10001950:	280a      	cmp	r0, #10
10001952:	dc0a      	bgt.n	1000196a <__aeabi_f2d+0x5a>
10001954:	230b      	movs	r3, #11
10001956:	002a      	movs	r2, r5
10001958:	1a1b      	subs	r3, r3, r0
1000195a:	40da      	lsrs	r2, r3
1000195c:	0013      	movs	r3, r2
1000195e:	0002      	movs	r2, r0
10001960:	3215      	adds	r2, #21
10001962:	4095      	lsls	r5, r2
10001964:	4c09      	ldr	r4, [pc, #36]	; (1000198c <__aeabi_f2d+0x7c>)
10001966:	1a24      	subs	r4, r4, r0
10001968:	e7e1      	b.n	1000192e <__aeabi_f2d+0x1e>
1000196a:	0003      	movs	r3, r0
1000196c:	3b0b      	subs	r3, #11
1000196e:	409d      	lsls	r5, r3
10001970:	002b      	movs	r3, r5
10001972:	0025      	movs	r5, r4
10001974:	e7f6      	b.n	10001964 <__aeabi_f2d+0x54>
10001976:	2d00      	cmp	r5, #0
10001978:	d006      	beq.n	10001988 <__aeabi_f2d+0x78>
1000197a:	0b1a      	lsrs	r2, r3, #12
1000197c:	2380      	movs	r3, #128	; 0x80
1000197e:	031b      	lsls	r3, r3, #12
10001980:	076d      	lsls	r5, r5, #29
10001982:	4313      	orrs	r3, r2
10001984:	4c02      	ldr	r4, [pc, #8]	; (10001990 <__aeabi_f2d+0x80>)
10001986:	e7d2      	b.n	1000192e <__aeabi_f2d+0x1e>
10001988:	002b      	movs	r3, r5
1000198a:	e7fb      	b.n	10001984 <__aeabi_f2d+0x74>
1000198c:	00000389 	.word	0x00000389
10001990:	000007ff 	.word	0x000007ff

10001994 <__aeabi_d2f>:
10001994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001996:	030b      	lsls	r3, r1, #12
10001998:	004a      	lsls	r2, r1, #1
1000199a:	0a5b      	lsrs	r3, r3, #9
1000199c:	0f46      	lsrs	r6, r0, #29
1000199e:	0d52      	lsrs	r2, r2, #21
100019a0:	431e      	orrs	r6, r3
100019a2:	1c53      	adds	r3, r2, #1
100019a4:	469c      	mov	ip, r3
100019a6:	0004      	movs	r4, r0
100019a8:	00c7      	lsls	r7, r0, #3
100019aa:	483c      	ldr	r0, [pc, #240]	; (10001a9c <__aeabi_d2f+0x108>)
100019ac:	0fc9      	lsrs	r1, r1, #31
100019ae:	4003      	ands	r3, r0
100019b0:	9301      	str	r3, [sp, #4]
100019b2:	4663      	mov	r3, ip
100019b4:	4203      	tst	r3, r0
100019b6:	d049      	beq.n	10001a4c <__aeabi_d2f+0xb8>
100019b8:	4b39      	ldr	r3, [pc, #228]	; (10001aa0 <__aeabi_d2f+0x10c>)
100019ba:	18d0      	adds	r0, r2, r3
100019bc:	28fe      	cmp	r0, #254	; 0xfe
100019be:	dc68      	bgt.n	10001a92 <__aeabi_d2f+0xfe>
100019c0:	2800      	cmp	r0, #0
100019c2:	dc37      	bgt.n	10001a34 <__aeabi_d2f+0xa0>
100019c4:	0003      	movs	r3, r0
100019c6:	3317      	adds	r3, #23
100019c8:	db65      	blt.n	10001a96 <__aeabi_d2f+0x102>
100019ca:	2480      	movs	r4, #128	; 0x80
100019cc:	251e      	movs	r5, #30
100019ce:	0424      	lsls	r4, r4, #16
100019d0:	4334      	orrs	r4, r6
100019d2:	1a2d      	subs	r5, r5, r0
100019d4:	2d1f      	cmp	r5, #31
100019d6:	dc10      	bgt.n	100019fa <__aeabi_d2f+0x66>
100019d8:	4b32      	ldr	r3, [pc, #200]	; (10001aa4 <__aeabi_d2f+0x110>)
100019da:	18d2      	adds	r2, r2, r3
100019dc:	003b      	movs	r3, r7
100019de:	4097      	lsls	r7, r2
100019e0:	4094      	lsls	r4, r2
100019e2:	1e78      	subs	r0, r7, #1
100019e4:	4187      	sbcs	r7, r0
100019e6:	40eb      	lsrs	r3, r5
100019e8:	4327      	orrs	r7, r4
100019ea:	433b      	orrs	r3, r7
100019ec:	2407      	movs	r4, #7
100019ee:	001a      	movs	r2, r3
100019f0:	4022      	ands	r2, r4
100019f2:	4223      	tst	r3, r4
100019f4:	d13b      	bne.n	10001a6e <__aeabi_d2f+0xda>
100019f6:	08db      	lsrs	r3, r3, #3
100019f8:	e032      	b.n	10001a60 <__aeabi_d2f+0xcc>
100019fa:	2302      	movs	r3, #2
100019fc:	425b      	negs	r3, r3
100019fe:	1a1b      	subs	r3, r3, r0
10001a00:	0020      	movs	r0, r4
10001a02:	40d8      	lsrs	r0, r3
10001a04:	0003      	movs	r3, r0
10001a06:	2000      	movs	r0, #0
10001a08:	2d20      	cmp	r5, #32
10001a0a:	d003      	beq.n	10001a14 <__aeabi_d2f+0x80>
10001a0c:	4826      	ldr	r0, [pc, #152]	; (10001aa8 <__aeabi_d2f+0x114>)
10001a0e:	1812      	adds	r2, r2, r0
10001a10:	0020      	movs	r0, r4
10001a12:	4090      	lsls	r0, r2
10001a14:	4338      	orrs	r0, r7
10001a16:	1e42      	subs	r2, r0, #1
10001a18:	4190      	sbcs	r0, r2
10001a1a:	4303      	orrs	r3, r0
10001a1c:	2407      	movs	r4, #7
10001a1e:	001a      	movs	r2, r3
10001a20:	4022      	ands	r2, r4
10001a22:	4223      	tst	r3, r4
10001a24:	d0e7      	beq.n	100019f6 <__aeabi_d2f+0x62>
10001a26:	220f      	movs	r2, #15
10001a28:	401a      	ands	r2, r3
10001a2a:	2a04      	cmp	r2, #4
10001a2c:	d024      	beq.n	10001a78 <__aeabi_d2f+0xe4>
10001a2e:	2000      	movs	r0, #0
10001a30:	3304      	adds	r3, #4
10001a32:	e008      	b.n	10001a46 <__aeabi_d2f+0xb2>
10001a34:	01a4      	lsls	r4, r4, #6
10001a36:	1e62      	subs	r2, r4, #1
10001a38:	4194      	sbcs	r4, r2
10001a3a:	00f6      	lsls	r6, r6, #3
10001a3c:	0f7b      	lsrs	r3, r7, #29
10001a3e:	4334      	orrs	r4, r6
10001a40:	4323      	orrs	r3, r4
10001a42:	075a      	lsls	r2, r3, #29
10001a44:	d11b      	bne.n	10001a7e <__aeabi_d2f+0xea>
10001a46:	0002      	movs	r2, r0
10001a48:	08db      	lsrs	r3, r3, #3
10001a4a:	e009      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a4c:	9b01      	ldr	r3, [sp, #4]
10001a4e:	2a00      	cmp	r2, #0
10001a50:	d006      	beq.n	10001a60 <__aeabi_d2f+0xcc>
10001a52:	003b      	movs	r3, r7
10001a54:	22ff      	movs	r2, #255	; 0xff
10001a56:	4333      	orrs	r3, r6
10001a58:	d002      	beq.n	10001a60 <__aeabi_d2f+0xcc>
10001a5a:	2380      	movs	r3, #128	; 0x80
10001a5c:	03db      	lsls	r3, r3, #15
10001a5e:	4333      	orrs	r3, r6
10001a60:	025b      	lsls	r3, r3, #9
10001a62:	05d0      	lsls	r0, r2, #23
10001a64:	0a5b      	lsrs	r3, r3, #9
10001a66:	4318      	orrs	r0, r3
10001a68:	07c9      	lsls	r1, r1, #31
10001a6a:	4308      	orrs	r0, r1
10001a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001a6e:	220f      	movs	r2, #15
10001a70:	2000      	movs	r0, #0
10001a72:	401a      	ands	r2, r3
10001a74:	2a04      	cmp	r2, #4
10001a76:	d106      	bne.n	10001a86 <__aeabi_d2f+0xf2>
10001a78:	2200      	movs	r2, #0
10001a7a:	08db      	lsrs	r3, r3, #3
10001a7c:	e7f0      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a7e:	220f      	movs	r2, #15
10001a80:	401a      	ands	r2, r3
10001a82:	2a04      	cmp	r2, #4
10001a84:	d0df      	beq.n	10001a46 <__aeabi_d2f+0xb2>
10001a86:	3304      	adds	r3, #4
10001a88:	015a      	lsls	r2, r3, #5
10001a8a:	d5dc      	bpl.n	10001a46 <__aeabi_d2f+0xb2>
10001a8c:	1c42      	adds	r2, r0, #1
10001a8e:	2300      	movs	r3, #0
10001a90:	e7e6      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a92:	22ff      	movs	r2, #255	; 0xff
10001a94:	e7fb      	b.n	10001a8e <__aeabi_d2f+0xfa>
10001a96:	2200      	movs	r2, #0
10001a98:	0013      	movs	r3, r2
10001a9a:	e7e1      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a9c:	000007fe 	.word	0x000007fe
10001aa0:	fffffc80 	.word	0xfffffc80
10001aa4:	fffffc82 	.word	0xfffffc82
10001aa8:	fffffca2 	.word	0xfffffca2

10001aac <__aeabi_llsr>:
10001aac:	40d0      	lsrs	r0, r2
10001aae:	000b      	movs	r3, r1
10001ab0:	40d1      	lsrs	r1, r2
10001ab2:	469c      	mov	ip, r3
10001ab4:	3a20      	subs	r2, #32
10001ab6:	40d3      	lsrs	r3, r2
10001ab8:	4318      	orrs	r0, r3
10001aba:	4252      	negs	r2, r2
10001abc:	4663      	mov	r3, ip
10001abe:	4093      	lsls	r3, r2
10001ac0:	4318      	orrs	r0, r3
10001ac2:	4770      	bx	lr

10001ac4 <__aeabi_llsl>:
10001ac4:	4091      	lsls	r1, r2
10001ac6:	0003      	movs	r3, r0
10001ac8:	4090      	lsls	r0, r2
10001aca:	469c      	mov	ip, r3
10001acc:	3a20      	subs	r2, #32
10001ace:	4093      	lsls	r3, r2
10001ad0:	4319      	orrs	r1, r3
10001ad2:	4252      	negs	r2, r2
10001ad4:	4663      	mov	r3, ip
10001ad6:	40d3      	lsrs	r3, r2
10001ad8:	4319      	orrs	r1, r3
10001ada:	4770      	bx	lr

10001adc <__clzdi2>:
10001adc:	b510      	push	{r4, lr}
10001ade:	2900      	cmp	r1, #0
10001ae0:	d103      	bne.n	10001aea <__clzdi2+0xe>
10001ae2:	f7fe fbfb 	bl	100002dc <__clzsi2>
10001ae6:	3020      	adds	r0, #32
10001ae8:	e002      	b.n	10001af0 <__clzdi2+0x14>
10001aea:	0008      	movs	r0, r1
10001aec:	f7fe fbf6 	bl	100002dc <__clzsi2>
10001af0:	bd10      	pop	{r4, pc}
10001af2:	46c0      	nop			; (mov r8, r8)

10001af4 <__aeabi_d2uiz>:
10001af4:	b570      	push	{r4, r5, r6, lr}
10001af6:	2200      	movs	r2, #0
10001af8:	4b0b      	ldr	r3, [pc, #44]	; (10001b28 <__aeabi_d2uiz+0x34>)
10001afa:	0004      	movs	r4, r0
10001afc:	000d      	movs	r5, r1
10001afe:	f7fe fbe3 	bl	100002c8 <__aeabi_dcmpge>
10001b02:	2800      	cmp	r0, #0
10001b04:	d00b      	beq.n	10001b1e <__aeabi_d2uiz+0x2a>
10001b06:	4b08      	ldr	r3, [pc, #32]	; (10001b28 <__aeabi_d2uiz+0x34>)
10001b08:	2200      	movs	r2, #0
10001b0a:	0020      	movs	r0, r4
10001b0c:	0029      	movs	r1, r5
10001b0e:	f7ff fbcb 	bl	100012a8 <__aeabi_dsub>
10001b12:	f000 f80b 	bl	10001b2c <__aeabi_d2iz>
10001b16:	2380      	movs	r3, #128	; 0x80
10001b18:	061b      	lsls	r3, r3, #24
10001b1a:	18c0      	adds	r0, r0, r3
10001b1c:	bd70      	pop	{r4, r5, r6, pc}
10001b1e:	0020      	movs	r0, r4
10001b20:	0029      	movs	r1, r5
10001b22:	f000 f803 	bl	10001b2c <__aeabi_d2iz>
10001b26:	e7f9      	b.n	10001b1c <__aeabi_d2uiz+0x28>
10001b28:	41e00000 	.word	0x41e00000

10001b2c <__aeabi_d2iz>:
10001b2c:	000b      	movs	r3, r1
10001b2e:	b570      	push	{r4, r5, r6, lr}
10001b30:	4e11      	ldr	r6, [pc, #68]	; (10001b78 <__aeabi_d2iz+0x4c>)
10001b32:	030c      	lsls	r4, r1, #12
10001b34:	0049      	lsls	r1, r1, #1
10001b36:	0002      	movs	r2, r0
10001b38:	0b24      	lsrs	r4, r4, #12
10001b3a:	2000      	movs	r0, #0
10001b3c:	0d49      	lsrs	r1, r1, #21
10001b3e:	0fdd      	lsrs	r5, r3, #31
10001b40:	42b1      	cmp	r1, r6
10001b42:	dd04      	ble.n	10001b4e <__aeabi_d2iz+0x22>
10001b44:	480d      	ldr	r0, [pc, #52]	; (10001b7c <__aeabi_d2iz+0x50>)
10001b46:	4281      	cmp	r1, r0
10001b48:	dd02      	ble.n	10001b50 <__aeabi_d2iz+0x24>
10001b4a:	4b0d      	ldr	r3, [pc, #52]	; (10001b80 <__aeabi_d2iz+0x54>)
10001b4c:	18e8      	adds	r0, r5, r3
10001b4e:	bd70      	pop	{r4, r5, r6, pc}
10001b50:	2080      	movs	r0, #128	; 0x80
10001b52:	0340      	lsls	r0, r0, #13
10001b54:	4320      	orrs	r0, r4
10001b56:	4c0b      	ldr	r4, [pc, #44]	; (10001b84 <__aeabi_d2iz+0x58>)
10001b58:	1a64      	subs	r4, r4, r1
10001b5a:	2c1f      	cmp	r4, #31
10001b5c:	dc08      	bgt.n	10001b70 <__aeabi_d2iz+0x44>
10001b5e:	4e0a      	ldr	r6, [pc, #40]	; (10001b88 <__aeabi_d2iz+0x5c>)
10001b60:	40e2      	lsrs	r2, r4
10001b62:	1989      	adds	r1, r1, r6
10001b64:	4088      	lsls	r0, r1
10001b66:	4310      	orrs	r0, r2
10001b68:	2d00      	cmp	r5, #0
10001b6a:	d0f0      	beq.n	10001b4e <__aeabi_d2iz+0x22>
10001b6c:	4240      	negs	r0, r0
10001b6e:	e7ee      	b.n	10001b4e <__aeabi_d2iz+0x22>
10001b70:	4b06      	ldr	r3, [pc, #24]	; (10001b8c <__aeabi_d2iz+0x60>)
10001b72:	1a5b      	subs	r3, r3, r1
10001b74:	40d8      	lsrs	r0, r3
10001b76:	e7f7      	b.n	10001b68 <__aeabi_d2iz+0x3c>
10001b78:	000003fe 	.word	0x000003fe
10001b7c:	0000041d 	.word	0x0000041d
10001b80:	7fffffff 	.word	0x7fffffff
10001b84:	00000433 	.word	0x00000433
10001b88:	fffffbed 	.word	0xfffffbed
10001b8c:	00000413 	.word	0x00000413

10001b90 <__aeabi_lmul>:
10001b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001b92:	0c04      	lsrs	r4, r0, #16
10001b94:	000d      	movs	r5, r1
10001b96:	b291      	uxth	r1, r2
10001b98:	000f      	movs	r7, r1
10001b9a:	4361      	muls	r1, r4
10001b9c:	468c      	mov	ip, r1
10001b9e:	0006      	movs	r6, r0
10001ba0:	9301      	str	r3, [sp, #4]
10001ba2:	b283      	uxth	r3, r0
10001ba4:	0c10      	lsrs	r0, r2, #16
10001ba6:	435f      	muls	r7, r3
10001ba8:	4344      	muls	r4, r0
10001baa:	4358      	muls	r0, r3
10001bac:	0c3b      	lsrs	r3, r7, #16
10001bae:	4460      	add	r0, ip
10001bb0:	181b      	adds	r3, r3, r0
10001bb2:	4299      	cmp	r1, r3
10001bb4:	d902      	bls.n	10001bbc <__aeabi_lmul+0x2c>
10001bb6:	2180      	movs	r1, #128	; 0x80
10001bb8:	0249      	lsls	r1, r1, #9
10001bba:	1864      	adds	r4, r4, r1
10001bbc:	9901      	ldr	r1, [sp, #4]
10001bbe:	4355      	muls	r5, r2
10001bc0:	4371      	muls	r1, r6
10001bc2:	0c18      	lsrs	r0, r3, #16
10001bc4:	1904      	adds	r4, r0, r4
10001bc6:	041b      	lsls	r3, r3, #16
10001bc8:	b2bf      	uxth	r7, r7
10001bca:	1949      	adds	r1, r1, r5
10001bcc:	19d8      	adds	r0, r3, r7
10001bce:	1909      	adds	r1, r1, r4
10001bd0:	b003      	add	sp, #12
10001bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001bd4 <__udivmoddi4>:
10001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10001bd6:	0006      	movs	r6, r0
10001bd8:	000f      	movs	r7, r1
10001bda:	0015      	movs	r5, r2
10001bdc:	001c      	movs	r4, r3
10001bde:	b085      	sub	sp, #20
10001be0:	428b      	cmp	r3, r1
10001be2:	d863      	bhi.n	10001cac <__udivmoddi4+0xd8>
10001be4:	d101      	bne.n	10001bea <__udivmoddi4+0x16>
10001be6:	4282      	cmp	r2, r0
10001be8:	d860      	bhi.n	10001cac <__udivmoddi4+0xd8>
10001bea:	0021      	movs	r1, r4
10001bec:	0028      	movs	r0, r5
10001bee:	f7ff ff75 	bl	10001adc <__clzdi2>
10001bf2:	0039      	movs	r1, r7
10001bf4:	9000      	str	r0, [sp, #0]
10001bf6:	0030      	movs	r0, r6
10001bf8:	f7ff ff70 	bl	10001adc <__clzdi2>
10001bfc:	9b00      	ldr	r3, [sp, #0]
10001bfe:	0021      	movs	r1, r4
10001c00:	1a1b      	subs	r3, r3, r0
10001c02:	001a      	movs	r2, r3
10001c04:	0028      	movs	r0, r5
10001c06:	9303      	str	r3, [sp, #12]
10001c08:	f7ff ff5c 	bl	10001ac4 <__aeabi_llsl>
10001c0c:	9000      	str	r0, [sp, #0]
10001c0e:	9101      	str	r1, [sp, #4]
10001c10:	42b9      	cmp	r1, r7
10001c12:	d845      	bhi.n	10001ca0 <__udivmoddi4+0xcc>
10001c14:	d101      	bne.n	10001c1a <__udivmoddi4+0x46>
10001c16:	42b0      	cmp	r0, r6
10001c18:	d842      	bhi.n	10001ca0 <__udivmoddi4+0xcc>
10001c1a:	9b00      	ldr	r3, [sp, #0]
10001c1c:	9c01      	ldr	r4, [sp, #4]
10001c1e:	2001      	movs	r0, #1
10001c20:	2100      	movs	r1, #0
10001c22:	9a03      	ldr	r2, [sp, #12]
10001c24:	1af6      	subs	r6, r6, r3
10001c26:	41a7      	sbcs	r7, r4
10001c28:	f7ff ff4c 	bl	10001ac4 <__aeabi_llsl>
10001c2c:	0004      	movs	r4, r0
10001c2e:	000d      	movs	r5, r1
10001c30:	9b03      	ldr	r3, [sp, #12]
10001c32:	2b00      	cmp	r3, #0
10001c34:	d02b      	beq.n	10001c8e <__udivmoddi4+0xba>
10001c36:	9b01      	ldr	r3, [sp, #4]
10001c38:	9a00      	ldr	r2, [sp, #0]
10001c3a:	07db      	lsls	r3, r3, #31
10001c3c:	0850      	lsrs	r0, r2, #1
10001c3e:	4318      	orrs	r0, r3
10001c40:	9b01      	ldr	r3, [sp, #4]
10001c42:	0859      	lsrs	r1, r3, #1
10001c44:	9b03      	ldr	r3, [sp, #12]
10001c46:	469c      	mov	ip, r3
10001c48:	42b9      	cmp	r1, r7
10001c4a:	d82c      	bhi.n	10001ca6 <__udivmoddi4+0xd2>
10001c4c:	d101      	bne.n	10001c52 <__udivmoddi4+0x7e>
10001c4e:	42b0      	cmp	r0, r6
10001c50:	d829      	bhi.n	10001ca6 <__udivmoddi4+0xd2>
10001c52:	0032      	movs	r2, r6
10001c54:	003b      	movs	r3, r7
10001c56:	1a12      	subs	r2, r2, r0
10001c58:	418b      	sbcs	r3, r1
10001c5a:	2601      	movs	r6, #1
10001c5c:	1892      	adds	r2, r2, r2
10001c5e:	415b      	adcs	r3, r3
10001c60:	2700      	movs	r7, #0
10001c62:	18b6      	adds	r6, r6, r2
10001c64:	415f      	adcs	r7, r3
10001c66:	2301      	movs	r3, #1
10001c68:	425b      	negs	r3, r3
10001c6a:	449c      	add	ip, r3
10001c6c:	4663      	mov	r3, ip
10001c6e:	2b00      	cmp	r3, #0
10001c70:	d1ea      	bne.n	10001c48 <__udivmoddi4+0x74>
10001c72:	0030      	movs	r0, r6
10001c74:	0039      	movs	r1, r7
10001c76:	9a03      	ldr	r2, [sp, #12]
10001c78:	f7ff ff18 	bl	10001aac <__aeabi_llsr>
10001c7c:	9a03      	ldr	r2, [sp, #12]
10001c7e:	19a4      	adds	r4, r4, r6
10001c80:	417d      	adcs	r5, r7
10001c82:	0006      	movs	r6, r0
10001c84:	000f      	movs	r7, r1
10001c86:	f7ff ff1d 	bl	10001ac4 <__aeabi_llsl>
10001c8a:	1a24      	subs	r4, r4, r0
10001c8c:	418d      	sbcs	r5, r1
10001c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001c90:	2b00      	cmp	r3, #0
10001c92:	d001      	beq.n	10001c98 <__udivmoddi4+0xc4>
10001c94:	601e      	str	r6, [r3, #0]
10001c96:	605f      	str	r7, [r3, #4]
10001c98:	0020      	movs	r0, r4
10001c9a:	0029      	movs	r1, r5
10001c9c:	b005      	add	sp, #20
10001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ca0:	2400      	movs	r4, #0
10001ca2:	2500      	movs	r5, #0
10001ca4:	e7c4      	b.n	10001c30 <__udivmoddi4+0x5c>
10001ca6:	19b6      	adds	r6, r6, r6
10001ca8:	417f      	adcs	r7, r7
10001caa:	e7dc      	b.n	10001c66 <__udivmoddi4+0x92>
10001cac:	2400      	movs	r4, #0
10001cae:	2500      	movs	r5, #0
10001cb0:	e7ed      	b.n	10001c8e <__udivmoddi4+0xba>
	...

10001cb4 <gpio_pin_configure_dt.constprop.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
10001cb4:	0003      	movs	r3, r0
10001cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
10001cb8:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
10001cba:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
10001cbc:	88db      	ldrh	r3, [r3, #6]
	const struct gpio_driver_api *api =
10001cbe:	6882      	ldr	r2, [r0, #8]
10001cc0:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
10001cc2:	6902      	ldr	r2, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
10001cc4:	07dc      	lsls	r4, r3, #31
10001cc6:	d415      	bmi.n	10001cf4 <gpio_pin_configure_dt.constprop.0+0x40>
	return gpio_pin_configure(spec->port,
10001cc8:	24d0      	movs	r4, #208	; 0xd0
10001cca:	0364      	lsls	r4, r4, #13
10001ccc:	4323      	orrs	r3, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001cce:	2701      	movs	r7, #1
10001cd0:	003d      	movs	r5, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001cd2:	4c0a      	ldr	r4, [pc, #40]	; (10001cfc <gpio_pin_configure_dt.constprop.0+0x48>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001cd4:	6816      	ldr	r6, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001cd6:	401c      	ands	r4, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001cd8:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001cda:	9401      	str	r4, [sp, #4]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001cdc:	0034      	movs	r4, r6
10001cde:	43ac      	bics	r4, r5
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001ce0:	423b      	tst	r3, r7
10001ce2:	d001      	beq.n	10001ce8 <gpio_pin_configure_dt.constprop.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001ce4:	0034      	movs	r4, r6
10001ce6:	432c      	orrs	r4, r5
	return api->pin_configure(port, pin, flags);
10001ce8:	4663      	mov	r3, ip
}
10001cea:	6014      	str	r4, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001cec:	681b      	ldr	r3, [r3, #0]
10001cee:	9a01      	ldr	r2, [sp, #4]
10001cf0:	4798      	blx	r3
}
10001cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
10001cf4:	24b0      	movs	r4, #176	; 0xb0
10001cf6:	0364      	lsls	r4, r4, #13
10001cf8:	4063      	eors	r3, r4
10001cfa:	e7e8      	b.n	10001cce <gpio_pin_configure_dt.constprop.0+0x1a>
10001cfc:	ffefffff 	.word	0xffefffff

10001d00 <gpio_pin_set.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10001d00:	2201      	movs	r2, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
10001d02:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10001d04:	0011      	movs	r1, r2
10001d06:	4081      	lsls	r1, r0
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
10001d08:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
10001d0a:	4807      	ldr	r0, [pc, #28]	; (10001d28 <gpio_pin_set.constprop.0.isra.0+0x28>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10001d0c:	6904      	ldr	r4, [r0, #16]
10001d0e:	6824      	ldr	r4, [r4, #0]
10001d10:	420c      	tst	r4, r1
10001d12:	d000      	beq.n	10001d16 <gpio_pin_set.constprop.0.isra.0+0x16>
		value = (value != 0) ? 0 : 1;
10001d14:	4053      	eors	r3, r2
	if (value != 0)	{
10001d16:	2b00      	cmp	r3, #0
10001d18:	d003      	beq.n	10001d22 <gpio_pin_set.constprop.0.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
10001d1a:	6883      	ldr	r3, [r0, #8]
10001d1c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10001d1e:	4798      	blx	r3
	}

	return gpio_pin_set_raw(port, pin, value);
}
10001d20:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10001d22:	6883      	ldr	r3, [r0, #8]
10001d24:	691b      	ldr	r3, [r3, #16]
10001d26:	e7fa      	b.n	10001d1e <gpio_pin_set.constprop.0.isra.0+0x1e>
10001d28:	100055fc 	.word	0x100055fc

10001d2c <pwm_set_dt.isra.0>:
 *
 * @return A value from pwm_set().
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
10001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001d2e:	6843      	ldr	r3, [r0, #4]
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
10001d30:	b08b      	sub	sp, #44	; 0x2c
10001d32:	9205      	str	r2, [sp, #20]
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001d34:	9303      	str	r3, [sp, #12]
10001d36:	8983      	ldrh	r3, [r0, #12]
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
10001d38:	000d      	movs	r5, r1
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001d3a:	6804      	ldr	r4, [r0, #0]
10001d3c:	9304      	str	r3, [sp, #16]
	return api->get_cycles_per_sec(dev, channel, cycles);
10001d3e:	68a3      	ldr	r3, [r4, #8]
10001d40:	0020      	movs	r0, r4
10001d42:	685b      	ldr	r3, [r3, #4]
10001d44:	9903      	ldr	r1, [sp, #12]
10001d46:	aa08      	add	r2, sp, #32
10001d48:	4798      	blx	r3
	if (err < 0) {
10001d4a:	2800      	cmp	r0, #0
10001d4c:	db2b      	blt.n	10001da6 <pwm_set_dt.isra.0+0x7a>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001d4e:	9e08      	ldr	r6, [sp, #32]
10001d50:	9f09      	ldr	r7, [sp, #36]	; 0x24
10001d52:	0028      	movs	r0, r5
10001d54:	0032      	movs	r2, r6
10001d56:	003b      	movs	r3, r7
10001d58:	2100      	movs	r1, #0
10001d5a:	f7ff ff19 	bl	10001b90 <__aeabi_lmul>
10001d5e:	2300      	movs	r3, #0
10001d60:	4a12      	ldr	r2, [pc, #72]	; (10001dac <pwm_set_dt.isra.0+0x80>)
10001d62:	9106      	str	r1, [sp, #24]
10001d64:	f7fe faf8 	bl	10000358 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10001d68:	9906      	ldr	r1, [sp, #24]
10001d6a:	4b11      	ldr	r3, [pc, #68]	; (10001db0 <pwm_set_dt.isra.0+0x84>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001d6c:	0005      	movs	r5, r0
10001d6e:	9007      	str	r0, [sp, #28]
	if (period_cycles > UINT32_MAX) {
10001d70:	4299      	cmp	r1, r3
10001d72:	d818      	bhi.n	10001da6 <pwm_set_dt.isra.0+0x7a>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001d74:	0032      	movs	r2, r6
10001d76:	003b      	movs	r3, r7
10001d78:	2100      	movs	r1, #0
10001d7a:	9805      	ldr	r0, [sp, #20]
10001d7c:	f7ff ff08 	bl	10001b90 <__aeabi_lmul>
10001d80:	2300      	movs	r3, #0
10001d82:	4a0a      	ldr	r2, [pc, #40]	; (10001dac <pwm_set_dt.isra.0+0x80>)
10001d84:	000e      	movs	r6, r1
10001d86:	f7fe fae7 	bl	10000358 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10001d8a:	4a09      	ldr	r2, [pc, #36]	; (10001db0 <pwm_set_dt.isra.0+0x84>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001d8c:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
10001d8e:	4296      	cmp	r6, r2
10001d90:	d809      	bhi.n	10001da6 <pwm_set_dt.isra.0+0x7a>
	const struct pwm_driver_api *api =
10001d92:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10001d94:	4285      	cmp	r5, r0
10001d96:	d306      	bcc.n	10001da6 <pwm_set_dt.isra.0+0x7a>
	return api->set_cycles(dev, channel, period, pulse, flags);
10001d98:	9904      	ldr	r1, [sp, #16]
10001d9a:	0020      	movs	r0, r4
10001d9c:	9100      	str	r1, [sp, #0]
10001d9e:	6816      	ldr	r6, [r2, #0]
10001da0:	9903      	ldr	r1, [sp, #12]
10001da2:	002a      	movs	r2, r5
10001da4:	47b0      	blx	r6
}
10001da6:	b00b      	add	sp, #44	; 0x2c
10001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001daa:	46c0      	nop			; (mov r8, r8)
10001dac:	3b9aca00 	.word	0x3b9aca00
10001db0:	3b9ac9ff 	.word	0x3b9ac9ff

10001db4 <inicio_motores>:

/**
 * @brief Inicia los puertos de los motores y  los pone todo en LOW
 * 
 */
void inicio_motores(){
10001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
  	int ret, ret1, ret2, ret3, ret4, ret5;
	int dr1a, dr2a, dr1b, dr2b, enab1, enab2;  
	int d0, d1;
	d0 = device_is_ready(pwm_led0.dev);
10001db6:	4c4e      	ldr	r4, [pc, #312]	; (10001ef0 <inicio_motores+0x13c>)
void inicio_motores(){
10001db8:	b085      	sub	sp, #20
	d0 = device_is_ready(pwm_led0.dev);
10001dba:	0020      	movs	r0, r4
10001dbc:	f002 ff05 	bl	10004bca <device_is_ready>
10001dc0:	0005      	movs	r5, r0
	d1 = device_is_ready(pwm_led1.dev);
10001dc2:	0020      	movs	r0, r4
10001dc4:	f002 ff01 	bl	10004bca <device_is_ready>

	if (!d0 || !d1 ) {
10001dc8:	2d00      	cmp	r5, #0
10001dca:	d001      	beq.n	10001dd0 <inicio_motores+0x1c>
10001dcc:	2800      	cmp	r0, #0
10001dce:	d10a      	bne.n	10001de6 <inicio_motores+0x32>
		printk("Error: PWM device %s is not ready\n",
		       pwm_led0.dev->name);
10001dd0:	6825      	ldr	r5, [r4, #0]
		printk("Error: PWM device %s is not ready\n",
10001dd2:	4c48      	ldr	r4, [pc, #288]	; (10001ef4 <inicio_motores+0x140>)
10001dd4:	0029      	movs	r1, r5
10001dd6:	0020      	movs	r0, r4
10001dd8:	f002 ff50 	bl	10004c7c <printk>
			   printk("Error: PWM device %s is not ready\n",
10001ddc:	0029      	movs	r1, r5
		printk("Error %d: failed to set pulse width\n", ret);
		printk("Error %d: failed to set pulse width\n", ret1);
		printk("Error %d: failed to set pulse width\n", ret2);
		printk("Error %d: failed to set pulse width\n", ret3);
        printk("Error %d: failed to set pulse width\n", ret4);
		printk("Error %d: failed to set pulse width\n", ret5);
10001dde:	0020      	movs	r0, r4
		printk("Error: PWM device %s is not ready\n",
		       pwm_led0.dev->name);
		return;
	}
        if (!device_is_ready(pwm_led1.dev)) {
		printk("Error: PWM device %s is not ready\n",
10001de0:	f002 ff4c 	bl	10004c7c <printk>
		       pwm_led0.dev->name);
		return;
10001de4:	e082      	b.n	10001eec <inicio_motores+0x138>
	dr1a = device_is_ready(ctr1A.port);
10001de6:	4d44      	ldr	r5, [pc, #272]	; (10001ef8 <inicio_motores+0x144>)
10001de8:	0028      	movs	r0, r5
10001dea:	f002 feee 	bl	10004bca <device_is_ready>
10001dee:	0007      	movs	r7, r0
	dr2a = device_is_ready(ctr2A.port);
10001df0:	0028      	movs	r0, r5
10001df2:	f002 feea 	bl	10004bca <device_is_ready>
10001df6:	0006      	movs	r6, r0
	dr1b = device_is_ready(ctr1B.port);
10001df8:	0028      	movs	r0, r5
10001dfa:	f002 fee6 	bl	10004bca <device_is_ready>
10001dfe:	9001      	str	r0, [sp, #4]
	dr2b = device_is_ready(ctr2B.port);
10001e00:	0028      	movs	r0, r5
10001e02:	f002 fee2 	bl	10004bca <device_is_ready>
10001e06:	9002      	str	r0, [sp, #8]
        enab1 = device_is_ready(enA.port);
10001e08:	0028      	movs	r0, r5
10001e0a:	f002 fede 	bl	10004bca <device_is_ready>
10001e0e:	9003      	str	r0, [sp, #12]
        enab2 = device_is_ready(enB.port);
10001e10:	0028      	movs	r0, r5
10001e12:	f002 feda 	bl	10004bca <device_is_ready>
	if (!dr1a || !dr2a || !dr1b ||!dr2b || !enab1 || !enab2) {
10001e16:	2f00      	cmp	r7, #0
10001e18:	d068      	beq.n	10001eec <inicio_motores+0x138>
10001e1a:	2e00      	cmp	r6, #0
10001e1c:	d066      	beq.n	10001eec <inicio_motores+0x138>
10001e1e:	9b01      	ldr	r3, [sp, #4]
10001e20:	2b00      	cmp	r3, #0
10001e22:	d063      	beq.n	10001eec <inicio_motores+0x138>
10001e24:	9b02      	ldr	r3, [sp, #8]
10001e26:	2b00      	cmp	r3, #0
10001e28:	d060      	beq.n	10001eec <inicio_motores+0x138>
10001e2a:	9b03      	ldr	r3, [sp, #12]
10001e2c:	2b00      	cmp	r3, #0
10001e2e:	d05d      	beq.n	10001eec <inicio_motores+0x138>
10001e30:	2800      	cmp	r0, #0
10001e32:	d05b      	beq.n	10001eec <inicio_motores+0x138>
	ret = gpio_pin_configure_dt(&ctr1A, GPIO_OUTPUT_ACTIVE);
10001e34:	4831      	ldr	r0, [pc, #196]	; (10001efc <inicio_motores+0x148>)
10001e36:	f7ff ff3d 	bl	10001cb4 <gpio_pin_configure_dt.constprop.0>
10001e3a:	9001      	str	r0, [sp, #4]
	ret1 = gpio_pin_configure_dt(&ctr2A, GPIO_OUTPUT_ACTIVE);
10001e3c:	4830      	ldr	r0, [pc, #192]	; (10001f00 <inicio_motores+0x14c>)
10001e3e:	f7ff ff39 	bl	10001cb4 <gpio_pin_configure_dt.constprop.0>
10001e42:	0007      	movs	r7, r0
	ret2 = gpio_pin_configure_dt(&ctr1B, GPIO_OUTPUT_ACTIVE);
10001e44:	482f      	ldr	r0, [pc, #188]	; (10001f04 <inicio_motores+0x150>)
10001e46:	f7ff ff35 	bl	10001cb4 <gpio_pin_configure_dt.constprop.0>
10001e4a:	0006      	movs	r6, r0
	ret3 = gpio_pin_configure_dt(&ctr2B, GPIO_OUTPUT_ACTIVE);
10001e4c:	482e      	ldr	r0, [pc, #184]	; (10001f08 <inicio_motores+0x154>)
10001e4e:	f7ff ff31 	bl	10001cb4 <gpio_pin_configure_dt.constprop.0>
10001e52:	0005      	movs	r5, r0
        ret4 = gpio_pin_configure_dt(&enA, GPIO_OUTPUT_ACTIVE);
10001e54:	482d      	ldr	r0, [pc, #180]	; (10001f0c <inicio_motores+0x158>)
10001e56:	f7ff ff2d 	bl	10001cb4 <gpio_pin_configure_dt.constprop.0>
10001e5a:	9002      	str	r0, [sp, #8]
	ret5 = gpio_pin_configure_dt(&enB, GPIO_OUTPUT_ACTIVE);
10001e5c:	482c      	ldr	r0, [pc, #176]	; (10001f10 <inicio_motores+0x15c>)
10001e5e:	f7ff ff29 	bl	10001cb4 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0 || ret1 < 0 ||ret2 < 0 ||ret3 < 0 ||ret4 < 0 ||ret5 < 0) {
10001e62:	9b01      	ldr	r3, [sp, #4]
10001e64:	9a02      	ldr	r2, [sp, #8]
10001e66:	433b      	orrs	r3, r7
10001e68:	4333      	orrs	r3, r6
10001e6a:	432b      	orrs	r3, r5
10001e6c:	4313      	orrs	r3, r2
	ret5 = gpio_pin_configure_dt(&enB, GPIO_OUTPUT_ACTIVE);
10001e6e:	9003      	str	r0, [sp, #12]
	if (ret < 0 || ret1 < 0 ||ret2 < 0 ||ret3 < 0 ||ret4 < 0 ||ret5 < 0) {
10001e70:	4303      	orrs	r3, r0
10001e72:	d516      	bpl.n	10001ea2 <inicio_motores+0xee>
		printk("Error %d: failed to set pulse width\n", ret);
10001e74:	4c27      	ldr	r4, [pc, #156]	; (10001f14 <inicio_motores+0x160>)
10001e76:	9901      	ldr	r1, [sp, #4]
10001e78:	0020      	movs	r0, r4
10001e7a:	f002 feff 	bl	10004c7c <printk>
		printk("Error %d: failed to set pulse width\n", ret1);
10001e7e:	0039      	movs	r1, r7
10001e80:	0020      	movs	r0, r4
10001e82:	f002 fefb 	bl	10004c7c <printk>
		printk("Error %d: failed to set pulse width\n", ret2);
10001e86:	0031      	movs	r1, r6
10001e88:	0020      	movs	r0, r4
10001e8a:	f002 fef7 	bl	10004c7c <printk>
		printk("Error %d: failed to set pulse width\n", ret3);
10001e8e:	0029      	movs	r1, r5
10001e90:	0020      	movs	r0, r4
10001e92:	f002 fef3 	bl	10004c7c <printk>
        printk("Error %d: failed to set pulse width\n", ret4);
10001e96:	9902      	ldr	r1, [sp, #8]
10001e98:	0020      	movs	r0, r4
10001e9a:	f002 feef 	bl	10004c7c <printk>
		printk("Error %d: failed to set pulse width\n", ret5);
10001e9e:	9903      	ldr	r1, [sp, #12]
10001ea0:	e79d      	b.n	10001dde <inicio_motores+0x2a>
	gpio_pin_set(ctr1A.port, PINC1A , GPIO_ACTIVE_LOW);
10001ea2:	2101      	movs	r1, #1
10001ea4:	2010      	movs	r0, #16
10001ea6:	f7ff ff2b 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
	gpio_pin_set(ctr2A.port, PINC2A, GPIO_ACTIVE_LOW);
10001eaa:	2101      	movs	r1, #1
10001eac:	2011      	movs	r0, #17
10001eae:	f7ff ff27 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
	gpio_pin_set(ctr1B.port, PINC1B , GPIO_ACTIVE_LOW);
10001eb2:	2101      	movs	r1, #1
10001eb4:	200e      	movs	r0, #14
10001eb6:	f7ff ff23 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
	gpio_pin_set(ctr2B.port, PINC2B, GPIO_ACTIVE_LOW);
10001eba:	2101      	movs	r1, #1
10001ebc:	200f      	movs	r0, #15
10001ebe:	f7ff ff1f 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
    gpio_pin_set(enA.port, PINEA , GPIO_ACTIVE_LOW);
10001ec2:	2101      	movs	r1, #1
10001ec4:	2003      	movs	r0, #3
10001ec6:	f7ff ff1b 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
	gpio_pin_set(enB.port, PINEB, GPIO_ACTIVE_LOW);
10001eca:	2004      	movs	r0, #4
10001ecc:	2101      	movs	r1, #1
10001ece:	f7ff ff17 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
	if (!device_is_ready(pwm_led0.dev)) {
10001ed2:	0020      	movs	r0, r4
10001ed4:	f002 fe79 	bl	10004bca <device_is_ready>
10001ed8:	2800      	cmp	r0, #0
10001eda:	d102      	bne.n	10001ee2 <inicio_motores+0x12e>
		printk("Error: PWM device %s is not ready\n",
10001edc:	4805      	ldr	r0, [pc, #20]	; (10001ef4 <inicio_motores+0x140>)
10001ede:	6821      	ldr	r1, [r4, #0]
10001ee0:	e77e      	b.n	10001de0 <inicio_motores+0x2c>
        if (!device_is_ready(pwm_led1.dev)) {
10001ee2:	0020      	movs	r0, r4
10001ee4:	f002 fe71 	bl	10004bca <device_is_ready>
10001ee8:	2800      	cmp	r0, #0
10001eea:	d0f7      	beq.n	10001edc <inicio_motores+0x128>
	}
}
10001eec:	b005      	add	sp, #20
10001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ef0:	10005614 	.word	0x10005614
10001ef4:	1000594c 	.word	0x1000594c
10001ef8:	100055fc 	.word	0x100055fc
10001efc:	100057ac 	.word	0x100057ac
10001f00:	100057a4 	.word	0x100057a4
10001f04:	1000579c 	.word	0x1000579c
10001f08:	10005794 	.word	0x10005794
10001f0c:	1000578c 	.word	0x1000578c
10001f10:	10005784 	.word	0x10005784
10001f14:	1000596f 	.word	0x1000596f

10001f18 <velocidad>:
 * 
 * @param a Periodo
 * @param b Pulso
 * @param mot se debe escoger el motor MOTORA o MOTORB
 */
void velocidad (int a, int b, enum motor mot){
10001f18:	b510      	push	{r4, lr}
	switch (mot)
10001f1a:	2a00      	cmp	r2, #0
10001f1c:	d002      	beq.n	10001f24 <velocidad+0xc>
10001f1e:	2a01      	cmp	r2, #1
10001f20:	d007      	beq.n	10001f32 <velocidad+0x1a>
	default:
		break;
	}
	
    
}
10001f22:	bd10      	pop	{r4, pc}
		pwm_set_dt(&pwm_led0, PWM_MSEC(a), PWM_MSEC(a));
10001f24:	4905      	ldr	r1, [pc, #20]	; (10001f3c <velocidad+0x24>)
10001f26:	4341      	muls	r1, r0
10001f28:	4805      	ldr	r0, [pc, #20]	; (10001f40 <velocidad+0x28>)
		pwm_set_dt(&pwm_led1, PWM_MSEC(a), PWM_MSEC(a));
10001f2a:	000a      	movs	r2, r1
10001f2c:	f7ff fefe 	bl	10001d2c <pwm_set_dt.isra.0>
}
10001f30:	e7f7      	b.n	10001f22 <velocidad+0xa>
		pwm_set_dt(&pwm_led1, PWM_MSEC(a), PWM_MSEC(a));
10001f32:	4902      	ldr	r1, [pc, #8]	; (10001f3c <velocidad+0x24>)
10001f34:	4341      	muls	r1, r0
10001f36:	4803      	ldr	r0, [pc, #12]	; (10001f44 <velocidad+0x2c>)
10001f38:	e7f7      	b.n	10001f2a <velocidad+0x12>
10001f3a:	46c0      	nop			; (mov r8, r8)
10001f3c:	000f4240 	.word	0x000f4240
10001f40:	10005774 	.word	0x10005774
10001f44:	10005764 	.word	0x10005764

10001f48 <distancia>:
void distancia(enum direction_mot dir, int vel, int cm){
10001f48:	b570      	push	{r4, r5, r6, lr}
10001f4a:	0005      	movs	r5, r0
10001f4c:	000c      	movs	r4, r1
	switch (dir)
10001f4e:	2801      	cmp	r0, #1
10001f50:	d002      	beq.n	10001f58 <distancia+0x10>
10001f52:	2803      	cmp	r0, #3
10001f54:	d021      	beq.n	10001f9a <distancia+0x52>
}
10001f56:	bd70      	pop	{r4, r5, r6, pc}
		gpio_pin_set(ctr1A.port, PINC1A , GPIO_ACTIVE_LOW);
10001f58:	0001      	movs	r1, r0
10001f5a:	2010      	movs	r0, #16
10001f5c:	f7ff fed0 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr2A.port, PINC2A, GPIO_ACTIVE_HIGH);
10001f60:	2100      	movs	r1, #0
10001f62:	2011      	movs	r0, #17
10001f64:	f7ff fecc 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr1B.port, PINC1B , GPIO_ACTIVE_LOW);
10001f68:	0029      	movs	r1, r5
10001f6a:	200e      	movs	r0, #14
10001f6c:	f7ff fec8 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr2B.port, PINC2B, GPIO_ACTIVE_HIGH);
10001f70:	2100      	movs	r1, #0
		gpio_pin_set(ctr2B.port, PINC2B, GPIO_ACTIVE_LOW);
10001f72:	200f      	movs	r0, #15
10001f74:	f7ff fec4 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		velocidad(vel,vel,MOTA);
10001f78:	0021      	movs	r1, r4
10001f7a:	2200      	movs	r2, #0
10001f7c:	0020      	movs	r0, r4
10001f7e:	f7ff ffcb 	bl	10001f18 <velocidad>
		velocidad(vel,vel,MOTB);
10001f82:	2201      	movs	r2, #1
10001f84:	0021      	movs	r1, r4
10001f86:	0020      	movs	r0, r4
10001f88:	f7ff ffc6 	bl	10001f18 <velocidad>
		k_sleep(PCENTI(cm));
10001f8c:	2100      	movs	r1, #0
10001f8e:	480a      	ldr	r0, [pc, #40]	; (10001fb8 <distancia+0x70>)
10001f90:	f002 fe1f 	bl	10004bd2 <k_sleep.isra.0>
		paradatotal();
10001f94:	f002 fe21 	bl	10004bda <paradatotal>
		break;
10001f98:	e7dd      	b.n	10001f56 <distancia+0xe>
		gpio_pin_set(ctr1A.port, PINC1A , GPIO_ACTIVE_HIGH);
10001f9a:	2100      	movs	r1, #0
10001f9c:	2010      	movs	r0, #16
10001f9e:	f7ff feaf 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr2A.port, PINC2A, GPIO_ACTIVE_LOW);
10001fa2:	2101      	movs	r1, #1
10001fa4:	2011      	movs	r0, #17
10001fa6:	f7ff feab 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr1B.port, PINC1B , GPIO_ACTIVE_HIGH);
10001faa:	2100      	movs	r1, #0
10001fac:	200e      	movs	r0, #14
10001fae:	f7ff fea7 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr2B.port, PINC2B, GPIO_ACTIVE_LOW);
10001fb2:	2101      	movs	r1, #1
10001fb4:	e7dd      	b.n	10001f72 <distancia+0x2a>
10001fb6:	46c0      	nop			; (mov r8, r8)
10001fb8:	00000744 	.word	0x00000744

10001fbc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10001fbe:	b095      	sub	sp, #84	; 0x54
10001fc0:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10001fc2:	2304      	movs	r3, #4
{
10001fc4:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10001fc6:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10001fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10001fca:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10001fcc:	08da      	lsrs	r2, r3, #3
10001fce:	2307      	movs	r3, #7
10001fd0:	401a      	ands	r2, r3
10001fd2:	3201      	adds	r2, #1
{
10001fd4:	0007      	movs	r7, r0
10001fd6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
10001fd8:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10001fda:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
10001fdc:	0782      	lsls	r2, r0, #30
10001fde:	d000      	beq.n	10001fe2 <cbvprintf_package+0x26>
10001fe0:	e1d2      	b.n	10002388 <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10001fe2:	1d02      	adds	r2, r0, #4
10001fe4:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
10001fe6:	2800      	cmp	r0, #0
10001fe8:	d004      	beq.n	10001ff4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
10001fea:	2907      	cmp	r1, #7
10001fec:	d80a      	bhi.n	10002004 <cbvprintf_package+0x48>
		return -ENOSPC;
10001fee:	201c      	movs	r0, #28
		return -EFAULT;
10001ff0:	4240      	negs	r0, r0
10001ff2:	e154      	b.n	1000229e <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10001ff4:	9a02      	ldr	r2, [sp, #8]
10001ff6:	401a      	ands	r2, r3
10001ff8:	0013      	movs	r3, r2
10001ffa:	3204      	adds	r2, #4
10001ffc:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
10001ffe:	2208      	movs	r2, #8
10002000:	1ad3      	subs	r3, r2, r3
10002002:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
10002004:	2504      	movs	r5, #4
	s = fmt--;
10002006:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
10002008:	002e      	movs	r6, r5
	s = fmt--;
1000200a:	3b01      	subs	r3, #1
1000200c:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
1000200e:	2300      	movs	r3, #0
10002010:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
10002012:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
10002014:	9303      	str	r3, [sp, #12]
	bool parsing = false;
10002016:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
10002018:	3b01      	subs	r3, #1
1000201a:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
1000201c:	2f00      	cmp	r7, #0
1000201e:	d002      	beq.n	10002026 <cbvprintf_package+0x6a>
				*(const char **)buf = s;
10002020:	9b00      	ldr	r3, [sp, #0]
10002022:	9a04      	ldr	r2, [sp, #16]
10002024:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002028:	2b00      	cmp	r3, #0
1000202a:	dd00      	ble.n	1000202e <cbvprintf_package+0x72>
1000202c:	e0eb      	b.n	10002206 <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
1000202e:	4b9d      	ldr	r3, [pc, #628]	; (100022a4 <cbvprintf_package+0x2e8>)
10002030:	9a04      	ldr	r2, [sp, #16]
10002032:	429a      	cmp	r2, r3
10002034:	d303      	bcc.n	1000203e <cbvprintf_package+0x82>
10002036:	4b9c      	ldr	r3, [pc, #624]	; (100022a8 <cbvprintf_package+0x2ec>)
10002038:	429a      	cmp	r2, r3
1000203a:	d200      	bcs.n	1000203e <cbvprintf_package+0x82>
1000203c:	e0e3      	b.n	10002206 <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
1000203e:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002040:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10002042:	1bda      	subs	r2, r3, r7
10002044:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002046:	0789      	lsls	r1, r1, #30
10002048:	d500      	bpl.n	1000204c <cbvprintf_package+0x90>
1000204a:	e109      	b.n	10002260 <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
1000204c:	9a03      	ldr	r2, [sp, #12]
1000204e:	2a0f      	cmp	r2, #15
10002050:	d900      	bls.n	10002054 <cbvprintf_package+0x98>
10002052:	e0b4      	b.n	100021be <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
10002054:	2f00      	cmp	r7, #0
10002056:	d100      	bne.n	1000205a <cbvprintf_package+0x9e>
10002058:	e10a      	b.n	10002270 <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
1000205a:	9903      	ldr	r1, [sp, #12]
1000205c:	aa0c      	add	r2, sp, #48	; 0x30
1000205e:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
10002060:	000a      	movs	r2, r1
10002062:	9906      	ldr	r1, [sp, #24]
10002064:	ab10      	add	r3, sp, #64	; 0x40
10002066:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
10002068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000206a:	3301      	adds	r3, #1
1000206c:	930a      	str	r3, [sp, #40]	; 0x28
1000206e:	e0ee      	b.n	1000224e <cbvprintf_package+0x292>
			switch (*fmt) {
10002070:	287a      	cmp	r0, #122	; 0x7a
10002072:	d861      	bhi.n	10002138 <cbvprintf_package+0x17c>
10002074:	284b      	cmp	r0, #75	; 0x4b
10002076:	d80e      	bhi.n	10002096 <cbvprintf_package+0xda>
10002078:	2847      	cmp	r0, #71	; 0x47
1000207a:	d85d      	bhi.n	10002138 <cbvprintf_package+0x17c>
1000207c:	2829      	cmp	r0, #41	; 0x29
1000207e:	d82b      	bhi.n	100020d8 <cbvprintf_package+0x11c>
10002080:	2825      	cmp	r0, #37	; 0x25
10002082:	d056      	beq.n	10002132 <cbvprintf_package+0x176>
10002084:	d858      	bhi.n	10002138 <cbvprintf_package+0x17c>
10002086:	2820      	cmp	r0, #32
10002088:	d07f      	beq.n	1000218a <cbvprintf_package+0x1ce>
1000208a:	3823      	subs	r0, #35	; 0x23
1000208c:	4243      	negs	r3, r0
1000208e:	4158      	adcs	r0, r3
10002090:	b2c3      	uxtb	r3, r0
				parsing = false;
10002092:	9301      	str	r3, [sp, #4]
				continue;
10002094:	e079      	b.n	1000218a <cbvprintf_package+0x1ce>
			switch (*fmt) {
10002096:	384c      	subs	r0, #76	; 0x4c
10002098:	282e      	cmp	r0, #46	; 0x2e
1000209a:	d84d      	bhi.n	10002138 <cbvprintf_package+0x17c>
1000209c:	f7fe f884 	bl	100001a8 <__gnu_thumb1_case_uqi>
100020a0:	4c4c4c75 	.word	0x4c4c4c75
100020a4:	4c4c4c4c 	.word	0x4c4c4c4c
100020a8:	4c4c4c4c 	.word	0x4c4c4c4c
100020ac:	4c4c4c4e 	.word	0x4c4c4c4e
100020b0:	4c4c4c4c 	.word	0x4c4c4c4c
100020b4:	4e4c5d4c 	.word	0x4e4c5d4c
100020b8:	5d5d5d4e 	.word	0x5d5d5d4e
100020bc:	4c734e75 	.word	0x4c734e75
100020c0:	4e184c75 	.word	0x4e184c75
100020c4:	894c4c18 	.word	0x894c4c18
100020c8:	4c4c4e87 	.word	0x4c4c4e87
100020cc:	4c4e      	.short	0x4c4e
100020ce:	87          	.byte	0x87
100020cf:	00          	.byte	0x00
100020d0:	2300      	movs	r3, #0
				parsing = false;
100020d2:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
100020d4:	2504      	movs	r5, #4
100020d6:	e03e      	b.n	10002156 <cbvprintf_package+0x19a>
100020d8:	2101      	movs	r1, #1
100020da:	000a      	movs	r2, r1
100020dc:	382a      	subs	r0, #42	; 0x2a
100020de:	b2c0      	uxtb	r0, r0
100020e0:	4082      	lsls	r2, r0
100020e2:	4b72      	ldr	r3, [pc, #456]	; (100022ac <cbvprintf_package+0x2f0>)
100020e4:	421a      	tst	r2, r3
100020e6:	d150      	bne.n	1000218a <cbvprintf_package+0x1ce>
100020e8:	20e2      	movs	r0, #226	; 0xe2
100020ea:	0013      	movs	r3, r2
100020ec:	0580      	lsls	r0, r0, #22
100020ee:	4003      	ands	r3, r0
100020f0:	4202      	tst	r2, r0
100020f2:	d132      	bne.n	1000215a <cbvprintf_package+0x19e>
100020f4:	0010      	movs	r0, r2
100020f6:	4008      	ands	r0, r1
100020f8:	9001      	str	r0, [sp, #4]
100020fa:	420a      	tst	r2, r1
100020fc:	d045      	beq.n	1000218a <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
100020fe:	9a00      	ldr	r2, [sp, #0]
10002100:	4269      	negs	r1, r5
10002102:	3a01      	subs	r2, #1
10002104:	1952      	adds	r2, r2, r5
10002106:	4011      	ands	r1, r2
10002108:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
1000210a:	2f00      	cmp	r7, #0
1000210c:	d065      	beq.n	100021da <cbvprintf_package+0x21e>
1000210e:	1bf2      	subs	r2, r6, r7
10002110:	1852      	adds	r2, r2, r1
10002112:	9902      	ldr	r1, [sp, #8]
10002114:	428a      	cmp	r2, r1
10002116:	d900      	bls.n	1000211a <cbvprintf_package+0x15e>
10002118:	e769      	b.n	10001fee <cbvprintf_package+0x32>
		if (is_str_arg) {
1000211a:	2b00      	cmp	r3, #0
1000211c:	d16a      	bne.n	100021f4 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
1000211e:	2e04      	cmp	r6, #4
10002120:	d14b      	bne.n	100021ba <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
10002122:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
10002124:	9a00      	ldr	r2, [sp, #0]
10002126:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
10002128:	9b00      	ldr	r3, [sp, #0]
1000212a:	2604      	movs	r6, #4
1000212c:	3304      	adds	r3, #4
1000212e:	9300      	str	r3, [sp, #0]
10002130:	e02b      	b.n	1000218a <cbvprintf_package+0x1ce>
				arg_idx--;
10002132:	9b06      	ldr	r3, [sp, #24]
10002134:	3b01      	subs	r3, #1
10002136:	9306      	str	r3, [sp, #24]
				parsing = false;
10002138:	2300      	movs	r3, #0
1000213a:	e7aa      	b.n	10002092 <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
1000213c:	9b05      	ldr	r3, [sp, #20]
1000213e:	785a      	ldrb	r2, [r3, #1]
10002140:	2300      	movs	r3, #0
				parsing = false;
10002142:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
10002144:	2a6c      	cmp	r2, #108	; 0x6c
10002146:	d1da      	bne.n	100020fe <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
10002148:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
1000214a:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
1000214c:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
1000214e:	7812      	ldrb	r2, [r2, #0]
10002150:	2a6c      	cmp	r2, #108	; 0x6c
10002152:	d1d4      	bne.n	100020fe <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
10002154:	196d      	adds	r5, r5, r5
			switch (*fmt) {
10002156:	002e      	movs	r6, r5
10002158:	e7d1      	b.n	100020fe <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
1000215a:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
1000215c:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
1000215e:	3407      	adds	r4, #7
10002160:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
10002162:	1949      	adds	r1, r1, r5
10002164:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
10002166:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
10002168:	2f00      	cmp	r7, #0
1000216a:	d008      	beq.n	1000217e <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
1000216c:	3501      	adds	r5, #1
1000216e:	1bed      	subs	r5, r5, r7
10002170:	9e02      	ldr	r6, [sp, #8]
10002172:	186d      	adds	r5, r5, r1
10002174:	42b5      	cmp	r5, r6
10002176:	d900      	bls.n	1000217a <cbvprintf_package+0x1be>
10002178:	e739      	b.n	10001fee <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
1000217a:	600a      	str	r2, [r1, #0]
1000217c:	604b      	str	r3, [r1, #4]
				parsing = false;
1000217e:	2300      	movs	r3, #0
				buf += size;
10002180:	3108      	adds	r1, #8
10002182:	9100      	str	r1, [sp, #0]
				parsing = false;
10002184:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10002186:	2508      	movs	r5, #8
10002188:	002e      	movs	r6, r5
1000218a:	9b05      	ldr	r3, [sp, #20]
1000218c:	3301      	adds	r3, #1
1000218e:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
10002190:	9b05      	ldr	r3, [sp, #20]
10002192:	7898      	ldrb	r0, [r3, #2]
10002194:	2800      	cmp	r0, #0
10002196:	d077      	beq.n	10002288 <cbvprintf_package+0x2cc>
			if (!parsing) {
10002198:	9b01      	ldr	r3, [sp, #4]
1000219a:	2b00      	cmp	r3, #0
1000219c:	d000      	beq.n	100021a0 <cbvprintf_package+0x1e4>
1000219e:	e767      	b.n	10002070 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
100021a0:	2825      	cmp	r0, #37	; 0x25
100021a2:	d1f2      	bne.n	1000218a <cbvprintf_package+0x1ce>
					arg_idx++;
100021a4:	9b06      	ldr	r3, [sp, #24]
100021a6:	3301      	adds	r3, #1
100021a8:	9306      	str	r3, [sp, #24]
					parsing = true;
100021aa:	2301      	movs	r3, #1
100021ac:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
100021ae:	2504      	movs	r5, #4
100021b0:	e7ea      	b.n	10002188 <cbvprintf_package+0x1cc>
			switch (*fmt) {
100021b2:	2200      	movs	r2, #0
100021b4:	9b01      	ldr	r3, [sp, #4]
100021b6:	9201      	str	r2, [sp, #4]
100021b8:	e78c      	b.n	100020d4 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
100021ba:	2e08      	cmp	r6, #8
100021bc:	d001      	beq.n	100021c2 <cbvprintf_package+0x206>
					return -EINVAL;
100021be:	2016      	movs	r0, #22
100021c0:	e716      	b.n	10001ff0 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
100021c2:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
100021c4:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
100021c6:	3407      	adds	r4, #7
100021c8:	439c      	bics	r4, r3
100021ca:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
100021cc:	600a      	str	r2, [r1, #0]
100021ce:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
100021d0:	9b00      	ldr	r3, [sp, #0]
100021d2:	2608      	movs	r6, #8
100021d4:	3308      	adds	r3, #8
100021d6:	9300      	str	r3, [sp, #0]
100021d8:	e7d7      	b.n	1000218a <cbvprintf_package+0x1ce>
		if (is_str_arg) {
100021da:	2b00      	cmp	r3, #0
100021dc:	d10a      	bne.n	100021f4 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
100021de:	2e04      	cmp	r6, #4
100021e0:	d101      	bne.n	100021e6 <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
100021e2:	3404      	adds	r4, #4
			if (buf0 != NULL) {
100021e4:	e7a0      	b.n	10002128 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
100021e6:	2e08      	cmp	r6, #8
100021e8:	d1e9      	bne.n	100021be <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
100021ea:	2307      	movs	r3, #7
100021ec:	3407      	adds	r4, #7
100021ee:	439c      	bics	r4, r3
100021f0:	3408      	adds	r4, #8
			if (buf0 != NULL) {
100021f2:	e7ed      	b.n	100021d0 <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
100021f4:	9b05      	ldr	r3, [sp, #20]
100021f6:	3302      	adds	r3, #2
100021f8:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100021fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100021fc:	3b01      	subs	r3, #1
100021fe:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
10002200:	cc08      	ldmia	r4!, {r3}
10002202:	9304      	str	r3, [sp, #16]
10002204:	e70a      	b.n	1000201c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
10002206:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002208:	079b      	lsls	r3, r3, #30
1000220a:	d523      	bpl.n	10002254 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000220c:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
1000220e:	9b00      	ldr	r3, [sp, #0]
10002210:	1bda      	subs	r2, r3, r7
10002212:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002214:	2080      	movs	r0, #128	; 0x80
10002216:	0080      	lsls	r0, r0, #2
10002218:	4282      	cmp	r2, r0
1000221a:	d2d0      	bcs.n	100021be <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
1000221c:	9a03      	ldr	r2, [sp, #12]
1000221e:	2a0f      	cmp	r2, #15
10002220:	d8cd      	bhi.n	100021be <cbvprintf_package+0x202>
				if (buf0 != NULL) {
10002222:	2f00      	cmp	r7, #0
10002224:	d01e      	beq.n	10002264 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
10002226:	9803      	ldr	r0, [sp, #12]
10002228:	b2db      	uxtb	r3, r3
1000222a:	aa0c      	add	r2, sp, #48	; 0x30
1000222c:	5413      	strb	r3, [r2, r0]
1000222e:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
10002230:	9b06      	ldr	r3, [sp, #24]
10002232:	aa10      	add	r2, sp, #64	; 0x40
10002234:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
10002236:	2900      	cmp	r1, #0
10002238:	d100      	bne.n	1000223c <cbvprintf_package+0x280>
1000223a:	e715      	b.n	10002068 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
1000223c:	2280      	movs	r2, #128	; 0x80
1000223e:	4663      	mov	r3, ip
10002240:	4252      	negs	r2, r2
10002242:	4313      	orrs	r3, r2
10002244:	aa0c      	add	r2, sp, #48	; 0x30
10002246:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
10002248:	9b07      	ldr	r3, [sp, #28]
1000224a:	3301      	adds	r3, #1
1000224c:	9307      	str	r3, [sp, #28]
				s_idx++;
1000224e:	9b03      	ldr	r3, [sp, #12]
10002250:	3301      	adds	r3, #1
10002252:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
10002254:	9b00      	ldr	r3, [sp, #0]
10002256:	3304      	adds	r3, #4
10002258:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
1000225a:	9b05      	ldr	r3, [sp, #20]
1000225c:	3b01      	subs	r3, #1
1000225e:	e796      	b.n	1000218e <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002260:	2100      	movs	r1, #0
10002262:	e7d7      	b.n	10002214 <cbvprintf_package+0x258>
				} else if (is_ro) {
10002264:	2900      	cmp	r1, #0
10002266:	d003      	beq.n	10002270 <cbvprintf_package+0x2b4>
					len += 1;
10002268:	9b02      	ldr	r3, [sp, #8]
1000226a:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
1000226c:	9302      	str	r3, [sp, #8]
1000226e:	e7ee      	b.n	1000224e <cbvprintf_package+0x292>
					len += 2;
10002270:	9b02      	ldr	r3, [sp, #8]
10002272:	3302      	adds	r3, #2
10002274:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
10002276:	9b08      	ldr	r3, [sp, #32]
10002278:	2b00      	cmp	r3, #0
1000227a:	d1e8      	bne.n	1000224e <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
1000227c:	9804      	ldr	r0, [sp, #16]
1000227e:	f002 fe22 	bl	10004ec6 <strlen>
10002282:	9b02      	ldr	r3, [sp, #8]
10002284:	181b      	adds	r3, r3, r0
10002286:	e7f1      	b.n	1000226c <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
10002288:	2280      	movs	r2, #128	; 0x80
1000228a:	9b00      	ldr	r3, [sp, #0]
1000228c:	00d2      	lsls	r2, r2, #3
1000228e:	1bdb      	subs	r3, r3, r7
10002290:	4293      	cmp	r3, r2
10002292:	d294      	bcs.n	100021be <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
10002294:	2f00      	cmp	r7, #0
10002296:	d10b      	bne.n	100022b0 <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
10002298:	9802      	ldr	r0, [sp, #8]
1000229a:	3808      	subs	r0, #8
1000229c:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
1000229e:	b015      	add	sp, #84	; 0x54
100022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022a2:	46c0      	nop			; (mov r8, r8)
100022a4:	1000558c 	.word	0x1000558c
100022a8:	10005d18 	.word	0x10005d18
100022ac:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
100022b0:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022b2:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
100022b4:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
100022b6:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022b8:	466b      	mov	r3, sp
100022ba:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
100022bc:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022be:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
100022c0:	2a00      	cmp	r2, #0
100022c2:	d00c      	beq.n	100022de <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022c4:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
100022c6:	9b07      	ldr	r3, [sp, #28]
100022c8:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
100022ca:	2b00      	cmp	r3, #0
100022cc:	d120      	bne.n	10002310 <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
100022ce:	2600      	movs	r6, #0
100022d0:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
100022d2:	9b03      	ldr	r3, [sp, #12]
100022d4:	42b3      	cmp	r3, r6
100022d6:	d120      	bne.n	1000231a <cbvprintf_package+0x35e>
	return BUF_OFFSET;
100022d8:	9b00      	ldr	r3, [sp, #0]
100022da:	1bd8      	subs	r0, r3, r7
100022dc:	e7df      	b.n	1000229e <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
100022de:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
100022e0:	e7f1      	b.n	100022c6 <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
100022e2:	ac0c      	add	r4, sp, #48	; 0x30
100022e4:	56e4      	ldrsb	r4, [r4, r3]
100022e6:	a90c      	add	r1, sp, #48	; 0x30
100022e8:	5c59      	ldrb	r1, [r3, r1]
100022ea:	2c00      	cmp	r4, #0
100022ec:	da0b      	bge.n	10002306 <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
100022ee:	9c00      	ldr	r4, [sp, #0]
100022f0:	9d02      	ldr	r5, [sp, #8]
100022f2:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
100022f4:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
100022f6:	42ac      	cmp	r4, r5
100022f8:	d900      	bls.n	100022fc <cbvprintf_package+0x340>
100022fa:	e678      	b.n	10001fee <cbvprintf_package+0x32>
			*buf++ = pos;
100022fc:	9c00      	ldr	r4, [sp, #0]
100022fe:	7021      	strb	r1, [r4, #0]
10002300:	0021      	movs	r1, r4
10002302:	3101      	adds	r1, #1
10002304:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
10002306:	3301      	adds	r3, #1
10002308:	9903      	ldr	r1, [sp, #12]
1000230a:	4299      	cmp	r1, r3
1000230c:	d1e9      	bne.n	100022e2 <cbvprintf_package+0x326>
1000230e:	e7de      	b.n	100022ce <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
10002310:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
10002312:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10002314:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
10002316:	1bd2      	subs	r2, r2, r7
10002318:	e7f6      	b.n	10002308 <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
1000231a:	9b07      	ldr	r3, [sp, #28]
1000231c:	2b00      	cmp	r3, #0
1000231e:	d002      	beq.n	10002326 <cbvprintf_package+0x36a>
10002320:	782b      	ldrb	r3, [r5, #0]
10002322:	2b7f      	cmp	r3, #127	; 0x7f
10002324:	d821      	bhi.n	1000236a <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
10002326:	9b08      	ldr	r3, [sp, #32]
10002328:	2b00      	cmp	r3, #0
1000232a:	d021      	beq.n	10002370 <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
1000232c:	ab10      	add	r3, sp, #64	; 0x40
1000232e:	9a00      	ldr	r2, [sp, #0]
10002330:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
10002332:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
10002334:	7013      	strb	r3, [r2, #0]
10002336:	0013      	movs	r3, r2
10002338:	3301      	adds	r3, #1
1000233a:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
1000233c:	2301      	movs	r3, #1
1000233e:	9a00      	ldr	r2, [sp, #0]
10002340:	1bdb      	subs	r3, r3, r7
10002342:	191b      	adds	r3, r3, r4
10002344:	18d3      	adds	r3, r2, r3
10002346:	9a02      	ldr	r2, [sp, #8]
10002348:	4293      	cmp	r3, r2
1000234a:	d900      	bls.n	1000234e <cbvprintf_package+0x392>
1000234c:	e64f      	b.n	10001fee <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
1000234e:	9b00      	ldr	r3, [sp, #0]
10002350:	9a00      	ldr	r2, [sp, #0]
10002352:	3301      	adds	r3, #1
10002354:	9301      	str	r3, [sp, #4]
10002356:	782b      	ldrb	r3, [r5, #0]
		memcpy(buf, s, size);
10002358:	9904      	ldr	r1, [sp, #16]
		*buf++ = str_ptr_pos[i];
1000235a:	7013      	strb	r3, [r2, #0]
		memcpy(buf, s, size);
1000235c:	9801      	ldr	r0, [sp, #4]
1000235e:	0022      	movs	r2, r4
10002360:	f002 fdc3 	bl	10004eea <memcpy>
		buf += size;
10002364:	9b01      	ldr	r3, [sp, #4]
10002366:	191b      	adds	r3, r3, r4
10002368:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
1000236a:	3601      	adds	r6, #1
1000236c:	3501      	adds	r5, #1
1000236e:	e7b0      	b.n	100022d2 <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
10002370:	782b      	ldrb	r3, [r5, #0]
10002372:	009b      	lsls	r3, r3, #2
10002374:	18fb      	adds	r3, r7, r3
10002376:	681a      	ldr	r2, [r3, #0]
10002378:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
1000237a:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
1000237c:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
1000237e:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
10002380:	f002 fda1 	bl	10004ec6 <strlen>
10002384:	1c44      	adds	r4, r0, #1
10002386:	e7d9      	b.n	1000233c <cbvprintf_package+0x380>
		return -EFAULT;
10002388:	200e      	movs	r0, #14
1000238a:	e631      	b.n	10001ff0 <cbvprintf_package+0x34>

1000238c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
1000238c:	4b01      	ldr	r3, [pc, #4]	; (10002394 <__printk_hook_install+0x8>)
1000238e:	6018      	str	r0, [r3, #0]
}
10002390:	4770      	bx	lr
10002392:	46c0      	nop			; (mov r8, r8)
10002394:	20000000 	.word	0x20000000

10002398 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10002398:	b5f0      	push	{r4, r5, r6, r7, lr}
1000239a:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
1000239c:	2700      	movs	r7, #0
{
1000239e:	b099      	sub	sp, #100	; 0x64
100023a0:	9004      	str	r0, [sp, #16]
100023a2:	9105      	str	r1, [sp, #20]
100023a4:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
100023a6:	9b08      	ldr	r3, [sp, #32]
100023a8:	7818      	ldrb	r0, [r3, #0]
100023aa:	2800      	cmp	r0, #0
100023ac:	d101      	bne.n	100023b2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
100023ae:	0038      	movs	r0, r7
100023b0:	e327      	b.n	10002a02 <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
100023b2:	9b08      	ldr	r3, [sp, #32]
100023b4:	3301      	adds	r3, #1
100023b6:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
100023b8:	2825      	cmp	r0, #37	; 0x25
100023ba:	d007      	beq.n	100023cc <z_cbvprintf_impl+0x34>
			OUTC('%');
100023bc:	9905      	ldr	r1, [sp, #20]
100023be:	9b04      	ldr	r3, [sp, #16]
100023c0:	4798      	blx	r3
100023c2:	2800      	cmp	r0, #0
100023c4:	da00      	bge.n	100023c8 <z_cbvprintf_impl+0x30>
100023c6:	e31c      	b.n	10002a02 <z_cbvprintf_impl+0x66a>
100023c8:	3701      	adds	r7, #1
		if (bps == NULL) {
100023ca:	e1e3      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
		} state = {
100023cc:	ad12      	add	r5, sp, #72	; 0x48
100023ce:	2218      	movs	r2, #24
100023d0:	2100      	movs	r1, #0
100023d2:	0028      	movs	r0, r5
100023d4:	f002 fd92 	bl	10004efc <memset>
	if (*sp == '%') {
100023d8:	9b08      	ldr	r3, [sp, #32]
100023da:	785b      	ldrb	r3, [r3, #1]
100023dc:	2b25      	cmp	r3, #37	; 0x25
100023de:	d114      	bne.n	1000240a <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
100023e0:	9a08      	ldr	r2, [sp, #32]
100023e2:	72eb      	strb	r3, [r5, #11]
100023e4:	3202      	adds	r2, #2
100023e6:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
100023e8:	ab12      	add	r3, sp, #72	; 0x48
100023ea:	7a5a      	ldrb	r2, [r3, #9]
100023ec:	07d1      	lsls	r1, r2, #31
100023ee:	d400      	bmi.n	100023f2 <z_cbvprintf_impl+0x5a>
100023f0:	e17f      	b.n	100026f2 <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
100023f2:	cc02      	ldmia	r4!, {r1}
100023f4:	9103      	str	r1, [sp, #12]
			if (width < 0) {
100023f6:	2900      	cmp	r1, #0
100023f8:	db00      	blt.n	100023fc <z_cbvprintf_impl+0x64>
100023fa:	e17f      	b.n	100026fc <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
100023fc:	2104      	movs	r1, #4
100023fe:	7a18      	ldrb	r0, [r3, #8]
10002400:	4301      	orrs	r1, r0
10002402:	7219      	strb	r1, [r3, #8]
				width = -width;
10002404:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10002406:	425b      	negs	r3, r3
10002408:	e177      	b.n	100026fa <z_cbvprintf_impl+0x362>
1000240a:	2200      	movs	r2, #0
		switch (*sp) {
1000240c:	2601      	movs	r6, #1
1000240e:	0015      	movs	r5, r2
10002410:	0010      	movs	r0, r2
10002412:	4694      	mov	ip, r2
10002414:	9203      	str	r2, [sp, #12]
10002416:	9b07      	ldr	r3, [sp, #28]
10002418:	781b      	ldrb	r3, [r3, #0]
1000241a:	2b2b      	cmp	r3, #43	; 0x2b
1000241c:	d06f      	beq.n	100024fe <z_cbvprintf_impl+0x166>
1000241e:	d868      	bhi.n	100024f2 <z_cbvprintf_impl+0x15a>
10002420:	2b20      	cmp	r3, #32
10002422:	d071      	beq.n	10002508 <z_cbvprintf_impl+0x170>
10002424:	2b23      	cmp	r3, #35	; 0x23
10002426:	d071      	beq.n	1000250c <z_cbvprintf_impl+0x174>
10002428:	2a00      	cmp	r2, #0
1000242a:	d005      	beq.n	10002438 <z_cbvprintf_impl+0xa0>
1000242c:	ae12      	add	r6, sp, #72	; 0x48
1000242e:	7a32      	ldrb	r2, [r6, #8]
10002430:	0011      	movs	r1, r2
10002432:	2240      	movs	r2, #64	; 0x40
10002434:	430a      	orrs	r2, r1
10002436:	7232      	strb	r2, [r6, #8]
10002438:	2d00      	cmp	r5, #0
1000243a:	d004      	beq.n	10002446 <z_cbvprintf_impl+0xae>
1000243c:	2220      	movs	r2, #32
1000243e:	ad12      	add	r5, sp, #72	; 0x48
10002440:	7a2e      	ldrb	r6, [r5, #8]
10002442:	4332      	orrs	r2, r6
10002444:	722a      	strb	r2, [r5, #8]
10002446:	2800      	cmp	r0, #0
10002448:	d004      	beq.n	10002454 <z_cbvprintf_impl+0xbc>
1000244a:	2210      	movs	r2, #16
1000244c:	a812      	add	r0, sp, #72	; 0x48
1000244e:	7a05      	ldrb	r5, [r0, #8]
10002450:	432a      	orrs	r2, r5
10002452:	7202      	strb	r2, [r0, #8]
10002454:	9a03      	ldr	r2, [sp, #12]
10002456:	2a00      	cmp	r2, #0
10002458:	d004      	beq.n	10002464 <z_cbvprintf_impl+0xcc>
1000245a:	2208      	movs	r2, #8
1000245c:	a912      	add	r1, sp, #72	; 0x48
1000245e:	7a08      	ldrb	r0, [r1, #8]
10002460:	4302      	orrs	r2, r0
10002462:	720a      	strb	r2, [r1, #8]
10002464:	4662      	mov	r2, ip
10002466:	2a00      	cmp	r2, #0
10002468:	d004      	beq.n	10002474 <z_cbvprintf_impl+0xdc>
1000246a:	2204      	movs	r2, #4
1000246c:	a912      	add	r1, sp, #72	; 0x48
1000246e:	7a08      	ldrb	r0, [r1, #8]
10002470:	4302      	orrs	r2, r0
10002472:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10002474:	2144      	movs	r1, #68	; 0x44
10002476:	a812      	add	r0, sp, #72	; 0x48
10002478:	7a02      	ldrb	r2, [r0, #8]
1000247a:	4011      	ands	r1, r2
1000247c:	2944      	cmp	r1, #68	; 0x44
1000247e:	d102      	bne.n	10002486 <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
10002480:	2140      	movs	r1, #64	; 0x40
10002482:	438a      	bics	r2, r1
10002484:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10002486:	2280      	movs	r2, #128	; 0x80
10002488:	7a01      	ldrb	r1, [r0, #8]
1000248a:	4252      	negs	r2, r2
1000248c:	430a      	orrs	r2, r1
1000248e:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10002490:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10002492:	250a      	movs	r5, #10
10002494:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10002496:	2b2a      	cmp	r3, #42	; 0x2a
10002498:	d140      	bne.n	1000251c <z_cbvprintf_impl+0x184>
		conv->width_star = true;
1000249a:	7a41      	ldrb	r1, [r0, #9]
1000249c:	3b29      	subs	r3, #41	; 0x29
1000249e:	430b      	orrs	r3, r1
		return ++sp;
100024a0:	3201      	adds	r2, #1
		conv->width_star = true;
100024a2:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
100024a4:	7815      	ldrb	r5, [r2, #0]
100024a6:	2602      	movs	r6, #2
100024a8:	0029      	movs	r1, r5
100024aa:	392e      	subs	r1, #46	; 0x2e
100024ac:	424b      	negs	r3, r1
100024ae:	4159      	adcs	r1, r3
100024b0:	a812      	add	r0, sp, #72	; 0x48
100024b2:	7a43      	ldrb	r3, [r0, #9]
100024b4:	0049      	lsls	r1, r1, #1
100024b6:	43b3      	bics	r3, r6
100024b8:	430b      	orrs	r3, r1
100024ba:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
100024bc:	2d2e      	cmp	r5, #46	; 0x2e
100024be:	d145      	bne.n	1000254c <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
100024c0:	7853      	ldrb	r3, [r2, #1]
100024c2:	2b2a      	cmp	r3, #42	; 0x2a
100024c4:	d03d      	beq.n	10002542 <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
100024c6:	2300      	movs	r3, #0
	++sp;
100024c8:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
100024ca:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
100024cc:	7811      	ldrb	r1, [r2, #0]
100024ce:	1c55      	adds	r5, r2, #1
100024d0:	0008      	movs	r0, r1
100024d2:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100024d4:	2809      	cmp	r0, #9
100024d6:	d963      	bls.n	100025a0 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
100024d8:	a912      	add	r1, sp, #72	; 0x48
100024da:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
100024dc:	7a0d      	ldrb	r5, [r1, #8]
100024de:	07a8      	lsls	r0, r5, #30
100024e0:	4318      	orrs	r0, r3
100024e2:	2302      	movs	r3, #2
100024e4:	439d      	bics	r5, r3
100024e6:	002b      	movs	r3, r5
100024e8:	0fc0      	lsrs	r0, r0, #31
100024ea:	0040      	lsls	r0, r0, #1
100024ec:	4303      	orrs	r3, r0
100024ee:	720b      	strb	r3, [r1, #8]
	return sp;
100024f0:	e02c      	b.n	1000254c <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
100024f2:	2b2d      	cmp	r3, #45	; 0x2d
100024f4:	d00c      	beq.n	10002510 <z_cbvprintf_impl+0x178>
100024f6:	2b30      	cmp	r3, #48	; 0x30
100024f8:	d196      	bne.n	10002428 <z_cbvprintf_impl+0x90>
100024fa:	0032      	movs	r2, r6
100024fc:	e000      	b.n	10002500 <z_cbvprintf_impl+0x168>
100024fe:	9603      	str	r6, [sp, #12]
			++sp;
10002500:	9b07      	ldr	r3, [sp, #28]
10002502:	3301      	adds	r3, #1
10002504:	9307      	str	r3, [sp, #28]
	} while (loop);
10002506:	e786      	b.n	10002416 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10002508:	0030      	movs	r0, r6
1000250a:	e7f9      	b.n	10002500 <z_cbvprintf_impl+0x168>
1000250c:	0035      	movs	r5, r6
1000250e:	e7f7      	b.n	10002500 <z_cbvprintf_impl+0x168>
10002510:	46b4      	mov	ip, r6
10002512:	e7f5      	b.n	10002500 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10002514:	0032      	movs	r2, r6
10002516:	4369      	muls	r1, r5
10002518:	3930      	subs	r1, #48	; 0x30
1000251a:	1859      	adds	r1, r3, r1
1000251c:	7813      	ldrb	r3, [r2, #0]
1000251e:	1c56      	adds	r6, r2, #1
10002520:	0018      	movs	r0, r3
10002522:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10002524:	2809      	cmp	r0, #9
10002526:	d9f5      	bls.n	10002514 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10002528:	9b07      	ldr	r3, [sp, #28]
1000252a:	4293      	cmp	r3, r2
1000252c:	d0ba      	beq.n	100024a4 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
1000252e:	2502      	movs	r5, #2
		conv->width_value = width;
10002530:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10002532:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10002534:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10002536:	0fc9      	lsrs	r1, r1, #31
10002538:	0049      	lsls	r1, r1, #1
1000253a:	43a8      	bics	r0, r5
1000253c:	4301      	orrs	r1, r0
1000253e:	7219      	strb	r1, [r3, #8]
10002540:	e7b0      	b.n	100024a4 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10002542:	2304      	movs	r3, #4
10002544:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10002546:	3202      	adds	r2, #2
		conv->prec_star = true;
10002548:	430b      	orrs	r3, r1
1000254a:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
1000254c:	7811      	ldrb	r1, [r2, #0]
1000254e:	ab12      	add	r3, sp, #72	; 0x48
10002550:	296c      	cmp	r1, #108	; 0x6c
10002552:	d045      	beq.n	100025e0 <z_cbvprintf_impl+0x248>
10002554:	d829      	bhi.n	100025aa <z_cbvprintf_impl+0x212>
10002556:	2968      	cmp	r1, #104	; 0x68
10002558:	d030      	beq.n	100025bc <z_cbvprintf_impl+0x224>
1000255a:	296a      	cmp	r1, #106	; 0x6a
1000255c:	d04c      	beq.n	100025f8 <z_cbvprintf_impl+0x260>
1000255e:	294c      	cmp	r1, #76	; 0x4c
10002560:	d054      	beq.n	1000260c <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
10002562:	7811      	ldrb	r1, [r2, #0]
10002564:	1c53      	adds	r3, r2, #1
10002566:	aa12      	add	r2, sp, #72	; 0x48
10002568:	9307      	str	r3, [sp, #28]
1000256a:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000256c:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
1000256e:	2978      	cmp	r1, #120	; 0x78
10002570:	d900      	bls.n	10002574 <z_cbvprintf_impl+0x1dc>
10002572:	e0b9      	b.n	100026e8 <z_cbvprintf_impl+0x350>
10002574:	296d      	cmp	r1, #109	; 0x6d
10002576:	d850      	bhi.n	1000261a <z_cbvprintf_impl+0x282>
10002578:	2969      	cmp	r1, #105	; 0x69
1000257a:	d900      	bls.n	1000257e <z_cbvprintf_impl+0x1e6>
1000257c:	e0b4      	b.n	100026e8 <z_cbvprintf_impl+0x350>
1000257e:	2957      	cmp	r1, #87	; 0x57
10002580:	d866      	bhi.n	10002650 <z_cbvprintf_impl+0x2b8>
10002582:	2941      	cmp	r1, #65	; 0x41
10002584:	d003      	beq.n	1000258e <z_cbvprintf_impl+0x1f6>
10002586:	3945      	subs	r1, #69	; 0x45
10002588:	2902      	cmp	r1, #2
1000258a:	d900      	bls.n	1000258e <z_cbvprintf_impl+0x1f6>
1000258c:	e0ac      	b.n	100026e8 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
1000258e:	2307      	movs	r3, #7
10002590:	a912      	add	r1, sp, #72	; 0x48
10002592:	7a8a      	ldrb	r2, [r1, #10]
10002594:	439a      	bics	r2, r3
10002596:	3b03      	subs	r3, #3
10002598:	4313      	orrs	r3, r2
1000259a:	728b      	strb	r3, [r1, #10]
			unsupported = true;
1000259c:	2301      	movs	r3, #1
			break;
1000259e:	e073      	b.n	10002688 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
100025a0:	4373      	muls	r3, r6
100025a2:	3b30      	subs	r3, #48	; 0x30
100025a4:	002a      	movs	r2, r5
100025a6:	185b      	adds	r3, r3, r1
100025a8:	e790      	b.n	100024cc <z_cbvprintf_impl+0x134>
	switch (*sp) {
100025aa:	2974      	cmp	r1, #116	; 0x74
100025ac:	d029      	beq.n	10002602 <z_cbvprintf_impl+0x26a>
100025ae:	297a      	cmp	r1, #122	; 0x7a
100025b0:	d1d7      	bne.n	10002562 <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
100025b2:	2178      	movs	r1, #120	; 0x78
100025b4:	7a58      	ldrb	r0, [r3, #9]
100025b6:	4388      	bics	r0, r1
100025b8:	3948      	subs	r1, #72	; 0x48
100025ba:	e00d      	b.n	100025d8 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
100025bc:	7850      	ldrb	r0, [r2, #1]
100025be:	2178      	movs	r1, #120	; 0x78
100025c0:	2868      	cmp	r0, #104	; 0x68
100025c2:	d106      	bne.n	100025d2 <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
100025c4:	7a58      	ldrb	r0, [r3, #9]
100025c6:	4388      	bics	r0, r1
100025c8:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
100025ca:	4301      	orrs	r1, r0
100025cc:	7259      	strb	r1, [r3, #9]
			++sp;
100025ce:	3202      	adds	r2, #2
100025d0:	e7c7      	b.n	10002562 <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
100025d2:	7a58      	ldrb	r0, [r3, #9]
100025d4:	4388      	bics	r0, r1
100025d6:	2110      	movs	r1, #16
100025d8:	4301      	orrs	r1, r0
100025da:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
100025dc:	3201      	adds	r2, #1
100025de:	e7c0      	b.n	10002562 <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
100025e0:	7850      	ldrb	r0, [r2, #1]
100025e2:	2178      	movs	r1, #120	; 0x78
100025e4:	286c      	cmp	r0, #108	; 0x6c
100025e6:	d103      	bne.n	100025f0 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
100025e8:	7a58      	ldrb	r0, [r3, #9]
100025ea:	4388      	bics	r0, r1
100025ec:	3958      	subs	r1, #88	; 0x58
100025ee:	e7ec      	b.n	100025ca <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
100025f0:	7a58      	ldrb	r0, [r3, #9]
100025f2:	4388      	bics	r0, r1
100025f4:	2118      	movs	r1, #24
100025f6:	e7ef      	b.n	100025d8 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
100025f8:	2178      	movs	r1, #120	; 0x78
100025fa:	7a58      	ldrb	r0, [r3, #9]
100025fc:	4388      	bics	r0, r1
100025fe:	3950      	subs	r1, #80	; 0x50
10002600:	e7ea      	b.n	100025d8 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10002602:	2178      	movs	r1, #120	; 0x78
10002604:	7a58      	ldrb	r0, [r3, #9]
10002606:	4388      	bics	r0, r1
10002608:	3940      	subs	r1, #64	; 0x40
1000260a:	e7e5      	b.n	100025d8 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
1000260c:	8918      	ldrh	r0, [r3, #8]
1000260e:	49a5      	ldr	r1, [pc, #660]	; (100028a4 <z_cbvprintf_impl+0x50c>)
10002610:	4008      	ands	r0, r1
10002612:	49a5      	ldr	r1, [pc, #660]	; (100028a8 <z_cbvprintf_impl+0x510>)
10002614:	4301      	orrs	r1, r0
10002616:	8119      	strh	r1, [r3, #8]
		break;
10002618:	e7e0      	b.n	100025dc <z_cbvprintf_impl+0x244>
1000261a:	2001      	movs	r0, #1
1000261c:	0005      	movs	r5, r0
	switch (conv->specifier) {
1000261e:	396e      	subs	r1, #110	; 0x6e
10002620:	b2c9      	uxtb	r1, r1
10002622:	408d      	lsls	r5, r1
10002624:	0029      	movs	r1, r5
10002626:	4da1      	ldr	r5, [pc, #644]	; (100028ac <z_cbvprintf_impl+0x514>)
10002628:	4229      	tst	r1, r5
1000262a:	d138      	bne.n	1000269e <z_cbvprintf_impl+0x306>
1000262c:	2524      	movs	r5, #36	; 0x24
1000262e:	4229      	tst	r1, r5
10002630:	d151      	bne.n	100026d6 <z_cbvprintf_impl+0x33e>
10002632:	4201      	tst	r1, r0
10002634:	d058      	beq.n	100026e8 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10002636:	2107      	movs	r1, #7
10002638:	7a90      	ldrb	r0, [r2, #10]
1000263a:	4388      	bics	r0, r1
1000263c:	3904      	subs	r1, #4
1000263e:	4301      	orrs	r1, r0
10002640:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10002642:	2278      	movs	r2, #120	; 0x78
10002644:	4013      	ands	r3, r2
10002646:	3b40      	subs	r3, #64	; 0x40
10002648:	425a      	negs	r2, r3
1000264a:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
1000264c:	b2db      	uxtb	r3, r3
1000264e:	e01b      	b.n	10002688 <z_cbvprintf_impl+0x2f0>
10002650:	2001      	movs	r0, #1
	switch (conv->specifier) {
10002652:	000d      	movs	r5, r1
10002654:	0006      	movs	r6, r0
10002656:	3d58      	subs	r5, #88	; 0x58
10002658:	b2ed      	uxtb	r5, r5
1000265a:	40ae      	lsls	r6, r5
1000265c:	0035      	movs	r5, r6
1000265e:	26e2      	movs	r6, #226	; 0xe2
10002660:	0236      	lsls	r6, r6, #8
10002662:	4235      	tst	r5, r6
10002664:	d193      	bne.n	1000258e <z_cbvprintf_impl+0x1f6>
10002666:	4e92      	ldr	r6, [pc, #584]	; (100028b0 <z_cbvprintf_impl+0x518>)
10002668:	4235      	tst	r5, r6
1000266a:	d122      	bne.n	100026b2 <z_cbvprintf_impl+0x31a>
1000266c:	2184      	movs	r1, #132	; 0x84
1000266e:	0289      	lsls	r1, r1, #10
10002670:	420d      	tst	r5, r1
10002672:	d039      	beq.n	100026e8 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10002674:	2507      	movs	r5, #7
10002676:	7a91      	ldrb	r1, [r2, #10]
10002678:	43a9      	bics	r1, r5
1000267a:	4301      	orrs	r1, r0
1000267c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000267e:	2178      	movs	r1, #120	; 0x78
10002680:	400b      	ands	r3, r1
10002682:	2b40      	cmp	r3, #64	; 0x40
10002684:	d011      	beq.n	100026aa <z_cbvprintf_impl+0x312>
	bool unsupported = false;
10002686:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10002688:	aa12      	add	r2, sp, #72	; 0x48
1000268a:	7a11      	ldrb	r1, [r2, #8]
1000268c:	0788      	lsls	r0, r1, #30
1000268e:	0fc0      	lsrs	r0, r0, #31
10002690:	4303      	orrs	r3, r0
10002692:	2002      	movs	r0, #2
10002694:	005b      	lsls	r3, r3, #1
10002696:	4381      	bics	r1, r0
10002698:	4319      	orrs	r1, r3
1000269a:	7211      	strb	r1, [r2, #8]
	return sp;
1000269c:	e6a4      	b.n	100023e8 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
1000269e:	2107      	movs	r1, #7
100026a0:	7a95      	ldrb	r5, [r2, #10]
100026a2:	438d      	bics	r5, r1
100026a4:	3905      	subs	r1, #5
100026a6:	4329      	orrs	r1, r5
100026a8:	e7e8      	b.n	1000267c <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
100026aa:	7a13      	ldrb	r3, [r2, #8]
100026ac:	4303      	orrs	r3, r0
		conv->invalid = true;
100026ae:	7213      	strb	r3, [r2, #8]
		break;
100026b0:	e7e9      	b.n	10002686 <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
100026b2:	2507      	movs	r5, #7
100026b4:	7a96      	ldrb	r6, [r2, #10]
100026b6:	43ae      	bics	r6, r5
100026b8:	3d05      	subs	r5, #5
100026ba:	4335      	orrs	r5, r6
100026bc:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100026be:	2578      	movs	r5, #120	; 0x78
100026c0:	402b      	ands	r3, r5
100026c2:	2b40      	cmp	r3, #64	; 0x40
100026c4:	d102      	bne.n	100026cc <z_cbvprintf_impl+0x334>
			conv->invalid = true;
100026c6:	7a15      	ldrb	r5, [r2, #8]
100026c8:	4328      	orrs	r0, r5
100026ca:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
100026cc:	2963      	cmp	r1, #99	; 0x63
100026ce:	d1da      	bne.n	10002686 <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
100026d0:	1e5a      	subs	r2, r3, #1
100026d2:	4193      	sbcs	r3, r2
100026d4:	e7ba      	b.n	1000264c <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
100026d6:	2107      	movs	r1, #7
100026d8:	7a90      	ldrb	r0, [r2, #10]
100026da:	4388      	bics	r0, r1
100026dc:	3904      	subs	r1, #4
100026de:	4301      	orrs	r1, r0
100026e0:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
100026e2:	2278      	movs	r2, #120	; 0x78
100026e4:	4013      	ands	r3, r2
100026e6:	e7f3      	b.n	100026d0 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
100026e8:	2301      	movs	r3, #1
100026ea:	aa12      	add	r2, sp, #72	; 0x48
100026ec:	7a11      	ldrb	r1, [r2, #8]
100026ee:	430b      	orrs	r3, r1
100026f0:	e7dd      	b.n	100026ae <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
100026f2:	7a19      	ldrb	r1, [r3, #8]
100026f4:	297f      	cmp	r1, #127	; 0x7f
100026f6:	d90f      	bls.n	10002718 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
100026f8:	68db      	ldr	r3, [r3, #12]
		int width = -1;
100026fa:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
100026fc:	ab12      	add	r3, sp, #72	; 0x48
100026fe:	0751      	lsls	r1, r2, #29
10002700:	d50c      	bpl.n	1000271c <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
10002702:	cc04      	ldmia	r4!, {r2}
10002704:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10002706:	2a00      	cmp	r2, #0
10002708:	da0c      	bge.n	10002724 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
1000270a:	2102      	movs	r1, #2
1000270c:	7a5a      	ldrb	r2, [r3, #9]
1000270e:	438a      	bics	r2, r1
10002710:	725a      	strb	r2, [r3, #9]
		int precision = -1;
10002712:	2301      	movs	r3, #1
10002714:	425b      	negs	r3, r3
10002716:	e004      	b.n	10002722 <z_cbvprintf_impl+0x38a>
		int width = -1;
10002718:	2301      	movs	r3, #1
1000271a:	e674      	b.n	10002406 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
1000271c:	0792      	lsls	r2, r2, #30
1000271e:	d5f8      	bpl.n	10002712 <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10002720:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
10002722:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10002724:	2500      	movs	r5, #0
10002726:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10002728:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
1000272a:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
1000272c:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000272e:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10002730:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10002732:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10002734:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10002736:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10002738:	2b01      	cmp	r3, #1
1000273a:	d130      	bne.n	1000279e <z_cbvprintf_impl+0x406>
			switch (length_mod) {
1000273c:	1ed0      	subs	r0, r2, #3
1000273e:	2804      	cmp	r0, #4
10002740:	d804      	bhi.n	1000274c <z_cbvprintf_impl+0x3b4>
10002742:	f7fd fd31 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002746:	450e      	.short	0x450e
10002748:	0e45      	.short	0x0e45
1000274a:	0e          	.byte	0x0e
1000274b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
1000274c:	6823      	ldr	r3, [r4, #0]
1000274e:	17d8      	asrs	r0, r3, #31
10002750:	9312      	str	r3, [sp, #72]	; 0x48
10002752:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10002754:	2a01      	cmp	r2, #1
10002756:	d109      	bne.n	1000276c <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10002758:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
1000275a:	9312      	str	r3, [sp, #72]	; 0x48
1000275c:	17db      	asrs	r3, r3, #31
1000275e:	604b      	str	r3, [r1, #4]
10002760:	e006      	b.n	10002770 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10002762:	cc08      	ldmia	r4!, {r3}
10002764:	9312      	str	r3, [sp, #72]	; 0x48
10002766:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
10002768:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
1000276a:	e002      	b.n	10002772 <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
1000276c:	2a02      	cmp	r2, #2
1000276e:	d014      	beq.n	1000279a <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
10002770:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
10002772:	a912      	add	r1, sp, #72	; 0x48
10002774:	7a0b      	ldrb	r3, [r1, #8]
10002776:	2003      	movs	r0, #3
10002778:	001d      	movs	r5, r3
1000277a:	4005      	ands	r5, r0
1000277c:	4203      	tst	r3, r0
1000277e:	d045      	beq.n	1000280c <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
10002780:	9b07      	ldr	r3, [sp, #28]
10002782:	9a08      	ldr	r2, [sp, #32]
10002784:	9905      	ldr	r1, [sp, #20]
10002786:	9804      	ldr	r0, [sp, #16]
10002788:	f002 fada 	bl	10004d40 <outs>
1000278c:	2800      	cmp	r0, #0
1000278e:	da00      	bge.n	10002792 <z_cbvprintf_impl+0x3fa>
10002790:	e137      	b.n	10002a02 <z_cbvprintf_impl+0x66a>
10002792:	183f      	adds	r7, r7, r0
			continue;
10002794:	9b07      	ldr	r3, [sp, #28]
10002796:	9308      	str	r3, [sp, #32]
10002798:	e605      	b.n	100023a6 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
1000279a:	b21b      	sxth	r3, r3
1000279c:	e7dd      	b.n	1000275a <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
1000279e:	2b02      	cmp	r3, #2
100027a0:	d125      	bne.n	100027ee <z_cbvprintf_impl+0x456>
			switch (length_mod) {
100027a2:	1ed0      	subs	r0, r2, #3
100027a4:	2804      	cmp	r0, #4
100027a6:	d804      	bhi.n	100027b2 <z_cbvprintf_impl+0x41a>
100027a8:	f7fd fcfe 	bl	100001a8 <__gnu_thumb1_case_uqi>
100027ac:	1912120d 	.word	0x1912120d
100027b0:	19          	.byte	0x19
100027b1:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
100027b2:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
100027b4:	2a01      	cmp	r2, #1
100027b6:	d016      	beq.n	100027e6 <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
100027b8:	9312      	str	r3, [sp, #72]	; 0x48
100027ba:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
100027bc:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
100027be:	2a02      	cmp	r2, #2
100027c0:	d1d7      	bne.n	10002772 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
100027c2:	9312      	str	r3, [sp, #72]	; 0x48
100027c4:	e7d5      	b.n	10002772 <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
100027c6:	cc08      	ldmia	r4!, {r3}
100027c8:	9312      	str	r3, [sp, #72]	; 0x48
100027ca:	2300      	movs	r3, #0
100027cc:	9313      	str	r3, [sp, #76]	; 0x4c
100027ce:	e7d0      	b.n	10002772 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
100027d0:	2307      	movs	r3, #7
100027d2:	3407      	adds	r4, #7
100027d4:	439c      	bics	r4, r3
				value->uint =
100027d6:	cc03      	ldmia	r4!, {r0, r1}
100027d8:	9012      	str	r0, [sp, #72]	; 0x48
100027da:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
100027dc:	e7c9      	b.n	10002772 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
100027de:	cc08      	ldmia	r4!, {r3}
100027e0:	9312      	str	r3, [sp, #72]	; 0x48
100027e2:	2300      	movs	r3, #0
100027e4:	e7c0      	b.n	10002768 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
100027e6:	b2db      	uxtb	r3, r3
100027e8:	9312      	str	r3, [sp, #72]	; 0x48
100027ea:	604d      	str	r5, [r1, #4]
100027ec:	e7c1      	b.n	10002772 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
100027ee:	2b04      	cmp	r3, #4
100027f0:	d108      	bne.n	10002804 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
100027f2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
100027f4:	3303      	adds	r3, #3
100027f6:	439c      	bics	r4, r3
100027f8:	6820      	ldr	r0, [r4, #0]
100027fa:	6861      	ldr	r1, [r4, #4]
100027fc:	3408      	adds	r4, #8
100027fe:	9012      	str	r0, [sp, #72]	; 0x48
10002800:	9113      	str	r1, [sp, #76]	; 0x4c
10002802:	e7b6      	b.n	10002772 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10002804:	2b03      	cmp	r3, #3
10002806:	d1b4      	bne.n	10002772 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10002808:	cc08      	ldmia	r4!, {r3}
1000280a:	e7da      	b.n	100027c2 <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
1000280c:	7ac8      	ldrb	r0, [r1, #11]
1000280e:	2878      	cmp	r0, #120	; 0x78
10002810:	d8c0      	bhi.n	10002794 <z_cbvprintf_impl+0x3fc>
10002812:	2862      	cmp	r0, #98	; 0x62
10002814:	d82b      	bhi.n	1000286e <z_cbvprintf_impl+0x4d6>
10002816:	2825      	cmp	r0, #37	; 0x25
10002818:	d100      	bne.n	1000281c <z_cbvprintf_impl+0x484>
1000281a:	e5cf      	b.n	100023bc <z_cbvprintf_impl+0x24>
1000281c:	2858      	cmp	r0, #88	; 0x58
1000281e:	d1b9      	bne.n	10002794 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10002820:	9812      	ldr	r0, [sp, #72]	; 0x48
10002822:	9913      	ldr	r1, [sp, #76]	; 0x4c
10002824:	231e      	movs	r3, #30
10002826:	aa0a      	add	r2, sp, #40	; 0x28
10002828:	189b      	adds	r3, r3, r2
1000282a:	9300      	str	r3, [sp, #0]
1000282c:	aa14      	add	r2, sp, #80	; 0x50
1000282e:	ab0c      	add	r3, sp, #48	; 0x30
10002830:	f002 fa39 	bl	10004ca6 <encode_uint>
			if (precision >= 0) {
10002834:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10002836:	0006      	movs	r6, r0
			if (precision >= 0) {
10002838:	2b00      	cmp	r3, #0
1000283a:	db0d      	blt.n	10002858 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
1000283c:	231e      	movs	r3, #30
				conv->flag_zero = false;
1000283e:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10002840:	aa0a      	add	r2, sp, #40	; 0x28
10002842:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10002844:	aa12      	add	r2, sp, #72	; 0x48
10002846:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10002848:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
1000284a:	4381      	bics	r1, r0
1000284c:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
1000284e:	9906      	ldr	r1, [sp, #24]
10002850:	4299      	cmp	r1, r3
10002852:	d901      	bls.n	10002858 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10002854:	1acb      	subs	r3, r1, r3
10002856:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10002858:	2e00      	cmp	r6, #0
1000285a:	d09b      	beq.n	10002794 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
1000285c:	231e      	movs	r3, #30
1000285e:	aa0a      	add	r2, sp, #40	; 0x28
10002860:	189b      	adds	r3, r3, r2
10002862:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10002864:	9306      	str	r3, [sp, #24]
10002866:	2d00      	cmp	r5, #0
10002868:	d032      	beq.n	100028d0 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
1000286a:	3001      	adds	r0, #1
1000286c:	e030      	b.n	100028d0 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
1000286e:	3863      	subs	r0, #99	; 0x63
10002870:	2815      	cmp	r0, #21
10002872:	d88f      	bhi.n	10002794 <z_cbvprintf_impl+0x3fc>
10002874:	f7fd fca2 	bl	100001bc <__gnu_thumb1_case_shi>
10002878:	0068005e 	.word	0x0068005e
1000287c:	ff8eff8e 	.word	0xff8eff8e
10002880:	ff8eff8e 	.word	0xff8eff8e
10002884:	ff8e0068 	.word	0xff8e0068
10002888:	ff8eff8e 	.word	0xff8eff8e
1000288c:	00a0ff8e 	.word	0x00a0ff8e
10002890:	007c007a 	.word	0x007c007a
10002894:	ff8eff8e 	.word	0xff8eff8e
10002898:	ff8e001e 	.word	0xff8e001e
1000289c:	ff8e007a 	.word	0xff8e007a
100028a0:	007aff8e 	.word	0x007aff8e
100028a4:	ffff87fd 	.word	0xffff87fd
100028a8:	00004002 	.word	0x00004002
100028ac:	00000482 	.word	0x00000482
100028b0:	00000801 	.word	0x00000801
			if (precision >= 0) {
100028b4:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
100028b6:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
100028b8:	2b00      	cmp	r3, #0
100028ba:	db37      	blt.n	1000292c <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
100028bc:	0019      	movs	r1, r3
100028be:	0030      	movs	r0, r6
100028c0:	f002 fb09 	bl	10004ed6 <strnlen>
			bpe = bps + len;
100028c4:	1833      	adds	r3, r6, r0
		char sign = 0;
100028c6:	2500      	movs	r5, #0
			bpe = bps + len;
100028c8:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
100028ca:	2e00      	cmp	r6, #0
100028cc:	d100      	bne.n	100028d0 <z_cbvprintf_impl+0x538>
100028ce:	e761      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
100028d0:	ab12      	add	r3, sp, #72	; 0x48
100028d2:	7a9b      	ldrb	r3, [r3, #10]
100028d4:	2210      	movs	r2, #16
100028d6:	0019      	movs	r1, r3
100028d8:	4011      	ands	r1, r2
100028da:	910b      	str	r1, [sp, #44]	; 0x2c
100028dc:	4213      	tst	r3, r2
100028de:	d100      	bne.n	100028e2 <z_cbvprintf_impl+0x54a>
100028e0:	e085      	b.n	100029ee <z_cbvprintf_impl+0x656>
			nj_len += 2U;
100028e2:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
100028e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
100028e6:	920a      	str	r2, [sp, #40]	; 0x28
100028e8:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
100028ea:	065b      	lsls	r3, r3, #25
100028ec:	d501      	bpl.n	100028f2 <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
100028ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
100028f0:	18c0      	adds	r0, r0, r3
		if (width > 0) {
100028f2:	9b03      	ldr	r3, [sp, #12]
100028f4:	2b00      	cmp	r3, #0
100028f6:	dc00      	bgt.n	100028fa <z_cbvprintf_impl+0x562>
100028f8:	e094      	b.n	10002a24 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
100028fa:	1a1b      	subs	r3, r3, r0
100028fc:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
100028fe:	ab12      	add	r3, sp, #72	; 0x48
10002900:	7a1b      	ldrb	r3, [r3, #8]
10002902:	075a      	lsls	r2, r3, #29
10002904:	0fd1      	lsrs	r1, r2, #31
10002906:	9108      	str	r1, [sp, #32]
10002908:	2a00      	cmp	r2, #0
1000290a:	da00      	bge.n	1000290e <z_cbvprintf_impl+0x576>
1000290c:	e08a      	b.n	10002a24 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
1000290e:	065b      	lsls	r3, r3, #25
10002910:	d400      	bmi.n	10002914 <z_cbvprintf_impl+0x57c>
10002912:	e078      	b.n	10002a06 <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10002914:	2d00      	cmp	r5, #0
10002916:	d007      	beq.n	10002928 <z_cbvprintf_impl+0x590>
						OUTC(sign);
10002918:	0028      	movs	r0, r5
1000291a:	9905      	ldr	r1, [sp, #20]
1000291c:	9b04      	ldr	r3, [sp, #16]
1000291e:	4798      	blx	r3
10002920:	2800      	cmp	r0, #0
10002922:	db6e      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002924:	9d08      	ldr	r5, [sp, #32]
10002926:	3701      	adds	r7, #1
					pad = '0';
10002928:	2330      	movs	r3, #48	; 0x30
1000292a:	e06d      	b.n	10002a08 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
1000292c:	0030      	movs	r0, r6
1000292e:	f002 faca 	bl	10004ec6 <strlen>
10002932:	e7c7      	b.n	100028c4 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10002934:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10002936:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002938:	ae0c      	add	r6, sp, #48	; 0x30
1000293a:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
1000293c:	aa0a      	add	r2, sp, #40	; 0x28
1000293e:	189b      	adds	r3, r3, r2
		char sign = 0;
10002940:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10002942:	2001      	movs	r0, #1
			bpe = buf + 1;
10002944:	9306      	str	r3, [sp, #24]
10002946:	e7c3      	b.n	100028d0 <z_cbvprintf_impl+0x538>
				sign = '+';
10002948:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
1000294a:	071a      	lsls	r2, r3, #28
1000294c:	d402      	bmi.n	10002954 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
1000294e:	06db      	lsls	r3, r3, #27
10002950:	0fdb      	lsrs	r3, r3, #31
10002952:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10002954:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10002958:	2b00      	cmp	r3, #0
1000295a:	db00      	blt.n	1000295e <z_cbvprintf_impl+0x5c6>
1000295c:	e760      	b.n	10002820 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
1000295e:	2100      	movs	r1, #0
10002960:	4250      	negs	r0, r2
10002962:	4199      	sbcs	r1, r3
				sign = '-';
10002964:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10002966:	9012      	str	r0, [sp, #72]	; 0x48
10002968:	9113      	str	r1, [sp, #76]	; 0x4c
1000296a:	e759      	b.n	10002820 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
1000296c:	2500      	movs	r5, #0
1000296e:	e757      	b.n	10002820 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
10002970:	9812      	ldr	r0, [sp, #72]	; 0x48
10002972:	ad12      	add	r5, sp, #72	; 0x48
10002974:	2800      	cmp	r0, #0
10002976:	d034      	beq.n	100029e2 <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10002978:	231e      	movs	r3, #30
1000297a:	aa0a      	add	r2, sp, #40	; 0x28
1000297c:	189b      	adds	r3, r3, r2
1000297e:	9300      	str	r3, [sp, #0]
10002980:	aa14      	add	r2, sp, #80	; 0x50
10002982:	ab0c      	add	r3, sp, #48	; 0x30
10002984:	2100      	movs	r1, #0
10002986:	f002 f98e 	bl	10004ca6 <encode_uint>
				conv->altform_0c = true;
1000298a:	23ef      	movs	r3, #239	; 0xef
1000298c:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000298e:	0006      	movs	r6, r0
				conv->altform_0c = true;
10002990:	401a      	ands	r2, r3
10002992:	4b48      	ldr	r3, [pc, #288]	; (10002ab4 <z_cbvprintf_impl+0x71c>)
10002994:	4313      	orrs	r3, r2
10002996:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10002998:	2500      	movs	r5, #0
			if (precision >= 0) {
1000299a:	9b06      	ldr	r3, [sp, #24]
1000299c:	42ab      	cmp	r3, r5
1000299e:	db00      	blt.n	100029a2 <z_cbvprintf_impl+0x60a>
100029a0:	e74c      	b.n	1000283c <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
100029a2:	42a8      	cmp	r0, r5
100029a4:	d100      	bne.n	100029a8 <z_cbvprintf_impl+0x610>
100029a6:	e6f5      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100029a8:	231e      	movs	r3, #30
100029aa:	aa0a      	add	r2, sp, #40	; 0x28
100029ac:	189b      	adds	r3, r3, r2
100029ae:	1a18      	subs	r0, r3, r0
100029b0:	231e      	movs	r3, #30
100029b2:	189b      	adds	r3, r3, r2
100029b4:	9306      	str	r3, [sp, #24]
100029b6:	e78b      	b.n	100028d0 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
100029b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
100029ba:	2a07      	cmp	r2, #7
100029bc:	d900      	bls.n	100029c0 <z_cbvprintf_impl+0x628>
100029be:	e6e9      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
100029c0:	0010      	movs	r0, r2
100029c2:	f7fd fbf1 	bl	100001a8 <__gnu_thumb1_case_uqi>
100029c6:	040c      	.short	0x040c
100029c8:	08080c06 	.word	0x08080c06
100029cc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
100029ce:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
100029d0:	e6e0      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
100029d2:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
100029d4:	e6de      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
100029d6:	17fa      	asrs	r2, r7, #31
100029d8:	601f      	str	r7, [r3, #0]
100029da:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
100029dc:	e6da      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
100029de:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
100029e0:	e6d8      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
100029e2:	4b35      	ldr	r3, [pc, #212]	; (10002ab8 <z_cbvprintf_impl+0x720>)
		char sign = 0;
100029e4:	0005      	movs	r5, r0
100029e6:	4e35      	ldr	r6, [pc, #212]	; (10002abc <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
100029e8:	2005      	movs	r0, #5
			bpe = bps + 5;
100029ea:	9306      	str	r3, [sp, #24]
100029ec:	e770      	b.n	100028d0 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
100029ee:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
100029f0:	0fd2      	lsrs	r2, r2, #31
100029f2:	1880      	adds	r0, r0, r2
100029f4:	e776      	b.n	100028e4 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
100029f6:	9905      	ldr	r1, [sp, #20]
100029f8:	9809      	ldr	r0, [sp, #36]	; 0x24
100029fa:	9b04      	ldr	r3, [sp, #16]
100029fc:	4798      	blx	r3
100029fe:	2800      	cmp	r0, #0
10002a00:	da05      	bge.n	10002a0e <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10002a02:	b019      	add	sp, #100	; 0x64
10002a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10002a06:	2320      	movs	r3, #32
					pad = '0';
10002a08:	9309      	str	r3, [sp, #36]	; 0x24
10002a0a:	9b03      	ldr	r3, [sp, #12]
10002a0c:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10002a0e:	9b08      	ldr	r3, [sp, #32]
10002a10:	001a      	movs	r2, r3
10002a12:	3a01      	subs	r2, #1
10002a14:	9208      	str	r2, [sp, #32]
10002a16:	2b00      	cmp	r3, #0
10002a18:	dced      	bgt.n	100029f6 <z_cbvprintf_impl+0x65e>
10002a1a:	9a03      	ldr	r2, [sp, #12]
10002a1c:	19d7      	adds	r7, r2, r7
10002a1e:	1aff      	subs	r7, r7, r3
10002a20:	9b08      	ldr	r3, [sp, #32]
10002a22:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10002a24:	2d00      	cmp	r5, #0
10002a26:	d006      	beq.n	10002a36 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10002a28:	0028      	movs	r0, r5
10002a2a:	9905      	ldr	r1, [sp, #20]
10002a2c:	9b04      	ldr	r3, [sp, #16]
10002a2e:	4798      	blx	r3
10002a30:	2800      	cmp	r0, #0
10002a32:	dbe6      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002a34:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10002a36:	ab12      	add	r3, sp, #72	; 0x48
10002a38:	7a9b      	ldrb	r3, [r3, #10]
10002a3a:	06da      	lsls	r2, r3, #27
10002a3c:	d401      	bmi.n	10002a42 <z_cbvprintf_impl+0x6aa>
10002a3e:	071b      	lsls	r3, r3, #28
10002a40:	d506      	bpl.n	10002a50 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10002a42:	2030      	movs	r0, #48	; 0x30
10002a44:	9905      	ldr	r1, [sp, #20]
10002a46:	9b04      	ldr	r3, [sp, #16]
10002a48:	4798      	blx	r3
10002a4a:	2800      	cmp	r0, #0
10002a4c:	dbd9      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002a4e:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10002a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002a52:	2b00      	cmp	r3, #0
10002a54:	d007      	beq.n	10002a66 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10002a56:	ab12      	add	r3, sp, #72	; 0x48
10002a58:	7ad8      	ldrb	r0, [r3, #11]
10002a5a:	9905      	ldr	r1, [sp, #20]
10002a5c:	9b04      	ldr	r3, [sp, #16]
10002a5e:	4798      	blx	r3
10002a60:	2800      	cmp	r0, #0
10002a62:	dbce      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002a64:	3701      	adds	r7, #1
				while (width-- > 0) {
10002a66:	003d      	movs	r5, r7
10002a68:	e006      	b.n	10002a78 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10002a6a:	2030      	movs	r0, #48	; 0x30
10002a6c:	9905      	ldr	r1, [sp, #20]
10002a6e:	9b04      	ldr	r3, [sp, #16]
10002a70:	4798      	blx	r3
10002a72:	2800      	cmp	r0, #0
10002a74:	dbc5      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002a76:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10002a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002a7a:	19db      	adds	r3, r3, r7
10002a7c:	1b5b      	subs	r3, r3, r5
10002a7e:	2b00      	cmp	r3, #0
10002a80:	dcf3      	bgt.n	10002a6a <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10002a82:	0032      	movs	r2, r6
10002a84:	9b06      	ldr	r3, [sp, #24]
10002a86:	9905      	ldr	r1, [sp, #20]
10002a88:	9804      	ldr	r0, [sp, #16]
10002a8a:	f002 f959 	bl	10004d40 <outs>
10002a8e:	2800      	cmp	r0, #0
10002a90:	dbb7      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002a92:	1947      	adds	r7, r0, r5
10002a94:	003d      	movs	r5, r7
		while (width > 0) {
10002a96:	9b03      	ldr	r3, [sp, #12]
10002a98:	195b      	adds	r3, r3, r5
10002a9a:	1bdb      	subs	r3, r3, r7
10002a9c:	2b00      	cmp	r3, #0
10002a9e:	dc00      	bgt.n	10002aa2 <z_cbvprintf_impl+0x70a>
10002aa0:	e678      	b.n	10002794 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10002aa2:	2020      	movs	r0, #32
10002aa4:	9905      	ldr	r1, [sp, #20]
10002aa6:	9b04      	ldr	r3, [sp, #16]
10002aa8:	4798      	blx	r3
10002aaa:	2800      	cmp	r0, #0
10002aac:	dba9      	blt.n	10002a02 <z_cbvprintf_impl+0x66a>
10002aae:	3701      	adds	r7, #1
			--width;
10002ab0:	e7f1      	b.n	10002a96 <z_cbvprintf_impl+0x6fe>
10002ab2:	46c0      	nop			; (mov r8, r8)
10002ab4:	00007810 	.word	0x00007810
10002ab8:	100059aa 	.word	0x100059aa
10002abc:	100059a5 	.word	0x100059a5

10002ac0 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
10002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ac2:	b085      	sub	sp, #20
10002ac4:	9001      	str	r0, [sp, #4]
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
10002ac6:	482f      	ldr	r0, [pc, #188]	; (10002b84 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
10002ac8:	9103      	str	r1, [sp, #12]
	if (atomic_inc(&initialized) != 0) {
10002aca:	f002 f95a 	bl	10004d82 <atomic_inc>
10002ace:	1e06      	subs	r6, r0, #0
10002ad0:	d10a      	bne.n	10002ae8 <z_log_init.isra.0+0x28>
	uint32_t mask = 0;
10002ad2:	0004      	movs	r4, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
10002ad4:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002ad6:	4d2c      	ldr	r5, [pc, #176]	; (10002b88 <z_log_init.isra.0+0xc8>)
10002ad8:	4b2c      	ldr	r3, [pc, #176]	; (10002b8c <z_log_init.isra.0+0xcc>)
10002ada:	429d      	cmp	r5, r3
10002adc:	d306      	bcc.n	10002aec <z_log_init.isra.0+0x2c>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
10002ade:	9b01      	ldr	r3, [sp, #4]
10002ae0:	2b00      	cmp	r3, #0
10002ae2:	d001      	beq.n	10002ae8 <z_log_init.isra.0+0x28>
		while (mask) {
10002ae4:	2c00      	cmp	r4, #0
10002ae6:	d11f      	bne.n	10002b28 <z_log_init.isra.0+0x68>
			}
		}
	}

	return mask;
}
10002ae8:	b005      	add	sp, #20
10002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (backend->autostart) {
10002aec:	7b2b      	ldrb	r3, [r5, #12]
10002aee:	2b00      	cmp	r3, #0
10002af0:	d010      	beq.n	10002b14 <z_log_init.isra.0+0x54>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
10002af2:	682b      	ldr	r3, [r5, #0]
10002af4:	68db      	ldr	r3, [r3, #12]
10002af6:	2b00      	cmp	r3, #0
10002af8:	d001      	beq.n	10002afe <z_log_init.isra.0+0x3e>
		backend->api->init(backend);
10002afa:	0028      	movs	r0, r5
10002afc:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
10002afe:	682b      	ldr	r3, [r5, #0]
10002b00:	691b      	ldr	r3, [r3, #16]
10002b02:	2b00      	cmp	r3, #0
10002b04:	d108      	bne.n	10002b18 <z_log_init.isra.0+0x58>
				log_backend_enable(backend,
10002b06:	686b      	ldr	r3, [r5, #4]
10002b08:	2204      	movs	r2, #4
10002b0a:	0028      	movs	r0, r5
10002b0c:	6819      	ldr	r1, [r3, #0]
10002b0e:	f000 f8c1 	bl	10002c94 <log_backend_enable>
			i++;
10002b12:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002b14:	3510      	adds	r5, #16
10002b16:	e7df      	b.n	10002ad8 <z_log_init.isra.0+0x18>
		return backend->api->is_ready(backend);
10002b18:	0028      	movs	r0, r5
10002b1a:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
10002b1c:	2800      	cmp	r0, #0
10002b1e:	d0f2      	beq.n	10002b06 <z_log_init.isra.0+0x46>
				mask |= BIT(i);
10002b20:	003b      	movs	r3, r7
10002b22:	40b3      	lsls	r3, r6
10002b24:	431c      	orrs	r4, r3
10002b26:	e7f4      	b.n	10002b12 <z_log_init.isra.0+0x52>
10002b28:	0027      	movs	r7, r4
		uint32_t i = __builtin_ctz(mask_cpy);
10002b2a:	0020      	movs	r0, r4
10002b2c:	f7fd fbf4 	bl	10000318 <__ctzsi2>
		mask_cpy &= ~BIT(i);
10002b30:	2301      	movs	r3, #1
10002b32:	4083      	lsls	r3, r0
10002b34:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b36:	4e14      	ldr	r6, [pc, #80]	; (10002b88 <z_log_init.isra.0+0xc8>)
10002b38:	0105      	lsls	r5, r0, #4
		mask_cpy &= ~BIT(i);
10002b3a:	439c      	bics	r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b3c:	1973      	adds	r3, r6, r5
10002b3e:	9301      	str	r3, [sp, #4]
10002b40:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
10002b42:	9202      	str	r2, [sp, #8]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b44:	2b00      	cmp	r3, #0
10002b46:	d00c      	beq.n	10002b62 <z_log_init.isra.0+0xa2>
	if (backend->api->is_ready != NULL) {
10002b48:	59ab      	ldr	r3, [r5, r6]
10002b4a:	691b      	ldr	r3, [r3, #16]
10002b4c:	2b00      	cmp	r3, #0
10002b4e:	d113      	bne.n	10002b78 <z_log_init.isra.0+0xb8>
			mask &= ~BIT(i);
10002b50:	9b02      	ldr	r3, [sp, #8]
					   backend->cb->ctx,
10002b52:	1976      	adds	r6, r6, r5
			mask &= ~BIT(i);
10002b54:	401f      	ands	r7, r3
			log_backend_enable(backend,
10002b56:	6873      	ldr	r3, [r6, #4]
10002b58:	2204      	movs	r2, #4
10002b5a:	6819      	ldr	r1, [r3, #0]
10002b5c:	9801      	ldr	r0, [sp, #4]
10002b5e:	f000 f899 	bl	10002c94 <log_backend_enable>
	while (mask_cpy) {
10002b62:	2c00      	cmp	r4, #0
10002b64:	d1e1      	bne.n	10002b2a <z_log_init.isra.0+0x6a>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
10002b66:	9b03      	ldr	r3, [sp, #12]
10002b68:	2b00      	cmp	r3, #0
10002b6a:	d003      	beq.n	10002b74 <z_log_init.isra.0+0xb4>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10002b6c:	2064      	movs	r0, #100	; 0x64
10002b6e:	2100      	movs	r1, #0
10002b70:	f001 fe44 	bl	100047fc <z_impl_k_sleep>
10002b74:	003c      	movs	r4, r7
10002b76:	e7b5      	b.n	10002ae4 <z_log_init.isra.0+0x24>
		return backend->api->is_ready(backend);
10002b78:	9801      	ldr	r0, [sp, #4]
10002b7a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b7c:	2800      	cmp	r0, #0
10002b7e:	d1f0      	bne.n	10002b62 <z_log_init.isra.0+0xa2>
10002b80:	e7e6      	b.n	10002b50 <z_log_init.isra.0+0x90>
10002b82:	46c0      	nop			; (mov r8, r8)
10002b84:	20000128 	.word	0x20000128
10002b88:	10005754 	.word	0x10005754
10002b8c:	10005764 	.word	0x10005764

10002b90 <log_format_func_t_get>:
	return format_table[log_type];
10002b90:	4b01      	ldr	r3, [pc, #4]	; (10002b98 <log_format_func_t_get+0x8>)
10002b92:	0080      	lsls	r0, r0, #2
10002b94:	58c0      	ldr	r0, [r0, r3]
}
10002b96:	4770      	bx	lr
10002b98:	100057b4 	.word	0x100057b4

10002b9c <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
10002b9c:	0003      	movs	r3, r0
10002b9e:	b510      	push	{r4, lr}
10002ba0:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
10002ba2:	2b00      	cmp	r3, #0
10002ba4:	d005      	beq.n	10002bb2 <log_set_timestamp_func+0x16>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
10002ba6:	4a04      	ldr	r2, [pc, #16]	; (10002bb8 <log_set_timestamp_func+0x1c>)
10002ba8:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
10002baa:	f000 fa75 	bl	10003098 <log_output_timestamp_freq_set>
	}

	return 0;
10002bae:	2000      	movs	r0, #0
}
10002bb0:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002bb2:	2016      	movs	r0, #22
10002bb4:	4240      	negs	r0, r0
10002bb6:	e7fb      	b.n	10002bb0 <log_set_timestamp_func+0x14>
10002bb8:	20000004 	.word	0x20000004

10002bbc <log_core_init>:
	panic_mode = false;
10002bbc:	2200      	movs	r2, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002bbe:	21fa      	movs	r1, #250	; 0xfa
{
10002bc0:	b510      	push	{r4, lr}
	panic_mode = false;
10002bc2:	4b04      	ldr	r3, [pc, #16]	; (10002bd4 <log_core_init+0x18>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002bc4:	4804      	ldr	r0, [pc, #16]	; (10002bd8 <log_core_init+0x1c>)
	panic_mode = false;
10002bc6:	701a      	strb	r2, [r3, #0]
	dropped_cnt = 0;
10002bc8:	4b04      	ldr	r3, [pc, #16]	; (10002bdc <log_core_init+0x20>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002bca:	0089      	lsls	r1, r1, #2
	dropped_cnt = 0;
10002bcc:	601a      	str	r2, [r3, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002bce:	f7ff ffe5 	bl	10002b9c <log_set_timestamp_func>
}
10002bd2:	bd10      	pop	{r4, pc}
10002bd4:	200001cc 	.word	0x200001cc
10002bd8:	10004d73 	.word	0x10004d73
10002bdc:	20000120 	.word	0x20000120

10002be0 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
10002be0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
10002be2:	4d0c      	ldr	r5, [pc, #48]	; (10002c14 <z_impl_log_panic+0x34>)
10002be4:	7829      	ldrb	r1, [r5, #0]
10002be6:	2900      	cmp	r1, #0
10002be8:	d108      	bne.n	10002bfc <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
10002bea:	2001      	movs	r0, #1
10002bec:	f7ff ff68 	bl	10002ac0 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002bf0:	4c09      	ldr	r4, [pc, #36]	; (10002c18 <z_impl_log_panic+0x38>)
10002bf2:	4b0a      	ldr	r3, [pc, #40]	; (10002c1c <z_impl_log_panic+0x3c>)
10002bf4:	429c      	cmp	r4, r3
10002bf6:	d302      	bcc.n	10002bfe <z_impl_log_panic+0x1e>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
10002bf8:	2301      	movs	r3, #1
10002bfa:	702b      	strb	r3, [r5, #0]
}
10002bfc:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
10002bfe:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
10002c00:	795b      	ldrb	r3, [r3, #5]
10002c02:	2b00      	cmp	r3, #0
10002c04:	d003      	beq.n	10002c0e <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
10002c06:	6823      	ldr	r3, [r4, #0]
10002c08:	0020      	movs	r0, r4
10002c0a:	689b      	ldr	r3, [r3, #8]
10002c0c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c0e:	3410      	adds	r4, #16
10002c10:	e7ef      	b.n	10002bf2 <z_impl_log_panic+0x12>
10002c12:	46c0      	nop			; (mov r8, r8)
10002c14:	200001cc 	.word	0x200001cc
10002c18:	10005754 	.word	0x10005754
10002c1c:	10005764 	.word	0x10005764

10002c20 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
10002c20:	b510      	push	{r4, lr}
10002c22:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
10002c24:	4804      	ldr	r0, [pc, #16]	; (10002c38 <z_log_dropped+0x18>)
10002c26:	f002 f8ac 	bl	10004d82 <atomic_inc>
	if (buffered) {
10002c2a:	2c00      	cmp	r4, #0
10002c2c:	d003      	beq.n	10002c36 <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
10002c2e:	2101      	movs	r1, #1
10002c30:	4802      	ldr	r0, [pc, #8]	; (10002c3c <z_log_dropped+0x1c>)
10002c32:	f002 fc9a 	bl	1000556a <z_impl_atomic_sub>
		atomic_dec(&buffered_cnt);
	}
}
10002c36:	bd10      	pop	{r4, pc}
10002c38:	20000120 	.word	0x20000120
10002c3c:	20000124 	.word	0x20000124

10002c40 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
10002c40:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
10002c42:	4b0a      	ldr	r3, [pc, #40]	; (10002c6c <z_log_msg_commit+0x2c>)
{
10002c44:	0005      	movs	r5, r0
	msg->hdr.timestamp = timestamp_func();
10002c46:	681b      	ldr	r3, [r3, #0]
10002c48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c4a:	4c09      	ldr	r4, [pc, #36]	; (10002c70 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
10002c4c:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c4e:	4b09      	ldr	r3, [pc, #36]	; (10002c74 <z_log_msg_commit+0x34>)
10002c50:	429c      	cmp	r4, r3
10002c52:	d300      	bcc.n	10002c56 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
10002c54:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
10002c56:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
10002c58:	795b      	ldrb	r3, [r3, #5]
10002c5a:	2b00      	cmp	r3, #0
10002c5c:	d004      	beq.n	10002c68 <z_log_msg_commit+0x28>
	backend->api->process(backend, msg);
10002c5e:	6823      	ldr	r3, [r4, #0]
10002c60:	0029      	movs	r1, r5
10002c62:	0020      	movs	r0, r4
10002c64:	681b      	ldr	r3, [r3, #0]
10002c66:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c68:	3410      	adds	r4, #16
10002c6a:	e7f0      	b.n	10002c4e <z_log_msg_commit+0xe>
10002c6c:	20000004 	.word	0x20000004
10002c70:	10005754 	.word	0x10005754
10002c74:	10005764 	.word	0x10005764

10002c78 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
10002c78:	4b04      	ldr	r3, [pc, #16]	; (10002c8c <log_source_name_get+0x14>)
10002c7a:	4a05      	ldr	r2, [pc, #20]	; (10002c90 <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10002c7c:	2000      	movs	r0, #0
10002c7e:	1a9b      	subs	r3, r3, r2
10002c80:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
10002c82:	4299      	cmp	r1, r3
10002c84:	d201      	bcs.n	10002c8a <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
10002c86:	00c9      	lsls	r1, r1, #3
10002c88:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
10002c8a:	4770      	bx	lr
10002c8c:	10005754 	.word	0x10005754
10002c90:	1000571c 	.word	0x1000571c

10002c94 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10002c94:	4b08      	ldr	r3, [pc, #32]	; (10002cb8 <log_backend_enable+0x24>)
{
10002c96:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
10002c98:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
10002c9a:	6844      	ldr	r4, [r0, #4]
10002c9c:	111b      	asrs	r3, r3, #4
10002c9e:	3301      	adds	r3, #1
10002ca0:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
10002ca2:	6843      	ldr	r3, [r0, #4]
10002ca4:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
10002ca6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
10002ca8:	6843      	ldr	r3, [r0, #4]
10002caa:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10002cac:	6843      	ldr	r3, [r0, #4]
10002cae:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
10002cb0:	f002 f880 	bl	10004db4 <z_log_notify_backend_enabled>
}
10002cb4:	bd10      	pop	{r4, pc}
10002cb6:	46c0      	nop			; (mov r8, r8)
10002cb8:	10005754 	.word	0x10005754

10002cbc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10002cbe:	0004      	movs	r4, r0
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
10002cc0:	2000      	movs	r0, #0
{
10002cc2:	b087      	sub	sp, #28
10002cc4:	af02      	add	r7, sp, #8
10002cc6:	607b      	str	r3, [r7, #4]
	if (fmt) {
10002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
{
10002cca:	000e      	movs	r6, r1
10002ccc:	0015      	movs	r5, r2
	if (fmt) {
10002cce:	4283      	cmp	r3, r0
10002cd0:	d007      	beq.n	10002ce2 <z_impl_z_log_msg_runtime_vcreate+0x26>
		va_copy(ap2, ap);
10002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
10002cd4:	2110      	movs	r1, #16
		va_copy(ap2, ap);
10002cd6:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
10002cd8:	9300      	str	r3, [sp, #0]
10002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002cde:	f7ff f96d 	bl	10001fbc <cbvprintf_package>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
10002ce2:	2207      	movs	r2, #7
10002ce4:	0023      	movs	r3, r4
10002ce6:	4015      	ands	r5, r2
10002ce8:	4013      	ands	r3, r2
10002cea:	4917      	ldr	r1, [pc, #92]	; (10002d48 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
10002cec:	00db      	lsls	r3, r3, #3
10002cee:	01ad      	lsls	r5, r5, #6
10002cf0:	431d      	orrs	r5, r3
10002cf2:	0243      	lsls	r3, r0, #9
10002cf4:	400b      	ands	r3, r1
10002cf6:	431d      	orrs	r5, r3
10002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002cfa:	4914      	ldr	r1, [pc, #80]	; (10002d4c <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
10002cfc:	6abc      	ldr	r4, [r7, #40]	; 0x28
	struct log_msg_desc desc =
10002cfe:	04db      	lsls	r3, r3, #19
10002d00:	400b      	ands	r3, r1
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
10002d02:	3417      	adds	r4, #23
	struct log_msg_desc desc =
10002d04:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
10002d06:	1823      	adds	r3, r4, r0
10002d08:	4393      	bics	r3, r2
10002d0a:	3303      	adds	r3, #3
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
10002d0c:	3a04      	subs	r2, #4
10002d0e:	4393      	bics	r3, r2
10002d10:	3307      	adds	r3, #7
10002d12:	40d3      	lsrs	r3, r2
10002d14:	4093      	lsls	r3, r2
10002d16:	466a      	mov	r2, sp
10002d18:	1ad3      	subs	r3, r2, r3
10002d1a:	469d      	mov	sp, r3
		pkg = msg->data;
	}

	if (pkg && fmt) {
10002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		msg = alloca(msg_wlen * sizeof(int));
10002d1e:	ac02      	add	r4, sp, #8
	if (pkg && fmt) {
10002d20:	2b00      	cmp	r3, #0
10002d22:	d008      	beq.n	10002d36 <z_impl_z_log_msg_runtime_vcreate+0x7a>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
10002d24:	0001      	movs	r1, r0
10002d26:	0020      	movs	r0, r4
10002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002d2a:	3010      	adds	r0, #16
10002d2c:	9300      	str	r3, [sp, #0]
10002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002d32:	f7ff f943 	bl	10001fbc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
10002d36:	002a      	movs	r2, r5
10002d38:	0031      	movs	r1, r6
10002d3a:	0020      	movs	r0, r4
10002d3c:	687b      	ldr	r3, [r7, #4]
10002d3e:	f002 f83c 	bl	10004dba <z_log_msg_finalize>
	}
}
10002d42:	46bd      	mov	sp, r7
10002d44:	b005      	add	sp, #20
10002d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002d48:	0007fe00 	.word	0x0007fe00
10002d4c:	7ff80000 	.word	0x7ff80000

10002d50 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
10002d50:	b40e      	push	{r1, r2, r3}
10002d52:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d54:	4c05      	ldr	r4, [pc, #20]	; (10002d6c <print_formatted+0x1c>)
{
10002d56:	ab05      	add	r3, sp, #20
10002d58:	cb04      	ldmia	r3!, {r2}
10002d5a:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d5c:	0020      	movs	r0, r4
	va_start(args, fmt);
10002d5e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d60:	f002 f86d 	bl	10004e3e <cbvprintf>
	va_end(args);

	return length;
}
10002d64:	bc1e      	pop	{r1, r2, r3, r4}
10002d66:	bc08      	pop	{r3}
10002d68:	b003      	add	sp, #12
10002d6a:	4718      	bx	r3
10002d6c:	10004def 	.word	0x10004def

10002d70 <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
10002d70:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
10002d72:	06cb      	lsls	r3, r1, #27
10002d74:	d404      	bmi.n	10002d80 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
10002d76:	0689      	lsls	r1, r1, #26
10002d78:	d503      	bpl.n	10002d82 <newline_print+0x12>
		print_formatted(ctx, "\n");
10002d7a:	4903      	ldr	r1, [pc, #12]	; (10002d88 <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
10002d7c:	f7ff ffe8 	bl	10002d50 <print_formatted>
	}
}
10002d80:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
10002d82:	4902      	ldr	r1, [pc, #8]	; (10002d8c <newline_print+0x1c>)
10002d84:	e7fa      	b.n	10002d7c <newline_print+0xc>
10002d86:	46c0      	nop			; (mov r8, r8)
10002d88:	100059b9 	.word	0x100059b9
10002d8c:	100059b8 	.word	0x100059b8

10002d90 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d92:	b08f      	sub	sp, #60	; 0x3c
10002d94:	9306      	str	r3, [sp, #24]
10002d96:	ab14      	add	r3, sp, #80	; 0x50
10002d98:	781b      	ldrb	r3, [r3, #0]
10002d9a:	0007      	movs	r7, r0
10002d9c:	000c      	movs	r4, r1
10002d9e:	9208      	str	r2, [sp, #32]
10002da0:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10002da2:	2b00      	cmp	r3, #0
10002da4:	d100      	bne.n	10002da8 <log_output_process+0x18>
10002da6:	e09c      	b.n	10002ee2 <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10002da8:	2502      	movs	r5, #2
10002daa:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10002dac:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10002dae:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10002db0:	2301      	movs	r3, #1
10002db2:	401a      	ands	r2, r3
10002db4:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
10002db6:	9a18      	ldr	r2, [sp, #96]	; 0x60
10002db8:	3307      	adds	r3, #7
10002dba:	401a      	ands	r2, r3
10002dbc:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10002dbe:	2600      	movs	r6, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10002dc0:	f001 fff9 	bl	10004db6 <z_log_get_tag>
10002dc4:	0002      	movs	r2, r0
	if (tag) {
10002dc6:	42b0      	cmp	r0, r6
10002dc8:	d004      	beq.n	10002dd4 <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
10002dca:	0038      	movs	r0, r7
10002dcc:	4983      	ldr	r1, [pc, #524]	; (10002fdc <log_output_process+0x24c>)
10002dce:	f7ff ffbf 	bl	10002d50 <print_formatted>
10002dd2:	0006      	movs	r6, r0
	if (stamp) {
10002dd4:	2d00      	cmp	r5, #0
10002dd6:	d009      	beq.n	10002dec <log_output_process+0x5c>
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
10002dd8:	2344      	movs	r3, #68	; 0x44
	if (!format) {
10002dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
10002ddc:	421a      	tst	r2, r3
10002dde:	d144      	bne.n	10002e6a <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10002de0:	0022      	movs	r2, r4
10002de2:	0038      	movs	r0, r7
10002de4:	497e      	ldr	r1, [pc, #504]	; (10002fe0 <log_output_process+0x250>)
10002de6:	f7ff ffb3 	bl	10002d50 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
10002dea:	1836      	adds	r6, r6, r0
	if (color) {
10002dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002dee:	2b00      	cmp	r3, #0
10002df0:	d00a      	beq.n	10002e08 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10002df2:	9a05      	ldr	r2, [sp, #20]
10002df4:	4b7b      	ldr	r3, [pc, #492]	; (10002fe4 <log_output_process+0x254>)
10002df6:	0092      	lsls	r2, r2, #2
10002df8:	58d2      	ldr	r2, [r2, r3]
10002dfa:	2a00      	cmp	r2, #0
10002dfc:	d100      	bne.n	10002e00 <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10002dfe:	4a7a      	ldr	r2, [pc, #488]	; (10002fe8 <log_output_process+0x258>)
		print_formatted(output, "%s", log_color);
10002e00:	0038      	movs	r0, r7
10002e02:	497a      	ldr	r1, [pc, #488]	; (10002fec <log_output_process+0x25c>)
10002e04:	f7ff ffa4 	bl	10002d50 <print_formatted>
	int total = 0;
10002e08:	2400      	movs	r4, #0
	if (level_on) {
10002e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002e0c:	42a3      	cmp	r3, r4
10002e0e:	d008      	beq.n	10002e22 <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
10002e10:	9a05      	ldr	r2, [sp, #20]
10002e12:	4b77      	ldr	r3, [pc, #476]	; (10002ff0 <log_output_process+0x260>)
10002e14:	0092      	lsls	r2, r2, #2
10002e16:	0038      	movs	r0, r7
10002e18:	4976      	ldr	r1, [pc, #472]	; (10002ff4 <log_output_process+0x264>)
10002e1a:	58d2      	ldr	r2, [r2, r3]
10002e1c:	f7ff ff98 	bl	10002d50 <print_formatted>
10002e20:	0004      	movs	r4, r0
	if (domain) {
10002e22:	9b08      	ldr	r3, [sp, #32]
10002e24:	2b00      	cmp	r3, #0
10002e26:	d005      	beq.n	10002e34 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
10002e28:	001a      	movs	r2, r3
10002e2a:	0038      	movs	r0, r7
10002e2c:	4972      	ldr	r1, [pc, #456]	; (10002ff8 <log_output_process+0x268>)
10002e2e:	f7ff ff8f 	bl	10002d50 <print_formatted>
10002e32:	1824      	adds	r4, r4, r0
	if (source) {
10002e34:	9b06      	ldr	r3, [sp, #24]
10002e36:	2b00      	cmp	r3, #0
10002e38:	d005      	beq.n	10002e46 <log_output_process+0xb6>
		total += print_formatted(output,
10002e3a:	001a      	movs	r2, r3
10002e3c:	0038      	movs	r0, r7
10002e3e:	496f      	ldr	r1, [pc, #444]	; (10002ffc <log_output_process+0x26c>)
10002e40:	f7ff ff86 	bl	10002d50 <print_formatted>
10002e44:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
10002e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
10002e48:	486d      	ldr	r0, [pc, #436]	; (10003000 <log_output_process+0x270>)
	length += ids_print(output, level_on, func_on, domain, source, level);
10002e4a:	19a4      	adds	r4, r4, r6
	if (package) {
10002e4c:	2b00      	cmp	r3, #0
10002e4e:	d000      	beq.n	10002e52 <log_output_process+0xc2>
10002e50:	e09b      	b.n	10002f8a <log_output_process+0x1fa>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
10002e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002e54:	2b00      	cmp	r3, #0
10002e56:	d151      	bne.n	10002efc <log_output_process+0x16c>
	if (color) {
10002e58:	9b18      	ldr	r3, [sp, #96]	; 0x60
10002e5a:	07db      	lsls	r3, r3, #31
10002e5c:	d500      	bpl.n	10002e60 <log_output_process+0xd0>
10002e5e:	e0b7      	b.n	10002fd0 <log_output_process+0x240>
	newline_print(output, flags);
10002e60:	0038      	movs	r0, r7
10002e62:	9918      	ldr	r1, [sp, #96]	; 0x60
10002e64:	f7ff ff84 	bl	10002d70 <newline_print>
}
10002e68:	e09b      	b.n	10002fa2 <log_output_process+0x212>
		length = 0;
10002e6a:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10002e6c:	4b65      	ldr	r3, [pc, #404]	; (10003004 <log_output_process+0x274>)
10002e6e:	681d      	ldr	r5, [r3, #0]
10002e70:	4285      	cmp	r5, r0
10002e72:	d0ba      	beq.n	10002dea <log_output_process+0x5a>
		timestamp /= timestamp_div;
10002e74:	4b64      	ldr	r3, [pc, #400]	; (10003008 <log_output_process+0x278>)
10002e76:	0020      	movs	r0, r4
10002e78:	6819      	ldr	r1, [r3, #0]
10002e7a:	f7fd f9a9 	bl	100001d0 <__udivsi3>
10002e7e:	0029      	movs	r1, r5
10002e80:	f7fd f9e2 	bl	10000248 <__aeabi_uidivmod>
10002e84:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
10002e86:	21e1      	movs	r1, #225	; 0xe1
10002e88:	0109      	lsls	r1, r1, #4
10002e8a:	9007      	str	r0, [sp, #28]
10002e8c:	f7fd f9dc 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10002e90:	20fa      	movs	r0, #250	; 0xfa
10002e92:	0080      	lsls	r0, r0, #2
10002e94:	9109      	str	r1, [sp, #36]	; 0x24
10002e96:	4360      	muls	r0, r4
10002e98:	0029      	movs	r1, r5
10002e9a:	f7fd f9d5 	bl	10000248 <__aeabi_uidivmod>
10002e9e:	000c      	movs	r4, r1
				length = print_formatted(output,
10002ea0:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10002ea2:	213c      	movs	r1, #60	; 0x3c
10002ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
10002ea6:	f7fd f993 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
10002eaa:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10002eac:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10002eae:	0109      	lsls	r1, r1, #4
10002eb0:	9807      	ldr	r0, [sp, #28]
10002eb2:	f7fd f98d 	bl	100001d0 <__udivsi3>
10002eb6:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
10002eb8:	20fa      	movs	r0, #250	; 0xfa
10002eba:	0080      	lsls	r0, r0, #2
10002ebc:	0029      	movs	r1, r5
10002ebe:	4360      	muls	r0, r4
10002ec0:	f7fd f986 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10002ec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002ec6:	9002      	str	r0, [sp, #8]
10002ec8:	213c      	movs	r1, #60	; 0x3c
10002eca:	9809      	ldr	r0, [sp, #36]	; 0x24
10002ecc:	9301      	str	r3, [sp, #4]
10002ece:	f7fd f9bb 	bl	10000248 <__aeabi_uidivmod>
10002ed2:	0038      	movs	r0, r7
10002ed4:	9100      	str	r1, [sp, #0]
10002ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002ed8:	9a07      	ldr	r2, [sp, #28]
10002eda:	494c      	ldr	r1, [pc, #304]	; (1000300c <log_output_process+0x27c>)
10002edc:	f7ff ff38 	bl	10002d50 <print_formatted>
10002ee0:	e783      	b.n	10002dea <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10002ee2:	9b06      	ldr	r3, [sp, #24]
10002ee4:	484a      	ldr	r0, [pc, #296]	; (10003010 <log_output_process+0x280>)
10002ee6:	2b01      	cmp	r3, #1
10002ee8:	d100      	bne.n	10002eec <log_output_process+0x15c>
10002eea:	4845      	ldr	r0, [pc, #276]	; (10003000 <log_output_process+0x270>)
	if (package) {
10002eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10002eee:	9c05      	ldr	r4, [sp, #20]
	if (package) {
10002ef0:	2b00      	cmp	r3, #0
10002ef2:	d14a      	bne.n	10002f8a <log_output_process+0x1fa>
	if (data_len) {
10002ef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002ef6:	2b00      	cmp	r3, #0
10002ef8:	d053      	beq.n	10002fa2 <log_output_process+0x212>
		prefix_offset = 0;
10002efa:	2400      	movs	r4, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10002efc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10002efe:	2e10      	cmp	r6, #16
10002f00:	d900      	bls.n	10002f04 <log_output_process+0x174>
10002f02:	2610      	movs	r6, #16
	newline_print(output, flags);
10002f04:	0038      	movs	r0, r7
10002f06:	9918      	ldr	r1, [sp, #96]	; 0x60
10002f08:	f7ff ff32 	bl	10002d70 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
10002f0c:	2500      	movs	r5, #0
10002f0e:	42ac      	cmp	r4, r5
10002f10:	dc4c      	bgt.n	10002fac <log_output_process+0x21c>
			print_formatted(output, "%02x ", data[i]);
10002f12:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002f14:	0038      	movs	r0, r7
10002f16:	781a      	ldrb	r2, [r3, #0]
10002f18:	493e      	ldr	r1, [pc, #248]	; (10003014 <log_output_process+0x284>)
10002f1a:	f7ff ff19 	bl	10002d50 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f1e:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
10002f20:	2307      	movs	r3, #7
10002f22:	421d      	tst	r5, r3
10002f24:	d103      	bne.n	10002f2e <log_output_process+0x19e>
			print_formatted(output, " ");
10002f26:	0038      	movs	r0, r7
10002f28:	493b      	ldr	r1, [pc, #236]	; (10003018 <log_output_process+0x288>)
10002f2a:	f7ff ff11 	bl	10002d50 <print_formatted>
		if (i < length) {
10002f2e:	42ae      	cmp	r6, r5
10002f30:	d942      	bls.n	10002fb8 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
10002f32:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002f34:	0038      	movs	r0, r7
10002f36:	5d5a      	ldrb	r2, [r3, r5]
10002f38:	4936      	ldr	r1, [pc, #216]	; (10003014 <log_output_process+0x284>)
10002f3a:	f7ff ff09 	bl	10002d50 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f3e:	3501      	adds	r5, #1
10002f40:	2d10      	cmp	r5, #16
10002f42:	d1ed      	bne.n	10002f20 <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f44:	2500      	movs	r5, #0
	print_formatted(output, "|");
10002f46:	0038      	movs	r0, r7
10002f48:	4934      	ldr	r1, [pc, #208]	; (1000301c <log_output_process+0x28c>)
10002f4a:	f7ff ff01 	bl	10002d50 <print_formatted>
		if (i < length) {
10002f4e:	002b      	movs	r3, r5
			unsigned char c = (unsigned char)data[i];
10002f50:	9a16      	ldr	r2, [sp, #88]	; 0x58
10002f52:	5cd2      	ldrb	r2, [r2, r3]
	return (int)((((unsigned)c) >= ' ') &&
10002f54:	0013      	movs	r3, r2
10002f56:	3b20      	subs	r3, #32
			print_formatted(output, "%c",
10002f58:	2b5e      	cmp	r3, #94	; 0x5e
10002f5a:	d900      	bls.n	10002f5e <log_output_process+0x1ce>
10002f5c:	222e      	movs	r2, #46	; 0x2e
10002f5e:	0038      	movs	r0, r7
10002f60:	492f      	ldr	r1, [pc, #188]	; (10003020 <log_output_process+0x290>)
10002f62:	f7ff fef5 	bl	10002d50 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f66:	3501      	adds	r5, #1
10002f68:	2d10      	cmp	r5, #16
10002f6a:	d02a      	beq.n	10002fc2 <log_output_process+0x232>
		if (i > 0 && !(i % 8)) {
10002f6c:	2307      	movs	r3, #7
10002f6e:	421d      	tst	r5, r3
10002f70:	d103      	bne.n	10002f7a <log_output_process+0x1ea>
			print_formatted(output, " ");
10002f72:	0038      	movs	r0, r7
10002f74:	4928      	ldr	r1, [pc, #160]	; (10003018 <log_output_process+0x288>)
10002f76:	f7ff feeb 	bl	10002d50 <print_formatted>
		if (i < length) {
10002f7a:	002b      	movs	r3, r5
10002f7c:	42ae      	cmp	r6, r5
10002f7e:	d8e7      	bhi.n	10002f50 <log_output_process+0x1c0>
			print_formatted(output, " ");
10002f80:	0038      	movs	r0, r7
10002f82:	4925      	ldr	r1, [pc, #148]	; (10003018 <log_output_process+0x288>)
10002f84:	f7ff fee4 	bl	10002d50 <print_formatted>
10002f88:	e7ed      	b.n	10002f66 <log_output_process+0x1d6>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
10002f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
10002f8c:	003a      	movs	r2, r7
10002f8e:	4925      	ldr	r1, [pc, #148]	; (10003024 <log_output_process+0x294>)
10002f90:	f001 fe3e 	bl	10004c10 <cbpprintf_external>
	if (data_len) {
10002f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
10002f96:	2b00      	cmp	r3, #0
10002f98:	d1b0      	bne.n	10002efc <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
10002f9a:	9b05      	ldr	r3, [sp, #20]
10002f9c:	2b00      	cmp	r3, #0
10002f9e:	d000      	beq.n	10002fa2 <log_output_process+0x212>
10002fa0:	e75a      	b.n	10002e58 <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
10002fa2:	0038      	movs	r0, r7
10002fa4:	f001 ff51 	bl	10004e4a <log_output_flush>
}
10002fa8:	b00f      	add	sp, #60	; 0x3c
10002faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10002fac:	0038      	movs	r0, r7
10002fae:	491a      	ldr	r1, [pc, #104]	; (10003018 <log_output_process+0x288>)
10002fb0:	f7ff fece 	bl	10002d50 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
10002fb4:	3501      	adds	r5, #1
10002fb6:	e7aa      	b.n	10002f0e <log_output_process+0x17e>
			print_formatted(output, "   ");
10002fb8:	0038      	movs	r0, r7
10002fba:	491b      	ldr	r1, [pc, #108]	; (10003028 <log_output_process+0x298>)
10002fbc:	f7ff fec8 	bl	10002d50 <print_formatted>
10002fc0:	e7bd      	b.n	10002f3e <log_output_process+0x1ae>
		data += length;
10002fc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002fc4:	199b      	adds	r3, r3, r6
10002fc6:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
10002fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002fca:	1b9b      	subs	r3, r3, r6
10002fcc:	9317      	str	r3, [sp, #92]	; 0x5c
10002fce:	e7e2      	b.n	10002f96 <log_output_process+0x206>
		print_formatted(output, "%s", log_color);
10002fd0:	0038      	movs	r0, r7
10002fd2:	4a05      	ldr	r2, [pc, #20]	; (10002fe8 <log_output_process+0x258>)
10002fd4:	4905      	ldr	r1, [pc, #20]	; (10002fec <log_output_process+0x25c>)
10002fd6:	f7ff febb 	bl	10002d50 <print_formatted>
}
10002fda:	e741      	b.n	10002e60 <log_output_process+0xd0>
10002fdc:	100059c0 	.word	0x100059c0
10002fe0:	100059c4 	.word	0x100059c4
10002fe4:	100057c4 	.word	0x100057c4
10002fe8:	100059bb 	.word	0x100059bb
10002fec:	100059e9 	.word	0x100059e9
10002ff0:	100057d8 	.word	0x100057d8
10002ff4:	100059ec 	.word	0x100059ec
10002ff8:	100059f2 	.word	0x100059f2
10002ffc:	100059f6 	.word	0x100059f6
10003000:	10004def 	.word	0x10004def
10003004:	20000130 	.word	0x20000130
10003008:	2000012c 	.word	0x2000012c
1000300c:	100059cd 	.word	0x100059cd
10003010:	10004e07 	.word	0x10004e07
10003014:	100059fb 	.word	0x100059fb
10003018:	10005a03 	.word	0x10005a03
1000301c:	10005a05 	.word	0x10005a05
10003020:	10005a07 	.word	0x10005a07
10003024:	10004e3f 	.word	0x10004e3f
10003028:	10005a01 	.word	0x10005a01

1000302c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
1000302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
1000302e:	880b      	ldrh	r3, [r1, #0]
10003030:	b089      	sub	sp, #36	; 0x24
10003032:	05db      	lsls	r3, r3, #23
10003034:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
10003036:	684b      	ldr	r3, [r1, #4]
10003038:	000f      	movs	r7, r1
1000303a:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
1000303c:	688e      	ldr	r6, [r1, #8]
1000303e:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
10003040:	2b00      	cmp	r3, #0
10003042:	d00c      	beq.n	1000305e <log_output_msg_process+0x32>
10003044:	4a13      	ldr	r2, [pc, #76]	; (10003094 <log_output_msg_process+0x68>)
10003046:	1a9a      	subs	r2, r3, r2
10003048:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
1000304a:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
1000304c:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
1000304e:	0412      	lsls	r2, r2, #16
10003050:	d405      	bmi.n	1000305e <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
10003052:	7838      	ldrb	r0, [r7, #0]
10003054:	0680      	lsls	r0, r0, #26
10003056:	0f40      	lsrs	r0, r0, #29
10003058:	f7ff fe0e 	bl	10002c78 <log_source_name_get>
1000305c:	0003      	movs	r3, r0
 *
 * @return pointer to the data buffer.
 */
static inline uint8_t *log_msg_get_data(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.data_len;
1000305e:	887a      	ldrh	r2, [r7, #2]
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
10003060:	0038      	movs	r0, r7
	*len = msg->hdr.desc.data_len;
10003062:	0452      	lsls	r2, r2, #17
10003064:	0d12      	lsrs	r2, r2, #20
10003066:	4694      	mov	ip, r2
	*len = msg->hdr.desc.package_len;
10003068:	6839      	ldr	r1, [r7, #0]
	return msg->data;
1000306a:	3010      	adds	r0, #16
	*len = msg->hdr.desc.package_len;
1000306c:	0349      	lsls	r1, r1, #13
1000306e:	0d89      	lsrs	r1, r1, #22
	return msg->data + msg->hdr.desc.package_len;
10003070:	1847      	adds	r7, r0, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
10003072:	1e4a      	subs	r2, r1, #1
10003074:	4191      	sbcs	r1, r2
10003076:	4662      	mov	r2, ip
10003078:	4249      	negs	r1, r1
1000307a:	4008      	ands	r0, r1
1000307c:	9203      	str	r2, [sp, #12]
1000307e:	9001      	str	r0, [sp, #4]
10003080:	2200      	movs	r2, #0
10003082:	0031      	movs	r1, r6
10003084:	9807      	ldr	r0, [sp, #28]
10003086:	9504      	str	r5, [sp, #16]
10003088:	9702      	str	r7, [sp, #8]
1000308a:	9400      	str	r4, [sp, #0]
1000308c:	f7ff fe80 	bl	10002d90 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
10003090:	b009      	add	sp, #36	; 0x24
10003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003094:	1000571c 	.word	0x1000571c

10003098 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
10003098:	2301      	movs	r3, #1
{
1000309a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
1000309c:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
1000309e:	001c      	movs	r4, r3
	while (frequency > 1000000) {
100030a0:	4a07      	ldr	r2, [pc, #28]	; (100030c0 <log_output_timestamp_freq_set+0x28>)
100030a2:	4290      	cmp	r0, r2
100030a4:	d807      	bhi.n	100030b6 <log_output_timestamp_freq_set+0x1e>
100030a6:	4a07      	ldr	r2, [pc, #28]	; (100030c4 <log_output_timestamp_freq_set+0x2c>)
100030a8:	2900      	cmp	r1, #0
100030aa:	d100      	bne.n	100030ae <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
100030ac:	2301      	movs	r3, #1
	}

	freq = frequency;
}
100030ae:	6013      	str	r3, [r2, #0]
	freq = frequency;
100030b0:	4b05      	ldr	r3, [pc, #20]	; (100030c8 <log_output_timestamp_freq_set+0x30>)
100030b2:	6018      	str	r0, [r3, #0]
}
100030b4:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
100030b6:	0021      	movs	r1, r4
		frequency /= 2U;
100030b8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
100030ba:	005b      	lsls	r3, r3, #1
100030bc:	e7f1      	b.n	100030a2 <log_output_timestamp_freq_set+0xa>
100030be:	46c0      	nop			; (mov r8, r8)
100030c0:	000f4240 	.word	0x000f4240
100030c4:	2000012c 	.word	0x2000012c
100030c8:	20000130 	.word	0x20000130

100030cc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
100030cc:	4b01      	ldr	r3, [pc, #4]	; (100030d4 <format_set+0x8>)
	return 0;
}
100030ce:	2000      	movs	r0, #0
	log_format_current = log_type;
100030d0:	6019      	str	r1, [r3, #0]
}
100030d2:	4770      	bx	lr
100030d4:	20000148 	.word	0x20000148

100030d8 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
100030d8:	2201      	movs	r2, #1
{
100030da:	b510      	push	{r4, lr}
	in_panic = true;
100030dc:	4b02      	ldr	r3, [pc, #8]	; (100030e8 <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
100030de:	4803      	ldr	r0, [pc, #12]	; (100030ec <panic+0x14>)
100030e0:	701a      	strb	r2, [r3, #0]
100030e2:	f001 feb2 	bl	10004e4a <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
100030e6:	bd10      	pop	{r4, pc}
100030e8:	200001ce 	.word	0x200001ce
100030ec:	10005808 	.word	0x10005808

100030f0 <process>:
{
100030f0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100030f2:	4b05      	ldr	r3, [pc, #20]	; (10003108 <process+0x18>)
{
100030f4:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100030f6:	6818      	ldr	r0, [r3, #0]
100030f8:	f7ff fd4a 	bl	10002b90 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
100030fc:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100030fe:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
10003100:	0021      	movs	r1, r4
10003102:	4802      	ldr	r0, [pc, #8]	; (1000310c <process+0x1c>)
10003104:	4798      	blx	r3
}
10003106:	bd10      	pop	{r4, pc}
10003108:	20000148 	.word	0x20000148
1000310c:	10005808 	.word	0x10005808

10003110 <char_out>:
{
10003110:	b570      	push	{r4, r5, r6, lr}
10003112:	000d      	movs	r5, r1
10003114:	0004      	movs	r4, r0
10003116:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
10003118:	42b4      	cmp	r4, r6
1000311a:	d101      	bne.n	10003120 <char_out+0x10>
}
1000311c:	0028      	movs	r0, r5
1000311e:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
10003120:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10003122:	4803      	ldr	r0, [pc, #12]	; (10003130 <char_out+0x20>)
10003124:	3401      	adds	r4, #1
10003126:	6883      	ldr	r3, [r0, #8]
10003128:	685b      	ldr	r3, [r3, #4]
1000312a:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
1000312c:	e7f4      	b.n	10003118 <char_out+0x8>
1000312e:	46c0      	nop			; (mov r8, r8)
10003130:	100055e4 	.word	0x100055e4

10003134 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10003134:	4901      	ldr	r1, [pc, #4]	; (1000313c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10003136:	2210      	movs	r2, #16
	str	r2, [r1]
10003138:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
1000313a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
1000313c:	e000ed10 	.word	0xe000ed10

10003140 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10003140:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10003144:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10003146:	b662      	cpsie	i
	isb
10003148:	f3bf 8f6f 	isb	sy

	bx	lr
1000314c:	4770      	bx	lr
1000314e:	46c0      	nop			; (mov r8, r8)

10003150 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003150:	b5f0      	push	{r4, r5, r6, r7, lr}
10003152:	0007      	movs	r7, r0
10003154:	000d      	movs	r5, r1
10003156:	b087      	sub	sp, #28

	if (esf != NULL) {
10003158:	2900      	cmp	r1, #0
1000315a:	d039      	beq.n	100031d0 <z_arm_fatal_error+0x80>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
1000315c:	2400      	movs	r4, #0
1000315e:	688b      	ldr	r3, [r1, #8]
10003160:	4e1e      	ldr	r6, [pc, #120]	; (100031dc <z_arm_fatal_error+0x8c>)
10003162:	9305      	str	r3, [sp, #20]
10003164:	684b      	ldr	r3, [r1, #4]
10003166:	2201      	movs	r2, #1
10003168:	9304      	str	r3, [sp, #16]
1000316a:	680b      	ldr	r3, [r1, #0]
1000316c:	0020      	movs	r0, r4
1000316e:	9303      	str	r3, [sp, #12]
10003170:	4b1b      	ldr	r3, [pc, #108]	; (100031e0 <z_arm_fatal_error+0x90>)
10003172:	0031      	movs	r1, r6
10003174:	9302      	str	r3, [sp, #8]
10003176:	9401      	str	r4, [sp, #4]
10003178:	0023      	movs	r3, r4
1000317a:	9400      	str	r4, [sp, #0]
1000317c:	f001 fe72 	bl	10004e64 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
10003180:	696b      	ldr	r3, [r5, #20]
10003182:	2201      	movs	r2, #1
10003184:	9305      	str	r3, [sp, #20]
10003186:	692b      	ldr	r3, [r5, #16]
10003188:	0031      	movs	r1, r6
1000318a:	9304      	str	r3, [sp, #16]
1000318c:	68eb      	ldr	r3, [r5, #12]
1000318e:	0020      	movs	r0, r4
10003190:	9303      	str	r3, [sp, #12]
10003192:	4b14      	ldr	r3, [pc, #80]	; (100031e4 <z_arm_fatal_error+0x94>)
10003194:	9401      	str	r4, [sp, #4]
10003196:	9302      	str	r3, [sp, #8]
10003198:	9400      	str	r4, [sp, #0]
1000319a:	0023      	movs	r3, r4
1000319c:	f001 fe62 	bl	10004e64 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
100031a0:	69eb      	ldr	r3, [r5, #28]
100031a2:	2201      	movs	r2, #1
100031a4:	9303      	str	r3, [sp, #12]
100031a6:	4b10      	ldr	r3, [pc, #64]	; (100031e8 <z_arm_fatal_error+0x98>)
100031a8:	0031      	movs	r1, r6
100031aa:	0020      	movs	r0, r4
100031ac:	9302      	str	r3, [sp, #8]
100031ae:	9401      	str	r4, [sp, #4]
100031b0:	0023      	movs	r3, r4
100031b2:	9400      	str	r4, [sp, #0]
100031b4:	f001 fe56 	bl	10004e64 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
100031b8:	69ab      	ldr	r3, [r5, #24]
100031ba:	2201      	movs	r2, #1
100031bc:	9303      	str	r3, [sp, #12]
100031be:	4b0b      	ldr	r3, [pc, #44]	; (100031ec <z_arm_fatal_error+0x9c>)
100031c0:	0031      	movs	r1, r6
100031c2:	9302      	str	r3, [sp, #8]
100031c4:	0020      	movs	r0, r4
100031c6:	0023      	movs	r3, r4
100031c8:	9401      	str	r4, [sp, #4]
100031ca:	9400      	str	r4, [sp, #0]
100031cc:	f001 fe4a 	bl	10004e64 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100031d0:	0029      	movs	r1, r5
100031d2:	0038      	movs	r0, r7
100031d4:	f000 ff30 	bl	10004038 <z_fatal_error>
}
100031d8:	b007      	add	sp, #28
100031da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031dc:	1000573c 	.word	0x1000573c
100031e0:	10005a44 	.word	0x10005a44
100031e4:	10005a73 	.word	0x10005a73
100031e8:	10005aa2 	.word	0x10005aa2
100031ec:	10005ab1 	.word	0x10005ab1

100031f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
100031f0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
100031f2:	0600      	lsls	r0, r0, #24
100031f4:	d405      	bmi.n	10003202 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100031f6:	221f      	movs	r2, #31
100031f8:	401a      	ands	r2, r3
100031fa:	2301      	movs	r3, #1
100031fc:	4093      	lsls	r3, r2
100031fe:	4a01      	ldr	r2, [pc, #4]	; (10003204 <arch_irq_enable+0x14>)
10003200:	6013      	str	r3, [r2, #0]
}
10003202:	4770      	bx	lr
10003204:	e000e100 	.word	0xe000e100

10003208 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10003208:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000320a:	25ff      	movs	r5, #255	; 0xff
1000320c:	2203      	movs	r2, #3
1000320e:	000b      	movs	r3, r1
10003210:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10003212:	b240      	sxtb	r0, r0
10003214:	4002      	ands	r2, r0
10003216:	00d2      	lsls	r2, r2, #3
10003218:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000321a:	015b      	lsls	r3, r3, #5
1000321c:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000321e:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003220:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10003222:	2800      	cmp	r0, #0
10003224:	db0a      	blt.n	1000323c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003226:	24c0      	movs	r4, #192	; 0xc0
10003228:	4a0a      	ldr	r2, [pc, #40]	; (10003254 <z_arm_irq_priority_set+0x4c>)
1000322a:	0880      	lsrs	r0, r0, #2
1000322c:	0080      	lsls	r0, r0, #2
1000322e:	1880      	adds	r0, r0, r2
10003230:	00a4      	lsls	r4, r4, #2
10003232:	5902      	ldr	r2, [r0, r4]
10003234:	400a      	ands	r2, r1
10003236:	4313      	orrs	r3, r2
10003238:	5103      	str	r3, [r0, r4]
}
1000323a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000323c:	220f      	movs	r2, #15
1000323e:	4010      	ands	r0, r2
10003240:	3808      	subs	r0, #8
10003242:	4a05      	ldr	r2, [pc, #20]	; (10003258 <z_arm_irq_priority_set+0x50>)
10003244:	0880      	lsrs	r0, r0, #2
10003246:	0080      	lsls	r0, r0, #2
10003248:	1880      	adds	r0, r0, r2
1000324a:	69c2      	ldr	r2, [r0, #28]
1000324c:	4011      	ands	r1, r2
1000324e:	4319      	orrs	r1, r3
10003250:	61c1      	str	r1, [r0, #28]
10003252:	e7f2      	b.n	1000323a <z_arm_irq_priority_set+0x32>
10003254:	e000e100 	.word	0xe000e100
10003258:	e000ed00 	.word	0xe000ed00

1000325c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
1000325c:	bf30      	wfi
    b z_SysNmiOnReset
1000325e:	e7fd      	b.n	1000325c <z_SysNmiOnReset>

10003260 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10003260:	22ff      	movs	r2, #255	; 0xff
10003262:	4b08      	ldr	r3, [pc, #32]	; (10003284 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10003264:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10003266:	4393      	bics	r3, r2
10003268:	4a07      	ldr	r2, [pc, #28]	; (10003288 <z_arm_prep_c+0x28>)
1000326a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1000326c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10003270:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10003274:	f000 ff86 	bl	10004184 <z_bss_zero>
	z_data_copy();
10003278:	f001 fb3a 	bl	100048f0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
1000327c:	f000 f93a 	bl	100034f4 <z_arm_interrupt_init>
	z_cstart();
10003280:	f000 ffc0 	bl	10004204 <z_cstart>
10003284:	10000100 	.word	0x10000100
10003288:	e000ed00 	.word	0xe000ed00

1000328c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
1000328c:	4a08      	ldr	r2, [pc, #32]	; (100032b0 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
1000328e:	4909      	ldr	r1, [pc, #36]	; (100032b4 <arch_swap+0x28>)
	_current->arch.basepri = key;
10003290:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10003292:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10003294:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10003296:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10003298:	2380      	movs	r3, #128	; 0x80
1000329a:	4907      	ldr	r1, [pc, #28]	; (100032b8 <arch_swap+0x2c>)
1000329c:	055b      	lsls	r3, r3, #21
1000329e:	6848      	ldr	r0, [r1, #4]
100032a0:	4303      	orrs	r3, r0
100032a2:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
100032a4:	b662      	cpsie	i
100032a6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
100032aa:	6893      	ldr	r3, [r2, #8]
100032ac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
100032ae:	4770      	bx	lr
100032b0:	20000194 	.word	0x20000194
100032b4:	1000591c 	.word	0x1000591c
100032b8:	e000ed00 	.word	0xe000ed00

100032bc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
100032bc:	4913      	ldr	r1, [pc, #76]	; (1000330c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
100032be:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
100032c0:	4813      	ldr	r0, [pc, #76]	; (10003310 <_thread_irq_disabled+0x22>)
    add r0, r2
100032c2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
100032c4:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
100032c8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
100032ca:	4643      	mov	r3, r8
    mov r4, r9
100032cc:	464c      	mov	r4, r9
    mov r5, r10
100032ce:	4655      	mov	r5, sl
    mov r6, r11
100032d0:	465e      	mov	r6, fp
    mov r7, ip
100032d2:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
100032d4:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100032d6:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
100032d8:	4f0e      	ldr	r7, [pc, #56]	; (10003314 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
100032da:	4e0f      	ldr	r6, [pc, #60]	; (10003318 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
100032dc:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
100032de:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
100032e0:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
100032e2:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
100032e4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
100032e6:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
100032e8:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
100032ea:	d100      	bne.n	100032ee <_thread_irq_disabled>
    cpsie i
100032ec:	b662      	cpsie	i

100032ee <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
100032ee:	4c08      	ldr	r4, [pc, #32]	; (10003310 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
100032f0:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
100032f2:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
100032f4:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
100032f6:	4698      	mov	r8, r3
    mov r9, r4
100032f8:	46a1      	mov	r9, r4
    mov r10, r5
100032fa:	46aa      	mov	sl, r5
    mov r11, r6
100032fc:	46b3      	mov	fp, r6
    mov ip, r7
100032fe:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10003300:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10003302:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10003304:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10003308:	4770      	bx	lr
1000330a:	0000      	.short	0x0000
    ldr r1, =_kernel
1000330c:	20000194 	.word	0x20000194
    ldr r0, =_thread_offset_to_callee_saved
10003310:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10003314:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10003318:	08000000 	.word	0x08000000

1000331c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
1000331c:	2004      	movs	r0, #4
  mov r1, lr
1000331e:	4671      	mov	r1, lr
  tst r1, r0
10003320:	4201      	tst	r1, r0
  beq _stack_frame_msp
10003322:	d002      	beq.n	1000332a <_stack_frame_msp>
  mrs r0, PSP
10003324:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10003328:	d101      	bne.n	1000332e <_stack_frame_endif>

1000332a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
1000332a:	f3ef 8008 	mrs	r0, MSP

1000332e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
1000332e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10003330:	3902      	subs	r1, #2
    ldrb r1, [r1]
10003332:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10003334:	2902      	cmp	r1, #2
    beq _oops
10003336:	d0ff      	beq.n	10003338 <_oops>

10003338 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10003338:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
1000333a:	f001 fda2 	bl	10004e82 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
1000333e:	bd01      	pop	{r0, pc}

10003340 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10003340:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10003342:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10003344:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10003346:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10003348:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
1000334a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
1000334c:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
1000334e:	4906      	ldr	r1, [pc, #24]	; (10003368 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10003350:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10003352:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10003354:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10003356:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10003358:	2380      	movs	r3, #128	; 0x80
1000335a:	045b      	lsls	r3, r3, #17
1000335c:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
1000335e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10003360:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10003362:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10003364:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10003366:	bd10      	pop	{r4, pc}
10003368:	10004c93 	.word	0x10004c93

1000336c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
1000336c:	4b06      	ldr	r3, [pc, #24]	; (10003388 <arch_switch_to_main_thread+0x1c>)
1000336e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10003370:	1c10      	adds	r0, r2, #0
10003372:	f381 8809 	msr	PSP, r1
10003376:	2100      	movs	r1, #0
10003378:	b662      	cpsie	i
1000337a:	f3bf 8f6f 	isb	sy
1000337e:	2200      	movs	r2, #0
10003380:	2300      	movs	r3, #0
10003382:	f001 fc86 	bl	10004c92 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10003386:	46c0      	nop			; (mov r8, r8)
10003388:	20000194 	.word	0x20000194

1000338c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
1000338c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
1000338e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10003392:	4905      	ldr	r1, [pc, #20]	; (100033a8 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10003394:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10003396:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10003398:	4904      	ldr	r1, [pc, #16]	; (100033ac <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
1000339a:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
1000339c:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
1000339e:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
100033a0:	bc09      	pop	{r0, r3}
	mov lr, r3
100033a2:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
100033a4:	4902      	ldr	r1, [pc, #8]	; (100033b0 <_isr_wrapper+0x24>)
	bx r1
100033a6:	4708      	bx	r1
	ldr r1, =16
100033a8:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
100033ac:	1000562c 	.word	0x1000562c
	ldr r1, =z_arm_int_exit
100033b0:	100033b5 	.word	0x100033b5

100033b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
100033b4:	4b04      	ldr	r3, [pc, #16]	; (100033c8 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
100033b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
100033b8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
100033ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
100033bc:	d002      	beq.n	100033c4 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
100033be:	4903      	ldr	r1, [pc, #12]	; (100033cc <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
100033c0:	4a03      	ldr	r2, [pc, #12]	; (100033d0 <_EXIT_EXC+0xc>)
	str r2, [r1]
100033c2:	600a      	str	r2, [r1, #0]

100033c4 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
100033c4:	4770      	bx	lr
100033c6:	0000      	.short	0x0000
	ldr r3, =_kernel
100033c8:	20000194 	.word	0x20000194
	ldr r1, =_SCS_ICSR
100033cc:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
100033d0:	10000000 	.word	0x10000000

100033d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
100033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100033d6:	4b38      	ldr	r3, [pc, #224]	; (100034b8 <z_arm_fault+0xe4>)
{
100033d8:	b091      	sub	sp, #68	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100033da:	685f      	ldr	r7, [r3, #4]
{
100033dc:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100033de:	05fb      	lsls	r3, r7, #23
100033e0:	0ddb      	lsrs	r3, r3, #23
100033e2:	9307      	str	r3, [sp, #28]
100033e4:	b662      	cpsie	i
100033e6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
100033ea:	4e34      	ldr	r6, [pc, #208]	; (100034bc <z_arm_fault+0xe8>)
100033ec:	0e13      	lsrs	r3, r2, #24
100033ee:	2bff      	cmp	r3, #255	; 0xff
100033f0:	d10d      	bne.n	1000340e <z_arm_fault+0x3a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
100033f2:	3bf3      	subs	r3, #243	; 0xf3
100033f4:	4013      	ands	r3, r2
100033f6:	2b08      	cmp	r3, #8
100033f8:	d13f      	bne.n	1000347a <z_arm_fault+0xa6>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
100033fa:	2000      	movs	r0, #0
100033fc:	4b30      	ldr	r3, [pc, #192]	; (100034c0 <z_arm_fault+0xec>)
100033fe:	2201      	movs	r2, #1
10003400:	9302      	str	r3, [sp, #8]
10003402:	0031      	movs	r1, r6
10003404:	0003      	movs	r3, r0
10003406:	9001      	str	r0, [sp, #4]
10003408:	9000      	str	r0, [sp, #0]
1000340a:	f001 fd4c 	bl	10004ea6 <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
1000340e:	2500      	movs	r5, #0
		return NULL;
10003410:	002c      	movs	r4, r5
	switch (fault) {
10003412:	9b07      	ldr	r3, [sp, #28]
10003414:	2b03      	cmp	r3, #3
10003416:	d136      	bne.n	10003486 <z_arm_fault+0xb2>
	PR_FAULT_INFO("***** HARD FAULT *****");
10003418:	2700      	movs	r7, #0
1000341a:	4b2a      	ldr	r3, [pc, #168]	; (100034c4 <z_arm_fault+0xf0>)
1000341c:	2201      	movs	r2, #1
1000341e:	9302      	str	r3, [sp, #8]
10003420:	0031      	movs	r1, r6
10003422:	003b      	movs	r3, r7
10003424:	0038      	movs	r0, r7
10003426:	9701      	str	r7, [sp, #4]
10003428:	9700      	str	r7, [sp, #0]
1000342a:	f001 fd3c 	bl	10004ea6 <z_log_msg_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
1000342e:	69a3      	ldr	r3, [r4, #24]
10003430:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10003432:	881a      	ldrh	r2, [r3, #0]
10003434:	4b24      	ldr	r3, [pc, #144]	; (100034c8 <z_arm_fault+0xf4>)
10003436:	429a      	cmp	r2, r3
10003438:	d139      	bne.n	100034ae <z_arm_fault+0xda>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
1000343a:	6823      	ldr	r3, [r4, #0]
1000343c:	0031      	movs	r1, r6
1000343e:	9303      	str	r3, [sp, #12]
10003440:	4b22      	ldr	r3, [pc, #136]	; (100034cc <z_arm_fault+0xf8>)
10003442:	2201      	movs	r2, #1
10003444:	9302      	str	r3, [sp, #8]
10003446:	0038      	movs	r0, r7
10003448:	003b      	movs	r3, r7
1000344a:	9701      	str	r7, [sp, #4]
1000344c:	9700      	str	r7, [sp, #0]
1000344e:	f001 fd2a 	bl	10004ea6 <z_log_msg_runtime_create.constprop.0>
		reason = esf->basic.r0;
10003452:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10003454:	2220      	movs	r2, #32
10003456:	0021      	movs	r1, r4
10003458:	a808      	add	r0, sp, #32
1000345a:	f001 fd46 	bl	10004eea <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
1000345e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10003460:	2d00      	cmp	r5, #0
10003462:	d026      	beq.n	100034b2 <z_arm_fault+0xde>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10003464:	05da      	lsls	r2, r3, #23
10003466:	d102      	bne.n	1000346e <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10003468:	4a19      	ldr	r2, [pc, #100]	; (100034d0 <z_arm_fault+0xfc>)
1000346a:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
1000346c:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
1000346e:	0030      	movs	r0, r6
10003470:	a908      	add	r1, sp, #32
10003472:	f7ff fe6d 	bl	10003150 <z_arm_fatal_error>
}
10003476:	b011      	add	sp, #68	; 0x44
10003478:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
1000347a:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
1000347c:	0712      	lsls	r2, r2, #28
1000347e:	d5c8      	bpl.n	10003412 <z_arm_fault+0x3e>
			ptr_esf =  (z_arch_esf_t *)psp;
10003480:	000c      	movs	r4, r1
	*nested_exc = false;
10003482:	2500      	movs	r5, #0
10003484:	e7c5      	b.n	10003412 <z_arm_fault+0x3e>
	PR_FAULT_INFO("***** %s %d) *****",
10003486:	23f8      	movs	r3, #248	; 0xf8
10003488:	005b      	lsls	r3, r3, #1
1000348a:	4a12      	ldr	r2, [pc, #72]	; (100034d4 <z_arm_fault+0x100>)
1000348c:	421f      	tst	r7, r3
1000348e:	d000      	beq.n	10003492 <z_arm_fault+0xbe>
10003490:	4a11      	ldr	r2, [pc, #68]	; (100034d8 <z_arm_fault+0x104>)
10003492:	2000      	movs	r0, #0
10003494:	9b07      	ldr	r3, [sp, #28]
10003496:	9203      	str	r2, [sp, #12]
10003498:	3b10      	subs	r3, #16
1000349a:	9304      	str	r3, [sp, #16]
1000349c:	4b0f      	ldr	r3, [pc, #60]	; (100034dc <z_arm_fault+0x108>)
1000349e:	2201      	movs	r2, #1
100034a0:	9302      	str	r3, [sp, #8]
100034a2:	0031      	movs	r1, r6
100034a4:	0003      	movs	r3, r0
100034a6:	9001      	str	r0, [sp, #4]
100034a8:	9000      	str	r0, [sp, #0]
100034aa:	f001 fcfc 	bl	10004ea6 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
100034ae:	2600      	movs	r6, #0
100034b0:	e7d0      	b.n	10003454 <z_arm_fault+0x80>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100034b2:	0a5b      	lsrs	r3, r3, #9
100034b4:	025b      	lsls	r3, r3, #9
100034b6:	e7d9      	b.n	1000346c <z_arm_fault+0x98>
100034b8:	e000ed00 	.word	0xe000ed00
100034bc:	1000573c 	.word	0x1000573c
100034c0:	10005b0d 	.word	0x10005b0d
100034c4:	10005b38 	.word	0x10005b38
100034c8:	0000df02 	.word	0x0000df02
100034cc:	10005b4f 	.word	0x10005b4f
100034d0:	000001ff 	.word	0x000001ff
100034d4:	10005adf 	.word	0x10005adf
100034d8:	10005af4 	.word	0x10005af4
100034dc:	10005b6b 	.word	0x10005b6b

100034e0 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
100034e0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
100034e4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
100034e8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
100034ea:	4672      	mov	r2, lr
	bl z_arm_fault
100034ec:	f7ff ff72 	bl	100033d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
100034f0:	bd01      	pop	{r0, pc}
100034f2:	46c0      	nop			; (mov r8, r8)

100034f4 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
100034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100034f6:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
100034f8:	2200      	movs	r2, #0
100034fa:	2603      	movs	r6, #3
100034fc:	25ff      	movs	r5, #255	; 0xff
100034fe:	00a4      	lsls	r4, r4, #2
10003500:	0010      	movs	r0, r2
10003502:	002f      	movs	r7, r5
10003504:	4030      	ands	r0, r6
10003506:	00c0      	lsls	r0, r0, #3
10003508:	4087      	lsls	r7, r0
1000350a:	4905      	ldr	r1, [pc, #20]	; (10003520 <z_arm_interrupt_init+0x2c>)
1000350c:	0893      	lsrs	r3, r2, #2
1000350e:	009b      	lsls	r3, r3, #2
10003510:	185b      	adds	r3, r3, r1
10003512:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10003514:	3201      	adds	r2, #1
10003516:	43b9      	bics	r1, r7
10003518:	5119      	str	r1, [r3, r4]
1000351a:	2a1a      	cmp	r2, #26
1000351c:	d1f0      	bne.n	10003500 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
1000351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003520:	e000e100 	.word	0xe000e100

10003524 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10003524:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10003526:	4807      	ldr	r0, [pc, #28]	; (10003544 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10003528:	4907      	ldr	r1, [pc, #28]	; (10003548 <__start+0x24>)
    adds r0, r0, r1
1000352a:	1840      	adds	r0, r0, r1
    msr PSP, r0
1000352c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10003530:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10003534:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10003536:	4308      	orrs	r0, r1
    msr CONTROL, r0
10003538:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
1000353c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10003540:	f7ff fe8e 	bl	10003260 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10003544:	200001d0 	.word	0x200001d0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10003548:	00000800 	.word	0x00000800

1000354c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
1000354c:	b510      	push	{r4, lr}
	if (_current == thread) {
1000354e:	4b0a      	ldr	r3, [pc, #40]	; (10003578 <z_impl_k_thread_abort+0x2c>)
10003550:	689b      	ldr	r3, [r3, #8]
10003552:	4283      	cmp	r3, r0
10003554:	d10d      	bne.n	10003572 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003556:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
1000355a:	2b00      	cmp	r3, #0
1000355c:	d009      	beq.n	10003572 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000355e:	2280      	movs	r2, #128	; 0x80
10003560:	4b06      	ldr	r3, [pc, #24]	; (1000357c <z_impl_k_thread_abort+0x30>)
10003562:	0552      	lsls	r2, r2, #21
10003564:	6859      	ldr	r1, [r3, #4]
10003566:	430a      	orrs	r2, r1
10003568:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
1000356a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000356c:	4904      	ldr	r1, [pc, #16]	; (10003580 <z_impl_k_thread_abort+0x34>)
1000356e:	400a      	ands	r2, r1
10003570:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10003572:	f001 f961 	bl	10004838 <z_thread_abort>
}
10003576:	bd10      	pop	{r4, pc}
10003578:	20000194 	.word	0x20000194
1000357c:	e000ed00 	.word	0xe000ed00
10003580:	ffff7fff 	.word	0xffff7fff

10003584 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10003584:	4b01      	ldr	r3, [pc, #4]	; (1000358c <__stdout_hook_install+0x8>)
10003586:	6018      	str	r0, [r3, #0]
}
10003588:	4770      	bx	lr
1000358a:	46c0      	nop			; (mov r8, r8)
1000358c:	20000008 	.word	0x20000008

10003590 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003590:	4b0e      	ldr	r3, [pc, #56]	; (100035cc <rp2040_init+0x3c>)
10003592:	4a0f      	ldr	r2, [pc, #60]	; (100035d0 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10003594:	b570      	push	{r4, r5, r6, lr}
10003596:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003598:	4d0e      	ldr	r5, [pc, #56]	; (100035d4 <rp2040_init+0x44>)
1000359a:	4b0f      	ldr	r3, [pc, #60]	; (100035d8 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
1000359c:	4c0f      	ldr	r4, [pc, #60]	; (100035dc <rp2040_init+0x4c>)
1000359e:	602b      	str	r3, [r5, #0]
100035a0:	0019      	movs	r1, r3
100035a2:	68a2      	ldr	r2, [r4, #8]
100035a4:	4391      	bics	r1, r2
100035a6:	d1fb      	bne.n	100035a0 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
100035a8:	f000 fb3a 	bl	10003c20 <clocks_init>
100035ac:	4b0c      	ldr	r3, [pc, #48]	; (100035e0 <rp2040_init+0x50>)
100035ae:	602b      	str	r3, [r5, #0]
100035b0:	68a3      	ldr	r3, [r4, #8]
100035b2:	01db      	lsls	r3, r3, #7
100035b4:	3380      	adds	r3, #128	; 0x80
100035b6:	d1fb      	bne.n	100035b0 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100035b8:	f3ef 8310 	mrs	r3, PRIMASK
100035bc:	b672      	cpsid	i
	if (key != 0U) {
100035be:	2b00      	cmp	r3, #0
100035c0:	d102      	bne.n	100035c8 <rp2040_init+0x38>
	__asm__ volatile(
100035c2:	b662      	cpsie	i
100035c4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100035c8:	2000      	movs	r0, #0
100035ca:	bd70      	pop	{r4, r5, r6, pc}
100035cc:	4000e000 	.word	0x4000e000
100035d0:	ffffcdbf 	.word	0xffffcdbf
100035d4:	4000f000 	.word	0x4000f000
100035d8:	003c3ffe 	.word	0x003c3ffe
100035dc:	4000c000 	.word	0x4000c000
100035e0:	01ffffff 	.word	0x01ffffff

100035e4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
100035e4:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
100035e6:	4808      	ldr	r0, [pc, #32]	; (10003608 <uart_console_init+0x24>)
100035e8:	f001 feff 	bl	100053ea <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
100035ec:	2800      	cmp	r0, #0
100035ee:	d008      	beq.n	10003602 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
100035f0:	4c06      	ldr	r4, [pc, #24]	; (1000360c <uart_console_init+0x28>)
100035f2:	0020      	movs	r0, r4
100035f4:	f7ff ffc6 	bl	10003584 <__stdout_hook_install>
	__printk_hook_install(console_out);
100035f8:	0020      	movs	r0, r4
100035fa:	f7fe fec7 	bl	1000238c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100035fe:	2000      	movs	r0, #0
}
10003600:	bd10      	pop	{r4, pc}
		return -ENODEV;
10003602:	2013      	movs	r0, #19
10003604:	4240      	negs	r0, r0
10003606:	e7fb      	b.n	10003600 <uart_console_init+0x1c>
10003608:	100055e4 	.word	0x100055e4
1000360c:	10003611 	.word	0x10003611

10003610 <console_out>:
{
10003610:	b570      	push	{r4, r5, r6, lr}
10003612:	0004      	movs	r4, r0
10003614:	4d07      	ldr	r5, [pc, #28]	; (10003634 <console_out+0x24>)
	if ('\n' == c) {
10003616:	280a      	cmp	r0, #10
10003618:	d104      	bne.n	10003624 <console_out+0x14>
1000361a:	68ab      	ldr	r3, [r5, #8]
1000361c:	210d      	movs	r1, #13
1000361e:	0028      	movs	r0, r5
10003620:	685b      	ldr	r3, [r3, #4]
10003622:	4798      	blx	r3
10003624:	68ab      	ldr	r3, [r5, #8]
10003626:	0028      	movs	r0, r5
10003628:	685b      	ldr	r3, [r3, #4]
1000362a:	b2e1      	uxtb	r1, r4
1000362c:	4798      	blx	r3
}
1000362e:	0020      	movs	r0, r4
10003630:	bd70      	pop	{r4, r5, r6, pc}
10003632:	46c0      	nop			; (mov r8, r8)
10003634:	100055e4 	.word	0x100055e4

10003638 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10003638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000363a:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000363c:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
1000363e:	6903      	ldr	r3, [r0, #16]
10003640:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10003642:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10003644:	4a14      	ldr	r2, [pc, #80]	; (10003698 <gpio_rpi_isr+0x60>)
10003646:	3308      	adds	r3, #8
10003648:	009b      	lsls	r3, r3, #2
1000364a:	589b      	ldr	r3, [r3, r2]
1000364c:	2207      	movs	r2, #7
1000364e:	4022      	ands	r2, r4
10003650:	0092      	lsls	r2, r2, #2
10003652:	40d3      	lsrs	r3, r2
		if (events) {
10003654:	220f      	movs	r2, #15
10003656:	4213      	tst	r3, r2
10003658:	d103      	bne.n	10003662 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000365a:	3401      	adds	r4, #1
1000365c:	2c1e      	cmp	r4, #30
1000365e:	d1f0      	bne.n	10003642 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10003660:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10003662:	210f      	movs	r1, #15
10003664:	0020      	movs	r0, r4
10003666:	f000 fc1d 	bl	10003ea4 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
1000366a:	9b01      	ldr	r3, [sp, #4]
1000366c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000366e:	2900      	cmp	r1, #0
10003670:	d0f3      	beq.n	1000365a <gpio_rpi_isr+0x22>
10003672:	2701      	movs	r7, #1
10003674:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10003676:	680d      	ldr	r5, [r1, #0]
10003678:	2900      	cmp	r1, #0
1000367a:	d0ee      	beq.n	1000365a <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
1000367c:	688b      	ldr	r3, [r1, #8]
1000367e:	001a      	movs	r2, r3
10003680:	403a      	ands	r2, r7
10003682:	423b      	tst	r3, r7
10003684:	d002      	beq.n	1000368c <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10003686:	0030      	movs	r0, r6
10003688:	684b      	ldr	r3, [r1, #4]
1000368a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000368c:	1e2b      	subs	r3, r5, #0
1000368e:	d000      	beq.n	10003692 <gpio_rpi_isr+0x5a>
10003690:	682b      	ldr	r3, [r5, #0]
10003692:	0029      	movs	r1, r5
10003694:	001d      	movs	r5, r3
10003696:	e7ef      	b.n	10003678 <gpio_rpi_isr+0x40>
10003698:	40014100 	.word	0x40014100

1000369c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000369c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000369e:	ab0b      	add	r3, sp, #44	; 0x2c
100036a0:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
100036a2:	2000      	movs	r0, #0
100036a4:	9303      	str	r3, [sp, #12]
100036a6:	4b05      	ldr	r3, [pc, #20]	; (100036bc <z_log_msg_runtime_create.constprop.0+0x20>)
100036a8:	2201      	movs	r2, #1
100036aa:	9302      	str	r3, [sp, #8]
100036ac:	9001      	str	r0, [sp, #4]
100036ae:	0003      	movs	r3, r0
100036b0:	9000      	str	r0, [sp, #0]
100036b2:	f7ff fb03 	bl	10002cbc <z_impl_z_log_msg_runtime_vcreate>
}
100036b6:	b007      	add	sp, #28
100036b8:	bd00      	pop	{pc}
100036ba:	46c0      	nop			; (mov r8, r8)
100036bc:	10005b90 	.word	0x10005b90

100036c0 <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
100036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
100036c2:	6845      	ldr	r5, [r0, #4]
{
100036c4:	b087      	sub	sp, #28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100036c6:	2100      	movs	r1, #0
100036c8:	69e8      	ldr	r0, [r5, #28]
100036ca:	aa05      	add	r2, sp, #20
100036cc:	f001 fda7 	bl	1000521e <pinctrl_lookup_state>
100036d0:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
100036d2:	db07      	blt.n	100036e4 <pwm_rpi_init+0x24>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100036d4:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100036d6:	2200      	movs	r2, #0
100036d8:	7919      	ldrb	r1, [r3, #4]
100036da:	6818      	ldr	r0, [r3, #0]
100036dc:	f001 fdb2 	bl	10005244 <pinctrl_configure_pins>
100036e0:	1e04      	subs	r4, r0, #0
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
100036e2:	d00d      	beq.n	10003700 <pwm_rpi_init+0x40>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
100036e4:	2000      	movs	r0, #0
100036e6:	4b1c      	ldr	r3, [pc, #112]	; (10003758 <pwm_rpi_init+0x98>)
100036e8:	2201      	movs	r2, #1
100036ea:	9302      	str	r3, [sp, #8]
100036ec:	491b      	ldr	r1, [pc, #108]	; (1000375c <pwm_rpi_init+0x9c>)
100036ee:	0003      	movs	r3, r0
100036f0:	9403      	str	r4, [sp, #12]
100036f2:	9001      	str	r0, [sp, #4]
100036f4:	9000      	str	r0, [sp, #0]
100036f6:	f7ff ffd1 	bl	1000369c <z_log_msg_runtime_create.constprop.0>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
100036fa:	0020      	movs	r0, r4
100036fc:	b007      	add	sp, #28
100036fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10003700:	0021      	movs	r1, r4
	if (err) {
10003702:	4817      	ldr	r0, [pc, #92]	; (10003760 <pwm_rpi_init+0xa0>)
10003704:	1d2b      	adds	r3, r5, #4
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10003706:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003708:	4f16      	ldr	r7, [pc, #88]	; (10003764 <pwm_rpi_init+0xa4>)
1000370a:	434a      	muls	r2, r1
1000370c:	46bc      	mov	ip, r7
1000370e:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10003710:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003712:	4667      	mov	r7, ip
10003714:	4d12      	ldr	r5, [pc, #72]	; (10003760 <pwm_rpi_init+0xa0>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10003716:	3101      	adds	r1, #1
10003718:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
1000371a:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000371c:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
1000371e:	4f12      	ldr	r7, [pc, #72]	; (10003768 <pwm_rpi_init+0xa8>)
10003720:	46bc      	mov	ip, r7
10003722:	4494      	add	ip, r2
10003724:	4667      	mov	r7, ip
10003726:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
10003728:	4f10      	ldr	r7, [pc, #64]	; (1000376c <pwm_rpi_init+0xac>)
1000372a:	19d2      	adds	r2, r2, r7
1000372c:	4f10      	ldr	r7, [pc, #64]	; (10003770 <pwm_rpi_init+0xb0>)
1000372e:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10003730:	2210      	movs	r2, #16
10003732:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10003734:	602e      	str	r6, [r5, #0]
 * \param fract 4 bit fractional part of the clock divider
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10003736:	781a      	ldrb	r2, [r3, #0]
10003738:	785e      	ldrb	r6, [r3, #1]
1000373a:	0112      	lsls	r2, r2, #4
1000373c:	4332      	orrs	r2, r6
1000373e:	606a      	str	r2, [r5, #4]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003740:	2501      	movs	r5, #1
10003742:	6802      	ldr	r2, [r0, #0]
10003744:	3303      	adds	r3, #3
10003746:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003748:	2280      	movs	r2, #128	; 0x80
1000374a:	0152      	lsls	r2, r2, #5
1000374c:	4302      	orrs	r2, r0
1000374e:	6015      	str	r5, [r2, #0]
10003750:	3014      	adds	r0, #20
10003752:	2908      	cmp	r1, #8
10003754:	d1d7      	bne.n	10003706 <pwm_rpi_init+0x46>
10003756:	e7d0      	b.n	100036fa <pwm_rpi_init+0x3a>
10003758:	10005b90 	.word	0x10005b90
1000375c:	10005744 	.word	0x10005744
10003760:	40050000 	.word	0x40050000
10003764:	40050008 	.word	0x40050008
10003768:	4005000c 	.word	0x4005000c
1000376c:	40050010 	.word	0x40050010
10003770:	0000ffff 	.word	0x0000ffff

10003774 <pwm_rpi_set_cycles>:
{
10003774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003776:	ac08      	add	r4, sp, #32
10003778:	8824      	ldrh	r4, [r4, #0]
1000377a:	9200      	str	r2, [sp, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
1000377c:	290f      	cmp	r1, #15
1000377e:	d83e      	bhi.n	100037fe <pwm_rpi_set_cycles+0x8a>
	if (period_cycles > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10003780:	2680      	movs	r6, #128	; 0x80
10003782:	0015      	movs	r5, r2
10003784:	0276      	lsls	r6, r6, #9
10003786:	431d      	orrs	r5, r3
10003788:	42b5      	cmp	r5, r6
1000378a:	d238      	bcs.n	100037fe <pwm_rpi_set_cycles+0x8a>
	return channel % 2;
1000378c:	2601      	movs	r6, #1
1000378e:	000d      	movs	r5, r1
10003790:	4035      	ands	r5, r6
10003792:	9501      	str	r5, [sp, #4]
10003794:	2514      	movs	r5, #20
	return channel / 2;
10003796:	084f      	lsrs	r7, r1, #1
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10003798:	437d      	muls	r5, r7
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
1000379a:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
1000379c:	4034      	ands	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
1000379e:	6800      	ldr	r0, [r0, #0]
100037a0:	1940      	adds	r0, r0, r5
100037a2:	6802      	ldr	r2, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
100037a4:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
100037a6:	4231      	tst	r1, r6
100037a8:	d024      	beq.n	100037f4 <pwm_rpi_set_cycles+0x80>
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
100037aa:	0891      	lsrs	r1, r2, #2
100037ac:	4031      	ands	r1, r6
		pwm_polarity_b = inverted;
100037ae:	0020      	movs	r0, r4
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
100037b0:	000c      	movs	r4, r1
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
100037b2:	00c0      	lsls	r0, r0, #3
100037b4:	00a4      	lsls	r4, r4, #2
100037b6:	4304      	orrs	r4, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100037b8:	200c      	movs	r0, #12
100037ba:	4912      	ldr	r1, [pc, #72]	; (10003804 <pwm_rpi_set_cycles+0x90>)
100037bc:	000a      	movs	r2, r1
100037be:	1869      	adds	r1, r5, r1
100037c0:	680e      	ldr	r6, [r1, #0]
100037c2:	4074      	eors	r4, r6
100037c4:	4004      	ands	r4, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100037c6:	2080      	movs	r0, #128	; 0x80
100037c8:	0140      	lsls	r0, r0, #5
100037ca:	4301      	orrs	r1, r0
100037cc:	600c      	str	r4, [r1, #0]
    pwm_hw->slice[slice_num].top = wrap;
100037ce:	2114      	movs	r1, #20
100037d0:	4379      	muls	r1, r7
100037d2:	1889      	adds	r1, r1, r2
100037d4:	9a00      	ldr	r2, [sp, #0]
100037d6:	610a      	str	r2, [r1, #16]
    hw_write_masked(
100037d8:	4a0b      	ldr	r2, [pc, #44]	; (10003808 <pwm_rpi_set_cycles+0x94>)
100037da:	18ad      	adds	r5, r5, r2
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
100037dc:	9a01      	ldr	r2, [sp, #4]
100037de:	2a00      	cmp	r2, #0
100037e0:	d00b      	beq.n	100037fa <pwm_rpi_set_cycles+0x86>
    hw_write_masked(
100037e2:	4a0a      	ldr	r2, [pc, #40]	; (1000380c <pwm_rpi_set_cycles+0x98>)
100037e4:	041b      	lsls	r3, r3, #16
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100037e6:	6829      	ldr	r1, [r5, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100037e8:	4305      	orrs	r5, r0
	return 0;
100037ea:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100037ec:	404b      	eors	r3, r1
100037ee:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100037f0:	602a      	str	r2, [r5, #0]
};
100037f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
100037f4:	08c0      	lsrs	r0, r0, #3
100037f6:	4030      	ands	r0, r6
100037f8:	e7db      	b.n	100037b2 <pwm_rpi_set_cycles+0x3e>
100037fa:	4a05      	ldr	r2, [pc, #20]	; (10003810 <pwm_rpi_set_cycles+0x9c>)
100037fc:	e7f3      	b.n	100037e6 <pwm_rpi_set_cycles+0x72>
		return -EINVAL;
100037fe:	2016      	movs	r0, #22
10003800:	4240      	negs	r0, r0
10003802:	e7f6      	b.n	100037f2 <pwm_rpi_set_cycles+0x7e>
10003804:	40050000 	.word	0x40050000
10003808:	4005000c 	.word	0x4005000c
1000380c:	ffff0000 	.word	0xffff0000
10003810:	0000ffff 	.word	0x0000ffff

10003814 <pwm_rpi_get_cycles_per_sec>:
{
10003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003816:	0015      	movs	r5, r2
	return channel / 2;
10003818:	084a      	lsrs	r2, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
1000381a:	290f      	cmp	r1, #15
1000381c:	d825      	bhi.n	1000386a <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
1000381e:	2303      	movs	r3, #3
10003820:	4353      	muls	r3, r2
10003822:	6844      	ldr	r4, [r0, #4]
10003824:	18e4      	adds	r4, r4, r3
		(float)cfg->slice_configs[slice].frac / 16.0;
10003826:	7960      	ldrb	r0, [r4, #5]
10003828:	f7fc feb8 	bl	1000059c <__aeabi_ui2f>
1000382c:	f7fe f870 	bl	10001910 <__aeabi_f2d>
10003830:	2200      	movs	r2, #0
10003832:	4b0f      	ldr	r3, [pc, #60]	; (10003870 <pwm_rpi_get_cycles_per_sec+0x5c>)
10003834:	f7fd fb0e 	bl	10000e54 <__aeabi_dmul>
10003838:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
1000383a:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
1000383c:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
1000383e:	f7fc fead 	bl	1000059c <__aeabi_ui2f>
10003842:	f7fe f865 	bl	10001910 <__aeabi_f2d>
10003846:	0002      	movs	r2, r0
10003848:	000b      	movs	r3, r1
1000384a:	0030      	movs	r0, r6
1000384c:	0039      	movs	r1, r7
1000384e:	f7fc fee1 	bl	10000614 <__aeabi_dadd>
10003852:	f7fe f89f 	bl	10001994 <__aeabi_d2f>
10003856:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10003858:	4806      	ldr	r0, [pc, #24]	; (10003874 <pwm_rpi_get_cycles_per_sec+0x60>)
1000385a:	f7fc fdbd 	bl	100003d8 <__aeabi_fdiv>
1000385e:	f7fc fd9b 	bl	10000398 <__aeabi_f2ulz>
10003862:	6028      	str	r0, [r5, #0]
10003864:	6069      	str	r1, [r5, #4]
	return 0;
10003866:	2000      	movs	r0, #0
}
10003868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
1000386a:	2016      	movs	r0, #22
1000386c:	4240      	negs	r0, r0
1000386e:	e7fb      	b.n	10003868 <pwm_rpi_get_cycles_per_sec+0x54>
10003870:	3fb00000 	.word	0x3fb00000
10003874:	4cee6b28 	.word	0x4cee6b28

10003878 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10003878:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000387a:	4903      	ldr	r1, [pc, #12]	; (10003888 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
1000387c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000387e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10003880:	400b      	ands	r3, r1
10003882:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10003884:	4770      	bx	lr
10003886:	46c0      	nop			; (mov r8, r8)
10003888:	fffff83f 	.word	0xfffff83f

1000388c <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
1000388c:	b510      	push	{r4, lr}
1000388e:	2b03      	cmp	r3, #3
10003890:	d823      	bhi.n	100038da <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10003892:	2a01      	cmp	r2, #1
10003894:	d002      	beq.n	1000389c <uart_rpi_set_format.isra.0+0x10>
10003896:	2a03      	cmp	r2, #3
10003898:	d11f      	bne.n	100038da <uart_rpi_set_format.isra.0+0x4e>
1000389a:	3a01      	subs	r2, #1
	switch (cfg->parity) {
1000389c:	2902      	cmp	r1, #2
1000389e:	d81c      	bhi.n	100038da <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
100038a0:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100038a2:	3a01      	subs	r2, #1
100038a4:	480e      	ldr	r0, [pc, #56]	; (100038e0 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
100038a6:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100038a8:	00d2      	lsls	r2, r2, #3
100038aa:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
100038ac:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100038ae:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100038b0:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100038b2:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
100038b4:	4299      	cmp	r1, r3
100038b6:	d005      	beq.n	100038c4 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100038b8:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100038ba:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100038bc:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100038be:	424b      	negs	r3, r1
100038c0:	4159      	adcs	r1, r3
100038c2:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100038c4:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100038c6:	236e      	movs	r3, #110	; 0x6e
100038c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
100038ca:	404a      	eors	r2, r1
100038cc:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100038ce:	2380      	movs	r3, #128	; 0x80
100038d0:	015b      	lsls	r3, r3, #5
100038d2:	4303      	orrs	r3, r0
	return 0;
100038d4:	2000      	movs	r0, #0
100038d6:	601a      	str	r2, [r3, #0]
}
100038d8:	bd10      	pop	{r4, pc}
		return -EINVAL;
100038da:	2016      	movs	r0, #22
100038dc:	4240      	negs	r0, r0
100038de:	e7fb      	b.n	100038d8 <uart_rpi_set_format.isra.0+0x4c>
100038e0:	10005bd3 	.word	0x10005bd3

100038e4 <uart_rpi_init>:
{
100038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
100038e6:	6845      	ldr	r5, [r0, #4]
{
100038e8:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
100038ea:	682b      	ldr	r3, [r5, #0]
{
100038ec:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
100038ee:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
100038f0:	2100      	movs	r1, #0
100038f2:	68a8      	ldr	r0, [r5, #8]
100038f4:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
100038f6:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
100038f8:	9301      	str	r3, [sp, #4]
100038fa:	f001 fc90 	bl	1000521e <pinctrl_lookup_state>
	if (ret < 0) {
100038fe:	2800      	cmp	r0, #0
10003900:	db23      	blt.n	1000394a <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10003902:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003904:	2200      	movs	r2, #0
10003906:	7919      	ldrb	r1, [r3, #4]
10003908:	6818      	ldr	r0, [r3, #0]
1000390a:	f001 fc9b 	bl	10005244 <pinctrl_configure_pins>
	if (ret < 0) {
1000390e:	2800      	cmp	r0, #0
10003910:	db1b      	blt.n	1000394a <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10003912:	6831      	ldr	r1, [r6, #0]
10003914:	9801      	ldr	r0, [sp, #4]
10003916:	f000 fb2f 	bl	10003f78 <uart_init>
	if (baudrate == 0) {
1000391a:	2800      	cmp	r0, #0
1000391c:	d017      	beq.n	1000394e <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
1000391e:	4b0d      	ldr	r3, [pc, #52]	; (10003954 <uart_rpi_init+0x70>)
10003920:	6030      	str	r0, [r6, #0]
10003922:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10003924:	2201      	movs	r2, #1
10003926:	2303      	movs	r3, #3
10003928:	2100      	movs	r1, #0
1000392a:	6860      	ldr	r0, [r4, #4]
1000392c:	f7ff ffae 	bl	1000388c <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10003930:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003932:	23c0      	movs	r3, #192	; 0xc0
10003934:	322c      	adds	r2, #44	; 0x2c
10003936:	019b      	lsls	r3, r3, #6
10003938:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
1000393a:	2600      	movs	r6, #0
1000393c:	2210      	movs	r2, #16
1000393e:	601a      	str	r2, [r3, #0]
10003940:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10003942:	0020      	movs	r0, r4
10003944:	696b      	ldr	r3, [r5, #20]
10003946:	4798      	blx	r3
	return 0;
10003948:	0030      	movs	r0, r6
}
1000394a:	b005      	add	sp, #20
1000394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
1000394e:	2016      	movs	r0, #22
10003950:	4240      	negs	r0, r0
10003952:	e7fa      	b.n	1000394a <uart_rpi_init+0x66>
10003954:	00030100 	.word	0x00030100

10003958 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10003958:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
1000395a:	4b0a      	ldr	r3, [pc, #40]	; (10003984 <elapsed+0x2c>)
1000395c:	4a0a      	ldr	r2, [pc, #40]	; (10003988 <elapsed+0x30>)
1000395e:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10003960:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10003962:	4d0a      	ldr	r5, [pc, #40]	; (1000398c <elapsed+0x34>)
10003964:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10003966:	03c9      	lsls	r1, r1, #15
10003968:	d401      	bmi.n	1000396e <elapsed+0x16>
	    || (val1 < val2)) {
1000396a:	42a0      	cmp	r0, r4
1000396c:	d204      	bcs.n	10003978 <elapsed+0x20>
		overflow_cyc += last_load;
1000396e:	6811      	ldr	r1, [r2, #0]
10003970:	6828      	ldr	r0, [r5, #0]
10003972:	1809      	adds	r1, r1, r0
10003974:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10003976:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10003978:	682b      	ldr	r3, [r5, #0]
1000397a:	6810      	ldr	r0, [r2, #0]
1000397c:	18c0      	adds	r0, r0, r3
1000397e:	1b00      	subs	r0, r0, r4
}
10003980:	bd30      	pop	{r4, r5, pc}
10003982:	46c0      	nop			; (mov r8, r8)
10003984:	e000e010 	.word	0xe000e010
10003988:	2000015c 	.word	0x2000015c
1000398c:	20000168 	.word	0x20000168

10003990 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10003990:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003992:	4a09      	ldr	r2, [pc, #36]	; (100039b8 <sys_clock_driver_init+0x28>)
10003994:	6a13      	ldr	r3, [r2, #32]
10003996:	021b      	lsls	r3, r3, #8
10003998:	0a1b      	lsrs	r3, r3, #8
1000399a:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
1000399c:	4b07      	ldr	r3, [pc, #28]	; (100039bc <sys_clock_driver_init+0x2c>)
1000399e:	4a08      	ldr	r2, [pc, #32]	; (100039c0 <sys_clock_driver_init+0x30>)
100039a0:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
100039a2:	4b08      	ldr	r3, [pc, #32]	; (100039c4 <sys_clock_driver_init+0x34>)
100039a4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
100039a6:	4b08      	ldr	r3, [pc, #32]	; (100039c8 <sys_clock_driver_init+0x38>)
100039a8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100039aa:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
100039ac:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100039ae:	6819      	ldr	r1, [r3, #0]
100039b0:	430a      	orrs	r2, r1
100039b2:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
100039b4:	4770      	bx	lr
100039b6:	46c0      	nop			; (mov r8, r8)
100039b8:	e000ed00 	.word	0xe000ed00
100039bc:	20000168 	.word	0x20000168
100039c0:	000030d3 	.word	0x000030d3
100039c4:	2000015c 	.word	0x2000015c
100039c8:	e000e010 	.word	0xe000e010

100039cc <sys_clock_isr>:
{
100039cc:	b570      	push	{r4, r5, r6, lr}
	elapsed();
100039ce:	f7ff ffc3 	bl	10003958 <elapsed>
	cycle_count += overflow_cyc;
100039d2:	4b0b      	ldr	r3, [pc, #44]	; (10003a00 <sys_clock_isr+0x34>)
100039d4:	4a0b      	ldr	r2, [pc, #44]	; (10003a04 <sys_clock_isr+0x38>)
100039d6:	6818      	ldr	r0, [r3, #0]
100039d8:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100039da:	4c0b      	ldr	r4, [pc, #44]	; (10003a08 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
100039dc:	1840      	adds	r0, r0, r1
100039de:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
100039e0:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100039e2:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
100039e4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100039e6:	4909      	ldr	r1, [pc, #36]	; (10003a0c <sys_clock_isr+0x40>)
100039e8:	1b40      	subs	r0, r0, r5
100039ea:	f7fc fbf1 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
100039ee:	4b07      	ldr	r3, [pc, #28]	; (10003a0c <sys_clock_isr+0x40>)
100039f0:	4343      	muls	r3, r0
100039f2:	195b      	adds	r3, r3, r5
100039f4:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
100039f6:	f001 f85f 	bl	10004ab8 <sys_clock_announce>
	z_arm_int_exit();
100039fa:	f7ff fcdb 	bl	100033b4 <z_arm_exc_exit>
}
100039fe:	bd70      	pop	{r4, r5, r6, pc}
10003a00:	2000015c 	.word	0x2000015c
10003a04:	20000164 	.word	0x20000164
10003a08:	20000160 	.word	0x20000160
10003a0c:	000030d4 	.word	0x000030d4

10003a10 <sys_clock_set_timeout>:
{
10003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a12:	4d32      	ldr	r5, [pc, #200]	; (10003adc <sys_clock_set_timeout+0xcc>)
10003a14:	4f32      	ldr	r7, [pc, #200]	; (10003ae0 <sys_clock_set_timeout+0xd0>)
10003a16:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10003a18:	2900      	cmp	r1, #0
10003a1a:	d054      	beq.n	10003ac6 <sys_clock_set_timeout+0xb6>
10003a1c:	1c43      	adds	r3, r0, #1
10003a1e:	d108      	bne.n	10003a32 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10003a20:	2201      	movs	r2, #1
10003a22:	682b      	ldr	r3, [r5, #0]
10003a24:	4393      	bics	r3, r2
10003a26:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10003a28:	23ff      	movs	r3, #255	; 0xff
10003a2a:	061b      	lsls	r3, r3, #24
10003a2c:	603b      	str	r3, [r7, #0]
}
10003a2e:	b005      	add	sp, #20
10003a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10003a32:	683b      	ldr	r3, [r7, #0]
10003a34:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10003a36:	2600      	movs	r6, #0
10003a38:	2801      	cmp	r0, #1
10003a3a:	dd04      	ble.n	10003a46 <sys_clock_set_timeout+0x36>
10003a3c:	4b29      	ldr	r3, [pc, #164]	; (10003ae4 <sys_clock_set_timeout+0xd4>)
10003a3e:	001e      	movs	r6, r3
10003a40:	4298      	cmp	r0, r3
10003a42:	dc00      	bgt.n	10003a46 <sys_clock_set_timeout+0x36>
10003a44:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10003a46:	f3ef 8310 	mrs	r3, PRIMASK
10003a4a:	b672      	cpsid	i
10003a4c:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10003a4e:	f7ff ff83 	bl	10003958 <elapsed>
	overflow_cyc = 0U;
10003a52:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10003a54:	68ab      	ldr	r3, [r5, #8]
10003a56:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10003a58:	4b23      	ldr	r3, [pc, #140]	; (10003ae8 <sys_clock_set_timeout+0xd8>)
10003a5a:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10003a5c:	4b23      	ldr	r3, [pc, #140]	; (10003aec <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10003a5e:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10003a60:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10003a62:	4b23      	ldr	r3, [pc, #140]	; (10003af0 <sys_clock_set_timeout+0xe0>)
10003a64:	681b      	ldr	r3, [r3, #0]
10003a66:	9300      	str	r3, [sp, #0]
10003a68:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10003a6a:	4290      	cmp	r0, r2
10003a6c:	db31      	blt.n	10003ad2 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10003a6e:	4b21      	ldr	r3, [pc, #132]	; (10003af4 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10003a70:	4a21      	ldr	r2, [pc, #132]	; (10003af8 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10003a72:	435e      	muls	r6, r3
		delay += unannounced;
10003a74:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10003a76:	0019      	movs	r1, r3
10003a78:	1880      	adds	r0, r0, r2
10003a7a:	f7fc fba9 	bl	100001d0 <__udivsi3>
		delay =
10003a7e:	4b1d      	ldr	r3, [pc, #116]	; (10003af4 <sys_clock_set_timeout+0xe4>)
10003a80:	4358      	muls	r0, r3
		delay -= unannounced;
10003a82:	9b00      	ldr	r3, [sp, #0]
10003a84:	1b1b      	subs	r3, r3, r4
10003a86:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10003a88:	2380      	movs	r3, #128	; 0x80
10003a8a:	00db      	lsls	r3, r3, #3
10003a8c:	4298      	cmp	r0, r3
10003a8e:	d923      	bls.n	10003ad8 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10003a90:	4b1a      	ldr	r3, [pc, #104]	; (10003afc <sys_clock_set_timeout+0xec>)
10003a92:	4298      	cmp	r0, r3
10003a94:	d820      	bhi.n	10003ad8 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
10003a96:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10003a98:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10003a9a:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10003a9c:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10003a9e:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10003aa0:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10003aa2:	9b02      	ldr	r3, [sp, #8]
10003aa4:	9802      	ldr	r0, [sp, #8]
10003aa6:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10003aa8:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10003aaa:	4288      	cmp	r0, r1
10003aac:	d202      	bcs.n	10003ab4 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10003aae:	9a01      	ldr	r2, [sp, #4]
10003ab0:	189b      	adds	r3, r3, r2
10003ab2:	191a      	adds	r2, r3, r4
10003ab4:	4b0c      	ldr	r3, [pc, #48]	; (10003ae8 <sys_clock_set_timeout+0xd8>)
10003ab6:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10003ab8:	9b03      	ldr	r3, [sp, #12]
10003aba:	2b00      	cmp	r3, #0
10003abc:	d1b7      	bne.n	10003a2e <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10003abe:	b662      	cpsie	i
10003ac0:	f3bf 8f6f 	isb	sy
10003ac4:	e7b3      	b.n	10003a2e <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10003ac6:	683b      	ldr	r3, [r7, #0]
10003ac8:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10003aca:	1c43      	adds	r3, r0, #1
10003acc:	d1b3      	bne.n	10003a36 <sys_clock_set_timeout+0x26>
10003ace:	4805      	ldr	r0, [pc, #20]	; (10003ae4 <sys_clock_set_timeout+0xd4>)
10003ad0:	e7b8      	b.n	10003a44 <sys_clock_set_timeout+0x34>
10003ad2:	2080      	movs	r0, #128	; 0x80
10003ad4:	00c0      	lsls	r0, r0, #3
10003ad6:	e7de      	b.n	10003a96 <sys_clock_set_timeout+0x86>
10003ad8:	0018      	movs	r0, r3
10003ada:	e7dc      	b.n	10003a96 <sys_clock_set_timeout+0x86>
10003adc:	e000e010 	.word	0xe000e010
10003ae0:	20000168 	.word	0x20000168
10003ae4:	0000053d 	.word	0x0000053d
10003ae8:	20000164 	.word	0x20000164
10003aec:	2000015c 	.word	0x2000015c
10003af0:	20000160 	.word	0x20000160
10003af4:	000030d4 	.word	0x000030d4
10003af8:	000030d3 	.word	0x000030d3
10003afc:	00ffc684 	.word	0x00ffc684

10003b00 <sys_clock_elapsed>:
{
10003b00:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003b02:	f3ef 8410 	mrs	r4, PRIMASK
10003b06:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10003b08:	f7ff ff26 	bl	10003958 <elapsed>
10003b0c:	4b07      	ldr	r3, [pc, #28]	; (10003b2c <sys_clock_elapsed+0x2c>)
10003b0e:	4a08      	ldr	r2, [pc, #32]	; (10003b30 <sys_clock_elapsed+0x30>)
10003b10:	681b      	ldr	r3, [r3, #0]
10003b12:	6812      	ldr	r2, [r2, #0]
10003b14:	1a9b      	subs	r3, r3, r2
10003b16:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10003b18:	2c00      	cmp	r4, #0
10003b1a:	d102      	bne.n	10003b22 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10003b1c:	b662      	cpsie	i
10003b1e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10003b22:	4904      	ldr	r1, [pc, #16]	; (10003b34 <sys_clock_elapsed+0x34>)
10003b24:	f7fc fb54 	bl	100001d0 <__udivsi3>
}
10003b28:	bd10      	pop	{r4, pc}
10003b2a:	46c0      	nop			; (mov r8, r8)
10003b2c:	20000164 	.word	0x20000164
10003b30:	20000160 	.word	0x20000160
10003b34:	000030d4 	.word	0x000030d4

10003b38 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b3a:	b085      	sub	sp, #20
10003b3c:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10003b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003b40:	0005      	movs	r5, r0
10003b42:	000f      	movs	r7, r1
        return false;
10003b44:	2000      	movs	r0, #0
    if (freq > src_freq)
10003b46:	429a      	cmp	r2, r3
10003b48:	d863      	bhi.n	10003c12 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003b4a:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003b4c:	0e1a      	lsrs	r2, r3, #24
10003b4e:	021b      	lsls	r3, r3, #8
10003b50:	9203      	str	r2, [sp, #12]
10003b52:	9302      	str	r3, [sp, #8]
10003b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003b56:	0003      	movs	r3, r0
10003b58:	9903      	ldr	r1, [sp, #12]
10003b5a:	9802      	ldr	r0, [sp, #8]
10003b5c:	f7fc fbfc 	bl	10000358 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003b60:	436c      	muls	r4, r5
10003b62:	4b2d      	ldr	r3, [pc, #180]	; (10003c18 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003b64:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003b66:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10003b68:	6863      	ldr	r3, [r4, #4]
10003b6a:	4283      	cmp	r3, r0
10003b6c:	d200      	bcs.n	10003b70 <clock_configure+0x38>
        clock->div = div;
10003b6e:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10003b70:	1f2b      	subs	r3, r5, #4
10003b72:	b2db      	uxtb	r3, r3
10003b74:	9300      	str	r3, [sp, #0]
10003b76:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10003b78:	9a00      	ldr	r2, [sp, #0]
10003b7a:	019b      	lsls	r3, r3, #6
10003b7c:	4323      	orrs	r3, r4
10003b7e:	2a01      	cmp	r2, #1
10003b80:	d81b      	bhi.n	10003bba <clock_configure+0x82>
10003b82:	2f01      	cmp	r7, #1
10003b84:	d119      	bne.n	10003bba <clock_configure+0x82>
10003b86:	2203      	movs	r2, #3
10003b88:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10003b8a:	68a3      	ldr	r3, [r4, #8]
10003b8c:	423b      	tst	r3, r7
10003b8e:	d0fc      	beq.n	10003b8a <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10003b90:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003b92:	6823      	ldr	r3, [r4, #0]
10003b94:	0152      	lsls	r2, r2, #5
10003b96:	405a      	eors	r2, r3
10003b98:	23e0      	movs	r3, #224	; 0xe0
10003b9a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003b9c:	2380      	movs	r3, #128	; 0x80
10003b9e:	015b      	lsls	r3, r3, #5
10003ba0:	4323      	orrs	r3, r4
10003ba2:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003ba4:	2103      	movs	r1, #3
10003ba6:	6822      	ldr	r2, [r4, #0]
10003ba8:	407a      	eors	r2, r7
10003baa:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003bac:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10003bae:	2301      	movs	r3, #1
10003bb0:	40bb      	lsls	r3, r7
10003bb2:	68a2      	ldr	r2, [r4, #8]
10003bb4:	4213      	tst	r3, r2
10003bb6:	d0fc      	beq.n	10003bb2 <clock_configure+0x7a>
10003bb8:	e01a      	b.n	10003bf0 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003bba:	2280      	movs	r2, #128	; 0x80
10003bbc:	0112      	lsls	r2, r2, #4
10003bbe:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10003bc0:	4b16      	ldr	r3, [pc, #88]	; (10003c1c <clock_configure+0xe4>)
10003bc2:	00aa      	lsls	r2, r5, #2
10003bc4:	58d1      	ldr	r1, [r2, r3]
10003bc6:	2900      	cmp	r1, #0
10003bc8:	d005      	beq.n	10003bd6 <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10003bca:	6958      	ldr	r0, [r3, #20]
10003bcc:	f7fc fb00 	bl	100001d0 <__udivsi3>
10003bd0:	3001      	adds	r0, #1
            asm volatile (
10003bd2:	3801      	subs	r0, #1
10003bd4:	d1fd      	bne.n	10003bd2 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10003bd6:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003bd8:	6823      	ldr	r3, [r4, #0]
10003bda:	0152      	lsls	r2, r2, #5
10003bdc:	405a      	eors	r2, r3
10003bde:	23e0      	movs	r3, #224	; 0xe0
10003be0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003be2:	2380      	movs	r3, #128	; 0x80
10003be4:	015b      	lsls	r3, r3, #5
10003be6:	4323      	orrs	r3, r4
10003be8:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10003bea:	9a00      	ldr	r2, [sp, #0]
10003bec:	2a01      	cmp	r2, #1
10003bee:	d9d9      	bls.n	10003ba4 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003bf0:	2380      	movs	r3, #128	; 0x80
10003bf2:	2280      	movs	r2, #128	; 0x80
10003bf4:	019b      	lsls	r3, r3, #6
10003bf6:	4323      	orrs	r3, r4
10003bf8:	0112      	lsls	r2, r2, #4
10003bfa:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003bfc:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10003bfe:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003c00:	0032      	movs	r2, r6
10003c02:	2300      	movs	r3, #0
10003c04:	9903      	ldr	r1, [sp, #12]
10003c06:	f7fc fba7 	bl	10000358 <__aeabi_uldivmod>
10003c0a:	4c04      	ldr	r4, [pc, #16]	; (10003c1c <clock_configure+0xe4>)
10003c0c:	00ad      	lsls	r5, r5, #2
10003c0e:	5160      	str	r0, [r4, r5]
10003c10:	2001      	movs	r0, #1

    return true;
}
10003c12:	b005      	add	sp, #20
10003c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c16:	46c0      	nop			; (mov r8, r8)
10003c18:	40008000 	.word	0x40008000
10003c1c:	2000016c 	.word	0x2000016c

10003c20 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10003c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10003c22:	200c      	movs	r0, #12
10003c24:	f000 f8da 	bl	10003ddc <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10003c28:	f000 f8e0 	bl	10003dec <running_on_fpga>
10003c2c:	2800      	cmp	r0, #0
10003c2e:	d00a      	beq.n	10003c46 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10003c30:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10003c32:	4a2b      	ldr	r2, [pc, #172]	; (10003ce0 <clocks_init+0xc0>)
10003c34:	482b      	ldr	r0, [pc, #172]	; (10003ce4 <clocks_init+0xc4>)
10003c36:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10003c38:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10003c3a:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
10003c3c:	2b0a      	cmp	r3, #10
10003c3e:	d1fa      	bne.n	10003c36 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10003c40:	4b29      	ldr	r3, [pc, #164]	; (10003ce8 <clocks_init+0xc8>)
10003c42:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10003c44:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10003c46:	4d29      	ldr	r5, [pc, #164]	; (10003cec <clocks_init+0xcc>)
10003c48:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10003c4a:	f000 f8b3 	bl	10003db4 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003c4e:	2201      	movs	r2, #1
10003c50:	4b27      	ldr	r3, [pc, #156]	; (10003cf0 <clocks_init+0xd0>)
10003c52:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10003c54:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10003c56:	2b01      	cmp	r3, #1
10003c58:	d1fc      	bne.n	10003c54 <clocks_init+0x34>
10003c5a:	2203      	movs	r2, #3
10003c5c:	4b25      	ldr	r3, [pc, #148]	; (10003cf4 <clocks_init+0xd4>)
10003c5e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10003c60:	6bac      	ldr	r4, [r5, #56]	; 0x38
10003c62:	2c01      	cmp	r4, #1
10003c64:	d1fc      	bne.n	10003c60 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10003c66:	2502      	movs	r5, #2
10003c68:	0021      	movs	r1, r4
10003c6a:	9500      	str	r5, [sp, #0]
10003c6c:	2306      	movs	r3, #6
10003c6e:	4a22      	ldr	r2, [pc, #136]	; (10003cf8 <clocks_init+0xd8>)
10003c70:	4822      	ldr	r0, [pc, #136]	; (10003cfc <clocks_init+0xdc>)
10003c72:	f000 f853 	bl	10003d1c <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
10003c76:	0021      	movs	r1, r4
10003c78:	9500      	str	r5, [sp, #0]
10003c7a:	2305      	movs	r3, #5
10003c7c:	4a20      	ldr	r2, [pc, #128]	; (10003d00 <clocks_init+0xe0>)
10003c7e:	4821      	ldr	r0, [pc, #132]	; (10003d04 <clocks_init+0xe4>)
10003c80:	f000 f84c 	bl	10003d1c <pll_init>
    clock_configure(clk_ref,
10003c84:	4b20      	ldr	r3, [pc, #128]	; (10003d08 <clocks_init+0xe8>)
10003c86:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10003c88:	4d20      	ldr	r5, [pc, #128]	; (10003d0c <clocks_init+0xec>)
    clock_configure(clk_ref,
10003c8a:	9300      	str	r3, [sp, #0]
10003c8c:	2200      	movs	r2, #0
10003c8e:	2004      	movs	r0, #4
10003c90:	f7ff ff52 	bl	10003b38 <clock_configure>
    clock_configure(clk_sys,
10003c94:	002b      	movs	r3, r5
10003c96:	0021      	movs	r1, r4
10003c98:	2200      	movs	r2, #0
10003c9a:	9500      	str	r5, [sp, #0]
10003c9c:	2005      	movs	r0, #5
10003c9e:	f7ff ff4b 	bl	10003b38 <clock_configure>
    clock_configure(clk_usb,
10003ca2:	2200      	movs	r2, #0
10003ca4:	4c0f      	ldr	r4, [pc, #60]	; (10003ce4 <clocks_init+0xc4>)
10003ca6:	0011      	movs	r1, r2
10003ca8:	0023      	movs	r3, r4
10003caa:	9400      	str	r4, [sp, #0]
10003cac:	2007      	movs	r0, #7
10003cae:	f7ff ff43 	bl	10003b38 <clock_configure>
    clock_configure(clk_adc,
10003cb2:	2200      	movs	r2, #0
10003cb4:	0023      	movs	r3, r4
10003cb6:	0011      	movs	r1, r2
10003cb8:	9400      	str	r4, [sp, #0]
10003cba:	2008      	movs	r0, #8
10003cbc:	f7ff ff3c 	bl	10003b38 <clock_configure>
    clock_configure(clk_rtc,
10003cc0:	2200      	movs	r2, #0
10003cc2:	4b09      	ldr	r3, [pc, #36]	; (10003ce8 <clocks_init+0xc8>)
10003cc4:	0011      	movs	r1, r2
10003cc6:	9300      	str	r3, [sp, #0]
10003cc8:	2009      	movs	r0, #9
10003cca:	0023      	movs	r3, r4
10003ccc:	f7ff ff34 	bl	10003b38 <clock_configure>
    clock_configure(clk_peri,
10003cd0:	2200      	movs	r2, #0
10003cd2:	002b      	movs	r3, r5
10003cd4:	0011      	movs	r1, r2
10003cd6:	9500      	str	r5, [sp, #0]
10003cd8:	2006      	movs	r0, #6
10003cda:	f7ff ff2d 	bl	10003b38 <clock_configure>
10003cde:	e7b1      	b.n	10003c44 <clocks_init+0x24>
10003ce0:	2000016c 	.word	0x2000016c
10003ce4:	02dc6c00 	.word	0x02dc6c00
10003ce8:	0000b71b 	.word	0x0000b71b
10003cec:	40008000 	.word	0x40008000
10003cf0:	4000b03c 	.word	0x4000b03c
10003cf4:	4000b030 	.word	0x4000b030
10003cf8:	59682f00 	.word	0x59682f00
10003cfc:	40028000 	.word	0x40028000
10003d00:	1c9c3800 	.word	0x1c9c3800
10003d04:	4002c000 	.word	0x4002c000
10003d08:	00b71b00 	.word	0x00b71b00
10003d0c:	07735940 	.word	0x07735940

10003d10 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10003d10:	4b01      	ldr	r3, [pc, #4]	; (10003d18 <clock_get_hz+0x8>)
10003d12:	0080      	lsls	r0, r0, #2
10003d14:	58c0      	ldr	r0, [r0, r3]
}
10003d16:	4770      	bx	lr
10003d18:	2000016c 	.word	0x2000016c

10003d1c <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003d1e:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10003d20:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10003d22:	0017      	movs	r7, r2
10003d24:	001e      	movs	r6, r3
10003d26:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10003d28:	f7fc fa52 	bl	100001d0 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10003d2c:	491c      	ldr	r1, [pc, #112]	; (10003da0 <pll_init+0x84>)
10003d2e:	4341      	muls	r1, r0
10003d30:	0038      	movs	r0, r7
10003d32:	f7fc fa4d 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10003d36:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10003d38:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10003d3a:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10003d3c:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10003d3e:	6822      	ldr	r2, [r4, #0]
10003d40:	2a00      	cmp	r2, #0
10003d42:	da0c      	bge.n	10003d5e <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003d44:	213f      	movs	r1, #63	; 0x3f
10003d46:	6822      	ldr	r2, [r4, #0]
10003d48:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10003d4a:	42aa      	cmp	r2, r5
10003d4c:	d107      	bne.n	10003d5e <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10003d4e:	68a2      	ldr	r2, [r4, #8]
10003d50:	0512      	lsls	r2, r2, #20
10003d52:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003d54:	4282      	cmp	r2, r0
10003d56:	d102      	bne.n	10003d5e <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10003d58:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10003d5a:	2b00      	cmp	r3, #0
10003d5c:	d01b      	beq.n	10003d96 <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10003d5e:	4a11      	ldr	r2, [pc, #68]	; (10003da4 <pll_init+0x88>)
10003d60:	4294      	cmp	r4, r2
10003d62:	d019      	beq.n	10003d98 <pll_init+0x7c>
10003d64:	2280      	movs	r2, #128	; 0x80
10003d66:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003d68:	490f      	ldr	r1, [pc, #60]	; (10003da8 <pll_init+0x8c>)
10003d6a:	4e10      	ldr	r6, [pc, #64]	; (10003dac <pll_init+0x90>)
10003d6c:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003d6e:	4910      	ldr	r1, [pc, #64]	; (10003db0 <pll_init+0x94>)
10003d70:	600a      	str	r2, [r1, #0]
10003d72:	0017      	movs	r7, r2
10003d74:	68b1      	ldr	r1, [r6, #8]
10003d76:	438f      	bics	r7, r1
10003d78:	d1fb      	bne.n	10003d72 <pll_init+0x56>
10003d7a:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10003d7c:	1d21      	adds	r1, r4, #4
10003d7e:	0192      	lsls	r2, r2, #6
10003d80:	430a      	orrs	r2, r1
10003d82:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10003d84:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10003d86:	60a0      	str	r0, [r4, #8]
10003d88:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10003d8a:	6821      	ldr	r1, [r4, #0]
10003d8c:	2900      	cmp	r1, #0
10003d8e:	dafc      	bge.n	10003d8a <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
10003d90:	60e3      	str	r3, [r4, #12]
10003d92:	2308      	movs	r3, #8
10003d94:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10003d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10003d98:	2280      	movs	r2, #128	; 0x80
10003d9a:	0192      	lsls	r2, r2, #6
10003d9c:	e7e4      	b.n	10003d68 <pll_init+0x4c>
10003d9e:	46c0      	nop			; (mov r8, r8)
10003da0:	000f4240 	.word	0x000f4240
10003da4:	4002c000 	.word	0x4002c000
10003da8:	4000e000 	.word	0x4000e000
10003dac:	4000c000 	.word	0x4000c000
10003db0:	4000f000 	.word	0x4000f000

10003db4 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10003db4:	22aa      	movs	r2, #170	; 0xaa
10003db6:	4b06      	ldr	r3, [pc, #24]	; (10003dd0 <xosc_init+0x1c>)
10003db8:	0112      	lsls	r2, r2, #4
10003dba:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10003dbc:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003dbe:	4905      	ldr	r1, [pc, #20]	; (10003dd4 <xosc_init+0x20>)
10003dc0:	60da      	str	r2, [r3, #12]
10003dc2:	4a05      	ldr	r2, [pc, #20]	; (10003dd8 <xosc_init+0x24>)
10003dc4:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10003dc6:	685a      	ldr	r2, [r3, #4]
10003dc8:	2a00      	cmp	r2, #0
10003dca:	dafc      	bge.n	10003dc6 <xosc_init+0x12>
}
10003dcc:	4770      	bx	lr
10003dce:	46c0      	nop			; (mov r8, r8)
10003dd0:	40024000 	.word	0x40024000
10003dd4:	00fab000 	.word	0x00fab000
10003dd8:	40026000 	.word	0x40026000

10003ddc <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10003ddc:	2380      	movs	r3, #128	; 0x80
10003dde:	4a02      	ldr	r2, [pc, #8]	; (10003de8 <watchdog_start_tick+0xc>)
10003de0:	009b      	lsls	r3, r3, #2
10003de2:	4303      	orrs	r3, r0
10003de4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10003de6:	4770      	bx	lr
10003de8:	40058000 	.word	0x40058000

10003dec <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10003dec:	4b02      	ldr	r3, [pc, #8]	; (10003df8 <running_on_fpga+0xc>)
10003dee:	6818      	ldr	r0, [r3, #0]
10003df0:	0780      	lsls	r0, r0, #30
10003df2:	0fc0      	lsrs	r0, r0, #31
}
10003df4:	4770      	bx	lr
10003df6:	46c0      	nop			; (mov r8, r8)
10003df8:	4006c000 	.word	0x4006c000

10003dfc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10003dfc:	4b08      	ldr	r3, [pc, #32]	; (10003e20 <gpio_set_function+0x24>)
10003dfe:	0082      	lsls	r2, r0, #2
10003e00:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003e02:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10003e04:	b510      	push	{r4, lr}
10003e06:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10003e08:	00c0      	lsls	r0, r0, #3
10003e0a:	4063      	eors	r3, r4
10003e0c:	24c0      	movs	r4, #192	; 0xc0
10003e0e:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003e10:	2480      	movs	r4, #128	; 0x80
10003e12:	0164      	lsls	r4, r4, #5
10003e14:	4322      	orrs	r2, r4
10003e16:	6013      	str	r3, [r2, #0]
10003e18:	4b02      	ldr	r3, [pc, #8]	; (10003e24 <gpio_set_function+0x28>)
10003e1a:	18c0      	adds	r0, r0, r3
10003e1c:	6041      	str	r1, [r0, #4]
}
10003e1e:	bd10      	pop	{r4, pc}
10003e20:	4001c004 	.word	0x4001c004
10003e24:	40014000 	.word	0x40014000

10003e28 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10003e28:	4b07      	ldr	r3, [pc, #28]	; (10003e48 <gpio_set_pulls+0x20>)
10003e2a:	0080      	lsls	r0, r0, #2
10003e2c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003e2e:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10003e30:	00c9      	lsls	r1, r1, #3
10003e32:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10003e34:	430a      	orrs	r2, r1
10003e36:	405a      	eors	r2, r3
10003e38:	230c      	movs	r3, #12
10003e3a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003e3c:	2380      	movs	r3, #128	; 0x80
10003e3e:	015b      	lsls	r3, r3, #5
10003e40:	4303      	orrs	r3, r0
10003e42:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10003e44:	4770      	bx	lr
10003e46:	46c0      	nop			; (mov r8, r8)
10003e48:	4001c004 	.word	0x4001c004

10003e4c <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10003e4c:	4b05      	ldr	r3, [pc, #20]	; (10003e64 <gpio_set_input_hysteresis_enabled+0x18>)
10003e4e:	0080      	lsls	r0, r0, #2
10003e50:	18c0      	adds	r0, r0, r3
10003e52:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003e54:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003e56:	2900      	cmp	r1, #0
10003e58:	d100      	bne.n	10003e5c <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003e5a:	23c0      	movs	r3, #192	; 0xc0
10003e5c:	019b      	lsls	r3, r3, #6
10003e5e:	4303      	orrs	r3, r0
10003e60:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10003e62:	4770      	bx	lr
10003e64:	4001c004 	.word	0x4001c004

10003e68 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10003e68:	4b05      	ldr	r3, [pc, #20]	; (10003e80 <gpio_set_slew_rate+0x18>)
10003e6a:	0080      	lsls	r0, r0, #2
10003e6c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003e6e:	6803      	ldr	r3, [r0, #0]
10003e70:	4059      	eors	r1, r3
10003e72:	2301      	movs	r3, #1
10003e74:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003e76:	2380      	movs	r3, #128	; 0x80
10003e78:	015b      	lsls	r3, r3, #5
10003e7a:	4303      	orrs	r3, r0
10003e7c:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10003e7e:	4770      	bx	lr
10003e80:	4001c004 	.word	0x4001c004

10003e84 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10003e84:	4b06      	ldr	r3, [pc, #24]	; (10003ea0 <gpio_set_drive_strength+0x1c>)
10003e86:	0080      	lsls	r0, r0, #2
10003e88:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003e8a:	6803      	ldr	r3, [r0, #0]
10003e8c:	0109      	lsls	r1, r1, #4
10003e8e:	4059      	eors	r1, r3
10003e90:	2330      	movs	r3, #48	; 0x30
10003e92:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003e94:	2380      	movs	r3, #128	; 0x80
10003e96:	015b      	lsls	r3, r3, #5
10003e98:	4303      	orrs	r3, r0
10003e9a:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10003e9c:	4770      	bx	lr
10003e9e:	46c0      	nop			; (mov r8, r8)
10003ea0:	4001c004 	.word	0x4001c004

10003ea4 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10003ea4:	2207      	movs	r2, #7
10003ea6:	08c3      	lsrs	r3, r0, #3
10003ea8:	4010      	ands	r0, r2
10003eaa:	0080      	lsls	r0, r0, #2
10003eac:	4081      	lsls	r1, r0
10003eae:	4a02      	ldr	r2, [pc, #8]	; (10003eb8 <gpio_acknowledge_irq+0x14>)
10003eb0:	333c      	adds	r3, #60	; 0x3c
10003eb2:	009b      	lsls	r3, r3, #2
10003eb4:	5099      	str	r1, [r3, r2]
}
10003eb6:	4770      	bx	lr
10003eb8:	40014000 	.word	0x40014000

10003ebc <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003ebe:	23d0      	movs	r3, #208	; 0xd0
10003ec0:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003ec2:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003ec4:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003ec6:	4263      	negs	r3, r4
10003ec8:	415c      	adcs	r4, r3
10003eca:	232f      	movs	r3, #47	; 0x2f
10003ecc:	4264      	negs	r4, r4
10003ece:	439c      	bics	r4, r3
10003ed0:	4b0a      	ldr	r3, [pc, #40]	; (10003efc <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003ed2:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003ed4:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003ed6:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10003ed8:	f7ff ffe4 	bl	10003ea4 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10003edc:	2307      	movs	r3, #7
10003ede:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003ee0:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
10003ee2:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003ee4:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
10003ee6:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003ee8:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003eea:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003eec:	2e00      	cmp	r6, #0
10003eee:	d100      	bne.n	10003ef2 <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003ef0:	23c0      	movs	r3, #192	; 0xc0
10003ef2:	019b      	lsls	r3, r3, #6
10003ef4:	4323      	orrs	r3, r4
10003ef6:	601f      	str	r7, [r3, #0]
}
10003ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003efa:	46c0      	nop			; (mov r8, r8)
10003efc:	40014130 	.word	0x40014130

10003f00 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10003f00:	4b05      	ldr	r3, [pc, #20]	; (10003f18 <gpio_set_input_enabled+0x18>)
10003f02:	0080      	lsls	r0, r0, #2
10003f04:	18c0      	adds	r0, r0, r3
10003f06:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003f08:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003f0a:	2900      	cmp	r1, #0
10003f0c:	d100      	bne.n	10003f10 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003f0e:	23c0      	movs	r3, #192	; 0xc0
10003f10:	019b      	lsls	r3, r3, #6
10003f12:	4303      	orrs	r3, r0
10003f14:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10003f16:	4770      	bx	lr
10003f18:	4001c004 	.word	0x4001c004

10003f1c <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10003f1c:	b570      	push	{r4, r5, r6, lr}
10003f1e:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10003f20:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10003f22:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10003f24:	f7ff fef4 	bl	10003d10 <clock_get_hz>
10003f28:	0021      	movs	r1, r4
10003f2a:	00c0      	lsls	r0, r0, #3
10003f2c:	f7fc f950 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10003f30:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10003f32:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10003f34:	d007      	beq.n	10003f46 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10003f36:	4b0e      	ldr	r3, [pc, #56]	; (10003f70 <uart_set_baudrate+0x54>)
10003f38:	429d      	cmp	r5, r3
10003f3a:	d815      	bhi.n	10003f68 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10003f3c:	237f      	movs	r3, #127	; 0x7f
10003f3e:	4018      	ands	r0, r3
10003f40:	1900      	adds	r0, r0, r4
10003f42:	002c      	movs	r4, r5
10003f44:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003f46:	2380      	movs	r3, #128	; 0x80
10003f48:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10003f4a:	6274      	str	r4, [r6, #36]	; 0x24
10003f4c:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10003f4e:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10003f50:	362c      	adds	r6, #44	; 0x2c
10003f52:	4333      	orrs	r3, r6
10003f54:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10003f56:	2006      	movs	r0, #6
10003f58:	f7ff feda 	bl	10003d10 <clock_get_hz>
10003f5c:	01a1      	lsls	r1, r4, #6
10003f5e:	1949      	adds	r1, r1, r5
10003f60:	0080      	lsls	r0, r0, #2
10003f62:	f7fc f935 	bl	100001d0 <__udivsi3>
}
10003f66:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10003f68:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10003f6a:	4c02      	ldr	r4, [pc, #8]	; (10003f74 <uart_set_baudrate+0x58>)
10003f6c:	e7eb      	b.n	10003f46 <uart_set_baudrate+0x2a>
10003f6e:	46c0      	nop			; (mov r8, r8)
10003f70:	0000fffe 	.word	0x0000fffe
10003f74:	0000ffff 	.word	0x0000ffff

10003f78 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10003f78:	b570      	push	{r4, r5, r6, lr}
10003f7a:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10003f7c:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10003f7e:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10003f80:	f7ff fec6 	bl	10003d10 <clock_get_hz>
10003f84:	2800      	cmp	r0, #0
10003f86:	d02e      	beq.n	10003fe6 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003f88:	4b19      	ldr	r3, [pc, #100]	; (10003ff0 <uart_init+0x78>)
10003f8a:	429c      	cmp	r4, r3
10003f8c:	d02c      	beq.n	10003fe8 <uart_init+0x70>
10003f8e:	2380      	movs	r3, #128	; 0x80
10003f90:	03db      	lsls	r3, r3, #15
10003f92:	4a18      	ldr	r2, [pc, #96]	; (10003ff4 <uart_init+0x7c>)
10003f94:	4918      	ldr	r1, [pc, #96]	; (10003ff8 <uart_init+0x80>)
10003f96:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003f98:	4a18      	ldr	r2, [pc, #96]	; (10003ffc <uart_init+0x84>)
10003f9a:	6013      	str	r3, [r2, #0]
10003f9c:	0018      	movs	r0, r3
10003f9e:	688a      	ldr	r2, [r1, #8]
10003fa0:	4390      	bics	r0, r2
10003fa2:	d1fb      	bne.n	10003f9c <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10003fa4:	4b16      	ldr	r3, [pc, #88]	; (10004000 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10003fa6:	4a17      	ldr	r2, [pc, #92]	; (10004004 <uart_init+0x8c>)
10003fa8:	18e3      	adds	r3, r4, r3
10003faa:	4259      	negs	r1, r3
10003fac:	414b      	adcs	r3, r1
10003fae:	2180      	movs	r1, #128	; 0x80
10003fb0:	005b      	lsls	r3, r3, #1
10003fb2:	0049      	lsls	r1, r1, #1
10003fb4:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10003fb6:	0020      	movs	r0, r4
10003fb8:	0029      	movs	r1, r5
10003fba:	f7ff ffaf 	bl	10003f1c <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003fbe:	2360      	movs	r3, #96	; 0x60
10003fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003fc2:	0021      	movs	r1, r4
10003fc4:	4053      	eors	r3, r2
10003fc6:	226e      	movs	r2, #110	; 0x6e
10003fc8:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003fca:	2280      	movs	r2, #128	; 0x80
10003fcc:	312c      	adds	r1, #44	; 0x2c
10003fce:	0152      	lsls	r2, r2, #5
10003fd0:	430a      	orrs	r2, r1
10003fd2:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10003fd4:	4b0c      	ldr	r3, [pc, #48]	; (10004008 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003fd6:	2210      	movs	r2, #16
10003fd8:	6323      	str	r3, [r4, #48]	; 0x30
10003fda:	2380      	movs	r3, #128	; 0x80
10003fdc:	019b      	lsls	r3, r3, #6
10003fde:	430b      	orrs	r3, r1
10003fe0:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10003fe2:	2303      	movs	r3, #3
10003fe4:	64a3      	str	r3, [r4, #72]	; 0x48
}
10003fe6:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003fe8:	2380      	movs	r3, #128	; 0x80
10003fea:	041b      	lsls	r3, r3, #16
10003fec:	e7d1      	b.n	10003f92 <uart_init+0x1a>
10003fee:	46c0      	nop			; (mov r8, r8)
10003ff0:	40038000 	.word	0x40038000
10003ff4:	4000e000 	.word	0x4000e000
10003ff8:	4000c000 	.word	0x4000c000
10003ffc:	4000f000 	.word	0x4000f000
10004000:	bffc8000 	.word	0xbffc8000
10004004:	200001c8 	.word	0x200001c8
10004008:	00000301 	.word	0x00000301

1000400c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
1000400c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000400e:	0004      	movs	r4, r0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
10004010:	f7fe fde6 	bl	10002be0 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
10004014:	2000      	movs	r0, #0
10004016:	4b06      	ldr	r3, [pc, #24]	; (10004030 <k_sys_fatal_error_handler+0x24>)
10004018:	9001      	str	r0, [sp, #4]
1000401a:	9302      	str	r3, [sp, #8]
1000401c:	9000      	str	r0, [sp, #0]
1000401e:	0003      	movs	r3, r0
10004020:	2201      	movs	r2, #1
10004022:	4904      	ldr	r1, [pc, #16]	; (10004034 <k_sys_fatal_error_handler+0x28>)
10004024:	f001 f9ee 	bl	10005404 <z_log_msg_runtime_create.constprop.0>
	arch_system_halt(reason);
10004028:	0020      	movs	r0, r4
1000402a:	f001 f9fa 	bl	10005422 <arch_system_halt>
1000402e:	46c0      	nop			; (mov r8, r8)
10004030:	10005bfe 	.word	0x10005bfe
10004034:	1000573c 	.word	0x1000573c

10004038 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10004038:	b5f0      	push	{r4, r5, r6, r7, lr}
1000403a:	0006      	movs	r6, r0
1000403c:	000f      	movs	r7, r1
1000403e:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile("mrs %0, PRIMASK;"
10004040:	f3ef 8310 	mrs	r3, PRIMASK
10004044:	b672      	cpsid	i
10004046:	9307      	str	r3, [sp, #28]
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
10004048:	f000 fbf0 	bl	1000482c <z_impl_z_current_get>
1000404c:	4b26      	ldr	r3, [pc, #152]	; (100040e8 <z_fatal_error+0xb0>)
1000404e:	0005      	movs	r5, r0
	switch (reason) {
10004050:	2e04      	cmp	r6, #4
10004052:	d802      	bhi.n	1000405a <z_fatal_error+0x22>
10004054:	4b25      	ldr	r3, [pc, #148]	; (100040ec <z_fatal_error+0xb4>)
10004056:	00b2      	lsls	r2, r6, #2
10004058:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
1000405a:	2400      	movs	r4, #0
1000405c:	4a24      	ldr	r2, [pc, #144]	; (100040f0 <z_fatal_error+0xb8>)
1000405e:	9304      	str	r3, [sp, #16]
10004060:	4b24      	ldr	r3, [pc, #144]	; (100040f4 <z_fatal_error+0xbc>)
10004062:	9206      	str	r2, [sp, #24]
10004064:	9302      	str	r3, [sp, #8]
10004066:	2201      	movs	r2, #1
10004068:	0023      	movs	r3, r4
1000406a:	0020      	movs	r0, r4
1000406c:	9906      	ldr	r1, [sp, #24]
1000406e:	9405      	str	r4, [sp, #20]
10004070:	9603      	str	r6, [sp, #12]
10004072:	9401      	str	r4, [sp, #4]
10004074:	9400      	str	r4, [sp, #0]
10004076:	f001 f9c5 	bl	10005404 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
1000407a:	42a7      	cmp	r7, r4
1000407c:	d00d      	beq.n	1000409a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
1000407e:	69fb      	ldr	r3, [r7, #28]
10004080:	05db      	lsls	r3, r3, #23
10004082:	42a3      	cmp	r3, r4
10004084:	d009      	beq.n	1000409a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
10004086:	4b1c      	ldr	r3, [pc, #112]	; (100040f8 <z_fatal_error+0xc0>)
10004088:	2201      	movs	r2, #1
1000408a:	9302      	str	r3, [sp, #8]
1000408c:	0020      	movs	r0, r4
1000408e:	0023      	movs	r3, r4
10004090:	9906      	ldr	r1, [sp, #24]
10004092:	9401      	str	r4, [sp, #4]
10004094:	9400      	str	r4, [sp, #0]
10004096:	f001 f9b5 	bl	10005404 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
1000409a:	2d00      	cmp	r5, #0
1000409c:	d007      	beq.n	100040ae <z_fatal_error+0x76>
1000409e:	0028      	movs	r0, r5
100040a0:	f001 f9cb 	bl	1000543a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
100040a4:	2800      	cmp	r0, #0
100040a6:	d002      	beq.n	100040ae <z_fatal_error+0x76>
100040a8:	7803      	ldrb	r3, [r0, #0]
100040aa:	2b00      	cmp	r3, #0
100040ac:	d100      	bne.n	100040b0 <z_fatal_error+0x78>
		thread_name = "unknown";
100040ae:	4813      	ldr	r0, [pc, #76]	; (100040fc <z_fatal_error+0xc4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
100040b0:	9004      	str	r0, [sp, #16]
100040b2:	2000      	movs	r0, #0
100040b4:	4b12      	ldr	r3, [pc, #72]	; (10004100 <z_fatal_error+0xc8>)
100040b6:	2201      	movs	r2, #1
100040b8:	9906      	ldr	r1, [sp, #24]
100040ba:	9302      	str	r3, [sp, #8]
100040bc:	9001      	str	r0, [sp, #4]
100040be:	0003      	movs	r3, r0
100040c0:	9000      	str	r0, [sp, #0]
100040c2:	9503      	str	r5, [sp, #12]
100040c4:	f001 f99e 	bl	10005404 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100040c8:	0039      	movs	r1, r7
100040ca:	0030      	movs	r0, r6
100040cc:	f7ff ff9e 	bl	1000400c <k_sys_fatal_error_handler>
	if (key != 0U) {
100040d0:	9b07      	ldr	r3, [sp, #28]
100040d2:	2b00      	cmp	r3, #0
100040d4:	d102      	bne.n	100040dc <z_fatal_error+0xa4>
	__asm__ volatile(
100040d6:	b662      	cpsie	i
100040d8:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
100040dc:	0028      	movs	r0, r5
100040de:	f7ff fa35 	bl	1000354c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100040e2:	b009      	add	sp, #36	; 0x24
100040e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100040e6:	46c0      	nop			; (mov r8, r8)
100040e8:	10005c0d 	.word	0x10005c0d
100040ec:	10005920 	.word	0x10005920
100040f0:	1000573c 	.word	0x1000573c
100040f4:	10005c23 	.word	0x10005c23
100040f8:	10005c4b 	.word	0x10005c4b
100040fc:	10005c1b 	.word	0x10005c1b
10004100:	10005c6c 	.word	0x10005c6c

10004104 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
10004104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
10004106:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10004108:	4e10      	ldr	r6, [pc, #64]	; (1000414c <z_sys_init_run_level+0x48>)
1000410a:	0083      	lsls	r3, r0, #2
1000410c:	3001      	adds	r0, #1
1000410e:	599c      	ldr	r4, [r3, r6]
10004110:	0083      	lsls	r3, r0, #2
10004112:	9301      	str	r3, [sp, #4]
10004114:	9b01      	ldr	r3, [sp, #4]
10004116:	58f3      	ldr	r3, [r6, r3]
10004118:	42a3      	cmp	r3, r4
1000411a:	d800      	bhi.n	1000411e <z_sys_init_run_level+0x1a>
		}
	}
}
1000411c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
1000411e:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
10004120:	6823      	ldr	r3, [r4, #0]
10004122:	0028      	movs	r0, r5
10004124:	4798      	blx	r3
		if (dev != NULL) {
10004126:	2d00      	cmp	r5, #0
10004128:	d00d      	beq.n	10004146 <z_sys_init_run_level+0x42>
			if (rc != 0) {
1000412a:	2800      	cmp	r0, #0
1000412c:	d007      	beq.n	1000413e <z_sys_init_run_level+0x3a>
				if (rc < 0) {
1000412e:	17c2      	asrs	r2, r0, #31
10004130:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
10004132:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
10004134:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
10004136:	28ff      	cmp	r0, #255	; 0xff
10004138:	dd00      	ble.n	1000413c <z_sys_init_run_level+0x38>
1000413a:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
1000413c:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
1000413e:	68ea      	ldr	r2, [r5, #12]
10004140:	7853      	ldrb	r3, [r2, #1]
10004142:	433b      	orrs	r3, r7
10004144:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10004146:	3408      	adds	r4, #8
10004148:	e7e4      	b.n	10004114 <z_sys_init_run_level+0x10>
1000414a:	46c0      	nop			; (mov r8, r8)
1000414c:	10005934 	.word	0x10005934

10004150 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10004150:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10004152:	2401      	movs	r4, #1
10004154:	4b09      	ldr	r3, [pc, #36]	; (1000417c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10004156:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10004158:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000415a:	f7ff ffd3 	bl	10004104 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
1000415e:	f000 fd2b 	bl	10004bb8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10004162:	2004      	movs	r0, #4
10004164:	f7ff ffce 	bl	10004104 <z_sys_init_run_level>

	z_init_static_threads();
10004168:	f000 f8d0 	bl	1000430c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
1000416c:	f000 fd47 	bl	10004bfe <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10004170:	4a03      	ldr	r2, [pc, #12]	; (10004180 <bg_thread_main+0x30>)
10004172:	7b13      	ldrb	r3, [r2, #12]
10004174:	43a3      	bics	r3, r4
10004176:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10004178:	bd10      	pop	{r4, pc}
1000417a:	46c0      	nop			; (mov r8, r8)
1000417c:	200001cf 	.word	0x200001cf
10004180:	200000a8 	.word	0x200000a8

10004184 <z_bss_zero>:
{
10004184:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10004186:	4a03      	ldr	r2, [pc, #12]	; (10004194 <z_bss_zero+0x10>)
10004188:	4803      	ldr	r0, [pc, #12]	; (10004198 <z_bss_zero+0x14>)
1000418a:	2100      	movs	r1, #0
1000418c:	1a12      	subs	r2, r2, r0
1000418e:	f001 f94c 	bl	1000542a <z_early_memset>
}
10004192:	bd10      	pop	{r4, pc}
10004194:	200001d0 	.word	0x200001d0
10004198:	20000038 	.word	0x20000038

1000419c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
1000419c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
1000419e:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
100041a0:	2501      	movs	r5, #1
{
100041a2:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
100041a4:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
100041a6:	0201      	lsls	r1, r0, #8
100041a8:	4811      	ldr	r0, [pc, #68]	; (100041f0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
100041aa:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
100041ac:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
100041ae:	2000      	movs	r0, #0
{
100041b0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
100041b2:	9504      	str	r5, [sp, #16]
100041b4:	350e      	adds	r5, #14
100041b6:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100041b8:	3509      	adds	r5, #9
100041ba:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
100041bc:	4b0d      	ldr	r3, [pc, #52]	; (100041f4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
100041be:	9005      	str	r0, [sp, #20]
100041c0:	9002      	str	r0, [sp, #8]
100041c2:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100041c4:	480c      	ldr	r0, [pc, #48]	; (100041f8 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
100041c6:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100041c8:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
100041ca:	4b0c      	ldr	r3, [pc, #48]	; (100041fc <z_init_cpu+0x60>)
100041cc:	0030      	movs	r0, r6
100041ce:	9500      	str	r5, [sp, #0]
100041d0:	0052      	lsls	r2, r2, #1
100041d2:	f000 f871 	bl	100042b8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
100041d6:	2204      	movs	r2, #4
100041d8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
100041da:	752c      	strb	r4, [r5, #20]
100041dc:	4393      	bics	r3, r2
100041de:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
100041e0:	3401      	adds	r4, #1
100041e2:	4b07      	ldr	r3, [pc, #28]	; (10004200 <z_init_cpu+0x64>)
100041e4:	02e4      	lsls	r4, r4, #11
100041e6:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
100041e8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
100041ea:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100041ec:	b006      	add	sp, #24
100041ee:	bd70      	pop	{r4, r5, r6, pc}
100041f0:	200009d0 	.word	0x200009d0
100041f4:	20000038 	.word	0x20000038
100041f8:	20000194 	.word	0x20000194
100041fc:	1000543f 	.word	0x1000543f
10004200:	200001d0 	.word	0x200001d0

10004204 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
10004204:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10004206:	2000      	movs	r0, #0
{
10004208:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
1000420a:	f7ff ff7b 	bl	10004104 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
1000420e:	4b22      	ldr	r3, [pc, #136]	; (10004298 <z_cstart+0x94>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10004210:	f383 8808 	msr	MSP, r3
10004214:	4921      	ldr	r1, [pc, #132]	; (1000429c <z_cstart+0x98>)
10004216:	4b22      	ldr	r3, [pc, #136]	; (100042a0 <z_cstart+0x9c>)
10004218:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
1000421a:	2500      	movs	r5, #0
1000421c:	401a      	ands	r2, r3
1000421e:	23e0      	movs	r3, #224	; 0xe0
10004220:	041b      	lsls	r3, r3, #16
10004222:	4313      	orrs	r3, r2
10004224:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10004226:	f000 fe4d 	bl	10004ec4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
1000422a:	f7fe ff83 	bl	10003134 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
1000422e:	f7fe fcc5 	bl	10002bbc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10004232:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10004234:	4e1b      	ldr	r6, [pc, #108]	; (100042a4 <z_cstart+0xa0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10004236:	ab06      	add	r3, sp, #24
10004238:	32ff      	adds	r2, #255	; 0xff
1000423a:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
1000423c:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
1000423e:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10004240:	f001 f8d2 	bl	100053e8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10004244:	2001      	movs	r0, #1
10004246:	f7ff ff5d 	bl	10004104 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
1000424a:	2002      	movs	r0, #2
1000424c:	f7ff ff5a 	bl	10004104 <z_sys_init_run_level>
	z_sched_init();
10004250:	f000 fa44 	bl	100046dc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10004254:	4c14      	ldr	r4, [pc, #80]	; (100042a8 <z_cstart+0xa4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10004256:	4b15      	ldr	r3, [pc, #84]	; (100042ac <z_cstart+0xa8>)
	_kernel.ready_q.cache = &z_main_thread;
10004258:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000425a:	2280      	movs	r2, #128	; 0x80
1000425c:	9305      	str	r3, [sp, #20]
1000425e:	2301      	movs	r3, #1
10004260:	4e13      	ldr	r6, [pc, #76]	; (100042b0 <z_cstart+0xac>)
10004262:	4914      	ldr	r1, [pc, #80]	; (100042b4 <z_cstart+0xb0>)
10004264:	9304      	str	r3, [sp, #16]
10004266:	00d2      	lsls	r2, r2, #3
10004268:	0033      	movs	r3, r6
1000426a:	0020      	movs	r0, r4
1000426c:	9503      	str	r5, [sp, #12]
1000426e:	9502      	str	r5, [sp, #8]
10004270:	9501      	str	r5, [sp, #4]
10004272:	9500      	str	r5, [sp, #0]
10004274:	f000 f820 	bl	100042b8 <z_setup_new_thread>
10004278:	2204      	movs	r2, #4
1000427a:	0007      	movs	r7, r0
1000427c:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
1000427e:	0020      	movs	r0, r4
10004280:	4393      	bics	r3, r2
10004282:	7363      	strb	r3, [r4, #13]
10004284:	f001 f911 	bl	100054aa <z_ready_thread>
	z_init_cpu(0);
10004288:	0028      	movs	r0, r5
1000428a:	f7ff ff87 	bl	1000419c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
1000428e:	0032      	movs	r2, r6
10004290:	0039      	movs	r1, r7
10004292:	0020      	movs	r0, r4
10004294:	f7ff f86a 	bl	1000336c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10004298:	200009d0 	.word	0x200009d0
1000429c:	e000ed00 	.word	0xe000ed00
100042a0:	ff00ffff 	.word	0xff00ffff
100042a4:	20000194 	.word	0x20000194
100042a8:	200000a8 	.word	0x200000a8
100042ac:	10005cce 	.word	0x10005cce
100042b0:	10004151 	.word	0x10004151
100042b4:	20000ad0 	.word	0x20000ad0

100042b8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
100042b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
100042ba:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
100042bc:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
100042be:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
100042c0:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
100042c2:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
100042c4:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
100042c6:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
100042c8:	2004      	movs	r0, #4
100042ca:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
100042cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
100042ce:	3207      	adds	r2, #7
	thread_base->prio = priority;
100042d0:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
100042d2:	2007      	movs	r0, #7
100042d4:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
100042d6:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100042d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
100042da:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
100042dc:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
100042de:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
100042e0:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100042e2:	9202      	str	r2, [sp, #8]
100042e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100042e6:	0020      	movs	r0, r4
100042e8:	9201      	str	r2, [sp, #4]
100042ea:	9a08      	ldr	r2, [sp, #32]
100042ec:	9200      	str	r2, [sp, #0]
100042ee:	002a      	movs	r2, r5
100042f0:	f7ff f826 	bl	10003340 <arch_new_thread>
	if (!_current) {
100042f4:	4b04      	ldr	r3, [pc, #16]	; (10004308 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
100042f6:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
100042f8:	689b      	ldr	r3, [r3, #8]
100042fa:	42b3      	cmp	r3, r6
100042fc:	d000      	beq.n	10004300 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
100042fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10004300:	0028      	movs	r0, r5
10004302:	6663      	str	r3, [r4, #100]	; 0x64
10004304:	b004      	add	sp, #16
10004306:	bd70      	pop	{r4, r5, r6, pc}
10004308:	20000194 	.word	0x20000194

1000430c <z_init_static_threads>:
{
1000430c:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
1000430e:	4c20      	ldr	r4, [pc, #128]	; (10004390 <z_init_static_threads+0x84>)
{
10004310:	b086      	sub	sp, #24
10004312:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10004314:	4d1f      	ldr	r5, [pc, #124]	; (10004394 <z_init_static_threads+0x88>)
10004316:	42ac      	cmp	r4, r5
10004318:	d308      	bcc.n	1000432c <z_init_static_threads+0x20>
	k_sched_lock();
1000431a:	f000 f9b9 	bl	10004690 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
1000431e:	0034      	movs	r4, r6
10004320:	42ac      	cmp	r4, r5
10004322:	d319      	bcc.n	10004358 <z_init_static_threads+0x4c>
	k_sched_unlock();
10004324:	f000 f9c4 	bl	100046b0 <k_sched_unlock>
}
10004328:	b006      	add	sp, #24
1000432a:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
1000432c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1000432e:	9305      	str	r3, [sp, #20]
10004330:	6a23      	ldr	r3, [r4, #32]
10004332:	9304      	str	r3, [sp, #16]
10004334:	69e3      	ldr	r3, [r4, #28]
10004336:	9303      	str	r3, [sp, #12]
10004338:	69a3      	ldr	r3, [r4, #24]
1000433a:	9302      	str	r3, [sp, #8]
1000433c:	6963      	ldr	r3, [r4, #20]
1000433e:	9301      	str	r3, [sp, #4]
10004340:	6923      	ldr	r3, [r4, #16]
10004342:	9300      	str	r3, [sp, #0]
10004344:	68e3      	ldr	r3, [r4, #12]
10004346:	68a2      	ldr	r2, [r4, #8]
10004348:	6861      	ldr	r1, [r4, #4]
1000434a:	6820      	ldr	r0, [r4, #0]
1000434c:	f7ff ffb4 	bl	100042b8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10004350:	6823      	ldr	r3, [r4, #0]
10004352:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10004354:	3430      	adds	r4, #48	; 0x30
10004356:	e7dd      	b.n	10004314 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10004358:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000435a:	1c5a      	adds	r2, r3, #1
1000435c:	d00f      	beq.n	1000437e <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
1000435e:	43d8      	mvns	r0, r3
10004360:	17c0      	asrs	r0, r0, #31
10004362:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10004364:	220a      	movs	r2, #10
10004366:	2300      	movs	r3, #0
10004368:	17c1      	asrs	r1, r0, #31
1000436a:	f7fd fc11 	bl	10001b90 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
1000436e:	6826      	ldr	r6, [r4, #0]
10004370:	000b      	movs	r3, r1
10004372:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10004374:	4301      	orrs	r1, r0
10004376:	d104      	bne.n	10004382 <z_init_static_threads+0x76>
	z_sched_start(thread);
10004378:	0030      	movs	r0, r6
1000437a:	f000 f943 	bl	10004604 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
1000437e:	3430      	adds	r4, #48	; 0x30
10004380:	e7ce      	b.n	10004320 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10004382:	0030      	movs	r0, r6
10004384:	4904      	ldr	r1, [pc, #16]	; (10004398 <z_init_static_threads+0x8c>)
10004386:	3018      	adds	r0, #24
10004388:	f000 fb20 	bl	100049cc <z_add_timeout>
1000438c:	e7f7      	b.n	1000437e <z_init_static_threads+0x72>
1000438e:	46c0      	nop			; (mov r8, r8)
10004390:	100056fc 	.word	0x100056fc
10004394:	100056fc 	.word	0x100056fc
10004398:	10005473 	.word	0x10005473

1000439c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
1000439c:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
1000439e:	4d07      	ldr	r5, [pc, #28]	; (100043bc <z_reset_time_slice+0x20>)
100043a0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
100043a2:	2c00      	cmp	r4, #0
100043a4:	d008      	beq.n	100043b8 <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100043a6:	f7ff fbab 	bl	10003b00 <sys_clock_elapsed>
100043aa:	4b05      	ldr	r3, [pc, #20]	; (100043c0 <z_reset_time_slice+0x24>)
100043ac:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
100043ae:	2100      	movs	r1, #0
100043b0:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100043b2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
100043b4:	f001 f8ad 	bl	10005512 <z_set_timeout_expiry>
	}
}
100043b8:	bd70      	pop	{r4, r5, r6, pc}
100043ba:	46c0      	nop			; (mov r8, r8)
100043bc:	200001c0 	.word	0x200001c0
100043c0:	20000194 	.word	0x20000194

100043c4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
100043c4:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
100043c6:	4d0e      	ldr	r5, [pc, #56]	; (10004400 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
100043c8:	4b0e      	ldr	r3, [pc, #56]	; (10004404 <update_cache+0x40>)
	return list->head == list;
100043ca:	69ec      	ldr	r4, [r5, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100043cc:	429c      	cmp	r4, r3
100043ce:	d001      	beq.n	100043d4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
100043d0:	2c00      	cmp	r4, #0
100043d2:	d100      	bne.n	100043d6 <update_cache+0x12>
100043d4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
100043d6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
100043d8:	2800      	cmp	r0, #0
100043da:	d108      	bne.n	100043ee <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
100043dc:	7b5a      	ldrb	r2, [r3, #13]
100043de:	06d2      	lsls	r2, r2, #27
100043e0:	d105      	bne.n	100043ee <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
100043e2:	69a2      	ldr	r2, [r4, #24]
100043e4:	2a00      	cmp	r2, #0
100043e6:	d102      	bne.n	100043ee <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
100043e8:	89da      	ldrh	r2, [r3, #14]
100043ea:	2a7f      	cmp	r2, #127	; 0x7f
100043ec:	d805      	bhi.n	100043fa <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
100043ee:	429c      	cmp	r4, r3
100043f0:	d002      	beq.n	100043f8 <update_cache+0x34>
			z_reset_time_slice(thread);
100043f2:	0020      	movs	r0, r4
100043f4:	f7ff ffd2 	bl	1000439c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
100043f8:	0023      	movs	r3, r4
100043fa:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
100043fc:	bd70      	pop	{r4, r5, r6, pc}
100043fe:	46c0      	nop			; (mov r8, r8)
10004400:	20000194 	.word	0x20000194
10004404:	200001b0 	.word	0x200001b0

10004408 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10004408:	220d      	movs	r2, #13
{
1000440a:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
1000440c:	5682      	ldrsb	r2, [r0, r2]
{
1000440e:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10004410:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10004412:	2a00      	cmp	r2, #0
10004414:	da04      	bge.n	10004420 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004416:	227f      	movs	r2, #127	; 0x7f
10004418:	4013      	ands	r3, r2
1000441a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
1000441c:	f001 f816 	bl	1000544c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004420:	2380      	movs	r3, #128	; 0x80
10004422:	7b62      	ldrb	r2, [r4, #13]
10004424:	425b      	negs	r3, r3
10004426:	4313      	orrs	r3, r2
	return list->head == list;
10004428:	4a13      	ldr	r2, [pc, #76]	; (10004478 <move_thread_to_end_of_prio_q+0x70>)
1000442a:	7363      	strb	r3, [r4, #13]
1000442c:	69d3      	ldr	r3, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000442e:	4813      	ldr	r0, [pc, #76]	; (1000447c <move_thread_to_end_of_prio_q+0x74>)
10004430:	4283      	cmp	r3, r0
10004432:	d100      	bne.n	10004436 <move_thread_to_end_of_prio_q+0x2e>
10004434:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10004436:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004438:	2b00      	cmp	r3, #0
1000443a:	d104      	bne.n	10004446 <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
1000443c:	6020      	str	r0, [r4, #0]
	node->prev = tail;
1000443e:	6061      	str	r1, [r4, #4]

	tail->next = node;
10004440:	600c      	str	r4, [r1, #0]
	list->tail = node;
10004442:	6214      	str	r4, [r2, #32]
}
10004444:	e00c      	b.n	10004460 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10004446:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10004448:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
1000444a:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
1000444c:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
1000444e:	42b5      	cmp	r5, r6
10004450:	d00d      	beq.n	1000446e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10004452:	42ae      	cmp	r6, r5
10004454:	dd0b      	ble.n	1000446e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10004456:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10004458:	6023      	str	r3, [r4, #0]
	node->prev = prev;
1000445a:	6061      	str	r1, [r4, #4]
	prev->next = node;
1000445c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
1000445e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10004460:	6890      	ldr	r0, [r2, #8]
10004462:	1b00      	subs	r0, r0, r4
10004464:	4243      	negs	r3, r0
10004466:	4158      	adcs	r0, r3
10004468:	f7ff ffac 	bl	100043c4 <update_cache>
}
1000446c:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
1000446e:	4299      	cmp	r1, r3
10004470:	d0e4      	beq.n	1000443c <move_thread_to_end_of_prio_q+0x34>
10004472:	681b      	ldr	r3, [r3, #0]
10004474:	e7e0      	b.n	10004438 <move_thread_to_end_of_prio_q+0x30>
10004476:	46c0      	nop			; (mov r8, r8)
10004478:	20000194 	.word	0x20000194
1000447c:	200001b0 	.word	0x200001b0

10004480 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10004480:	230d      	movs	r3, #13
{
10004482:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10004484:	56c3      	ldrsb	r3, [r0, r3]
10004486:	7b41      	ldrb	r1, [r0, #13]
10004488:	2b00      	cmp	r3, #0
1000448a:	db26      	blt.n	100044da <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
1000448c:	06cb      	lsls	r3, r1, #27
1000448e:	d124      	bne.n	100044da <ready_thread+0x5a>
	return node->next != NULL;
10004490:	6983      	ldr	r3, [r0, #24]
10004492:	2b00      	cmp	r3, #0
10004494:	d121      	bne.n	100044da <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10004496:	2280      	movs	r2, #128	; 0x80
10004498:	4252      	negs	r2, r2
1000449a:	430a      	orrs	r2, r1
1000449c:	7342      	strb	r2, [r0, #13]
	return list->head == list;
1000449e:	4a11      	ldr	r2, [pc, #68]	; (100044e4 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
100044a0:	4c11      	ldr	r4, [pc, #68]	; (100044e8 <ready_thread+0x68>)
	return list->head == list;
100044a2:	69d1      	ldr	r1, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100044a4:	42a1      	cmp	r1, r4
100044a6:	d000      	beq.n	100044aa <ready_thread+0x2a>
100044a8:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
100044aa:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100044ac:	2b00      	cmp	r3, #0
100044ae:	d104      	bne.n	100044ba <ready_thread+0x3a>
	node->next = list;
100044b0:	6004      	str	r4, [r0, #0]
	node->prev = tail;
100044b2:	6041      	str	r1, [r0, #4]
	tail->next = node;
100044b4:	6008      	str	r0, [r1, #0]
	list->tail = node;
100044b6:	6210      	str	r0, [r2, #32]
}
100044b8:	e00c      	b.n	100044d4 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
100044ba:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
100044bc:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
100044be:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
100044c0:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
100044c2:	42b5      	cmp	r5, r6
100044c4:	d00a      	beq.n	100044dc <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
100044c6:	42ae      	cmp	r6, r5
100044c8:	dd08      	ble.n	100044dc <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
100044ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
100044cc:	6003      	str	r3, [r0, #0]
	node->prev = prev;
100044ce:	6042      	str	r2, [r0, #4]
	prev->next = node;
100044d0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
100044d2:	6058      	str	r0, [r3, #4]
		update_cache(0);
100044d4:	2000      	movs	r0, #0
100044d6:	f7ff ff75 	bl	100043c4 <update_cache>
}
100044da:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
100044dc:	428b      	cmp	r3, r1
100044de:	d0e7      	beq.n	100044b0 <ready_thread+0x30>
100044e0:	681b      	ldr	r3, [r3, #0]
100044e2:	e7e3      	b.n	100044ac <ready_thread+0x2c>
100044e4:	20000194 	.word	0x20000194
100044e8:	200001b0 	.word	0x200001b0

100044ec <unready_thread>:
	if (z_is_thread_queued(thread)) {
100044ec:	220d      	movs	r2, #13
{
100044ee:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
100044f0:	5682      	ldrsb	r2, [r0, r2]
{
100044f2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100044f4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
100044f6:	2a00      	cmp	r2, #0
100044f8:	da04      	bge.n	10004504 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100044fa:	227f      	movs	r2, #127	; 0x7f
100044fc:	4013      	ands	r3, r2
100044fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004500:	f000 ffa4 	bl	1000544c <sys_dlist_remove>
	update_cache(thread == _current);
10004504:	4b03      	ldr	r3, [pc, #12]	; (10004514 <unready_thread+0x28>)
10004506:	6898      	ldr	r0, [r3, #8]
10004508:	1b00      	subs	r0, r0, r4
1000450a:	4243      	negs	r3, r0
1000450c:	4158      	adcs	r0, r3
1000450e:	f7ff ff59 	bl	100043c4 <update_cache>
}
10004512:	bd10      	pop	{r4, pc}
10004514:	20000194 	.word	0x20000194

10004518 <k_sched_time_slice_set>:
{
10004518:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000451a:	f3ef 8410 	mrs	r4, PRIMASK
1000451e:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10004520:	230a      	movs	r3, #10
10004522:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10004524:	2800      	cmp	r0, #0
10004526:	dd02      	ble.n	1000452e <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10004528:	2b02      	cmp	r3, #2
1000452a:	da00      	bge.n	1000452e <k_sched_time_slice_set+0x16>
1000452c:	2302      	movs	r3, #2
		_current_cpu->slice_ticks = 0;
1000452e:	2000      	movs	r0, #0
10004530:	4a07      	ldr	r2, [pc, #28]	; (10004550 <k_sched_time_slice_set+0x38>)
10004532:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10004534:	4807      	ldr	r0, [pc, #28]	; (10004554 <k_sched_time_slice_set+0x3c>)
10004536:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
10004538:	4b07      	ldr	r3, [pc, #28]	; (10004558 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
1000453a:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
1000453c:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
1000453e:	f7ff ff2d 	bl	1000439c <z_reset_time_slice>
	if (key != 0U) {
10004542:	2c00      	cmp	r4, #0
10004544:	d102      	bne.n	1000454c <k_sched_time_slice_set+0x34>
	__asm__ volatile(
10004546:	b662      	cpsie	i
10004548:	f3bf 8f6f 	isb	sy
}
1000454c:	bd10      	pop	{r4, pc}
1000454e:	46c0      	nop			; (mov r8, r8)
10004550:	20000194 	.word	0x20000194
10004554:	200001c0 	.word	0x200001c0
10004558:	200001bc 	.word	0x200001bc

1000455c <z_time_slice>:
{
1000455c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000455e:	f3ef 8510 	mrs	r5, PRIMASK
10004562:	b672      	cpsid	i
	if (pending_current == _current) {
10004564:	4b17      	ldr	r3, [pc, #92]	; (100045c4 <z_time_slice+0x68>)
10004566:	4a18      	ldr	r2, [pc, #96]	; (100045c8 <z_time_slice+0x6c>)
10004568:	689c      	ldr	r4, [r3, #8]
1000456a:	6811      	ldr	r1, [r2, #0]
1000456c:	428c      	cmp	r4, r1
1000456e:	d108      	bne.n	10004582 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10004570:	0020      	movs	r0, r4
10004572:	f7ff ff13 	bl	1000439c <z_reset_time_slice>
	if (key != 0U) {
10004576:	2d00      	cmp	r5, #0
10004578:	d102      	bne.n	10004580 <z_time_slice+0x24>
	__asm__ volatile(
1000457a:	b662      	cpsie	i
1000457c:	f3bf 8f6f 	isb	sy
}
10004580:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10004582:	2100      	movs	r1, #0
10004584:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
10004586:	4a11      	ldr	r2, [pc, #68]	; (100045cc <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
10004588:	6812      	ldr	r2, [r2, #0]
1000458a:	428a      	cmp	r2, r1
1000458c:	d018      	beq.n	100045c0 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
1000458e:	89e2      	ldrh	r2, [r4, #14]
10004590:	2a7f      	cmp	r2, #127	; 0x7f
10004592:	d815      	bhi.n	100045c0 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
10004594:	7b62      	ldrb	r2, [r4, #13]
10004596:	06d2      	lsls	r2, r2, #27
10004598:	d112      	bne.n	100045c0 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
1000459a:	210e      	movs	r1, #14
1000459c:	4a0c      	ldr	r2, [pc, #48]	; (100045d0 <z_time_slice+0x74>)
1000459e:	5661      	ldrsb	r1, [r4, r1]
100045a0:	6812      	ldr	r2, [r2, #0]
100045a2:	4291      	cmp	r1, r2
100045a4:	db0c      	blt.n	100045c0 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
100045a6:	4a0b      	ldr	r2, [pc, #44]	; (100045d4 <z_time_slice+0x78>)
100045a8:	4294      	cmp	r4, r2
100045aa:	d009      	beq.n	100045c0 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
100045ac:	691a      	ldr	r2, [r3, #16]
100045ae:	4282      	cmp	r2, r0
100045b0:	dc03      	bgt.n	100045ba <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
100045b2:	0020      	movs	r0, r4
100045b4:	f7ff ff28 	bl	10004408 <move_thread_to_end_of_prio_q>
100045b8:	e7da      	b.n	10004570 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
100045ba:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
100045bc:	611a      	str	r2, [r3, #16]
100045be:	e7da      	b.n	10004576 <z_time_slice+0x1a>
100045c0:	2200      	movs	r2, #0
100045c2:	e7fb      	b.n	100045bc <z_time_slice+0x60>
100045c4:	20000194 	.word	0x20000194
100045c8:	200001b8 	.word	0x200001b8
100045cc:	200001c0 	.word	0x200001c0
100045d0:	200001bc 	.word	0x200001bc
100045d4:	20000038 	.word	0x20000038

100045d8 <z_reschedule>:
{
100045d8:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100045da:	2900      	cmp	r1, #0
100045dc:	d10a      	bne.n	100045f4 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100045de:	f3ef 8005 	mrs	r0, IPSR
100045e2:	2800      	cmp	r0, #0
100045e4:	d107      	bne.n	100045f6 <z_reschedule+0x1e>
	return new_thread != _current;
100045e6:	4b06      	ldr	r3, [pc, #24]	; (10004600 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
100045e8:	689a      	ldr	r2, [r3, #8]
100045ea:	699b      	ldr	r3, [r3, #24]
100045ec:	429a      	cmp	r2, r3
100045ee:	d002      	beq.n	100045f6 <z_reschedule+0x1e>
	ret = arch_swap(key);
100045f0:	f7fe fe4c 	bl	1000328c <arch_swap>
}
100045f4:	bd10      	pop	{r4, pc}
100045f6:	b662      	cpsie	i
100045f8:	f3bf 8f6f 	isb	sy
100045fc:	e7fa      	b.n	100045f4 <z_reschedule+0x1c>
100045fe:	46c0      	nop			; (mov r8, r8)
10004600:	20000194 	.word	0x20000194

10004604 <z_sched_start>:
{
10004604:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004606:	f3ef 8410 	mrs	r4, PRIMASK
1000460a:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
1000460c:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
1000460e:	7b43      	ldrb	r3, [r0, #13]
10004610:	4213      	tst	r3, r2
10004612:	d105      	bne.n	10004620 <z_sched_start+0x1c>
	if (key != 0U) {
10004614:	2c00      	cmp	r4, #0
10004616:	d102      	bne.n	1000461e <z_sched_start+0x1a>
	__asm__ volatile(
10004618:	b662      	cpsie	i
1000461a:	f3bf 8f6f 	isb	sy
}
1000461e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10004620:	4393      	bics	r3, r2
10004622:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10004624:	f7ff ff2c 	bl	10004480 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10004628:	0021      	movs	r1, r4
1000462a:	4802      	ldr	r0, [pc, #8]	; (10004634 <z_sched_start+0x30>)
1000462c:	f7ff ffd4 	bl	100045d8 <z_reschedule>
10004630:	e7f5      	b.n	1000461e <z_sched_start+0x1a>
10004632:	46c0      	nop			; (mov r8, r8)
10004634:	200001d0 	.word	0x200001d0

10004638 <z_impl_k_thread_suspend>:
{
10004638:	b570      	push	{r4, r5, r6, lr}
1000463a:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
1000463c:	3018      	adds	r0, #24
1000463e:	f000 ff55 	bl	100054ec <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10004642:	f3ef 8610 	mrs	r6, PRIMASK
10004646:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10004648:	220d      	movs	r2, #13
1000464a:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
1000464c:	7b63      	ldrb	r3, [r4, #13]
1000464e:	2a00      	cmp	r2, #0
10004650:	da05      	bge.n	1000465e <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004652:	227f      	movs	r2, #127	; 0x7f
10004654:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10004656:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004658:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000465a:	f000 fef7 	bl	1000544c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
1000465e:	2310      	movs	r3, #16
		update_cache(thread == _current);
10004660:	4d0a      	ldr	r5, [pc, #40]	; (1000468c <z_impl_k_thread_suspend+0x54>)
10004662:	7b62      	ldrb	r2, [r4, #13]
10004664:	68a8      	ldr	r0, [r5, #8]
10004666:	4313      	orrs	r3, r2
10004668:	1b00      	subs	r0, r0, r4
1000466a:	7363      	strb	r3, [r4, #13]
1000466c:	4243      	negs	r3, r0
1000466e:	4158      	adcs	r0, r3
10004670:	f7ff fea8 	bl	100043c4 <update_cache>
	if (key != 0U) {
10004674:	2e00      	cmp	r6, #0
10004676:	d102      	bne.n	1000467e <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10004678:	b662      	cpsie	i
1000467a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
1000467e:	68ab      	ldr	r3, [r5, #8]
10004680:	42a3      	cmp	r3, r4
10004682:	d101      	bne.n	10004688 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10004684:	f000 ff2b 	bl	100054de <z_reschedule_unlocked>
}
10004688:	bd70      	pop	{r4, r5, r6, pc}
1000468a:	46c0      	nop			; (mov r8, r8)
1000468c:	20000194 	.word	0x20000194

10004690 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10004690:	f3ef 8110 	mrs	r1, PRIMASK
10004694:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10004696:	4b05      	ldr	r3, [pc, #20]	; (100046ac <k_sched_lock+0x1c>)
10004698:	689a      	ldr	r2, [r3, #8]
1000469a:	7bd3      	ldrb	r3, [r2, #15]
1000469c:	3b01      	subs	r3, #1
1000469e:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
100046a0:	2900      	cmp	r1, #0
100046a2:	d102      	bne.n	100046aa <k_sched_lock+0x1a>
	__asm__ volatile(
100046a4:	b662      	cpsie	i
100046a6:	f3bf 8f6f 	isb	sy
}
100046aa:	4770      	bx	lr
100046ac:	20000194 	.word	0x20000194

100046b0 <k_sched_unlock>:
{
100046b0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100046b2:	f3ef 8410 	mrs	r4, PRIMASK
100046b6:	b672      	cpsid	i
		++_current->base.sched_locked;
100046b8:	4b07      	ldr	r3, [pc, #28]	; (100046d8 <k_sched_unlock+0x28>)
		update_cache(0);
100046ba:	2000      	movs	r0, #0
		++_current->base.sched_locked;
100046bc:	689a      	ldr	r2, [r3, #8]
100046be:	7bd3      	ldrb	r3, [r2, #15]
100046c0:	3301      	adds	r3, #1
100046c2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
100046c4:	f7ff fe7e 	bl	100043c4 <update_cache>
	if (key != 0U) {
100046c8:	2c00      	cmp	r4, #0
100046ca:	d102      	bne.n	100046d2 <k_sched_unlock+0x22>
	__asm__ volatile(
100046cc:	b662      	cpsie	i
100046ce:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
100046d2:	f000 ff04 	bl	100054de <z_reschedule_unlocked>
}
100046d6:	bd10      	pop	{r4, pc}
100046d8:	20000194 	.word	0x20000194

100046dc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
100046dc:	2100      	movs	r1, #0
{
100046de:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
100046e0:	4b03      	ldr	r3, [pc, #12]	; (100046f0 <z_sched_init+0x14>)
100046e2:	4a04      	ldr	r2, [pc, #16]	; (100046f4 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
100046e4:	0008      	movs	r0, r1
100046e6:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
100046e8:	621a      	str	r2, [r3, #32]
100046ea:	f7ff ff15 	bl	10004518 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
100046ee:	bd10      	pop	{r4, pc}
100046f0:	20000194 	.word	0x20000194
100046f4:	200001b0 	.word	0x200001b0

100046f8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
100046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100046fa:	f3ef 8510 	mrs	r5, PRIMASK
100046fe:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004700:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10004702:	4c19      	ldr	r4, [pc, #100]	; (10004768 <z_impl_k_yield+0x70>)
10004704:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004706:	7b43      	ldrb	r3, [r0, #13]
10004708:	4013      	ands	r3, r2
1000470a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000470c:	f000 fe9e 	bl	1000544c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004710:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10004712:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10004714:	4252      	negs	r2, r2
10004716:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004718:	4814      	ldr	r0, [pc, #80]	; (1000476c <z_impl_k_yield+0x74>)
1000471a:	430a      	orrs	r2, r1
1000471c:	735a      	strb	r2, [r3, #13]
	return list->head == list;
1000471e:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004720:	4282      	cmp	r2, r0
10004722:	d100      	bne.n	10004726 <z_impl_k_yield+0x2e>
10004724:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10004726:	6a21      	ldr	r1, [r4, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004728:	2a00      	cmp	r2, #0
1000472a:	d104      	bne.n	10004736 <z_impl_k_yield+0x3e>
	node->next = list;
1000472c:	6018      	str	r0, [r3, #0]
	node->prev = tail;
1000472e:	6059      	str	r1, [r3, #4]
	tail->next = node;
10004730:	600b      	str	r3, [r1, #0]
	list->tail = node;
10004732:	6223      	str	r3, [r4, #32]
}
10004734:	e00c      	b.n	10004750 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10004736:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10004738:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
1000473a:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
1000473c:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
1000473e:	42be      	cmp	r6, r7
10004740:	d00d      	beq.n	1000475e <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10004742:	42b7      	cmp	r7, r6
10004744:	dd0b      	ble.n	1000475e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10004746:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10004748:	601a      	str	r2, [r3, #0]
	node->prev = prev;
1000474a:	6059      	str	r1, [r3, #4]
	prev->next = node;
1000474c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
1000474e:	6053      	str	r3, [r2, #4]
	update_cache(1);
10004750:	2001      	movs	r0, #1
10004752:	f7ff fe37 	bl	100043c4 <update_cache>
10004756:	0028      	movs	r0, r5
10004758:	f7fe fd98 	bl	1000328c <arch_swap>
	z_swap(&sched_spinlock, key);
}
1000475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
1000475e:	428a      	cmp	r2, r1
10004760:	d0e4      	beq.n	1000472c <z_impl_k_yield+0x34>
10004762:	6812      	ldr	r2, [r2, #0]
10004764:	e7e0      	b.n	10004728 <z_impl_k_yield+0x30>
10004766:	46c0      	nop			; (mov r8, r8)
10004768:	20000194 	.word	0x20000194
1000476c:	200001b0 	.word	0x200001b0

10004770 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10004770:	0003      	movs	r3, r0
{
10004772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10004774:	430b      	orrs	r3, r1
{
10004776:	0004      	movs	r4, r0
10004778:	000d      	movs	r5, r1
	if (ticks == 0) {
1000477a:	2b00      	cmp	r3, #0
1000477c:	d103      	bne.n	10004786 <z_tick_sleep+0x16>
	z_impl_k_yield();
1000477e:	f7ff ffbb 	bl	100046f8 <z_impl_k_yield>
		k_yield();
		return 0;
10004782:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10004784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10004786:	1c4b      	adds	r3, r1, #1
10004788:	db2e      	blt.n	100047e8 <z_tick_sleep+0x78>
1000478a:	1c4b      	adds	r3, r1, #1
1000478c:	d101      	bne.n	10004792 <z_tick_sleep+0x22>
1000478e:	1c83      	adds	r3, r0, #2
10004790:	d32a      	bcc.n	100047e8 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10004792:	f000 fed5 	bl	10005540 <sys_clock_tick_get_32>
10004796:	1907      	adds	r7, r0, r4
10004798:	f3ef 8310 	mrs	r3, PRIMASK
1000479c:	b672      	cpsid	i
	pending_current = _current;
1000479e:	4e14      	ldr	r6, [pc, #80]	; (100047f0 <z_tick_sleep+0x80>)
100047a0:	9301      	str	r3, [sp, #4]
100047a2:	68b0      	ldr	r0, [r6, #8]
100047a4:	4b13      	ldr	r3, [pc, #76]	; (100047f4 <z_tick_sleep+0x84>)
100047a6:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
100047a8:	f7ff fea0 	bl	100044ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
100047ac:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100047ae:	0022      	movs	r2, r4
100047b0:	002b      	movs	r3, r5
100047b2:	4911      	ldr	r1, [pc, #68]	; (100047f8 <z_tick_sleep+0x88>)
100047b4:	3018      	adds	r0, #24
100047b6:	f000 f909 	bl	100049cc <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
100047ba:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
100047bc:	68b2      	ldr	r2, [r6, #8]
100047be:	9801      	ldr	r0, [sp, #4]
100047c0:	7b51      	ldrb	r1, [r2, #13]
100047c2:	430b      	orrs	r3, r1
100047c4:	7353      	strb	r3, [r2, #13]
100047c6:	f7fe fd61 	bl	1000328c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
100047ca:	f000 feb9 	bl	10005540 <sys_clock_tick_get_32>
100047ce:	2300      	movs	r3, #0
100047d0:	003a      	movs	r2, r7
100047d2:	0004      	movs	r4, r0
100047d4:	001d      	movs	r5, r3
100047d6:	1b12      	subs	r2, r2, r4
100047d8:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
100047da:	42ab      	cmp	r3, r5
100047dc:	dc02      	bgt.n	100047e4 <z_tick_sleep+0x74>
100047de:	d1d0      	bne.n	10004782 <z_tick_sleep+0x12>
100047e0:	42aa      	cmp	r2, r5
100047e2:	d0ce      	beq.n	10004782 <z_tick_sleep+0x12>
		return ticks;
100047e4:	0010      	movs	r0, r2
100047e6:	e7cd      	b.n	10004784 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
100047e8:	2702      	movs	r7, #2
100047ea:	427f      	negs	r7, r7
100047ec:	1b3f      	subs	r7, r7, r4
100047ee:	e7d3      	b.n	10004798 <z_tick_sleep+0x28>
100047f0:	20000194 	.word	0x20000194
100047f4:	200001b8 	.word	0x200001b8
100047f8:	10005473 	.word	0x10005473

100047fc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
100047fc:	b510      	push	{r4, lr}
100047fe:	000b      	movs	r3, r1
10004800:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004802:	1c42      	adds	r2, r0, #1
10004804:	d107      	bne.n	10004816 <z_impl_k_sleep+0x1a>
10004806:	3301      	adds	r3, #1
10004808:	d105      	bne.n	10004816 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
1000480a:	4b07      	ldr	r3, [pc, #28]	; (10004828 <z_impl_k_sleep+0x2c>)
1000480c:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
1000480e:	f7ff ff13 	bl	10004638 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10004812:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10004814:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10004816:	0021      	movs	r1, r4
10004818:	f7ff ffaa 	bl	10004770 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
1000481c:	220a      	movs	r2, #10
1000481e:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10004820:	17c1      	asrs	r1, r0, #31
10004822:	f7fb fd99 	bl	10000358 <__aeabi_uldivmod>
	return ret;
10004826:	e7f5      	b.n	10004814 <z_impl_k_sleep+0x18>
10004828:	20000194 	.word	0x20000194

1000482c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
1000482c:	4b01      	ldr	r3, [pc, #4]	; (10004834 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000482e:	6898      	ldr	r0, [r3, #8]
}
10004830:	4770      	bx	lr
10004832:	46c0      	nop			; (mov r8, r8)
10004834:	20000194 	.word	0x20000194

10004838 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10004838:	b570      	push	{r4, r5, r6, lr}
1000483a:	0004      	movs	r4, r0
1000483c:	f3ef 8610 	mrs	r6, PRIMASK
10004840:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10004842:	7b03      	ldrb	r3, [r0, #12]
10004844:	07db      	lsls	r3, r3, #31
10004846:	d508      	bpl.n	1000485a <z_thread_abort+0x22>
	if (key != 0U) {
10004848:	2e00      	cmp	r6, #0
1000484a:	d102      	bne.n	10004852 <z_thread_abort+0x1a>
	__asm__ volatile(
1000484c:	b662      	cpsie	i
1000484e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10004852:	2004      	movs	r0, #4
10004854:	b662      	cpsie	i
10004856:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10004858:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
1000485a:	2308      	movs	r3, #8
1000485c:	7b42      	ldrb	r2, [r0, #13]
1000485e:	421a      	tst	r2, r3
10004860:	d005      	beq.n	1000486e <z_thread_abort+0x36>
	if (key != 0U) {
10004862:	2e00      	cmp	r6, #0
10004864:	d1f8      	bne.n	10004858 <z_thread_abort+0x20>
	__asm__ volatile(
10004866:	b662      	cpsie	i
10004868:	f3bf 8f6f 	isb	sy
1000486c:	e7f4      	b.n	10004858 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000486e:	2120      	movs	r1, #32
10004870:	0010      	movs	r0, r2
10004872:	4388      	bics	r0, r1
10004874:	0001      	movs	r1, r0
10004876:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10004878:	b248      	sxtb	r0, r1
1000487a:	2800      	cmp	r0, #0
1000487c:	db20      	blt.n	100048c0 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000487e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10004880:	68a3      	ldr	r3, [r4, #8]
10004882:	2b00      	cmp	r3, #0
10004884:	d002      	beq.n	1000488c <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10004886:	0020      	movs	r0, r4
10004888:	f000 fde8 	bl	1000545c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
1000488c:	0020      	movs	r0, r4
1000488e:	3018      	adds	r0, #24
10004890:	f000 fe2c 	bl	100054ec <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10004894:	0023      	movs	r3, r4
	return list->head == list;
10004896:	6da5      	ldr	r5, [r4, #88]	; 0x58
10004898:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000489a:	429d      	cmp	r5, r3
1000489c:	d001      	beq.n	100048a2 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
1000489e:	2d00      	cmp	r5, #0
100048a0:	d116      	bne.n	100048d0 <z_thread_abort+0x98>
		update_cache(1);
100048a2:	2001      	movs	r0, #1
100048a4:	f7ff fd8e 	bl	100043c4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
100048a8:	4b10      	ldr	r3, [pc, #64]	; (100048ec <z_thread_abort+0xb4>)
100048aa:	689b      	ldr	r3, [r3, #8]
100048ac:	42a3      	cmp	r3, r4
100048ae:	d1d8      	bne.n	10004862 <z_thread_abort+0x2a>
100048b0:	f3ef 8305 	mrs	r3, IPSR
100048b4:	2b00      	cmp	r3, #0
100048b6:	d1d4      	bne.n	10004862 <z_thread_abort+0x2a>
100048b8:	0030      	movs	r0, r6
100048ba:	f7fe fce7 	bl	1000328c <arch_swap>
	return ret;
100048be:	e7d0      	b.n	10004862 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100048c0:	215f      	movs	r1, #95	; 0x5f
100048c2:	400a      	ands	r2, r1
100048c4:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100048c6:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100048c8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100048ca:	f000 fdbf 	bl	1000544c <sys_dlist_remove>
}
100048ce:	e7d7      	b.n	10004880 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
100048d0:	0028      	movs	r0, r5
100048d2:	f000 fdc3 	bl	1000545c <unpend_thread_no_timeout>
100048d6:	0028      	movs	r0, r5
100048d8:	3018      	adds	r0, #24
100048da:	f000 fe07 	bl	100054ec <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
100048de:	2300      	movs	r3, #0
		ready_thread(thread);
100048e0:	0028      	movs	r0, r5
100048e2:	66eb      	str	r3, [r5, #108]	; 0x6c
100048e4:	f7ff fdcc 	bl	10004480 <ready_thread>
100048e8:	e7d4      	b.n	10004894 <z_thread_abort+0x5c>
100048ea:	46c0      	nop			; (mov r8, r8)
100048ec:	20000194 	.word	0x20000194

100048f0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
100048f0:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
100048f2:	4806      	ldr	r0, [pc, #24]	; (1000490c <z_data_copy+0x1c>)
100048f4:	4a06      	ldr	r2, [pc, #24]	; (10004910 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100048f6:	4907      	ldr	r1, [pc, #28]	; (10004914 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
100048f8:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100048fa:	f000 fd9a 	bl	10005432 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
100048fe:	4a06      	ldr	r2, [pc, #24]	; (10004918 <z_data_copy+0x28>)
10004900:	4906      	ldr	r1, [pc, #24]	; (1000491c <z_data_copy+0x2c>)
10004902:	4807      	ldr	r0, [pc, #28]	; (10004920 <z_data_copy+0x30>)
10004904:	f000 fd95 	bl	10005432 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10004908:	bd10      	pop	{r4, pc}
1000490a:	46c0      	nop			; (mov r8, r8)
1000490c:	20000000 	.word	0x20000000
10004910:	20000038 	.word	0x20000038
10004914:	10005d18 	.word	0x10005d18
10004918:	00000000 	.word	0x00000000
1000491c:	10005d18 	.word	0x10005d18
10004920:	20000000 	.word	0x20000000

10004924 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004924:	2000      	movs	r0, #0
{
10004926:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004928:	4b03      	ldr	r3, [pc, #12]	; (10004938 <elapsed+0x14>)
1000492a:	681b      	ldr	r3, [r3, #0]
1000492c:	4283      	cmp	r3, r0
1000492e:	d101      	bne.n	10004934 <elapsed+0x10>
10004930:	f7ff f8e6 	bl	10003b00 <sys_clock_elapsed>
}
10004934:	bd10      	pop	{r4, pc}
10004936:	46c0      	nop			; (mov r8, r8)
10004938:	200001c4 	.word	0x200001c4

1000493c <next_timeout>:

static int32_t next_timeout(void)
{
1000493c:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
1000493e:	4b12      	ldr	r3, [pc, #72]	; (10004988 <next_timeout+0x4c>)
10004940:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004942:	429e      	cmp	r6, r3
10004944:	d10a      	bne.n	1000495c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10004946:	f7ff ffed 	bl	10004924 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
1000494a:	4810      	ldr	r0, [pc, #64]	; (1000498c <next_timeout+0x50>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
1000494c:	4b10      	ldr	r3, [pc, #64]	; (10004990 <next_timeout+0x54>)
1000494e:	691b      	ldr	r3, [r3, #16]
10004950:	2b00      	cmp	r3, #0
10004952:	d002      	beq.n	1000495a <next_timeout+0x1e>
10004954:	4298      	cmp	r0, r3
10004956:	dd00      	ble.n	1000495a <next_timeout+0x1e>
10004958:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
1000495a:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
1000495c:	f7ff ffe2 	bl	10004924 <elapsed>
	if ((to == NULL) ||
10004960:	2e00      	cmp	r6, #0
10004962:	d0f2      	beq.n	1000494a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10004964:	6932      	ldr	r2, [r6, #16]
10004966:	6973      	ldr	r3, [r6, #20]
10004968:	0004      	movs	r4, r0
1000496a:	17c5      	asrs	r5, r0, #31
1000496c:	1b12      	subs	r2, r2, r4
1000496e:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10004970:	2b00      	cmp	r3, #0
10004972:	dcea      	bgt.n	1000494a <next_timeout+0xe>
10004974:	d103      	bne.n	1000497e <next_timeout+0x42>
10004976:	2180      	movs	r1, #128	; 0x80
10004978:	0609      	lsls	r1, r1, #24
1000497a:	428a      	cmp	r2, r1
1000497c:	d2e5      	bcs.n	1000494a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
1000497e:	43d8      	mvns	r0, r3
10004980:	17c0      	asrs	r0, r0, #31
10004982:	4010      	ands	r0, r2
10004984:	e7e2      	b.n	1000494c <next_timeout+0x10>
10004986:	46c0      	nop			; (mov r8, r8)
10004988:	20000024 	.word	0x20000024
1000498c:	7fffffff 	.word	0x7fffffff
10004990:	20000194 	.word	0x20000194

10004994 <remove_timeout>:
{
10004994:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10004996:	2800      	cmp	r0, #0
10004998:	d00e      	beq.n	100049b8 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
1000499a:	4b0b      	ldr	r3, [pc, #44]	; (100049c8 <remove_timeout+0x34>)
1000499c:	685b      	ldr	r3, [r3, #4]
1000499e:	4298      	cmp	r0, r3
100049a0:	d00a      	beq.n	100049b8 <remove_timeout+0x24>
100049a2:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
100049a4:	2900      	cmp	r1, #0
100049a6:	d007      	beq.n	100049b8 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
100049a8:	690a      	ldr	r2, [r1, #16]
100049aa:	694b      	ldr	r3, [r1, #20]
100049ac:	6904      	ldr	r4, [r0, #16]
100049ae:	6945      	ldr	r5, [r0, #20]
100049b0:	1912      	adds	r2, r2, r4
100049b2:	416b      	adcs	r3, r5
100049b4:	610a      	str	r2, [r1, #16]
100049b6:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
100049b8:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
100049ba:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
100049bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100049be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100049c0:	2300      	movs	r3, #0
100049c2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100049c4:	6043      	str	r3, [r0, #4]
}
100049c6:	bd30      	pop	{r4, r5, pc}
100049c8:	20000024 	.word	0x20000024

100049cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
100049cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100049ce:	0004      	movs	r4, r0
100049d0:	0016      	movs	r6, r2
100049d2:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100049d4:	1c53      	adds	r3, r2, #1
100049d6:	d101      	bne.n	100049dc <z_add_timeout+0x10>
100049d8:	1c7b      	adds	r3, r7, #1
100049da:	d05d      	beq.n	10004a98 <z_add_timeout+0xcc>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
100049dc:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
100049de:	f3ef 8310 	mrs	r3, PRIMASK
100049e2:	b672      	cpsid	i
100049e4:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
100049e6:	2f00      	cmp	r7, #0
100049e8:	da23      	bge.n	10004a32 <z_add_timeout+0x66>
100049ea:	1c7b      	adds	r3, r7, #1
100049ec:	d101      	bne.n	100049f2 <z_add_timeout+0x26>
100049ee:	1cb3      	adds	r3, r6, #2
100049f0:	d81f      	bhi.n	10004a32 <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
100049f2:	4b2e      	ldr	r3, [pc, #184]	; (10004aac <z_add_timeout+0xe0>)
100049f4:	6818      	ldr	r0, [r3, #0]
100049f6:	6859      	ldr	r1, [r3, #4]
100049f8:	2202      	movs	r2, #2
100049fa:	4252      	negs	r2, r2
100049fc:	17d3      	asrs	r3, r2, #31
100049fe:	1a12      	subs	r2, r2, r0
10004a00:	418b      	sbcs	r3, r1
10004a02:	1b92      	subs	r2, r2, r6
10004a04:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10004a06:	2b00      	cmp	r3, #0
10004a08:	dc04      	bgt.n	10004a14 <z_add_timeout+0x48>
10004a0a:	d101      	bne.n	10004a10 <z_add_timeout+0x44>
10004a0c:	2a00      	cmp	r2, #0
10004a0e:	d101      	bne.n	10004a14 <z_add_timeout+0x48>
10004a10:	2201      	movs	r2, #1
10004a12:	2300      	movs	r3, #0
	return list->head == list;
10004a14:	4f26      	ldr	r7, [pc, #152]	; (10004ab0 <z_add_timeout+0xe4>)
10004a16:	6122      	str	r2, [r4, #16]
10004a18:	6163      	str	r3, [r4, #20]
10004a1a:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004a1c:	42bd      	cmp	r5, r7
10004a1e:	d100      	bne.n	10004a22 <z_add_timeout+0x56>
10004a20:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
10004a22:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10004a24:	2d00      	cmp	r5, #0
10004a26:	d10f      	bne.n	10004a48 <z_add_timeout+0x7c>
	node->next = list;
10004a28:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10004a2a:	6066      	str	r6, [r4, #4]
	tail->next = node;
10004a2c:	6034      	str	r4, [r6, #0]
	list->tail = node;
10004a2e:	607c      	str	r4, [r7, #4]
}
10004a30:	e01c      	b.n	10004a6c <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
10004a32:	f7ff ff77 	bl	10004924 <elapsed>
10004a36:	2201      	movs	r2, #1
10004a38:	2300      	movs	r3, #0
10004a3a:	1992      	adds	r2, r2, r6
10004a3c:	417b      	adcs	r3, r7
10004a3e:	0006      	movs	r6, r0
10004a40:	17c7      	asrs	r7, r0, #31
10004a42:	1992      	adds	r2, r2, r6
10004a44:	417b      	adcs	r3, r7
10004a46:	e7e5      	b.n	10004a14 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10004a48:	6928      	ldr	r0, [r5, #16]
10004a4a:	6969      	ldr	r1, [r5, #20]
10004a4c:	6922      	ldr	r2, [r4, #16]
10004a4e:	6963      	ldr	r3, [r4, #20]
10004a50:	4299      	cmp	r1, r3
10004a52:	dc02      	bgt.n	10004a5a <z_add_timeout+0x8e>
10004a54:	d121      	bne.n	10004a9a <z_add_timeout+0xce>
10004a56:	4290      	cmp	r0, r2
10004a58:	d91f      	bls.n	10004a9a <z_add_timeout+0xce>
				t->dticks -= to->dticks;
10004a5a:	1a80      	subs	r0, r0, r2
10004a5c:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10004a5e:	686b      	ldr	r3, [r5, #4]
10004a60:	6128      	str	r0, [r5, #16]
10004a62:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10004a64:	6063      	str	r3, [r4, #4]
	node->next = successor;
10004a66:	6025      	str	r5, [r4, #0]
	prev->next = node;
10004a68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10004a6a:	606c      	str	r4, [r5, #4]
	return list->head == list;
10004a6c:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004a6e:	42bb      	cmp	r3, r7
10004a70:	d00c      	beq.n	10004a8c <z_add_timeout+0xc0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10004a72:	429c      	cmp	r4, r3
10004a74:	d10a      	bne.n	10004a8c <z_add_timeout+0xc0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
10004a76:	f7ff ff61 	bl	1000493c <next_timeout>

			if (next_time == 0 ||
10004a7a:	2800      	cmp	r0, #0
10004a7c:	d003      	beq.n	10004a86 <z_add_timeout+0xba>
			    _current_cpu->slice_ticks != next_time) {
10004a7e:	4b0d      	ldr	r3, [pc, #52]	; (10004ab4 <z_add_timeout+0xe8>)
			if (next_time == 0 ||
10004a80:	691b      	ldr	r3, [r3, #16]
10004a82:	4283      	cmp	r3, r0
10004a84:	d002      	beq.n	10004a8c <z_add_timeout+0xc0>
				sys_clock_set_timeout(next_time, false);
10004a86:	2100      	movs	r1, #0
10004a88:	f7fe ffc2 	bl	10003a10 <sys_clock_set_timeout>
	if (key != 0U) {
10004a8c:	9b01      	ldr	r3, [sp, #4]
10004a8e:	2b00      	cmp	r3, #0
10004a90:	d102      	bne.n	10004a98 <z_add_timeout+0xcc>
	__asm__ volatile(
10004a92:	b662      	cpsie	i
10004a94:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10004a98:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
10004a9a:	1a12      	subs	r2, r2, r0
10004a9c:	418b      	sbcs	r3, r1
10004a9e:	6122      	str	r2, [r4, #16]
10004aa0:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10004aa2:	42b5      	cmp	r5, r6
10004aa4:	d0c0      	beq.n	10004a28 <z_add_timeout+0x5c>
10004aa6:	682d      	ldr	r5, [r5, #0]
10004aa8:	e7bc      	b.n	10004a24 <z_add_timeout+0x58>
10004aaa:	46c0      	nop			; (mov r8, r8)
10004aac:	20000118 	.word	0x20000118
10004ab0:	20000024 	.word	0x20000024
10004ab4:	20000194 	.word	0x20000194

10004ab8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
10004aba:	b087      	sub	sp, #28
10004abc:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10004abe:	f7ff fd4d 	bl	1000455c <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10004ac2:	f3ef 8310 	mrs	r3, PRIMASK
10004ac6:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10004ac8:	9301      	str	r3, [sp, #4]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10004aca:	4b2d      	ldr	r3, [pc, #180]	; (10004b80 <sys_clock_announce+0xc8>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10004acc:	4f2d      	ldr	r7, [pc, #180]	; (10004b84 <sys_clock_announce+0xcc>)
	announce_remaining = ticks;
10004ace:	601c      	str	r4, [r3, #0]
10004ad0:	469c      	mov	ip, r3
		curr_tick += dt;
10004ad2:	6839      	ldr	r1, [r7, #0]
10004ad4:	687a      	ldr	r2, [r7, #4]
	return list->head == list;
10004ad6:	4b2c      	ldr	r3, [pc, #176]	; (10004b88 <sys_clock_announce+0xd0>)
10004ad8:	9102      	str	r1, [sp, #8]
10004ada:	9203      	str	r2, [sp, #12]
10004adc:	681d      	ldr	r5, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004ade:	429d      	cmp	r5, r3
10004ae0:	d011      	beq.n	10004b06 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
10004ae2:	2d00      	cmp	r5, #0
10004ae4:	d00f      	beq.n	10004b06 <sys_clock_announce+0x4e>
10004ae6:	696a      	ldr	r2, [r5, #20]
10004ae8:	692e      	ldr	r6, [r5, #16]
10004aea:	17e3      	asrs	r3, r4, #31
10004aec:	429a      	cmp	r2, r3
10004aee:	dc02      	bgt.n	10004af6 <sys_clock_announce+0x3e>
10004af0:	d121      	bne.n	10004b36 <sys_clock_announce+0x7e>
10004af2:	42a6      	cmp	r6, r4
10004af4:	d91f      	bls.n	10004b36 <sys_clock_announce+0x7e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
10004af6:	0019      	movs	r1, r3
10004af8:	692a      	ldr	r2, [r5, #16]
10004afa:	696b      	ldr	r3, [r5, #20]
10004afc:	0020      	movs	r0, r4
10004afe:	1a12      	subs	r2, r2, r0
10004b00:	418b      	sbcs	r3, r1
10004b02:	612a      	str	r2, [r5, #16]
10004b04:	616b      	str	r3, [r5, #20]
	}

	curr_tick += announce_remaining;
10004b06:	9802      	ldr	r0, [sp, #8]
10004b08:	9903      	ldr	r1, [sp, #12]
10004b0a:	0022      	movs	r2, r4
10004b0c:	17e3      	asrs	r3, r4, #31
10004b0e:	1812      	adds	r2, r2, r0
10004b10:	414b      	adcs	r3, r1
	announce_remaining = 0;
10004b12:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
10004b14:	603a      	str	r2, [r7, #0]
10004b16:	607b      	str	r3, [r7, #4]
	announce_remaining = 0;
10004b18:	4663      	mov	r3, ip
10004b1a:	601c      	str	r4, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
10004b1c:	f7ff ff0e 	bl	1000493c <next_timeout>
10004b20:	0021      	movs	r1, r4
10004b22:	f7fe ff75 	bl	10003a10 <sys_clock_set_timeout>
	if (key != 0U) {
10004b26:	9b01      	ldr	r3, [sp, #4]
10004b28:	42a3      	cmp	r3, r4
10004b2a:	d102      	bne.n	10004b32 <sys_clock_announce+0x7a>
	__asm__ volatile(
10004b2c:	b662      	cpsie	i
10004b2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10004b32:	b007      	add	sp, #28
10004b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
10004b36:	17f3      	asrs	r3, r6, #31
10004b38:	9604      	str	r6, [sp, #16]
10004b3a:	9305      	str	r3, [sp, #20]
10004b3c:	9b04      	ldr	r3, [sp, #16]
10004b3e:	9c05      	ldr	r4, [sp, #20]
10004b40:	9802      	ldr	r0, [sp, #8]
10004b42:	9903      	ldr	r1, [sp, #12]
10004b44:	18c0      	adds	r0, r0, r3
10004b46:	4161      	adcs	r1, r4
		t->dticks = 0;
10004b48:	2300      	movs	r3, #0
10004b4a:	2400      	movs	r4, #0
		curr_tick += dt;
10004b4c:	4a0d      	ldr	r2, [pc, #52]	; (10004b84 <sys_clock_announce+0xcc>)
		t->dticks = 0;
10004b4e:	612b      	str	r3, [r5, #16]
10004b50:	616c      	str	r4, [r5, #20]
		curr_tick += dt;
10004b52:	6010      	str	r0, [r2, #0]
10004b54:	6051      	str	r1, [r2, #4]
		remove_timeout(t);
10004b56:	0028      	movs	r0, r5
10004b58:	f7ff ff1c 	bl	10004994 <remove_timeout>
	if (key != 0U) {
10004b5c:	9b01      	ldr	r3, [sp, #4]
10004b5e:	2b00      	cmp	r3, #0
10004b60:	d102      	bne.n	10004b68 <sys_clock_announce+0xb0>
	__asm__ volatile(
10004b62:	b662      	cpsie	i
10004b64:	f3bf 8f6f 	isb	sy
		t->fn(t);
10004b68:	0028      	movs	r0, r5
10004b6a:	68ab      	ldr	r3, [r5, #8]
10004b6c:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10004b6e:	f3ef 8310 	mrs	r3, PRIMASK
10004b72:	b672      	cpsid	i
10004b74:	9301      	str	r3, [sp, #4]
		announce_remaining -= dt;
10004b76:	4b02      	ldr	r3, [pc, #8]	; (10004b80 <sys_clock_announce+0xc8>)
10004b78:	681c      	ldr	r4, [r3, #0]
10004b7a:	1ba4      	subs	r4, r4, r6
10004b7c:	e7a5      	b.n	10004aca <sys_clock_announce+0x12>
10004b7e:	46c0      	nop			; (mov r8, r8)
10004b80:	200001c4 	.word	0x200001c4
10004b84:	20000118 	.word	0x20000118
10004b88:	20000024 	.word	0x20000024

10004b8c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
10004b8c:	b510      	push	{r4, lr}
10004b8e:	f3ef 8410 	mrs	r4, PRIMASK
10004b92:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
10004b94:	f7ff fec6 	bl	10004924 <elapsed>
10004b98:	0002      	movs	r2, r0
10004b9a:	4906      	ldr	r1, [pc, #24]	; (10004bb4 <sys_clock_tick_get+0x28>)
10004b9c:	17c3      	asrs	r3, r0, #31
10004b9e:	6808      	ldr	r0, [r1, #0]
10004ba0:	6849      	ldr	r1, [r1, #4]
10004ba2:	1880      	adds	r0, r0, r2
10004ba4:	4159      	adcs	r1, r3
	if (key != 0U) {
10004ba6:	2c00      	cmp	r4, #0
10004ba8:	d102      	bne.n	10004bb0 <sys_clock_tick_get+0x24>
	__asm__ volatile(
10004baa:	b662      	cpsie	i
10004bac:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10004bb0:	bd10      	pop	{r4, pc}
10004bb2:	46c0      	nop			; (mov r8, r8)
10004bb4:	20000118 	.word	0x20000118

10004bb8 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10004bb8:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
10004bba:	4802      	ldr	r0, [pc, #8]	; (10004bc4 <boot_banner+0xc>)
10004bbc:	f000 f85e 	bl	10004c7c <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10004bc0:	bd10      	pop	{r4, pc}
10004bc2:	46c0      	nop			; (mov r8, r8)
10004bc4:	10005cd6 	.word	0x10005cd6

10004bc8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10004bc8:	4770      	bx	lr

10004bca <device_is_ready>:

extern bool z_impl_device_is_ready(const struct device * dev);

__pinned_func
static inline bool device_is_ready(const struct device * dev)
{
10004bca:	b510      	push	{r4, lr}
10004bcc:	f000 fc0d 	bl	100053ea <z_device_is_ready>
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
}
10004bd0:	bd10      	pop	{r4, pc}

10004bd2 <k_sleep.isra.0>:
static inline int32_t k_sleep(k_timeout_t timeout)
10004bd2:	b510      	push	{r4, lr}
	return z_impl_k_sleep(timeout);
10004bd4:	f7ff fe12 	bl	100047fc <z_impl_k_sleep>
}
10004bd8:	bd10      	pop	{r4, pc}

10004bda <paradatotal>:
void paradatotal(){
10004bda:	b510      	push	{r4, lr}
		gpio_pin_set(ctr1A.port, PINC1A , GPIO_ACTIVE_LOW);
10004bdc:	2101      	movs	r1, #1
10004bde:	2010      	movs	r0, #16
10004be0:	f7fd f88e 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr2A.port, PINC2A, GPIO_ACTIVE_LOW);
10004be4:	2101      	movs	r1, #1
10004be6:	2011      	movs	r0, #17
10004be8:	f7fd f88a 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr1A.port, PINC1B , GPIO_ACTIVE_LOW);
10004bec:	2101      	movs	r1, #1
10004bee:	200e      	movs	r0, #14
10004bf0:	f7fd f886 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
		gpio_pin_set(ctr2A.port, PINC2B, GPIO_ACTIVE_LOW);
10004bf4:	2101      	movs	r1, #1
10004bf6:	200f      	movs	r0, #15
10004bf8:	f7fd f882 	bl	10001d00 <gpio_pin_set.constprop.0.isra.0>
}
10004bfc:	bd10      	pop	{r4, pc}

10004bfe <main>:
#define SLEEP_TIME_MS   1000

/* The devicetree node identifier for the "led0" alias. */

void main(void)
{
10004bfe:	b510      	push	{r4, lr}
	
	
inicio_motores();
10004c00:	f7fd f8d8 	bl	10001db4 <inicio_motores>

//calibracio_mot();
 // pruebagiro(); 
 distancia(FWD,5.5,1);
10004c04:	2201      	movs	r2, #1
10004c06:	2105      	movs	r1, #5
10004c08:	0010      	movs	r0, r2
10004c0a:	f7fd f99d 	bl	10001f48 <distancia>
}
10004c0e:	bd10      	pop	{r4, pc}

10004c10 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
10004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
10004c12:	b085      	sub	sp, #20
10004c14:	000d      	movs	r5, r1
10004c16:	1e1c      	subs	r4, r3, #0
10004c18:	9002      	str	r0, [sp, #8]
10004c1a:	9203      	str	r2, [sp, #12]
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
10004c1c:	d029      	beq.n	10004c72 <cbpprintf_external+0x62>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
10004c1e:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
10004c20:	785b      	ldrb	r3, [r3, #1]
10004c22:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
10004c24:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
10004c26:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10004c28:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
10004c2a:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10004c2c:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
10004c2e:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10004c30:	18c0      	adds	r0, r0, r3
10004c32:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
10004c34:	9b01      	ldr	r3, [sp, #4]
10004c36:	429e      	cmp	r6, r3
10004c38:	d310      	bcc.n	10004c5c <cbpprintf_external+0x4c>

	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004c3a:	7962      	ldrb	r2, [r4, #5]
10004c3c:	7923      	ldrb	r3, [r4, #4]
10004c3e:	0212      	lsls	r2, r2, #8
10004c40:	431a      	orrs	r2, r3
10004c42:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
10004c44:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004c46:	041b      	lsls	r3, r3, #16
10004c48:	4313      	orrs	r3, r2
10004c4a:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
10004c4c:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004c4e:	0612      	lsls	r2, r2, #24
10004c50:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
10004c52:	0023      	movs	r3, r4
10004c54:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
10004c56:	47a8      	blx	r5
}
10004c58:	b005      	add	sp, #20
10004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
10004c5c:	7803      	ldrb	r3, [r0, #0]
10004c5e:	1c47      	adds	r7, r0, #1
		*ps = s;
10004c60:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
10004c62:	0038      	movs	r0, r7
		*ps = s;
10004c64:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
10004c66:	f000 f92e 	bl	10004ec6 <strlen>
10004c6a:	3001      	adds	r0, #1
10004c6c:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
10004c6e:	3601      	adds	r6, #1
10004c70:	e7e0      	b.n	10004c34 <cbpprintf_external+0x24>
		return -EINVAL;
10004c72:	2016      	movs	r0, #22
10004c74:	4240      	negs	r0, r0
10004c76:	e7ef      	b.n	10004c58 <cbpprintf_external+0x48>

10004c78 <arch_printk_char_out>:
}
10004c78:	2000      	movs	r0, #0
10004c7a:	4770      	bx	lr

10004c7c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
10004c7c:	b40f      	push	{r0, r1, r2, r3}
10004c7e:	b507      	push	{r0, r1, r2, lr}
10004c80:	a904      	add	r1, sp, #16
10004c82:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10004c84:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
10004c86:	f000 f888 	bl	10004d9a <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
10004c8a:	b003      	add	sp, #12
10004c8c:	bc08      	pop	{r3}
10004c8e:	b004      	add	sp, #16
10004c90:	4718      	bx	r3

10004c92 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10004c92:	b510      	push	{r4, lr}
10004c94:	0004      	movs	r4, r0
10004c96:	0008      	movs	r0, r1
10004c98:	0011      	movs	r1, r2
10004c9a:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
10004c9c:	47a0      	blx	r4
	return z_impl_z_current_get();
10004c9e:	f7ff fdc5 	bl	1000482c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10004ca2:	f7fe fc53 	bl	1000354c <z_impl_k_thread_abort>

10004ca6 <encode_uint>:
{
10004ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
10004ca8:	b085      	sub	sp, #20
10004caa:	9001      	str	r0, [sp, #4]
10004cac:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10004cae:	78d3      	ldrb	r3, [r2, #3]
{
10004cb0:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10004cb2:	001a      	movs	r2, r3
10004cb4:	3a41      	subs	r2, #65	; 0x41
10004cb6:	000f      	movs	r7, r1
	switch (specifier) {
10004cb8:	2408      	movs	r4, #8
10004cba:	9202      	str	r2, [sp, #8]
10004cbc:	2b6f      	cmp	r3, #111	; 0x6f
10004cbe:	d00a      	beq.n	10004cd6 <encode_uint+0x30>
10004cc0:	d804      	bhi.n	10004ccc <encode_uint+0x26>
		return 16;
10004cc2:	1924      	adds	r4, r4, r4
	switch (specifier) {
10004cc4:	2b58      	cmp	r3, #88	; 0x58
10004cc6:	d006      	beq.n	10004cd6 <encode_uint+0x30>
		return 10;
10004cc8:	3c06      	subs	r4, #6
10004cca:	e004      	b.n	10004cd6 <encode_uint+0x30>
	switch (specifier) {
10004ccc:	2208      	movs	r2, #8
		return 16;
10004cce:	2410      	movs	r4, #16
	switch (specifier) {
10004cd0:	4393      	bics	r3, r2
10004cd2:	2b70      	cmp	r3, #112	; 0x70
10004cd4:	d1f8      	bne.n	10004cc8 <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10004cd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10004cd8:	0022      	movs	r2, r4
10004cda:	2300      	movs	r3, #0
10004cdc:	0039      	movs	r1, r7
10004cde:	9801      	ldr	r0, [sp, #4]
10004ce0:	f7fb fb3a 	bl	10000358 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004ce4:	0013      	movs	r3, r2
10004ce6:	468c      	mov	ip, r1
10004ce8:	b2d2      	uxtb	r2, r2
10004cea:	2b09      	cmp	r3, #9
10004cec:	d81a      	bhi.n	10004d24 <encode_uint+0x7e>
10004cee:	3230      	adds	r2, #48	; 0x30
10004cf0:	b2d3      	uxtb	r3, r2
10004cf2:	3e01      	subs	r6, #1
10004cf4:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10004cf6:	2300      	movs	r3, #0
10004cf8:	42bb      	cmp	r3, r7
10004cfa:	d102      	bne.n	10004d02 <encode_uint+0x5c>
10004cfc:	9b01      	ldr	r3, [sp, #4]
10004cfe:	429c      	cmp	r4, r3
10004d00:	d802      	bhi.n	10004d08 <encode_uint+0x62>
10004d02:	9b03      	ldr	r3, [sp, #12]
10004d04:	429e      	cmp	r6, r3
10004d06:	d80a      	bhi.n	10004d1e <encode_uint+0x78>
	if (conv->flag_hash) {
10004d08:	782b      	ldrb	r3, [r5, #0]
10004d0a:	069b      	lsls	r3, r3, #26
10004d0c:	d504      	bpl.n	10004d18 <encode_uint+0x72>
		if (radix == 8) {
10004d0e:	2c08      	cmp	r4, #8
10004d10:	d110      	bne.n	10004d34 <encode_uint+0x8e>
			conv->altform_0 = true;
10004d12:	78ab      	ldrb	r3, [r5, #2]
10004d14:	4323      	orrs	r3, r4
10004d16:	70ab      	strb	r3, [r5, #2]
}
10004d18:	0030      	movs	r0, r6
10004d1a:	b005      	add	sp, #20
10004d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10004d1e:	4667      	mov	r7, ip
10004d20:	9001      	str	r0, [sp, #4]
10004d22:	e7d9      	b.n	10004cd8 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004d24:	0013      	movs	r3, r2
10004d26:	9902      	ldr	r1, [sp, #8]
10004d28:	3357      	adds	r3, #87	; 0x57
10004d2a:	b2db      	uxtb	r3, r3
10004d2c:	2919      	cmp	r1, #25
10004d2e:	d8e0      	bhi.n	10004cf2 <encode_uint+0x4c>
10004d30:	3237      	adds	r2, #55	; 0x37
10004d32:	e7dd      	b.n	10004cf0 <encode_uint+0x4a>
		} else if (radix == 16) {
10004d34:	2c10      	cmp	r4, #16
10004d36:	d1ef      	bne.n	10004d18 <encode_uint+0x72>
			conv->altform_0c = true;
10004d38:	78ab      	ldrb	r3, [r5, #2]
10004d3a:	431c      	orrs	r4, r3
10004d3c:	70ac      	strb	r4, [r5, #2]
	return bp;
10004d3e:	e7eb      	b.n	10004d18 <encode_uint+0x72>

10004d40 <outs>:
{
10004d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004d42:	0007      	movs	r7, r0
10004d44:	0015      	movs	r5, r2
10004d46:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004d48:	0014      	movs	r4, r2
{
10004d4a:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004d4c:	42a6      	cmp	r6, r4
10004d4e:	d806      	bhi.n	10004d5e <outs+0x1e>
10004d50:	2e00      	cmp	r6, #0
10004d52:	d001      	beq.n	10004d58 <outs+0x18>
	return (int)count;
10004d54:	1b60      	subs	r0, r4, r5
10004d56:	e008      	b.n	10004d6a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004d58:	7823      	ldrb	r3, [r4, #0]
10004d5a:	2b00      	cmp	r3, #0
10004d5c:	d0fa      	beq.n	10004d54 <outs+0x14>
		int rc = out((int)*sp++, ctx);
10004d5e:	7820      	ldrb	r0, [r4, #0]
10004d60:	9901      	ldr	r1, [sp, #4]
10004d62:	47b8      	blx	r7
		if (rc < 0) {
10004d64:	3401      	adds	r4, #1
10004d66:	2800      	cmp	r0, #0
10004d68:	daf0      	bge.n	10004d4c <outs+0xc>
}
10004d6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10004d6c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10004d6c:	4770      	bx	lr

10004d6e <dummy_timestamp>:
}
10004d6e:	2000      	movs	r0, #0
10004d70:	4770      	bx	lr

10004d72 <default_lf_get_timestamp>:
{
10004d72:	b510      	push	{r4, lr}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
10004d74:	f000 fbe8 	bl	10005548 <z_impl_k_uptime_ticks>
10004d78:	220a      	movs	r2, #10
10004d7a:	2300      	movs	r3, #0
10004d7c:	f7fb faec 	bl	10000358 <__aeabi_uldivmod>
}
10004d80:	bd10      	pop	{r4, pc}

10004d82 <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
10004d82:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
10004d84:	2101      	movs	r1, #1
10004d86:	f000 fbe3 	bl	10005550 <z_impl_atomic_add>
	return atomic_add(target, 1);

}
10004d8a:	bd10      	pop	{r4, pc}

10004d8c <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
10004d8c:	2100      	movs	r1, #0
{
10004d8e:	b510      	push	{r4, lr}
		(void)z_log_init(false, false);
10004d90:	0008      	movs	r0, r1
10004d92:	f7fd fe95 	bl	10002ac0 <z_log_init.isra.0>
	}

	return 0;
}
10004d96:	2000      	movs	r0, #0
10004d98:	bd10      	pop	{r4, pc}

10004d9a <z_log_vprintk>:
{
10004d9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10004d9c:	9002      	str	r0, [sp, #8]
10004d9e:	2000      	movs	r0, #0
10004da0:	9103      	str	r1, [sp, #12]
10004da2:	0003      	movs	r3, r0
10004da4:	0002      	movs	r2, r0
10004da6:	0001      	movs	r1, r0
10004da8:	9001      	str	r0, [sp, #4]
10004daa:	9000      	str	r0, [sp, #0]
10004dac:	f7fd ff86 	bl	10002cbc <z_impl_z_log_msg_runtime_vcreate>
}
10004db0:	b005      	add	sp, #20
10004db2:	bd00      	pop	{pc}

10004db4 <z_log_notify_backend_enabled>:
}
10004db4:	4770      	bx	lr

10004db6 <z_log_get_tag>:
}
10004db6:	2000      	movs	r0, #0
10004db8:	4770      	bx	lr

10004dba <z_log_msg_finalize>:
{
10004dba:	b570      	push	{r4, r5, r6, lr}
10004dbc:	000e      	movs	r6, r1
10004dbe:	0004      	movs	r4, r0
10004dc0:	0015      	movs	r5, r2
10004dc2:	0019      	movs	r1, r3
	if (!msg) {
10004dc4:	2800      	cmp	r0, #0
10004dc6:	d102      	bne.n	10004dce <z_log_msg_finalize+0x14>
		z_log_dropped(false);
10004dc8:	f7fd ff2a 	bl	10002c20 <z_log_dropped>
}
10004dcc:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
10004dce:	2b00      	cmp	r3, #0
10004dd0:	d007      	beq.n	10004de2 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
10004dd2:	036b      	lsls	r3, r5, #13
		memcpy(d, data, desc.data_len);
10004dd4:	0052      	lsls	r2, r2, #1
		uint8_t *d = msg->data + desc.package_len;
10004dd6:	0d9b      	lsrs	r3, r3, #22
10004dd8:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
10004dda:	0d12      	lsrs	r2, r2, #20
		uint8_t *d = msg->data + desc.package_len;
10004ddc:	18c0      	adds	r0, r0, r3
		memcpy(d, data, desc.data_len);
10004dde:	f000 f884 	bl	10004eea <memcpy>
	z_log_msg_commit(msg);
10004de2:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
10004de4:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
10004de6:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
10004de8:	f7fd ff2a 	bl	10002c40 <z_log_msg_commit>
10004dec:	e7ee      	b.n	10004dcc <z_log_msg_finalize+0x12>

10004dee <out_func>:
{
10004dee:	b513      	push	{r0, r1, r4, lr}
		char x = (char)c;
10004df0:	466b      	mov	r3, sp
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
10004df2:	684a      	ldr	r2, [r1, #4]
		char x = (char)c;
10004df4:	71d8      	strb	r0, [r3, #7]
10004df6:	3307      	adds	r3, #7
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
10004df8:	680c      	ldr	r4, [r1, #0]
10004dfa:	0018      	movs	r0, r3
10004dfc:	2101      	movs	r1, #1
10004dfe:	6852      	ldr	r2, [r2, #4]
10004e00:	47a0      	blx	r4
}
10004e02:	2000      	movs	r0, #0
10004e04:	bd16      	pop	{r1, r2, r4, pc}

10004e06 <cr_out_func>:
{
10004e06:	b570      	push	{r4, r5, r6, lr}
10004e08:	0004      	movs	r4, r0
10004e0a:	000d      	movs	r5, r1
	if (c == '\n') {
10004e0c:	280a      	cmp	r0, #10
10004e0e:	d102      	bne.n	10004e16 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
10004e10:	200d      	movs	r0, #13
10004e12:	f7ff ffec 	bl	10004dee <out_func>
	out_func(c, ctx);
10004e16:	0029      	movs	r1, r5
10004e18:	0020      	movs	r0, r4
10004e1a:	f7ff ffe8 	bl	10004dee <out_func>
}
10004e1e:	2000      	movs	r0, #0
10004e20:	bd70      	pop	{r4, r5, r6, pc}

10004e22 <buffer_write>:
{
10004e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004e24:	0006      	movs	r6, r0
10004e26:	000d      	movs	r5, r1
10004e28:	0014      	movs	r4, r2
10004e2a:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
10004e2c:	0021      	movs	r1, r4
10004e2e:	0028      	movs	r0, r5
10004e30:	003a      	movs	r2, r7
10004e32:	47b0      	blx	r6
		len -= processed;
10004e34:	1a24      	subs	r4, r4, r0
		buf += processed;
10004e36:	182d      	adds	r5, r5, r0
	} while (len != 0);
10004e38:	2c00      	cmp	r4, #0
10004e3a:	d1f7      	bne.n	10004e2c <buffer_write+0xa>
}
10004e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004e3e <cbvprintf>:
{
10004e3e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10004e40:	2400      	movs	r4, #0
10004e42:	9400      	str	r4, [sp, #0]
10004e44:	f7fd faa8 	bl	10002398 <z_cbvprintf_impl>
}
10004e48:	bd16      	pop	{r1, r2, r4, pc}

10004e4a <log_output_flush>:
{
10004e4a:	b510      	push	{r4, lr}
		     output->control_block->offset,
10004e4c:	6842      	ldr	r2, [r0, #4]
{
10004e4e:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
10004e50:	ca0c      	ldmia	r2, {r2, r3}
10004e52:	6881      	ldr	r1, [r0, #8]
10004e54:	6800      	ldr	r0, [r0, #0]
10004e56:	f7ff ffe4 	bl	10004e22 <buffer_write>
	output->control_block->offset = 0;
10004e5a:	2200      	movs	r2, #0
10004e5c:	6863      	ldr	r3, [r4, #4]
10004e5e:	601a      	str	r2, [r3, #0]
}
10004e60:	bd10      	pop	{r4, pc}

10004e62 <log_backend_uart_init>:
}
10004e62:	4770      	bx	lr

10004e64 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10004e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10004e66:	ab0b      	add	r3, sp, #44	; 0x2c
10004e68:	9305      	str	r3, [sp, #20]
10004e6a:	2000      	movs	r0, #0
10004e6c:	9303      	str	r3, [sp, #12]
10004e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10004e70:	2201      	movs	r2, #1
10004e72:	9302      	str	r3, [sp, #8]
10004e74:	9001      	str	r0, [sp, #4]
10004e76:	0003      	movs	r3, r0
10004e78:	9000      	str	r0, [sp, #0]
10004e7a:	f7fd ff1f 	bl	10002cbc <z_impl_z_log_msg_runtime_vcreate>
}
10004e7e:	b007      	add	sp, #28
10004e80:	bd00      	pop	{pc}

10004e82 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10004e82:	b510      	push	{r4, lr}
10004e84:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
10004e86:	6800      	ldr	r0, [r0, #0]
10004e88:	f7fe f962 	bl	10003150 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10004e8c:	bd10      	pop	{r4, pc}

10004e8e <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10004e8e:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10004e90:	2100      	movs	r1, #0
10004e92:	2001      	movs	r0, #1
10004e94:	f7fe f95c 	bl	10003150 <z_arm_fatal_error>
}
10004e98:	bd10      	pop	{r4, pc}

10004e9a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10004e9a:	b510      	push	{r4, lr}
	handler();
10004e9c:	f7fe f9de 	bl	1000325c <z_SysNmiOnReset>
	z_arm_int_exit();
10004ea0:	f7fe fa88 	bl	100033b4 <z_arm_exc_exit>
}
10004ea4:	bd10      	pop	{r4, pc}

10004ea6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10004ea6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10004ea8:	ab0b      	add	r3, sp, #44	; 0x2c
10004eaa:	9305      	str	r3, [sp, #20]
10004eac:	2000      	movs	r0, #0
10004eae:	9303      	str	r3, [sp, #12]
10004eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10004eb2:	2201      	movs	r2, #1
10004eb4:	9302      	str	r3, [sp, #8]
10004eb6:	9001      	str	r0, [sp, #4]
10004eb8:	0003      	movs	r3, r0
10004eba:	9000      	str	r0, [sp, #0]
10004ebc:	f7fd fefe 	bl	10002cbc <z_impl_z_log_msg_runtime_vcreate>
}
10004ec0:	b007      	add	sp, #28
10004ec2:	bd00      	pop	{pc}

10004ec4 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10004ec4:	4770      	bx	lr

10004ec6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
10004ec6:	0003      	movs	r3, r0
	size_t n = 0;
10004ec8:	2000      	movs	r0, #0

	while (*s != '\0') {
10004eca:	5c1a      	ldrb	r2, [r3, r0]
10004ecc:	2a00      	cmp	r2, #0
10004ece:	d100      	bne.n	10004ed2 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10004ed0:	4770      	bx	lr
		n++;
10004ed2:	3001      	adds	r0, #1
10004ed4:	e7f9      	b.n	10004eca <strlen+0x4>

10004ed6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
10004ed6:	0003      	movs	r3, r0
	size_t n = 0;
10004ed8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10004eda:	5c1a      	ldrb	r2, [r3, r0]
10004edc:	2a00      	cmp	r2, #0
10004ede:	d001      	beq.n	10004ee4 <strnlen+0xe>
10004ee0:	4288      	cmp	r0, r1
10004ee2:	d100      	bne.n	10004ee6 <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10004ee4:	4770      	bx	lr
		n++;
10004ee6:	3001      	adds	r0, #1
10004ee8:	e7f7      	b.n	10004eda <strnlen+0x4>

10004eea <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10004eea:	2300      	movs	r3, #0
{
10004eec:	b510      	push	{r4, lr}
	while (n > 0) {
10004eee:	429a      	cmp	r2, r3
10004ef0:	d100      	bne.n	10004ef4 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10004ef2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10004ef4:	5ccc      	ldrb	r4, [r1, r3]
10004ef6:	54c4      	strb	r4, [r0, r3]
		n--;
10004ef8:	3301      	adds	r3, #1
10004efa:	e7f8      	b.n	10004eee <memcpy+0x4>

10004efc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10004efc:	0003      	movs	r3, r0
10004efe:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10004f00:	1882      	adds	r2, r0, r2
10004f02:	4293      	cmp	r3, r2
10004f04:	d100      	bne.n	10004f08 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
10004f06:	4770      	bx	lr
		*(d_byte++) = c_byte;
10004f08:	7019      	strb	r1, [r3, #0]
		n--;
10004f0a:	3301      	adds	r3, #1
10004f0c:	e7f9      	b.n	10004f02 <memset+0x6>

10004f0e <_stdout_hook_default>:
	return EOF;
10004f0e:	2001      	movs	r0, #1
}
10004f10:	4240      	negs	r0, r0
10004f12:	4770      	bx	lr

10004f14 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10004f14:	23d0      	movs	r3, #208	; 0xd0
10004f16:	061b      	lsls	r3, r3, #24
10004f18:	685b      	ldr	r3, [r3, #4]
}
10004f1a:	2000      	movs	r0, #0
	*value = gpio_get_all();
10004f1c:	600b      	str	r3, [r1, #0]
}
10004f1e:	4770      	bx	lr

10004f20 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10004f20:	23d0      	movs	r3, #208	; 0xd0
10004f22:	061b      	lsls	r3, r3, #24
10004f24:	6918      	ldr	r0, [r3, #16]
10004f26:	4042      	eors	r2, r0
10004f28:	4011      	ands	r1, r2
}
10004f2a:	2000      	movs	r0, #0
10004f2c:	61d9      	str	r1, [r3, #28]
10004f2e:	4770      	bx	lr

10004f30 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
10004f30:	23d0      	movs	r3, #208	; 0xd0
10004f32:	061b      	lsls	r3, r3, #24
}
10004f34:	2000      	movs	r0, #0
10004f36:	6159      	str	r1, [r3, #20]
10004f38:	4770      	bx	lr

10004f3a <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
10004f3a:	23d0      	movs	r3, #208	; 0xd0
10004f3c:	061b      	lsls	r3, r3, #24
}
10004f3e:	2000      	movs	r0, #0
10004f40:	6199      	str	r1, [r3, #24]
10004f42:	4770      	bx	lr

10004f44 <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
10004f44:	23d0      	movs	r3, #208	; 0xd0
10004f46:	061b      	lsls	r3, r3, #24
}
10004f48:	2000      	movs	r0, #0
10004f4a:	61d9      	str	r1, [r3, #28]
10004f4c:	4770      	bx	lr

10004f4e <gpio_rpi_manage_callback>:
{
10004f4e:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10004f50:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10004f52:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10004f54:	2800      	cmp	r0, #0
10004f56:	d021      	beq.n	10004f9c <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004f58:	4288      	cmp	r0, r1
10004f5a:	d11b      	bne.n	10004f94 <gpio_rpi_manage_callback+0x46>
	return node->next;
10004f5c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
10004f5e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
10004f60:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10004f62:	42a1      	cmp	r1, r4
10004f64:	d100      	bne.n	10004f68 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10004f66:	6098      	str	r0, [r3, #8]
	parent->next = child;
10004f68:	2000      	movs	r0, #0
10004f6a:	6008      	str	r0, [r1, #0]
	if (set) {
10004f6c:	4282      	cmp	r2, r0
10004f6e:	d006      	beq.n	10004f7e <gpio_rpi_manage_callback+0x30>
	return list->head;
10004f70:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
10004f72:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10004f74:	689a      	ldr	r2, [r3, #8]
	list->head = node;
10004f76:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10004f78:	2a00      	cmp	r2, #0
10004f7a:	d100      	bne.n	10004f7e <gpio_rpi_manage_callback+0x30>
	list->tail = node;
10004f7c:	6099      	str	r1, [r3, #8]
	return 0;
10004f7e:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
10004f80:	e010      	b.n	10004fa4 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004f82:	4281      	cmp	r1, r0
10004f84:	d106      	bne.n	10004f94 <gpio_rpi_manage_callback+0x46>
	return node->next;
10004f86:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
10004f88:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10004f8a:	6898      	ldr	r0, [r3, #8]
10004f8c:	4281      	cmp	r1, r0
10004f8e:	d1eb      	bne.n	10004f68 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10004f90:	609c      	str	r4, [r3, #8]
}
10004f92:	e7e9      	b.n	10004f68 <gpio_rpi_manage_callback+0x1a>
	return node->next;
10004f94:	0004      	movs	r4, r0
10004f96:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004f98:	2800      	cmp	r0, #0
10004f9a:	d1f2      	bne.n	10004f82 <gpio_rpi_manage_callback+0x34>
			if (!set) {
10004f9c:	2a00      	cmp	r2, #0
10004f9e:	d1e7      	bne.n	10004f70 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
10004fa0:	2016      	movs	r0, #22
10004fa2:	4240      	negs	r0, r0
}
10004fa4:	bd10      	pop	{r4, pc}

10004fa6 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10004fa6:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10004fa8:	6843      	ldr	r3, [r0, #4]
10004faa:	685b      	ldr	r3, [r3, #4]
10004fac:	4798      	blx	r3
	return 0;
}
10004fae:	2000      	movs	r0, #0
10004fb0:	bd10      	pop	{r4, pc}

10004fb2 <gpio_rpi_pin_interrupt_configure>:
{
10004fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004fb4:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10004fb6:	6907      	ldr	r7, [r0, #16]
{
10004fb8:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004fba:	210f      	movs	r1, #15
10004fbc:	2200      	movs	r2, #0
10004fbe:	0028      	movs	r0, r5
{
10004fc0:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004fc2:	f7fe ff7b 	bl	10003ebc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004fc6:	2201      	movs	r2, #1
10004fc8:	0013      	movs	r3, r2
10004fca:	40ab      	lsls	r3, r5
10004fcc:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10004fce:	2380      	movs	r3, #128	; 0x80
10004fd0:	039b      	lsls	r3, r3, #14
10004fd2:	429e      	cmp	r6, r3
10004fd4:	d105      	bne.n	10004fe2 <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004fd6:	68fb      	ldr	r3, [r7, #12]
10004fd8:	9a01      	ldr	r2, [sp, #4]
10004fda:	4393      	bics	r3, r2
}
10004fdc:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004fde:	60fb      	str	r3, [r7, #12]
}
10004fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
10004fe2:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10004fe4:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10004fe6:	04db      	lsls	r3, r3, #19
10004fe8:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
10004fea:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10004fec:	01f6      	lsls	r6, r6, #7
10004fee:	d50d      	bpl.n	1000500c <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10004ff0:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
10004ff2:	2b00      	cmp	r3, #0
10004ff4:	d001      	beq.n	10004ffa <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10004ff6:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10004ff8:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10004ffa:	2201      	movs	r2, #1
10004ffc:	0028      	movs	r0, r5
10004ffe:	f7fe ff5d 	bl	10003ebc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005002:	68fb      	ldr	r3, [r7, #12]
10005004:	9a01      	ldr	r2, [sp, #4]
10005006:	431a      	orrs	r2, r3
10005008:	0013      	movs	r3, r2
1000500a:	e7e7      	b.n	10004fdc <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
1000500c:	2b00      	cmp	r3, #0
1000500e:	d0f4      	beq.n	10004ffa <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
10005010:	2302      	movs	r3, #2
10005012:	e7f1      	b.n	10004ff8 <gpio_rpi_pin_interrupt_configure+0x46>

10005014 <gpio_rpi_configure>:
{
10005014:	b570      	push	{r4, r5, r6, lr}
10005016:	000d      	movs	r5, r1
10005018:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
1000501a:	0793      	lsls	r3, r2, #30
1000501c:	d423      	bmi.n	10005066 <gpio_rpi_configure+0x52>
	gpio_set_function(pin, GPIO_FUNC_SIO);
1000501e:	2105      	movs	r1, #5
10005020:	0028      	movs	r0, r5
10005022:	f7fe feeb 	bl	10003dfc <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10005026:	03a3      	lsls	r3, r4, #14
10005028:	d50d      	bpl.n	10005046 <gpio_rpi_configure+0x32>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
1000502a:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
1000502c:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
1000502e:	40ab      	lsls	r3, r5
    sio_hw->gpio_oe_set = mask;
10005030:	0612      	lsls	r2, r2, #24
10005032:	6253      	str	r3, [r2, #36]	; 0x24
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
10005034:	0321      	lsls	r1, r4, #12
10005036:	d502      	bpl.n	1000503e <gpio_rpi_configure+0x2a>
    sio_hw->gpio_set = mask;
10005038:	6153      	str	r3, [r2, #20]
	return 0;
1000503a:	2000      	movs	r0, #0
}
1000503c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000503e:	0364      	lsls	r4, r4, #13
10005040:	d5fb      	bpl.n	1000503a <gpio_rpi_configure+0x26>
    sio_hw->gpio_clr = mask;
10005042:	6193      	str	r3, [r2, #24]
}
10005044:	e7f9      	b.n	1000503a <gpio_rpi_configure+0x26>
	} else if (flags & GPIO_INPUT) {
10005046:	03e3      	lsls	r3, r4, #15
10005048:	d5f7      	bpl.n	1000503a <gpio_rpi_configure+0x26>
    uint32_t mask = 1ul << gpio;
1000504a:	2301      	movs	r3, #1
1000504c:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000504e:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10005050:	40a9      	lsls	r1, r5
    sio_hw->gpio_oe_clr = mask;
10005052:	0612      	lsls	r2, r2, #24
10005054:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
10005056:	0962      	lsrs	r2, r4, #5
10005058:	0921      	lsrs	r1, r4, #4
1000505a:	0028      	movs	r0, r5
1000505c:	401a      	ands	r2, r3
1000505e:	4019      	ands	r1, r3
10005060:	f7fe fee2 	bl	10003e28 <gpio_set_pulls>
10005064:	e7e9      	b.n	1000503a <gpio_rpi_configure+0x26>
		return -ENOTSUP;
10005066:	2086      	movs	r0, #134	; 0x86
10005068:	4240      	negs	r0, r0
1000506a:	e7e7      	b.n	1000503c <gpio_rpi_configure+0x28>

1000506c <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
1000506c:	b510      	push	{r4, lr}
1000506e:	2200      	movs	r2, #0
10005070:	2103      	movs	r1, #3
10005072:	200d      	movs	r0, #13
10005074:	f7fe f8c8 	bl	10003208 <z_arm_irq_priority_set>
10005078:	200d      	movs	r0, #13
1000507a:	f7fe f8b9 	bl	100031f0 <arch_irq_enable>
1000507e:	bd10      	pop	{r4, pc}

10005080 <uart_rpi_poll_in>:
{
10005080:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10005082:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10005084:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005086:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10005088:	699c      	ldr	r4, [r3, #24]
1000508a:	0020      	movs	r0, r4
1000508c:	4010      	ands	r0, r2
1000508e:	4214      	tst	r4, r2
10005090:	d102      	bne.n	10005098 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10005092:	681b      	ldr	r3, [r3, #0]
10005094:	700b      	strb	r3, [r1, #0]
}
10005096:	bd10      	pop	{r4, pc}
		return -1;
10005098:	2001      	movs	r0, #1
1000509a:	4240      	negs	r0, r0
1000509c:	e7fb      	b.n	10005096 <uart_rpi_poll_in+0x16>

1000509e <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000509e:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100050a0:	6843      	ldr	r3, [r0, #4]
100050a2:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
100050a4:	6998      	ldr	r0, [r3, #24]
100050a6:	4210      	tst	r0, r2
100050a8:	d1fc      	bne.n	100050a4 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
100050aa:	6019      	str	r1, [r3, #0]
}
100050ac:	4770      	bx	lr

100050ae <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
100050ae:	6843      	ldr	r3, [r0, #4]
100050b0:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
100050b2:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
100050b4:	0518      	lsls	r0, r3, #20
100050b6:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
100050b8:	055a      	lsls	r2, r3, #21
100050ba:	d501      	bpl.n	100050c0 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
100050bc:	2208      	movs	r2, #8
100050be:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
100050c0:	059a      	lsls	r2, r3, #22
100050c2:	d501      	bpl.n	100050c8 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
100050c4:	2202      	movs	r2, #2
100050c6:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
100050c8:	05db      	lsls	r3, r3, #23
100050ca:	d501      	bpl.n	100050d0 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
100050cc:	2304      	movs	r3, #4
100050ce:	4318      	orrs	r0, r3
}
100050d0:	4770      	bx	lr

100050d2 <uart_rpi_fifo_fill>:
{
100050d2:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100050d4:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100050d6:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100050d8:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100050da:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100050dc:	699c      	ldr	r4, [r3, #24]
100050de:	422c      	tst	r4, r5
100050e0:	d102      	bne.n	100050e8 <uart_rpi_fifo_fill+0x16>
100050e2:	1a14      	subs	r4, r2, r0
100050e4:	2c00      	cmp	r4, #0
100050e6:	dc00      	bgt.n	100050ea <uart_rpi_fifo_fill+0x18>
}
100050e8:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
100050ea:	5c0c      	ldrb	r4, [r1, r0]
100050ec:	3001      	adds	r0, #1
100050ee:	601c      	str	r4, [r3, #0]
100050f0:	e7f4      	b.n	100050dc <uart_rpi_fifo_fill+0xa>

100050f2 <uart_rpi_fifo_read>:
{
100050f2:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100050f4:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100050f6:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100050f8:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100050fa:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100050fc:	699c      	ldr	r4, [r3, #24]
100050fe:	422c      	tst	r4, r5
10005100:	d102      	bne.n	10005108 <uart_rpi_fifo_read+0x16>
10005102:	1a14      	subs	r4, r2, r0
10005104:	2c00      	cmp	r4, #0
10005106:	dc00      	bgt.n	1000510a <uart_rpi_fifo_read+0x18>
}
10005108:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
1000510a:	681c      	ldr	r4, [r3, #0]
1000510c:	540c      	strb	r4, [r1, r0]
1000510e:	3001      	adds	r0, #1
10005110:	e7f4      	b.n	100050fc <uart_rpi_fifo_read+0xa>

10005112 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005112:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005114:	6843      	ldr	r3, [r0, #4]
10005116:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005118:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000511a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000511c:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000511e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005122:	438a      	bics	r2, r1
10005124:	635a      	str	r2, [r3, #52]	; 0x34
}
10005126:	4770      	bx	lr

10005128 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10005128:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000512a:	6843      	ldr	r3, [r0, #4]
1000512c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000512e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10005130:	438b      	bics	r3, r1
10005132:	6393      	str	r3, [r2, #56]	; 0x38
}
10005134:	4770      	bx	lr

10005136 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005136:	6843      	ldr	r3, [r0, #4]
10005138:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
1000513a:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000513c:	0680      	lsls	r0, r0, #26
1000513e:	0fc0      	lsrs	r0, r0, #31
}
10005140:	4770      	bx	lr

10005142 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005142:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005144:	6843      	ldr	r3, [r0, #4]
10005146:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005148:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000514a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
1000514c:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000514e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10005150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005152:	438a      	bics	r2, r1
10005154:	635a      	str	r2, [r3, #52]	; 0x34
}
10005156:	4770      	bx	lr

10005158 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10005158:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000515a:	6843      	ldr	r3, [r0, #4]
1000515c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000515e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10005160:	438b      	bics	r3, r1
10005162:	6393      	str	r3, [r2, #56]	; 0x38
}
10005164:	4770      	bx	lr

10005166 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005166:	6843      	ldr	r3, [r0, #4]
10005168:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
1000516a:	6998      	ldr	r0, [r3, #24]
1000516c:	0600      	lsls	r0, r0, #24
1000516e:	0fc0      	lsrs	r0, r0, #31
}
10005170:	4770      	bx	lr

10005172 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005172:	6843      	ldr	r3, [r0, #4]
10005174:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10005176:	6c18      	ldr	r0, [r3, #64]	; 0x40
10005178:	06c0      	lsls	r0, r0, #27
1000517a:	0fc0      	lsrs	r0, r0, #31
}
1000517c:	4770      	bx	lr

1000517e <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000517e:	6843      	ldr	r3, [r0, #4]
10005180:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10005182:	23f8      	movs	r3, #248	; 0xf8
10005184:	6b91      	ldr	r1, [r2, #56]	; 0x38
10005186:	00db      	lsls	r3, r3, #3
10005188:	430b      	orrs	r3, r1
1000518a:	6393      	str	r3, [r2, #56]	; 0x38
}
1000518c:	4770      	bx	lr

1000518e <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
1000518e:	b510      	push	{r4, lr}
10005190:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10005192:	f7ff ffee 	bl	10005172 <uart_rpi_irq_rx_ready>
10005196:	0003      	movs	r3, r0
10005198:	2001      	movs	r0, #1
1000519a:	2b00      	cmp	r3, #0
1000519c:	d104      	bne.n	100051a8 <uart_rpi_irq_is_pending+0x1a>
1000519e:	0020      	movs	r0, r4
100051a0:	f7ff ffc9 	bl	10005136 <uart_rpi_irq_tx_ready>
100051a4:	1e43      	subs	r3, r0, #1
100051a6:	4198      	sbcs	r0, r3
}
100051a8:	bd10      	pop	{r4, pc}

100051aa <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
100051aa:	2001      	movs	r0, #1
100051ac:	4770      	bx	lr

100051ae <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
100051ae:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
100051b0:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
100051b2:	60da      	str	r2, [r3, #12]
}
100051b4:	4770      	bx	lr

100051b6 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
100051b6:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
100051b8:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
100051ba:	6893      	ldr	r3, [r2, #8]
100051bc:	2b00      	cmp	r3, #0
100051be:	d001      	beq.n	100051c4 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
100051c0:	68d1      	ldr	r1, [r2, #12]
100051c2:	4798      	blx	r3
	}
}
100051c4:	bd10      	pop	{r4, pc}

100051c6 <uart_rpi_config_get>:
{
100051c6:	0003      	movs	r3, r0
100051c8:	b510      	push	{r4, lr}
100051ca:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
100051cc:	2208      	movs	r2, #8
100051ce:	6919      	ldr	r1, [r3, #16]
100051d0:	f7ff fe8b 	bl	10004eea <memcpy>
}
100051d4:	2000      	movs	r0, #0
100051d6:	bd10      	pop	{r4, pc}

100051d8 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
100051d8:	b510      	push	{r4, lr}
100051da:	2200      	movs	r2, #0
100051dc:	2103      	movs	r1, #3
100051de:	2014      	movs	r0, #20
100051e0:	f7fe f812 	bl	10003208 <z_arm_irq_priority_set>
100051e4:	2014      	movs	r0, #20
100051e6:	f7fe f803 	bl	100031f0 <arch_irq_enable>
100051ea:	bd10      	pop	{r4, pc}

100051ec <uart_rpi_configure>:
{
100051ec:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
100051ee:	6843      	ldr	r3, [r0, #4]
{
100051f0:	0006      	movs	r6, r0
100051f2:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
100051f4:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
100051f6:	6809      	ldr	r1, [r1, #0]
100051f8:	6818      	ldr	r0, [r3, #0]
100051fa:	f7fe fe8f 	bl	10003f1c <uart_set_baudrate>
	if (baudrate == 0) {
100051fe:	2800      	cmp	r0, #0
10005200:	d102      	bne.n	10005208 <uart_rpi_configure+0x1c>
		return -EINVAL;
10005202:	2016      	movs	r0, #22
10005204:	4240      	negs	r0, r0
}
10005206:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10005208:	79a3      	ldrb	r3, [r4, #6]
1000520a:	7962      	ldrb	r2, [r4, #5]
1000520c:	7921      	ldrb	r1, [r4, #4]
1000520e:	6870      	ldr	r0, [r6, #4]
10005210:	f7fe fb3c 	bl	1000388c <uart_rpi_set_format.isra.0>
10005214:	2800      	cmp	r0, #0
10005216:	d1f4      	bne.n	10005202 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10005218:	cc06      	ldmia	r4!, {r1, r2}
1000521a:	c506      	stmia	r5!, {r1, r2}
	return 0;
1000521c:	e7f3      	b.n	10005206 <uart_rpi_configure+0x1a>

1000521e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
1000521e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10005220:	6803      	ldr	r3, [r0, #0]
10005222:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10005224:	7905      	ldrb	r5, [r0, #4]
10005226:	6804      	ldr	r4, [r0, #0]
10005228:	00ed      	lsls	r5, r5, #3
1000522a:	1964      	adds	r4, r4, r5
1000522c:	42a3      	cmp	r3, r4
1000522e:	d302      	bcc.n	10005236 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10005230:	2002      	movs	r0, #2
10005232:	4240      	negs	r0, r0
}
10005234:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10005236:	795c      	ldrb	r4, [r3, #5]
10005238:	428c      	cmp	r4, r1
1000523a:	d001      	beq.n	10005240 <pinctrl_lookup_state+0x22>
		(*state)++;
1000523c:	3308      	adds	r3, #8
1000523e:	e7f0      	b.n	10005222 <pinctrl_lookup_state+0x4>
			return 0;
10005240:	2000      	movs	r0, #0
10005242:	e7f7      	b.n	10005234 <pinctrl_lookup_state+0x16>

10005244 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005246:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005248:	2601      	movs	r6, #1
1000524a:	008d      	lsls	r5, r1, #2
1000524c:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
1000524e:	42ac      	cmp	r4, r5
10005250:	d101      	bne.n	10005256 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10005252:	2000      	movs	r0, #0
10005254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10005256:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10005258:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
1000525a:	06c0      	lsls	r0, r0, #27
1000525c:	0ec0      	lsrs	r0, r0, #27
1000525e:	f000 f8b8 	bl	100053d2 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10005262:	8821      	ldrh	r1, [r4, #0]
10005264:	7820      	ldrb	r0, [r4, #0]
10005266:	05c9      	lsls	r1, r1, #23
10005268:	06c0      	lsls	r0, r0, #27
1000526a:	0f09      	lsrs	r1, r1, #28
1000526c:	0ec0      	lsrs	r0, r0, #27
1000526e:	f7fe fdc5 	bl	10003dfc <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10005272:	7861      	ldrb	r1, [r4, #1]
10005274:	7820      	ldrb	r0, [r4, #0]
10005276:	09ca      	lsrs	r2, r1, #7
10005278:	06c0      	lsls	r0, r0, #27
1000527a:	0649      	lsls	r1, r1, #25
1000527c:	0fc9      	lsrs	r1, r1, #31
1000527e:	0ec0      	lsrs	r0, r0, #27
10005280:	f7fe fdd2 	bl	10003e28 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10005284:	7861      	ldrb	r1, [r4, #1]
10005286:	7820      	ldrb	r0, [r4, #0]
10005288:	06c9      	lsls	r1, r1, #27
1000528a:	06c0      	lsls	r0, r0, #27
1000528c:	0f09      	lsrs	r1, r1, #28
1000528e:	0ec0      	lsrs	r0, r0, #27
10005290:	f7fe fdf8 	bl	10003e84 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005294:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10005296:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005298:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000529a:	06c0      	lsls	r0, r0, #27
1000529c:	4031      	ands	r1, r6
1000529e:	0ec0      	lsrs	r0, r0, #27
100052a0:	f7fe fde2 	bl	10003e68 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
100052a4:	78a1      	ldrb	r1, [r4, #2]
100052a6:	7820      	ldrb	r0, [r4, #0]
100052a8:	0789      	lsls	r1, r1, #30
100052aa:	06c0      	lsls	r0, r0, #27
100052ac:	0fc9      	lsrs	r1, r1, #31
100052ae:	0ec0      	lsrs	r0, r0, #27
100052b0:	f7fe fdcc 	bl	10003e4c <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
100052b4:	78a1      	ldrb	r1, [r4, #2]
100052b6:	7820      	ldrb	r0, [r4, #0]
100052b8:	07c9      	lsls	r1, r1, #31
100052ba:	06c0      	lsls	r0, r0, #27
100052bc:	0fc9      	lsrs	r1, r1, #31
100052be:	0ec0      	lsrs	r0, r0, #27
100052c0:	f7fe fe1e 	bl	10003f00 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
100052c4:	003c      	movs	r4, r7
100052c6:	e7c2      	b.n	1000524e <pinctrl_configure_pins+0xa>

100052c8 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
100052c8:	2000      	movs	r0, #0
100052ca:	4770      	bx	lr

100052cc <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
100052cc:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
100052ce:	7900      	ldrb	r0, [r0, #4]
100052d0:	2802      	cmp	r0, #2
100052d2:	d009      	beq.n	100052e8 <reset_rpi_read_register.isra.0+0x1c>
100052d4:	2804      	cmp	r0, #4
100052d6:	d00b      	beq.n	100052f0 <reset_rpi_read_register.isra.0+0x24>
100052d8:	2801      	cmp	r0, #1
100052da:	d10c      	bne.n	100052f6 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
100052dc:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
100052de:	780b      	ldrb	r3, [r1, #0]
100052e0:	b2db      	uxtb	r3, r3
	return 0;
100052e2:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
100052e4:	6013      	str	r3, [r2, #0]
}
100052e6:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
100052e8:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
100052ea:	880b      	ldrh	r3, [r1, #0]
100052ec:	b29b      	uxth	r3, r3
		break;
100052ee:	e7f8      	b.n	100052e2 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
100052f0:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
100052f2:	680b      	ldr	r3, [r1, #0]
		break;
100052f4:	e7f5      	b.n	100052e2 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
100052f6:	2016      	movs	r0, #22
100052f8:	4240      	negs	r0, r0
100052fa:	e7f4      	b.n	100052e6 <reset_rpi_read_register.isra.0+0x1a>

100052fc <reset_rpi_update>:
{
100052fc:	0003      	movs	r3, r0
100052fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10005300:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10005302:	685f      	ldr	r7, [r3, #4]
{
10005304:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10005306:	793e      	ldrb	r6, [r7, #4]
{
10005308:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000530a:	00f1      	lsls	r1, r6, #3
1000530c:	f7fa ff9c 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10005310:	aa03      	add	r2, sp, #12
10005312:	0004      	movs	r4, r0
10005314:	000d      	movs	r5, r1
10005316:	b281      	uxth	r1, r0
10005318:	0038      	movs	r0, r7
1000531a:	f7ff ffd7 	bl	100052cc <reset_rpi_read_register.isra.0>
	if (ret) {
1000531e:	2800      	cmp	r0, #0
10005320:	d117      	bne.n	10005352 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10005322:	2201      	movs	r2, #1
10005324:	9903      	ldr	r1, [sp, #12]
10005326:	b2ed      	uxtb	r5, r5
10005328:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
1000532a:	000b      	movs	r3, r1
		value |= BIT(regbit);
1000532c:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
1000532e:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10005330:	797d      	ldrb	r5, [r7, #5]
10005332:	9a01      	ldr	r2, [sp, #4]
10005334:	4295      	cmp	r5, r2
10005336:	d001      	beq.n	1000533c <reset_rpi_update+0x40>
		value |= BIT(regbit);
10005338:	4663      	mov	r3, ip
1000533a:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
1000533c:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
1000533e:	2e02      	cmp	r6, #2
10005340:	d009      	beq.n	10005356 <reset_rpi_update+0x5a>
10005342:	2e04      	cmp	r6, #4
10005344:	d00c      	beq.n	10005360 <reset_rpi_update+0x64>
10005346:	2e01      	cmp	r6, #1
10005348:	d10e      	bne.n	10005368 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
1000534a:	b2a4      	uxth	r4, r4
1000534c:	b2db      	uxtb	r3, r3
1000534e:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10005350:	7023      	strb	r3, [r4, #0]
}
10005352:	b005      	add	sp, #20
10005354:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10005356:	b2a4      	uxth	r4, r4
10005358:	b29b      	uxth	r3, r3
1000535a:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
1000535c:	8023      	strh	r3, [r4, #0]
}
1000535e:	e7f8      	b.n	10005352 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
10005360:	b2a4      	uxth	r4, r4
10005362:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10005364:	6023      	str	r3, [r4, #0]
}
10005366:	e7f4      	b.n	10005352 <reset_rpi_update+0x56>
	switch (config->reg_width) {
10005368:	2016      	movs	r0, #22
1000536a:	4240      	negs	r0, r0
1000536c:	e7f1      	b.n	10005352 <reset_rpi_update+0x56>

1000536e <reset_rpi_line_assert>:
{
1000536e:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10005370:	2201      	movs	r2, #1
10005372:	f7ff ffc3 	bl	100052fc <reset_rpi_update>
}
10005376:	bd10      	pop	{r4, pc}

10005378 <reset_rpi_line_deassert>:
{
10005378:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
1000537a:	2200      	movs	r2, #0
1000537c:	f7ff ffbe 	bl	100052fc <reset_rpi_update>
}
10005380:	bd10      	pop	{r4, pc}

10005382 <reset_rpi_line_toggle>:
{
10005382:	b570      	push	{r4, r5, r6, lr}
10005384:	0004      	movs	r4, r0
10005386:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10005388:	f7ff fff1 	bl	1000536e <reset_rpi_line_assert>
	if (ret) {
1000538c:	2800      	cmp	r0, #0
1000538e:	d103      	bne.n	10005398 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10005390:	0029      	movs	r1, r5
10005392:	0020      	movs	r0, r4
10005394:	f7ff fff0 	bl	10005378 <reset_rpi_line_deassert>
}
10005398:	bd70      	pop	{r4, r5, r6, pc}

1000539a <reset_rpi_status>:
{
1000539a:	0003      	movs	r3, r0
1000539c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
1000539e:	685e      	ldr	r6, [r3, #4]
{
100053a0:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100053a2:	7931      	ldrb	r1, [r6, #4]
{
100053a4:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
100053a6:	00c9      	lsls	r1, r1, #3
100053a8:	f7fa ff4e 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100053ac:	aa01      	add	r2, sp, #4
100053ae:	000d      	movs	r5, r1
100053b0:	b281      	uxth	r1, r0
100053b2:	0030      	movs	r0, r6
100053b4:	f7ff ff8a 	bl	100052cc <reset_rpi_read_register.isra.0>
	if (ret) {
100053b8:	2800      	cmp	r0, #0
100053ba:	d109      	bne.n	100053d0 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
100053bc:	9b01      	ldr	r3, [sp, #4]
100053be:	b2ed      	uxtb	r5, r5
100053c0:	40eb      	lsrs	r3, r5
100053c2:	2201      	movs	r2, #1
100053c4:	439a      	bics	r2, r3
100053c6:	7973      	ldrb	r3, [r6, #5]
100053c8:	4259      	negs	r1, r3
100053ca:	414b      	adcs	r3, r1
100053cc:	4053      	eors	r3, r2
100053ce:	7023      	strb	r3, [r4, #0]
}
100053d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

100053d2 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
100053d2:	2301      	movs	r3, #1
100053d4:	22d0      	movs	r2, #208	; 0xd0
100053d6:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
100053d8:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
100053da:	0612      	lsls	r2, r2, #24
100053dc:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100053de:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
100053e0:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100053e2:	f7fe fd0b 	bl	10003dfc <gpio_set_function>
}
100053e6:	bd10      	pop	{r4, pc}

100053e8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
100053e8:	4770      	bx	lr

100053ea <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
100053ea:	2800      	cmp	r0, #0
100053ec:	d009      	beq.n	10005402 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
100053ee:	2301      	movs	r3, #1
100053f0:	68c2      	ldr	r2, [r0, #12]
100053f2:	2000      	movs	r0, #0
100053f4:	7851      	ldrb	r1, [r2, #1]
100053f6:	4219      	tst	r1, r3
100053f8:	d002      	beq.n	10005400 <z_device_is_ready+0x16>
100053fa:	7810      	ldrb	r0, [r2, #0]
100053fc:	4242      	negs	r2, r0
100053fe:	4150      	adcs	r0, r2
10005400:	4018      	ands	r0, r3
}
10005402:	4770      	bx	lr

10005404 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10005404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10005406:	ab0b      	add	r3, sp, #44	; 0x2c
10005408:	9305      	str	r3, [sp, #20]
1000540a:	2000      	movs	r0, #0
1000540c:	9303      	str	r3, [sp, #12]
1000540e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10005410:	2201      	movs	r2, #1
10005412:	9302      	str	r3, [sp, #8]
10005414:	9001      	str	r0, [sp, #4]
10005416:	0003      	movs	r3, r0
10005418:	9000      	str	r0, [sp, #0]
1000541a:	f7fd fc4f 	bl	10002cbc <z_impl_z_log_msg_runtime_vcreate>
}
1000541e:	b007      	add	sp, #28
10005420:	bd00      	pop	{pc}

10005422 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10005422:	f3ef 8310 	mrs	r3, PRIMASK
10005426:	b672      	cpsid	i
	for (;;) {
10005428:	e7fe      	b.n	10005428 <arch_system_halt+0x6>

1000542a <z_early_memset>:
{
1000542a:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
1000542c:	f7ff fd66 	bl	10004efc <memset>
}
10005430:	bd10      	pop	{r4, pc}

10005432 <z_early_memcpy>:
{
10005432:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10005434:	f7ff fd59 	bl	10004eea <memcpy>
}
10005438:	bd10      	pop	{r4, pc}

1000543a <k_thread_name_get>:
}
1000543a:	2000      	movs	r0, #0
1000543c:	4770      	bx	lr

1000543e <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
1000543e:	b510      	push	{r4, lr}
10005440:	f3ef 8310 	mrs	r3, PRIMASK
10005444:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10005446:	f7fd fe7b 	bl	10003140 <arch_cpu_idle>
1000544a:	e7f9      	b.n	10005440 <idle+0x2>

1000544c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
1000544c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000544e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10005450:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10005452:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10005454:	2300      	movs	r3, #0
10005456:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005458:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
1000545a:	4770      	bx	lr

1000545c <unpend_thread_no_timeout>:
{
1000545c:	b510      	push	{r4, lr}
1000545e:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10005460:	f7ff fff4 	bl	1000544c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10005464:	2202      	movs	r2, #2
10005466:	7b63      	ldrb	r3, [r4, #13]
10005468:	4393      	bics	r3, r2
1000546a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
1000546c:	2300      	movs	r3, #0
1000546e:	60a3      	str	r3, [r4, #8]
}
10005470:	bd10      	pop	{r4, pc}

10005472 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
10005472:	3818      	subs	r0, #24
{
10005474:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
10005476:	0004      	movs	r4, r0
10005478:	f3ef 8510 	mrs	r5, PRIMASK
1000547c:	b672      	cpsid	i
		if (!killed) {
1000547e:	2328      	movs	r3, #40	; 0x28
10005480:	7b42      	ldrb	r2, [r0, #13]
10005482:	421a      	tst	r2, r3
10005484:	d10b      	bne.n	1000549e <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
10005486:	6883      	ldr	r3, [r0, #8]
10005488:	2b00      	cmp	r3, #0
1000548a:	d001      	beq.n	10005490 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
1000548c:	f7ff ffe6 	bl	1000545c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10005490:	2214      	movs	r2, #20
10005492:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
10005494:	0020      	movs	r0, r4
10005496:	4393      	bics	r3, r2
10005498:	7363      	strb	r3, [r4, #13]
1000549a:	f7fe fff1 	bl	10004480 <ready_thread>
	if (key != 0U) {
1000549e:	2d00      	cmp	r5, #0
100054a0:	d102      	bne.n	100054a8 <z_thread_timeout+0x36>
	__asm__ volatile(
100054a2:	b662      	cpsie	i
100054a4:	f3bf 8f6f 	isb	sy
}
100054a8:	bd70      	pop	{r4, r5, r6, pc}

100054aa <z_ready_thread>:
{
100054aa:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100054ac:	f3ef 8410 	mrs	r4, PRIMASK
100054b0:	b672      	cpsid	i
			ready_thread(thread);
100054b2:	f7fe ffe5 	bl	10004480 <ready_thread>
	if (key != 0U) {
100054b6:	2c00      	cmp	r4, #0
100054b8:	d102      	bne.n	100054c0 <z_ready_thread+0x16>
	__asm__ volatile(
100054ba:	b662      	cpsie	i
100054bc:	f3bf 8f6f 	isb	sy
}
100054c0:	bd10      	pop	{r4, pc}

100054c2 <z_reschedule_irqlock>:
{
100054c2:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100054c4:	2800      	cmp	r0, #0
100054c6:	d105      	bne.n	100054d4 <z_reschedule_irqlock+0x12>
100054c8:	f3ef 8005 	mrs	r0, IPSR
100054cc:	2800      	cmp	r0, #0
100054ce:	d102      	bne.n	100054d6 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
100054d0:	f7fd fedc 	bl	1000328c <arch_swap>
}
100054d4:	bd10      	pop	{r4, pc}
100054d6:	b662      	cpsie	i
100054d8:	f3bf 8f6f 	isb	sy
100054dc:	e7fa      	b.n	100054d4 <z_reschedule_irqlock+0x12>

100054de <z_reschedule_unlocked>:
{
100054de:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100054e0:	f3ef 8010 	mrs	r0, PRIMASK
100054e4:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
100054e6:	f7ff ffec 	bl	100054c2 <z_reschedule_irqlock>
}
100054ea:	bd10      	pop	{r4, pc}

100054ec <z_abort_timeout>:
{
100054ec:	b510      	push	{r4, lr}
100054ee:	f3ef 8410 	mrs	r4, PRIMASK
100054f2:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
100054f4:	6803      	ldr	r3, [r0, #0]
100054f6:	2b00      	cmp	r3, #0
100054f8:	d008      	beq.n	1000550c <z_abort_timeout+0x20>
			remove_timeout(to);
100054fa:	f7ff fa4b 	bl	10004994 <remove_timeout>
			ret = 0;
100054fe:	2000      	movs	r0, #0
	if (key != 0U) {
10005500:	2c00      	cmp	r4, #0
10005502:	d102      	bne.n	1000550a <z_abort_timeout+0x1e>
	__asm__ volatile(
10005504:	b662      	cpsie	i
10005506:	f3bf 8f6f 	isb	sy
}
1000550a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
1000550c:	2016      	movs	r0, #22
1000550e:	4240      	negs	r0, r0
10005510:	e7f6      	b.n	10005500 <z_abort_timeout+0x14>

10005512 <z_set_timeout_expiry>:
{
10005512:	b570      	push	{r4, r5, r6, lr}
10005514:	0004      	movs	r4, r0
10005516:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10005518:	f3ef 8610 	mrs	r6, PRIMASK
1000551c:	b672      	cpsid	i
		int next_to = next_timeout();
1000551e:	f7ff fa0d 	bl	1000493c <next_timeout>
			      || (ticks <= next_to);
10005522:	2801      	cmp	r0, #1
10005524:	dd06      	ble.n	10005534 <z_set_timeout_expiry+0x22>
10005526:	42a0      	cmp	r0, r4
10005528:	db04      	blt.n	10005534 <z_set_timeout_expiry+0x22>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
1000552a:	dd00      	ble.n	1000552e <z_set_timeout_expiry+0x1c>
1000552c:	0020      	movs	r0, r4
1000552e:	0029      	movs	r1, r5
10005530:	f7fe fa6e 	bl	10003a10 <sys_clock_set_timeout>
	if (key != 0U) {
10005534:	2e00      	cmp	r6, #0
10005536:	d102      	bne.n	1000553e <z_set_timeout_expiry+0x2c>
	__asm__ volatile(
10005538:	b662      	cpsie	i
1000553a:	f3bf 8f6f 	isb	sy
}
1000553e:	bd70      	pop	{r4, r5, r6, pc}

10005540 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10005540:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10005542:	f7ff fb23 	bl	10004b8c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10005546:	bd10      	pop	{r4, pc}

10005548 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
10005548:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
1000554a:	f7ff fb1f 	bl	10004b8c <sys_clock_tick_get>
}
1000554e:	bd10      	pop	{r4, pc}

10005550 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
10005550:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005552:	f3ef 8210 	mrs	r2, PRIMASK
10005556:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005558:	6800      	ldr	r0, [r0, #0]
	*target += value;
1000555a:	1841      	adds	r1, r0, r1
1000555c:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000555e:	2a00      	cmp	r2, #0
10005560:	d102      	bne.n	10005568 <z_impl_atomic_add+0x18>
	__asm__ volatile(
10005562:	b662      	cpsie	i
10005564:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005568:	4770      	bx	lr

1000556a <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
1000556a:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000556c:	f3ef 8210 	mrs	r2, PRIMASK
10005570:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005572:	6800      	ldr	r0, [r0, #0]
	*target -= value;
10005574:	1a41      	subs	r1, r0, r1
10005576:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005578:	2a00      	cmp	r2, #0
1000557a:	d102      	bne.n	10005582 <z_impl_atomic_sub+0x18>
	__asm__ volatile(
1000557c:	b662      	cpsie	i
1000557e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005582:	4770      	bx	lr
