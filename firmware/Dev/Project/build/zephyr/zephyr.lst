
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000ec0 10002ab5 100041f1 10002a71     ... .*...A..q*..
	...
1000012c:	1000293d 00000000 00000000 100028dd     =)...........(..
1000013c:	10002f55                                U/..

10000140 <_irq_vector_table>:
10000140:	100029ad 100029ad 100029ad 100029ad     .)...)...)...)..
10000150:	100029ad 100029ad 100029ad 100029ad     .)...)...)...)..
10000160:	100029ad 100029ad 100029ad 100029ad     .)...)...)...)..
10000170:	100029ad 100029ad 100029ad 100029ad     .)...)...)...)..
10000180:	100029ad 100029ad 100029ad 100029ad     .)...)...)...)..
10000190:	100029ad 100029ad 100029ad 100029ad     .)...)...)...)..
100001a0:	100029ad 100029ad                       .)...)..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__aeabi_cdrcmple>:
10000260:	4684      	mov	ip, r0
10000262:	0010      	movs	r0, r2
10000264:	4662      	mov	r2, ip
10000266:	468c      	mov	ip, r1
10000268:	0019      	movs	r1, r3
1000026a:	4663      	mov	r3, ip
1000026c:	e000      	b.n	10000270 <__aeabi_cdcmpeq>
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_cdcmpeq>:
10000270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10000272:	f000 fd57 	bl	10000d24 <__ledf2>
10000276:	2800      	cmp	r0, #0
10000278:	d401      	bmi.n	1000027e <__aeabi_cdcmpeq+0xe>
1000027a:	2100      	movs	r1, #0
1000027c:	42c8      	cmn	r0, r1
1000027e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10000280 <__aeabi_dcmpeq>:
10000280:	b510      	push	{r4, lr}
10000282:	f000 fc97 	bl	10000bb4 <__eqdf2>
10000286:	4240      	negs	r0, r0
10000288:	3001      	adds	r0, #1
1000028a:	bd10      	pop	{r4, pc}

1000028c <__aeabi_dcmplt>:
1000028c:	b510      	push	{r4, lr}
1000028e:	f000 fd49 	bl	10000d24 <__ledf2>
10000292:	2800      	cmp	r0, #0
10000294:	db01      	blt.n	1000029a <__aeabi_dcmplt+0xe>
10000296:	2000      	movs	r0, #0
10000298:	bd10      	pop	{r4, pc}
1000029a:	2001      	movs	r0, #1
1000029c:	bd10      	pop	{r4, pc}
1000029e:	46c0      	nop			; (mov r8, r8)

100002a0 <__aeabi_dcmple>:
100002a0:	b510      	push	{r4, lr}
100002a2:	f000 fd3f 	bl	10000d24 <__ledf2>
100002a6:	2800      	cmp	r0, #0
100002a8:	dd01      	ble.n	100002ae <__aeabi_dcmple+0xe>
100002aa:	2000      	movs	r0, #0
100002ac:	bd10      	pop	{r4, pc}
100002ae:	2001      	movs	r0, #1
100002b0:	bd10      	pop	{r4, pc}
100002b2:	46c0      	nop			; (mov r8, r8)

100002b4 <__aeabi_dcmpgt>:
100002b4:	b510      	push	{r4, lr}
100002b6:	f000 fcbf 	bl	10000c38 <__gedf2>
100002ba:	2800      	cmp	r0, #0
100002bc:	dc01      	bgt.n	100002c2 <__aeabi_dcmpgt+0xe>
100002be:	2000      	movs	r0, #0
100002c0:	bd10      	pop	{r4, pc}
100002c2:	2001      	movs	r0, #1
100002c4:	bd10      	pop	{r4, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__aeabi_dcmpge>:
100002c8:	b510      	push	{r4, lr}
100002ca:	f000 fcb5 	bl	10000c38 <__gedf2>
100002ce:	2800      	cmp	r0, #0
100002d0:	da01      	bge.n	100002d6 <__aeabi_dcmpge+0xe>
100002d2:	2000      	movs	r0, #0
100002d4:	bd10      	pop	{r4, pc}
100002d6:	2001      	movs	r0, #1
100002d8:	bd10      	pop	{r4, pc}
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__clzsi2>:
100002dc:	211c      	movs	r1, #28
100002de:	2301      	movs	r3, #1
100002e0:	041b      	lsls	r3, r3, #16
100002e2:	4298      	cmp	r0, r3
100002e4:	d301      	bcc.n	100002ea <__clzsi2+0xe>
100002e6:	0c00      	lsrs	r0, r0, #16
100002e8:	3910      	subs	r1, #16
100002ea:	0a1b      	lsrs	r3, r3, #8
100002ec:	4298      	cmp	r0, r3
100002ee:	d301      	bcc.n	100002f4 <__clzsi2+0x18>
100002f0:	0a00      	lsrs	r0, r0, #8
100002f2:	3908      	subs	r1, #8
100002f4:	091b      	lsrs	r3, r3, #4
100002f6:	4298      	cmp	r0, r3
100002f8:	d301      	bcc.n	100002fe <__clzsi2+0x22>
100002fa:	0900      	lsrs	r0, r0, #4
100002fc:	3904      	subs	r1, #4
100002fe:	a202      	add	r2, pc, #8	; (adr r2, 10000308 <__clzsi2+0x2c>)
10000300:	5c10      	ldrb	r0, [r2, r0]
10000302:	1840      	adds	r0, r0, r1
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)
10000308:	02020304 	.word	0x02020304
1000030c:	01010101 	.word	0x01010101
	...

10000318 <__aeabi_uldivmod>:
10000318:	2b00      	cmp	r3, #0
1000031a:	d111      	bne.n	10000340 <__aeabi_uldivmod+0x28>
1000031c:	2a00      	cmp	r2, #0
1000031e:	d10f      	bne.n	10000340 <__aeabi_uldivmod+0x28>
10000320:	2900      	cmp	r1, #0
10000322:	d100      	bne.n	10000326 <__aeabi_uldivmod+0xe>
10000324:	2800      	cmp	r0, #0
10000326:	d002      	beq.n	1000032e <__aeabi_uldivmod+0x16>
10000328:	2100      	movs	r1, #0
1000032a:	43c9      	mvns	r1, r1
1000032c:	0008      	movs	r0, r1
1000032e:	b407      	push	{r0, r1, r2}
10000330:	4802      	ldr	r0, [pc, #8]	; (1000033c <__aeabi_uldivmod+0x24>)
10000332:	a102      	add	r1, pc, #8	; (adr r1, 1000033c <__aeabi_uldivmod+0x24>)
10000334:	1840      	adds	r0, r0, r1
10000336:	9002      	str	r0, [sp, #8]
10000338:	bd03      	pop	{r0, r1, pc}
1000033a:	46c0      	nop			; (mov r8, r8)
1000033c:	ffffff21 	.word	0xffffff21
10000340:	b403      	push	{r0, r1}
10000342:	4668      	mov	r0, sp
10000344:	b501      	push	{r0, lr}
10000346:	9802      	ldr	r0, [sp, #8]
10000348:	f001 fc24 	bl	10001b94 <__udivmoddi4>
1000034c:	9b01      	ldr	r3, [sp, #4]
1000034e:	469e      	mov	lr, r3
10000350:	b002      	add	sp, #8
10000352:	bc0c      	pop	{r2, r3}
10000354:	4770      	bx	lr
10000356:	46c0      	nop			; (mov r8, r8)

10000358 <__aeabi_f2ulz>:
10000358:	b5d0      	push	{r4, r6, r7, lr}
1000035a:	f001 fab9 	bl	100018d0 <__aeabi_f2d>
1000035e:	2200      	movs	r2, #0
10000360:	4b0b      	ldr	r3, [pc, #44]	; (10000390 <__aeabi_f2ulz+0x38>)
10000362:	0006      	movs	r6, r0
10000364:	000f      	movs	r7, r1
10000366:	f000 fd55 	bl	10000e14 <__aeabi_dmul>
1000036a:	f001 fba3 	bl	10001ab4 <__aeabi_d2uiz>
1000036e:	0004      	movs	r4, r0
10000370:	f001 fa8e 	bl	10001890 <__aeabi_ui2d>
10000374:	2200      	movs	r2, #0
10000376:	4b07      	ldr	r3, [pc, #28]	; (10000394 <__aeabi_f2ulz+0x3c>)
10000378:	f000 fd4c 	bl	10000e14 <__aeabi_dmul>
1000037c:	0002      	movs	r2, r0
1000037e:	000b      	movs	r3, r1
10000380:	0030      	movs	r0, r6
10000382:	0039      	movs	r1, r7
10000384:	f000 ff70 	bl	10001268 <__aeabi_dsub>
10000388:	f001 fb94 	bl	10001ab4 <__aeabi_d2uiz>
1000038c:	0021      	movs	r1, r4
1000038e:	bdd0      	pop	{r4, r6, r7, pc}
10000390:	3df00000 	.word	0x3df00000
10000394:	41f00000 	.word	0x41f00000

10000398 <__aeabi_fdiv>:
10000398:	b5f0      	push	{r4, r5, r6, r7, lr}
1000039a:	0fc3      	lsrs	r3, r0, #31
1000039c:	b085      	sub	sp, #20
1000039e:	0244      	lsls	r4, r0, #9
100003a0:	0045      	lsls	r5, r0, #1
100003a2:	1c0f      	adds	r7, r1, #0
100003a4:	0a64      	lsrs	r4, r4, #9
100003a6:	0e2d      	lsrs	r5, r5, #24
100003a8:	9303      	str	r3, [sp, #12]
100003aa:	9302      	str	r3, [sp, #8]
100003ac:	d00a      	beq.n	100003c4 <__aeabi_fdiv+0x2c>
100003ae:	2dff      	cmp	r5, #255	; 0xff
100003b0:	d03b      	beq.n	1000042a <__aeabi_fdiv+0x92>
100003b2:	2380      	movs	r3, #128	; 0x80
100003b4:	00e4      	lsls	r4, r4, #3
100003b6:	04db      	lsls	r3, r3, #19
100003b8:	431c      	orrs	r4, r3
100003ba:	2300      	movs	r3, #0
100003bc:	3d7f      	subs	r5, #127	; 0x7f
100003be:	9501      	str	r5, [sp, #4]
100003c0:	9300      	str	r3, [sp, #0]
100003c2:	e00e      	b.n	100003e2 <__aeabi_fdiv+0x4a>
100003c4:	2301      	movs	r3, #1
100003c6:	9401      	str	r4, [sp, #4]
100003c8:	9300      	str	r3, [sp, #0]
100003ca:	2c00      	cmp	r4, #0
100003cc:	d009      	beq.n	100003e2 <__aeabi_fdiv+0x4a>
100003ce:	0020      	movs	r0, r4
100003d0:	f7ff ff84 	bl	100002dc <__clzsi2>
100003d4:	1f43      	subs	r3, r0, #5
100003d6:	409c      	lsls	r4, r3
100003d8:	2376      	movs	r3, #118	; 0x76
100003da:	425b      	negs	r3, r3
100003dc:	1a1b      	subs	r3, r3, r0
100003de:	9301      	str	r3, [sp, #4]
100003e0:	9500      	str	r5, [sp, #0]
100003e2:	027d      	lsls	r5, r7, #9
100003e4:	007e      	lsls	r6, r7, #1
100003e6:	0a6d      	lsrs	r5, r5, #9
100003e8:	0e36      	lsrs	r6, r6, #24
100003ea:	0fff      	lsrs	r7, r7, #31
100003ec:	2e00      	cmp	r6, #0
100003ee:	d023      	beq.n	10000438 <__aeabi_fdiv+0xa0>
100003f0:	2eff      	cmp	r6, #255	; 0xff
100003f2:	d02e      	beq.n	10000452 <__aeabi_fdiv+0xba>
100003f4:	2380      	movs	r3, #128	; 0x80
100003f6:	00ed      	lsls	r5, r5, #3
100003f8:	04db      	lsls	r3, r3, #19
100003fa:	431d      	orrs	r5, r3
100003fc:	0033      	movs	r3, r6
100003fe:	3b7f      	subs	r3, #127	; 0x7f
10000400:	2200      	movs	r2, #0
10000402:	9801      	ldr	r0, [sp, #4]
10000404:	9903      	ldr	r1, [sp, #12]
10000406:	1ac3      	subs	r3, r0, r3
10000408:	9800      	ldr	r0, [sp, #0]
1000040a:	4079      	eors	r1, r7
1000040c:	0080      	lsls	r0, r0, #2
1000040e:	4310      	orrs	r0, r2
10000410:	3801      	subs	r0, #1
10000412:	280e      	cmp	r0, #14
10000414:	d823      	bhi.n	1000045e <__aeabi_fdiv+0xc6>
10000416:	f7ff fec7 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000041a:	994d      	.short	0x994d
1000041c:	99929973 	.word	0x99929973
10000420:	924d4d73 	.word	0x924d4d73
10000424:	61616173 	.word	0x61616173
10000428:	53          	.byte	0x53
10000429:	00          	.byte	0x00
1000042a:	2302      	movs	r3, #2
1000042c:	9501      	str	r5, [sp, #4]
1000042e:	9300      	str	r3, [sp, #0]
10000430:	2c00      	cmp	r4, #0
10000432:	d0d6      	beq.n	100003e2 <__aeabi_fdiv+0x4a>
10000434:	3301      	adds	r3, #1
10000436:	e7c3      	b.n	100003c0 <__aeabi_fdiv+0x28>
10000438:	002b      	movs	r3, r5
1000043a:	2201      	movs	r2, #1
1000043c:	2d00      	cmp	r5, #0
1000043e:	d0e0      	beq.n	10000402 <__aeabi_fdiv+0x6a>
10000440:	0028      	movs	r0, r5
10000442:	f7ff ff4b 	bl	100002dc <__clzsi2>
10000446:	1f43      	subs	r3, r0, #5
10000448:	409d      	lsls	r5, r3
1000044a:	2376      	movs	r3, #118	; 0x76
1000044c:	425b      	negs	r3, r3
1000044e:	1a1b      	subs	r3, r3, r0
10000450:	e7d6      	b.n	10000400 <__aeabi_fdiv+0x68>
10000452:	0033      	movs	r3, r6
10000454:	2202      	movs	r2, #2
10000456:	2d00      	cmp	r5, #0
10000458:	d0d3      	beq.n	10000402 <__aeabi_fdiv+0x6a>
1000045a:	3201      	adds	r2, #1
1000045c:	e7d1      	b.n	10000402 <__aeabi_fdiv+0x6a>
1000045e:	0164      	lsls	r4, r4, #5
10000460:	016d      	lsls	r5, r5, #5
10000462:	42ac      	cmp	r4, r5
10000464:	d328      	bcc.n	100004b8 <__aeabi_fdiv+0x120>
10000466:	201a      	movs	r0, #26
10000468:	2201      	movs	r2, #1
1000046a:	1b64      	subs	r4, r4, r5
1000046c:	2601      	movs	r6, #1
1000046e:	0027      	movs	r7, r4
10000470:	0052      	lsls	r2, r2, #1
10000472:	0064      	lsls	r4, r4, #1
10000474:	2f00      	cmp	r7, #0
10000476:	db01      	blt.n	1000047c <__aeabi_fdiv+0xe4>
10000478:	42a5      	cmp	r5, r4
1000047a:	d801      	bhi.n	10000480 <__aeabi_fdiv+0xe8>
1000047c:	1b64      	subs	r4, r4, r5
1000047e:	4332      	orrs	r2, r6
10000480:	3801      	subs	r0, #1
10000482:	2800      	cmp	r0, #0
10000484:	d1f3      	bne.n	1000046e <__aeabi_fdiv+0xd6>
10000486:	1e60      	subs	r0, r4, #1
10000488:	4184      	sbcs	r4, r0
1000048a:	4314      	orrs	r4, r2
1000048c:	0018      	movs	r0, r3
1000048e:	307f      	adds	r0, #127	; 0x7f
10000490:	2800      	cmp	r0, #0
10000492:	dd38      	ble.n	10000506 <__aeabi_fdiv+0x16e>
10000494:	0762      	lsls	r2, r4, #29
10000496:	d004      	beq.n	100004a2 <__aeabi_fdiv+0x10a>
10000498:	220f      	movs	r2, #15
1000049a:	4022      	ands	r2, r4
1000049c:	2a04      	cmp	r2, #4
1000049e:	d000      	beq.n	100004a2 <__aeabi_fdiv+0x10a>
100004a0:	3404      	adds	r4, #4
100004a2:	0122      	lsls	r2, r4, #4
100004a4:	d503      	bpl.n	100004ae <__aeabi_fdiv+0x116>
100004a6:	3380      	adds	r3, #128	; 0x80
100004a8:	0018      	movs	r0, r3
100004aa:	4a2b      	ldr	r2, [pc, #172]	; (10000558 <__aeabi_fdiv+0x1c0>)
100004ac:	4014      	ands	r4, r2
100004ae:	08e5      	lsrs	r5, r4, #3
100004b0:	28fe      	cmp	r0, #254	; 0xfe
100004b2:	dd1d      	ble.n	100004f0 <__aeabi_fdiv+0x158>
100004b4:	2500      	movs	r5, #0
100004b6:	e00f      	b.n	100004d8 <__aeabi_fdiv+0x140>
100004b8:	201b      	movs	r0, #27
100004ba:	2200      	movs	r2, #0
100004bc:	3b01      	subs	r3, #1
100004be:	e7d5      	b.n	1000046c <__aeabi_fdiv+0xd4>
100004c0:	2380      	movs	r3, #128	; 0x80
100004c2:	03db      	lsls	r3, r3, #15
100004c4:	421c      	tst	r4, r3
100004c6:	d003      	beq.n	100004d0 <__aeabi_fdiv+0x138>
100004c8:	421d      	tst	r5, r3
100004ca:	d101      	bne.n	100004d0 <__aeabi_fdiv+0x138>
100004cc:	002c      	movs	r4, r5
100004ce:	9702      	str	r7, [sp, #8]
100004d0:	2580      	movs	r5, #128	; 0x80
100004d2:	9902      	ldr	r1, [sp, #8]
100004d4:	03ed      	lsls	r5, r5, #15
100004d6:	4325      	orrs	r5, r4
100004d8:	20ff      	movs	r0, #255	; 0xff
100004da:	e009      	b.n	100004f0 <__aeabi_fdiv+0x158>
100004dc:	9903      	ldr	r1, [sp, #12]
100004de:	9a00      	ldr	r2, [sp, #0]
100004e0:	2a02      	cmp	r2, #2
100004e2:	d0e7      	beq.n	100004b4 <__aeabi_fdiv+0x11c>
100004e4:	2a03      	cmp	r2, #3
100004e6:	d02f      	beq.n	10000548 <__aeabi_fdiv+0x1b0>
100004e8:	2500      	movs	r5, #0
100004ea:	0028      	movs	r0, r5
100004ec:	2a01      	cmp	r2, #1
100004ee:	d1cd      	bne.n	1000048c <__aeabi_fdiv+0xf4>
100004f0:	026d      	lsls	r5, r5, #9
100004f2:	0a6d      	lsrs	r5, r5, #9
100004f4:	05c0      	lsls	r0, r0, #23
100004f6:	4328      	orrs	r0, r5
100004f8:	07c9      	lsls	r1, r1, #31
100004fa:	4308      	orrs	r0, r1
100004fc:	b005      	add	sp, #20
100004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000500:	002c      	movs	r4, r5
10000502:	0039      	movs	r1, r7
10000504:	e7ec      	b.n	100004e0 <__aeabi_fdiv+0x148>
10000506:	2201      	movs	r2, #1
10000508:	2500      	movs	r5, #0
1000050a:	1a12      	subs	r2, r2, r0
1000050c:	0028      	movs	r0, r5
1000050e:	2a1b      	cmp	r2, #27
10000510:	dcee      	bgt.n	100004f0 <__aeabi_fdiv+0x158>
10000512:	339e      	adds	r3, #158	; 0x9e
10000514:	0025      	movs	r5, r4
10000516:	409c      	lsls	r4, r3
10000518:	40d5      	lsrs	r5, r2
1000051a:	1e63      	subs	r3, r4, #1
1000051c:	419c      	sbcs	r4, r3
1000051e:	4325      	orrs	r5, r4
10000520:	076b      	lsls	r3, r5, #29
10000522:	d004      	beq.n	1000052e <__aeabi_fdiv+0x196>
10000524:	230f      	movs	r3, #15
10000526:	402b      	ands	r3, r5
10000528:	2b04      	cmp	r3, #4
1000052a:	d000      	beq.n	1000052e <__aeabi_fdiv+0x196>
1000052c:	3504      	adds	r5, #4
1000052e:	2380      	movs	r3, #128	; 0x80
10000530:	0028      	movs	r0, r5
10000532:	04db      	lsls	r3, r3, #19
10000534:	4018      	ands	r0, r3
10000536:	421d      	tst	r5, r3
10000538:	d10b      	bne.n	10000552 <__aeabi_fdiv+0x1ba>
1000053a:	08ed      	lsrs	r5, r5, #3
1000053c:	e7d8      	b.n	100004f0 <__aeabi_fdiv+0x158>
1000053e:	2480      	movs	r4, #128	; 0x80
10000540:	2300      	movs	r3, #0
10000542:	03e4      	lsls	r4, r4, #15
10000544:	9302      	str	r3, [sp, #8]
10000546:	e7c3      	b.n	100004d0 <__aeabi_fdiv+0x138>
10000548:	9102      	str	r1, [sp, #8]
1000054a:	e7c1      	b.n	100004d0 <__aeabi_fdiv+0x138>
1000054c:	2500      	movs	r5, #0
1000054e:	0028      	movs	r0, r5
10000550:	e7ce      	b.n	100004f0 <__aeabi_fdiv+0x158>
10000552:	2500      	movs	r5, #0
10000554:	2001      	movs	r0, #1
10000556:	e7cb      	b.n	100004f0 <__aeabi_fdiv+0x158>
10000558:	f7ffffff 	.word	0xf7ffffff

1000055c <__aeabi_ui2f>:
1000055c:	2300      	movs	r3, #0
1000055e:	b570      	push	{r4, r5, r6, lr}
10000560:	0004      	movs	r4, r0
10000562:	4298      	cmp	r0, r3
10000564:	d009      	beq.n	1000057a <__aeabi_ui2f+0x1e>
10000566:	f7ff feb9 	bl	100002dc <__clzsi2>
1000056a:	239e      	movs	r3, #158	; 0x9e
1000056c:	1a1b      	subs	r3, r3, r0
1000056e:	2b96      	cmp	r3, #150	; 0x96
10000570:	dc08      	bgt.n	10000584 <__aeabi_ui2f+0x28>
10000572:	2808      	cmp	r0, #8
10000574:	d029      	beq.n	100005ca <__aeabi_ui2f+0x6e>
10000576:	3808      	subs	r0, #8
10000578:	4084      	lsls	r4, r0
1000057a:	0264      	lsls	r4, r4, #9
1000057c:	05d8      	lsls	r0, r3, #23
1000057e:	0a64      	lsrs	r4, r4, #9
10000580:	4320      	orrs	r0, r4
10000582:	bd70      	pop	{r4, r5, r6, pc}
10000584:	2b99      	cmp	r3, #153	; 0x99
10000586:	dd1b      	ble.n	100005c0 <__aeabi_ui2f+0x64>
10000588:	0002      	movs	r2, r0
1000058a:	0021      	movs	r1, r4
1000058c:	321b      	adds	r2, #27
1000058e:	4091      	lsls	r1, r2
10000590:	000a      	movs	r2, r1
10000592:	1e51      	subs	r1, r2, #1
10000594:	418a      	sbcs	r2, r1
10000596:	2105      	movs	r1, #5
10000598:	1a09      	subs	r1, r1, r0
1000059a:	40cc      	lsrs	r4, r1
1000059c:	4314      	orrs	r4, r2
1000059e:	0022      	movs	r2, r4
100005a0:	4d0b      	ldr	r5, [pc, #44]	; (100005d0 <__aeabi_ui2f+0x74>)
100005a2:	402a      	ands	r2, r5
100005a4:	0761      	lsls	r1, r4, #29
100005a6:	d004      	beq.n	100005b2 <__aeabi_ui2f+0x56>
100005a8:	210f      	movs	r1, #15
100005aa:	4021      	ands	r1, r4
100005ac:	2904      	cmp	r1, #4
100005ae:	d000      	beq.n	100005b2 <__aeabi_ui2f+0x56>
100005b0:	3204      	adds	r2, #4
100005b2:	0151      	lsls	r1, r2, #5
100005b4:	d502      	bpl.n	100005bc <__aeabi_ui2f+0x60>
100005b6:	239f      	movs	r3, #159	; 0x9f
100005b8:	402a      	ands	r2, r5
100005ba:	1a1b      	subs	r3, r3, r0
100005bc:	08d4      	lsrs	r4, r2, #3
100005be:	e7dc      	b.n	1000057a <__aeabi_ui2f+0x1e>
100005c0:	1f42      	subs	r2, r0, #5
100005c2:	2805      	cmp	r0, #5
100005c4:	d0eb      	beq.n	1000059e <__aeabi_ui2f+0x42>
100005c6:	4094      	lsls	r4, r2
100005c8:	e7e9      	b.n	1000059e <__aeabi_ui2f+0x42>
100005ca:	2396      	movs	r3, #150	; 0x96
100005cc:	e7d5      	b.n	1000057a <__aeabi_ui2f+0x1e>
100005ce:	46c0      	nop			; (mov r8, r8)
100005d0:	fbffffff 	.word	0xfbffffff

100005d4 <__aeabi_dadd>:
100005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100005d6:	b087      	sub	sp, #28
100005d8:	9204      	str	r2, [sp, #16]
100005da:	9305      	str	r3, [sp, #20]
100005dc:	0fcb      	lsrs	r3, r1, #31
100005de:	9301      	str	r3, [sp, #4]
100005e0:	9b05      	ldr	r3, [sp, #20]
100005e2:	030d      	lsls	r5, r1, #12
100005e4:	004c      	lsls	r4, r1, #1
100005e6:	0a6d      	lsrs	r5, r5, #9
100005e8:	0f41      	lsrs	r1, r0, #29
100005ea:	005f      	lsls	r7, r3, #1
100005ec:	4329      	orrs	r1, r5
100005ee:	031d      	lsls	r5, r3, #12
100005f0:	0d7b      	lsrs	r3, r7, #21
100005f2:	9302      	str	r3, [sp, #8]
100005f4:	9b05      	ldr	r3, [sp, #20]
100005f6:	0a6d      	lsrs	r5, r5, #9
100005f8:	0fdb      	lsrs	r3, r3, #31
100005fa:	9303      	str	r3, [sp, #12]
100005fc:	9b04      	ldr	r3, [sp, #16]
100005fe:	9a04      	ldr	r2, [sp, #16]
10000600:	0f5b      	lsrs	r3, r3, #29
10000602:	432b      	orrs	r3, r5
10000604:	9e01      	ldr	r6, [sp, #4]
10000606:	9d02      	ldr	r5, [sp, #8]
10000608:	9f03      	ldr	r7, [sp, #12]
1000060a:	0d64      	lsrs	r4, r4, #21
1000060c:	00c0      	lsls	r0, r0, #3
1000060e:	00d2      	lsls	r2, r2, #3
10000610:	1b65      	subs	r5, r4, r5
10000612:	42be      	cmp	r6, r7
10000614:	d000      	beq.n	10000618 <__aeabi_dadd+0x44>
10000616:	e12c      	b.n	10000872 <__aeabi_dadd+0x29e>
10000618:	4ebb      	ldr	r6, [pc, #748]	; (10000908 <__aeabi_dadd+0x334>)
1000061a:	46b4      	mov	ip, r6
1000061c:	2d00      	cmp	r5, #0
1000061e:	dc00      	bgt.n	10000622 <__aeabi_dadd+0x4e>
10000620:	e070      	b.n	10000704 <__aeabi_dadd+0x130>
10000622:	9e02      	ldr	r6, [sp, #8]
10000624:	2e00      	cmp	r6, #0
10000626:	d11e      	bne.n	10000666 <__aeabi_dadd+0x92>
10000628:	001e      	movs	r6, r3
1000062a:	4316      	orrs	r6, r2
1000062c:	d100      	bne.n	10000630 <__aeabi_dadd+0x5c>
1000062e:	e29b      	b.n	10000b68 <__aeabi_dadd+0x594>
10000630:	1e6e      	subs	r6, r5, #1
10000632:	2d01      	cmp	r5, #1
10000634:	d113      	bne.n	1000065e <__aeabi_dadd+0x8a>
10000636:	1882      	adds	r2, r0, r2
10000638:	4282      	cmp	r2, r0
1000063a:	4180      	sbcs	r0, r0
1000063c:	18c9      	adds	r1, r1, r3
1000063e:	4240      	negs	r0, r0
10000640:	1809      	adds	r1, r1, r0
10000642:	2401      	movs	r4, #1
10000644:	0010      	movs	r0, r2
10000646:	020b      	lsls	r3, r1, #8
10000648:	d400      	bmi.n	1000064c <__aeabi_dadd+0x78>
1000064a:	e072      	b.n	10000732 <__aeabi_dadd+0x15e>
1000064c:	2402      	movs	r4, #2
1000064e:	4baf      	ldr	r3, [pc, #700]	; (1000090c <__aeabi_dadd+0x338>)
10000650:	0842      	lsrs	r2, r0, #1
10000652:	400b      	ands	r3, r1
10000654:	2101      	movs	r1, #1
10000656:	4001      	ands	r1, r0
10000658:	430a      	orrs	r2, r1
1000065a:	07d8      	lsls	r0, r3, #31
1000065c:	e106      	b.n	1000086c <__aeabi_dadd+0x298>
1000065e:	4565      	cmp	r5, ip
10000660:	d11c      	bne.n	1000069c <__aeabi_dadd+0xc8>
10000662:	4ca9      	ldr	r4, [pc, #676]	; (10000908 <__aeabi_dadd+0x334>)
10000664:	e065      	b.n	10000732 <__aeabi_dadd+0x15e>
10000666:	4564      	cmp	r4, ip
10000668:	d063      	beq.n	10000732 <__aeabi_dadd+0x15e>
1000066a:	2d38      	cmp	r5, #56	; 0x38
1000066c:	dc47      	bgt.n	100006fe <__aeabi_dadd+0x12a>
1000066e:	2680      	movs	r6, #128	; 0x80
10000670:	0436      	lsls	r6, r6, #16
10000672:	4333      	orrs	r3, r6
10000674:	002e      	movs	r6, r5
10000676:	2e1f      	cmp	r6, #31
10000678:	dc2f      	bgt.n	100006da <__aeabi_dadd+0x106>
1000067a:	2520      	movs	r5, #32
1000067c:	001f      	movs	r7, r3
1000067e:	1bad      	subs	r5, r5, r6
10000680:	40af      	lsls	r7, r5
10000682:	9502      	str	r5, [sp, #8]
10000684:	003d      	movs	r5, r7
10000686:	0017      	movs	r7, r2
10000688:	40f7      	lsrs	r7, r6
1000068a:	432f      	orrs	r7, r5
1000068c:	9d02      	ldr	r5, [sp, #8]
1000068e:	40f3      	lsrs	r3, r6
10000690:	40aa      	lsls	r2, r5
10000692:	1e55      	subs	r5, r2, #1
10000694:	41aa      	sbcs	r2, r5
10000696:	001d      	movs	r5, r3
10000698:	4317      	orrs	r7, r2
1000069a:	e003      	b.n	100006a4 <__aeabi_dadd+0xd0>
1000069c:	2701      	movs	r7, #1
1000069e:	9d02      	ldr	r5, [sp, #8]
100006a0:	2e38      	cmp	r6, #56	; 0x38
100006a2:	dde8      	ble.n	10000676 <__aeabi_dadd+0xa2>
100006a4:	183f      	adds	r7, r7, r0
100006a6:	4287      	cmp	r7, r0
100006a8:	4180      	sbcs	r0, r0
100006aa:	1869      	adds	r1, r5, r1
100006ac:	4240      	negs	r0, r0
100006ae:	1809      	adds	r1, r1, r0
100006b0:	0038      	movs	r0, r7
100006b2:	020b      	lsls	r3, r1, #8
100006b4:	d53d      	bpl.n	10000732 <__aeabi_dadd+0x15e>
100006b6:	2500      	movs	r5, #0
100006b8:	3401      	adds	r4, #1
100006ba:	002f      	movs	r7, r5
100006bc:	4564      	cmp	r4, ip
100006be:	d1c6      	bne.n	1000064e <__aeabi_dadd+0x7a>
100006c0:	4b93      	ldr	r3, [pc, #588]	; (10000910 <__aeabi_dadd+0x33c>)
100006c2:	0524      	lsls	r4, r4, #20
100006c4:	401c      	ands	r4, r3
100006c6:	033b      	lsls	r3, r7, #12
100006c8:	0b1b      	lsrs	r3, r3, #12
100006ca:	431c      	orrs	r4, r3
100006cc:	9b01      	ldr	r3, [sp, #4]
100006ce:	0028      	movs	r0, r5
100006d0:	07db      	lsls	r3, r3, #31
100006d2:	431c      	orrs	r4, r3
100006d4:	0021      	movs	r1, r4
100006d6:	b007      	add	sp, #28
100006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100006da:	0035      	movs	r5, r6
100006dc:	001f      	movs	r7, r3
100006de:	3d20      	subs	r5, #32
100006e0:	40ef      	lsrs	r7, r5
100006e2:	003d      	movs	r5, r7
100006e4:	2700      	movs	r7, #0
100006e6:	2e20      	cmp	r6, #32
100006e8:	d003      	beq.n	100006f2 <__aeabi_dadd+0x11e>
100006ea:	3740      	adds	r7, #64	; 0x40
100006ec:	1bbf      	subs	r7, r7, r6
100006ee:	40bb      	lsls	r3, r7
100006f0:	001f      	movs	r7, r3
100006f2:	4317      	orrs	r7, r2
100006f4:	1e7b      	subs	r3, r7, #1
100006f6:	419f      	sbcs	r7, r3
100006f8:	432f      	orrs	r7, r5
100006fa:	2500      	movs	r5, #0
100006fc:	e7d2      	b.n	100006a4 <__aeabi_dadd+0xd0>
100006fe:	2500      	movs	r5, #0
10000700:	2701      	movs	r7, #1
10000702:	e7cf      	b.n	100006a4 <__aeabi_dadd+0xd0>
10000704:	2d00      	cmp	r5, #0
10000706:	d06f      	beq.n	100007e8 <__aeabi_dadd+0x214>
10000708:	9d02      	ldr	r5, [sp, #8]
1000070a:	1b2e      	subs	r6, r5, r4
1000070c:	2c00      	cmp	r4, #0
1000070e:	d130      	bne.n	10000772 <__aeabi_dadd+0x19e>
10000710:	000d      	movs	r5, r1
10000712:	4305      	orrs	r5, r0
10000714:	d100      	bne.n	10000718 <__aeabi_dadd+0x144>
10000716:	e221      	b.n	10000b5c <__aeabi_dadd+0x588>
10000718:	1e75      	subs	r5, r6, #1
1000071a:	2e01      	cmp	r6, #1
1000071c:	d124      	bne.n	10000768 <__aeabi_dadd+0x194>
1000071e:	1880      	adds	r0, r0, r2
10000720:	4290      	cmp	r0, r2
10000722:	4192      	sbcs	r2, r2
10000724:	18c9      	adds	r1, r1, r3
10000726:	4252      	negs	r2, r2
10000728:	1889      	adds	r1, r1, r2
1000072a:	3401      	adds	r4, #1
1000072c:	020b      	lsls	r3, r1, #8
1000072e:	d500      	bpl.n	10000732 <__aeabi_dadd+0x15e>
10000730:	e78c      	b.n	1000064c <__aeabi_dadd+0x78>
10000732:	0743      	lsls	r3, r0, #29
10000734:	d009      	beq.n	1000074a <__aeabi_dadd+0x176>
10000736:	230f      	movs	r3, #15
10000738:	4003      	ands	r3, r0
1000073a:	2b04      	cmp	r3, #4
1000073c:	d005      	beq.n	1000074a <__aeabi_dadd+0x176>
1000073e:	1d03      	adds	r3, r0, #4
10000740:	4283      	cmp	r3, r0
10000742:	4180      	sbcs	r0, r0
10000744:	4240      	negs	r0, r0
10000746:	1809      	adds	r1, r1, r0
10000748:	0018      	movs	r0, r3
1000074a:	4b6f      	ldr	r3, [pc, #444]	; (10000908 <__aeabi_dadd+0x334>)
1000074c:	020a      	lsls	r2, r1, #8
1000074e:	d400      	bmi.n	10000752 <__aeabi_dadd+0x17e>
10000750:	e210      	b.n	10000b74 <__aeabi_dadd+0x5a0>
10000752:	2500      	movs	r5, #0
10000754:	3401      	adds	r4, #1
10000756:	002f      	movs	r7, r5
10000758:	429c      	cmp	r4, r3
1000075a:	d0b1      	beq.n	100006c0 <__aeabi_dadd+0xec>
1000075c:	4b6b      	ldr	r3, [pc, #428]	; (1000090c <__aeabi_dadd+0x338>)
1000075e:	08c0      	lsrs	r0, r0, #3
10000760:	400b      	ands	r3, r1
10000762:	075d      	lsls	r5, r3, #29
10000764:	4305      	orrs	r5, r0
10000766:	e1f2      	b.n	10000b4e <__aeabi_dadd+0x57a>
10000768:	4566      	cmp	r6, ip
1000076a:	d11d      	bne.n	100007a8 <__aeabi_dadd+0x1d4>
1000076c:	0019      	movs	r1, r3
1000076e:	0010      	movs	r0, r2
10000770:	e777      	b.n	10000662 <__aeabi_dadd+0x8e>
10000772:	9c02      	ldr	r4, [sp, #8]
10000774:	4564      	cmp	r4, ip
10000776:	d0f9      	beq.n	1000076c <__aeabi_dadd+0x198>
10000778:	2e38      	cmp	r6, #56	; 0x38
1000077a:	dc32      	bgt.n	100007e2 <__aeabi_dadd+0x20e>
1000077c:	2480      	movs	r4, #128	; 0x80
1000077e:	0035      	movs	r5, r6
10000780:	0424      	lsls	r4, r4, #16
10000782:	4321      	orrs	r1, r4
10000784:	2d1f      	cmp	r5, #31
10000786:	dc1a      	bgt.n	100007be <__aeabi_dadd+0x1ea>
10000788:	2420      	movs	r4, #32
1000078a:	000e      	movs	r6, r1
1000078c:	1b67      	subs	r7, r4, r5
1000078e:	40be      	lsls	r6, r7
10000790:	0034      	movs	r4, r6
10000792:	0006      	movs	r6, r0
10000794:	40b8      	lsls	r0, r7
10000796:	40ee      	lsrs	r6, r5
10000798:	4334      	orrs	r4, r6
1000079a:	0006      	movs	r6, r0
1000079c:	40e9      	lsrs	r1, r5
1000079e:	1e70      	subs	r0, r6, #1
100007a0:	4186      	sbcs	r6, r0
100007a2:	4326      	orrs	r6, r4
100007a4:	000c      	movs	r4, r1
100007a6:	e002      	b.n	100007ae <__aeabi_dadd+0x1da>
100007a8:	2601      	movs	r6, #1
100007aa:	2d38      	cmp	r5, #56	; 0x38
100007ac:	ddea      	ble.n	10000784 <__aeabi_dadd+0x1b0>
100007ae:	18b0      	adds	r0, r6, r2
100007b0:	4290      	cmp	r0, r2
100007b2:	4192      	sbcs	r2, r2
100007b4:	18e4      	adds	r4, r4, r3
100007b6:	4252      	negs	r2, r2
100007b8:	18a1      	adds	r1, r4, r2
100007ba:	9c02      	ldr	r4, [sp, #8]
100007bc:	e779      	b.n	100006b2 <__aeabi_dadd+0xde>
100007be:	002c      	movs	r4, r5
100007c0:	000e      	movs	r6, r1
100007c2:	3c20      	subs	r4, #32
100007c4:	40e6      	lsrs	r6, r4
100007c6:	0034      	movs	r4, r6
100007c8:	2600      	movs	r6, #0
100007ca:	2d20      	cmp	r5, #32
100007cc:	d003      	beq.n	100007d6 <__aeabi_dadd+0x202>
100007ce:	3640      	adds	r6, #64	; 0x40
100007d0:	1b76      	subs	r6, r6, r5
100007d2:	40b1      	lsls	r1, r6
100007d4:	000e      	movs	r6, r1
100007d6:	4306      	orrs	r6, r0
100007d8:	1e71      	subs	r1, r6, #1
100007da:	418e      	sbcs	r6, r1
100007dc:	4326      	orrs	r6, r4
100007de:	2400      	movs	r4, #0
100007e0:	e7e5      	b.n	100007ae <__aeabi_dadd+0x1da>
100007e2:	2400      	movs	r4, #0
100007e4:	2601      	movs	r6, #1
100007e6:	e7e2      	b.n	100007ae <__aeabi_dadd+0x1da>
100007e8:	4f4a      	ldr	r7, [pc, #296]	; (10000914 <__aeabi_dadd+0x340>)
100007ea:	1c66      	adds	r6, r4, #1
100007ec:	423e      	tst	r6, r7
100007ee:	d130      	bne.n	10000852 <__aeabi_dadd+0x27e>
100007f0:	000d      	movs	r5, r1
100007f2:	4305      	orrs	r5, r0
100007f4:	2c00      	cmp	r4, #0
100007f6:	d112      	bne.n	1000081e <__aeabi_dadd+0x24a>
100007f8:	2d00      	cmp	r5, #0
100007fa:	d100      	bne.n	100007fe <__aeabi_dadd+0x22a>
100007fc:	e1b1      	b.n	10000b62 <__aeabi_dadd+0x58e>
100007fe:	001d      	movs	r5, r3
10000800:	4315      	orrs	r5, r2
10000802:	d096      	beq.n	10000732 <__aeabi_dadd+0x15e>
10000804:	1882      	adds	r2, r0, r2
10000806:	4282      	cmp	r2, r0
10000808:	4180      	sbcs	r0, r0
1000080a:	18c9      	adds	r1, r1, r3
1000080c:	4240      	negs	r0, r0
1000080e:	1809      	adds	r1, r1, r0
10000810:	0010      	movs	r0, r2
10000812:	020b      	lsls	r3, r1, #8
10000814:	d58d      	bpl.n	10000732 <__aeabi_dadd+0x15e>
10000816:	4b3d      	ldr	r3, [pc, #244]	; (1000090c <__aeabi_dadd+0x338>)
10000818:	4019      	ands	r1, r3
1000081a:	0034      	movs	r4, r6
1000081c:	e789      	b.n	10000732 <__aeabi_dadd+0x15e>
1000081e:	2d00      	cmp	r5, #0
10000820:	d0a4      	beq.n	1000076c <__aeabi_dadd+0x198>
10000822:	001d      	movs	r5, r3
10000824:	4664      	mov	r4, ip
10000826:	4315      	orrs	r5, r2
10000828:	d083      	beq.n	10000732 <__aeabi_dadd+0x15e>
1000082a:	2580      	movs	r5, #128	; 0x80
1000082c:	074c      	lsls	r4, r1, #29
1000082e:	08c0      	lsrs	r0, r0, #3
10000830:	08c9      	lsrs	r1, r1, #3
10000832:	032d      	lsls	r5, r5, #12
10000834:	4320      	orrs	r0, r4
10000836:	4229      	tst	r1, r5
10000838:	d006      	beq.n	10000848 <__aeabi_dadd+0x274>
1000083a:	08dc      	lsrs	r4, r3, #3
1000083c:	422c      	tst	r4, r5
1000083e:	d103      	bne.n	10000848 <__aeabi_dadd+0x274>
10000840:	0021      	movs	r1, r4
10000842:	08d0      	lsrs	r0, r2, #3
10000844:	075b      	lsls	r3, r3, #29
10000846:	4318      	orrs	r0, r3
10000848:	00cb      	lsls	r3, r1, #3
1000084a:	0f41      	lsrs	r1, r0, #29
1000084c:	4319      	orrs	r1, r3
1000084e:	00c0      	lsls	r0, r0, #3
10000850:	e707      	b.n	10000662 <__aeabi_dadd+0x8e>
10000852:	0034      	movs	r4, r6
10000854:	002f      	movs	r7, r5
10000856:	4566      	cmp	r6, ip
10000858:	d100      	bne.n	1000085c <__aeabi_dadd+0x288>
1000085a:	e731      	b.n	100006c0 <__aeabi_dadd+0xec>
1000085c:	1882      	adds	r2, r0, r2
1000085e:	4282      	cmp	r2, r0
10000860:	4180      	sbcs	r0, r0
10000862:	18cb      	adds	r3, r1, r3
10000864:	4240      	negs	r0, r0
10000866:	181b      	adds	r3, r3, r0
10000868:	07d8      	lsls	r0, r3, #31
1000086a:	0852      	lsrs	r2, r2, #1
1000086c:	4310      	orrs	r0, r2
1000086e:	0859      	lsrs	r1, r3, #1
10000870:	e75f      	b.n	10000732 <__aeabi_dadd+0x15e>
10000872:	2d00      	cmp	r5, #0
10000874:	dd65      	ble.n	10000942 <__aeabi_dadd+0x36e>
10000876:	9e02      	ldr	r6, [sp, #8]
10000878:	2e00      	cmp	r6, #0
1000087a:	d125      	bne.n	100008c8 <__aeabi_dadd+0x2f4>
1000087c:	001e      	movs	r6, r3
1000087e:	4316      	orrs	r6, r2
10000880:	d100      	bne.n	10000884 <__aeabi_dadd+0x2b0>
10000882:	e171      	b.n	10000b68 <__aeabi_dadd+0x594>
10000884:	1e6e      	subs	r6, r5, #1
10000886:	2d01      	cmp	r5, #1
10000888:	d10e      	bne.n	100008a8 <__aeabi_dadd+0x2d4>
1000088a:	1a82      	subs	r2, r0, r2
1000088c:	4290      	cmp	r0, r2
1000088e:	4180      	sbcs	r0, r0
10000890:	1ac9      	subs	r1, r1, r3
10000892:	4240      	negs	r0, r0
10000894:	1a09      	subs	r1, r1, r0
10000896:	2401      	movs	r4, #1
10000898:	0010      	movs	r0, r2
1000089a:	020b      	lsls	r3, r1, #8
1000089c:	d400      	bmi.n	100008a0 <__aeabi_dadd+0x2cc>
1000089e:	e748      	b.n	10000732 <__aeabi_dadd+0x15e>
100008a0:	0249      	lsls	r1, r1, #9
100008a2:	0006      	movs	r6, r0
100008a4:	0a4d      	lsrs	r5, r1, #9
100008a6:	e107      	b.n	10000ab8 <__aeabi_dadd+0x4e4>
100008a8:	4f17      	ldr	r7, [pc, #92]	; (10000908 <__aeabi_dadd+0x334>)
100008aa:	42bd      	cmp	r5, r7
100008ac:	d100      	bne.n	100008b0 <__aeabi_dadd+0x2dc>
100008ae:	e6d8      	b.n	10000662 <__aeabi_dadd+0x8e>
100008b0:	2501      	movs	r5, #1
100008b2:	9f02      	ldr	r7, [sp, #8]
100008b4:	2e38      	cmp	r6, #56	; 0x38
100008b6:	dd11      	ble.n	100008dc <__aeabi_dadd+0x308>
100008b8:	1b45      	subs	r5, r0, r5
100008ba:	42a8      	cmp	r0, r5
100008bc:	4180      	sbcs	r0, r0
100008be:	1bc9      	subs	r1, r1, r7
100008c0:	4240      	negs	r0, r0
100008c2:	1a09      	subs	r1, r1, r0
100008c4:	0028      	movs	r0, r5
100008c6:	e7e8      	b.n	1000089a <__aeabi_dadd+0x2c6>
100008c8:	4e0f      	ldr	r6, [pc, #60]	; (10000908 <__aeabi_dadd+0x334>)
100008ca:	42b4      	cmp	r4, r6
100008cc:	d100      	bne.n	100008d0 <__aeabi_dadd+0x2fc>
100008ce:	e730      	b.n	10000732 <__aeabi_dadd+0x15e>
100008d0:	2d38      	cmp	r5, #56	; 0x38
100008d2:	dc33      	bgt.n	1000093c <__aeabi_dadd+0x368>
100008d4:	2680      	movs	r6, #128	; 0x80
100008d6:	0436      	lsls	r6, r6, #16
100008d8:	4333      	orrs	r3, r6
100008da:	002e      	movs	r6, r5
100008dc:	2e1f      	cmp	r6, #31
100008de:	dc1b      	bgt.n	10000918 <__aeabi_dadd+0x344>
100008e0:	2720      	movs	r7, #32
100008e2:	1bbd      	subs	r5, r7, r6
100008e4:	9502      	str	r5, [sp, #8]
100008e6:	001d      	movs	r5, r3
100008e8:	9f02      	ldr	r7, [sp, #8]
100008ea:	40f3      	lsrs	r3, r6
100008ec:	40bd      	lsls	r5, r7
100008ee:	46ac      	mov	ip, r5
100008f0:	0015      	movs	r5, r2
100008f2:	4667      	mov	r7, ip
100008f4:	40f5      	lsrs	r5, r6
100008f6:	433d      	orrs	r5, r7
100008f8:	9f02      	ldr	r7, [sp, #8]
100008fa:	40ba      	lsls	r2, r7
100008fc:	1e57      	subs	r7, r2, #1
100008fe:	41ba      	sbcs	r2, r7
10000900:	001f      	movs	r7, r3
10000902:	4315      	orrs	r5, r2
10000904:	e7d8      	b.n	100008b8 <__aeabi_dadd+0x2e4>
10000906:	46c0      	nop			; (mov r8, r8)
10000908:	000007ff 	.word	0x000007ff
1000090c:	ff7fffff 	.word	0xff7fffff
10000910:	7ff00000 	.word	0x7ff00000
10000914:	000007fe 	.word	0x000007fe
10000918:	0035      	movs	r5, r6
1000091a:	001f      	movs	r7, r3
1000091c:	3d20      	subs	r5, #32
1000091e:	40ef      	lsrs	r7, r5
10000920:	003d      	movs	r5, r7
10000922:	2700      	movs	r7, #0
10000924:	2e20      	cmp	r6, #32
10000926:	d003      	beq.n	10000930 <__aeabi_dadd+0x35c>
10000928:	3740      	adds	r7, #64	; 0x40
1000092a:	1bbe      	subs	r6, r7, r6
1000092c:	40b3      	lsls	r3, r6
1000092e:	001f      	movs	r7, r3
10000930:	4317      	orrs	r7, r2
10000932:	1e7b      	subs	r3, r7, #1
10000934:	419f      	sbcs	r7, r3
10000936:	433d      	orrs	r5, r7
10000938:	2700      	movs	r7, #0
1000093a:	e7bd      	b.n	100008b8 <__aeabi_dadd+0x2e4>
1000093c:	2700      	movs	r7, #0
1000093e:	2501      	movs	r5, #1
10000940:	e7ba      	b.n	100008b8 <__aeabi_dadd+0x2e4>
10000942:	2d00      	cmp	r5, #0
10000944:	d059      	beq.n	100009fa <__aeabi_dadd+0x426>
10000946:	9d02      	ldr	r5, [sp, #8]
10000948:	1b2e      	subs	r6, r5, r4
1000094a:	2c00      	cmp	r4, #0
1000094c:	d116      	bne.n	1000097c <__aeabi_dadd+0x3a8>
1000094e:	000d      	movs	r5, r1
10000950:	4305      	orrs	r5, r0
10000952:	d00f      	beq.n	10000974 <__aeabi_dadd+0x3a0>
10000954:	1e75      	subs	r5, r6, #1
10000956:	2e01      	cmp	r6, #1
10000958:	d109      	bne.n	1000096e <__aeabi_dadd+0x39a>
1000095a:	1a10      	subs	r0, r2, r0
1000095c:	4282      	cmp	r2, r0
1000095e:	4192      	sbcs	r2, r2
10000960:	1a59      	subs	r1, r3, r1
10000962:	9b03      	ldr	r3, [sp, #12]
10000964:	4252      	negs	r2, r2
10000966:	1a89      	subs	r1, r1, r2
10000968:	9301      	str	r3, [sp, #4]
1000096a:	3401      	adds	r4, #1
1000096c:	e795      	b.n	1000089a <__aeabi_dadd+0x2c6>
1000096e:	4f8e      	ldr	r7, [pc, #568]	; (10000ba8 <__aeabi_dadd+0x5d4>)
10000970:	42be      	cmp	r6, r7
10000972:	d121      	bne.n	100009b8 <__aeabi_dadd+0x3e4>
10000974:	0019      	movs	r1, r3
10000976:	0010      	movs	r0, r2
10000978:	0034      	movs	r4, r6
1000097a:	e050      	b.n	10000a1e <__aeabi_dadd+0x44a>
1000097c:	4c8a      	ldr	r4, [pc, #552]	; (10000ba8 <__aeabi_dadd+0x5d4>)
1000097e:	9d02      	ldr	r5, [sp, #8]
10000980:	42a5      	cmp	r5, r4
10000982:	d100      	bne.n	10000986 <__aeabi_dadd+0x3b2>
10000984:	e0f2      	b.n	10000b6c <__aeabi_dadd+0x598>
10000986:	2e38      	cmp	r6, #56	; 0x38
10000988:	dc34      	bgt.n	100009f4 <__aeabi_dadd+0x420>
1000098a:	2480      	movs	r4, #128	; 0x80
1000098c:	0035      	movs	r5, r6
1000098e:	0424      	lsls	r4, r4, #16
10000990:	4321      	orrs	r1, r4
10000992:	2d1f      	cmp	r5, #31
10000994:	dc1d      	bgt.n	100009d2 <__aeabi_dadd+0x3fe>
10000996:	2620      	movs	r6, #32
10000998:	000c      	movs	r4, r1
1000099a:	1b76      	subs	r6, r6, r5
1000099c:	40b4      	lsls	r4, r6
1000099e:	46a4      	mov	ip, r4
100009a0:	0004      	movs	r4, r0
100009a2:	40b0      	lsls	r0, r6
100009a4:	40ec      	lsrs	r4, r5
100009a6:	4667      	mov	r7, ip
100009a8:	1e46      	subs	r6, r0, #1
100009aa:	41b0      	sbcs	r0, r6
100009ac:	40e9      	lsrs	r1, r5
100009ae:	433c      	orrs	r4, r7
100009b0:	4304      	orrs	r4, r0
100009b2:	0026      	movs	r6, r4
100009b4:	000c      	movs	r4, r1
100009b6:	e002      	b.n	100009be <__aeabi_dadd+0x3ea>
100009b8:	2601      	movs	r6, #1
100009ba:	2d38      	cmp	r5, #56	; 0x38
100009bc:	dde9      	ble.n	10000992 <__aeabi_dadd+0x3be>
100009be:	1b90      	subs	r0, r2, r6
100009c0:	4282      	cmp	r2, r0
100009c2:	4192      	sbcs	r2, r2
100009c4:	1b1c      	subs	r4, r3, r4
100009c6:	9b03      	ldr	r3, [sp, #12]
100009c8:	4252      	negs	r2, r2
100009ca:	1aa1      	subs	r1, r4, r2
100009cc:	9301      	str	r3, [sp, #4]
100009ce:	9c02      	ldr	r4, [sp, #8]
100009d0:	e763      	b.n	1000089a <__aeabi_dadd+0x2c6>
100009d2:	002c      	movs	r4, r5
100009d4:	000e      	movs	r6, r1
100009d6:	3c20      	subs	r4, #32
100009d8:	40e6      	lsrs	r6, r4
100009da:	2400      	movs	r4, #0
100009dc:	2d20      	cmp	r5, #32
100009de:	d003      	beq.n	100009e8 <__aeabi_dadd+0x414>
100009e0:	3440      	adds	r4, #64	; 0x40
100009e2:	1b64      	subs	r4, r4, r5
100009e4:	40a1      	lsls	r1, r4
100009e6:	000c      	movs	r4, r1
100009e8:	4304      	orrs	r4, r0
100009ea:	1e61      	subs	r1, r4, #1
100009ec:	418c      	sbcs	r4, r1
100009ee:	4326      	orrs	r6, r4
100009f0:	2400      	movs	r4, #0
100009f2:	e7e4      	b.n	100009be <__aeabi_dadd+0x3ea>
100009f4:	2400      	movs	r4, #0
100009f6:	2601      	movs	r6, #1
100009f8:	e7e1      	b.n	100009be <__aeabi_dadd+0x3ea>
100009fa:	4e6c      	ldr	r6, [pc, #432]	; (10000bac <__aeabi_dadd+0x5d8>)
100009fc:	1c65      	adds	r5, r4, #1
100009fe:	4235      	tst	r5, r6
10000a00:	d14a      	bne.n	10000a98 <__aeabi_dadd+0x4c4>
10000a02:	000d      	movs	r5, r1
10000a04:	001f      	movs	r7, r3
10000a06:	4305      	orrs	r5, r0
10000a08:	4317      	orrs	r7, r2
10000a0a:	2c00      	cmp	r4, #0
10000a0c:	d123      	bne.n	10000a56 <__aeabi_dadd+0x482>
10000a0e:	2d00      	cmp	r5, #0
10000a10:	d108      	bne.n	10000a24 <__aeabi_dadd+0x450>
10000a12:	1e3d      	subs	r5, r7, #0
10000a14:	9701      	str	r7, [sp, #4]
10000a16:	d100      	bne.n	10000a1a <__aeabi_dadd+0x446>
10000a18:	e652      	b.n	100006c0 <__aeabi_dadd+0xec>
10000a1a:	0019      	movs	r1, r3
10000a1c:	0010      	movs	r0, r2
10000a1e:	9b03      	ldr	r3, [sp, #12]
10000a20:	9301      	str	r3, [sp, #4]
10000a22:	e686      	b.n	10000732 <__aeabi_dadd+0x15e>
10000a24:	2f00      	cmp	r7, #0
10000a26:	d100      	bne.n	10000a2a <__aeabi_dadd+0x456>
10000a28:	e683      	b.n	10000732 <__aeabi_dadd+0x15e>
10000a2a:	1a86      	subs	r6, r0, r2
10000a2c:	42b0      	cmp	r0, r6
10000a2e:	41bf      	sbcs	r7, r7
10000a30:	1acd      	subs	r5, r1, r3
10000a32:	427f      	negs	r7, r7
10000a34:	1bed      	subs	r5, r5, r7
10000a36:	022f      	lsls	r7, r5, #8
10000a38:	d506      	bpl.n	10000a48 <__aeabi_dadd+0x474>
10000a3a:	1a10      	subs	r0, r2, r0
10000a3c:	4282      	cmp	r2, r0
10000a3e:	4192      	sbcs	r2, r2
10000a40:	1a59      	subs	r1, r3, r1
10000a42:	4252      	negs	r2, r2
10000a44:	1a89      	subs	r1, r1, r2
10000a46:	e7ea      	b.n	10000a1e <__aeabi_dadd+0x44a>
10000a48:	0037      	movs	r7, r6
10000a4a:	432f      	orrs	r7, r5
10000a4c:	d100      	bne.n	10000a50 <__aeabi_dadd+0x47c>
10000a4e:	e0a5      	b.n	10000b9c <__aeabi_dadd+0x5c8>
10000a50:	0029      	movs	r1, r5
10000a52:	0030      	movs	r0, r6
10000a54:	e66d      	b.n	10000732 <__aeabi_dadd+0x15e>
10000a56:	2d00      	cmp	r5, #0
10000a58:	d107      	bne.n	10000a6a <__aeabi_dadd+0x496>
10000a5a:	2f00      	cmp	r7, #0
10000a5c:	d100      	bne.n	10000a60 <__aeabi_dadd+0x48c>
10000a5e:	e094      	b.n	10000b8a <__aeabi_dadd+0x5b6>
10000a60:	0019      	movs	r1, r3
10000a62:	9b03      	ldr	r3, [sp, #12]
10000a64:	0010      	movs	r0, r2
10000a66:	9301      	str	r3, [sp, #4]
10000a68:	e5fb      	b.n	10000662 <__aeabi_dadd+0x8e>
10000a6a:	2f00      	cmp	r7, #0
10000a6c:	d100      	bne.n	10000a70 <__aeabi_dadd+0x49c>
10000a6e:	e5f8      	b.n	10000662 <__aeabi_dadd+0x8e>
10000a70:	2580      	movs	r5, #128	; 0x80
10000a72:	074c      	lsls	r4, r1, #29
10000a74:	08c0      	lsrs	r0, r0, #3
10000a76:	08c9      	lsrs	r1, r1, #3
10000a78:	032d      	lsls	r5, r5, #12
10000a7a:	4320      	orrs	r0, r4
10000a7c:	4229      	tst	r1, r5
10000a7e:	d100      	bne.n	10000a82 <__aeabi_dadd+0x4ae>
10000a80:	e6e2      	b.n	10000848 <__aeabi_dadd+0x274>
10000a82:	08dc      	lsrs	r4, r3, #3
10000a84:	422c      	tst	r4, r5
10000a86:	d000      	beq.n	10000a8a <__aeabi_dadd+0x4b6>
10000a88:	e6de      	b.n	10000848 <__aeabi_dadd+0x274>
10000a8a:	075b      	lsls	r3, r3, #29
10000a8c:	08d0      	lsrs	r0, r2, #3
10000a8e:	4318      	orrs	r0, r3
10000a90:	9b03      	ldr	r3, [sp, #12]
10000a92:	0021      	movs	r1, r4
10000a94:	9301      	str	r3, [sp, #4]
10000a96:	e6d7      	b.n	10000848 <__aeabi_dadd+0x274>
10000a98:	1a86      	subs	r6, r0, r2
10000a9a:	42b0      	cmp	r0, r6
10000a9c:	41bf      	sbcs	r7, r7
10000a9e:	1acd      	subs	r5, r1, r3
10000aa0:	427f      	negs	r7, r7
10000aa2:	1bed      	subs	r5, r5, r7
10000aa4:	022f      	lsls	r7, r5, #8
10000aa6:	d528      	bpl.n	10000afa <__aeabi_dadd+0x526>
10000aa8:	1a16      	subs	r6, r2, r0
10000aaa:	42b2      	cmp	r2, r6
10000aac:	4192      	sbcs	r2, r2
10000aae:	1a5b      	subs	r3, r3, r1
10000ab0:	4252      	negs	r2, r2
10000ab2:	1a9d      	subs	r5, r3, r2
10000ab4:	9b03      	ldr	r3, [sp, #12]
10000ab6:	9301      	str	r3, [sp, #4]
10000ab8:	2d00      	cmp	r5, #0
10000aba:	d025      	beq.n	10000b08 <__aeabi_dadd+0x534>
10000abc:	0028      	movs	r0, r5
10000abe:	f7ff fc0d 	bl	100002dc <__clzsi2>
10000ac2:	0003      	movs	r3, r0
10000ac4:	3b08      	subs	r3, #8
10000ac6:	2220      	movs	r2, #32
10000ac8:	0031      	movs	r1, r6
10000aca:	1ad2      	subs	r2, r2, r3
10000acc:	409d      	lsls	r5, r3
10000ace:	40d1      	lsrs	r1, r2
10000ad0:	4329      	orrs	r1, r5
10000ad2:	0035      	movs	r5, r6
10000ad4:	409d      	lsls	r5, r3
10000ad6:	429c      	cmp	r4, r3
10000ad8:	dc3b      	bgt.n	10000b52 <__aeabi_dadd+0x57e>
10000ada:	1b1a      	subs	r2, r3, r4
10000adc:	3201      	adds	r2, #1
10000ade:	2320      	movs	r3, #32
10000ae0:	0008      	movs	r0, r1
10000ae2:	1a9b      	subs	r3, r3, r2
10000ae4:	002c      	movs	r4, r5
10000ae6:	409d      	lsls	r5, r3
10000ae8:	4098      	lsls	r0, r3
10000aea:	40d4      	lsrs	r4, r2
10000aec:	1e6b      	subs	r3, r5, #1
10000aee:	419d      	sbcs	r5, r3
10000af0:	40d1      	lsrs	r1, r2
10000af2:	4320      	orrs	r0, r4
10000af4:	4328      	orrs	r0, r5
10000af6:	2400      	movs	r4, #0
10000af8:	e61b      	b.n	10000732 <__aeabi_dadd+0x15e>
10000afa:	0037      	movs	r7, r6
10000afc:	432f      	orrs	r7, r5
10000afe:	d1db      	bne.n	10000ab8 <__aeabi_dadd+0x4e4>
10000b00:	003d      	movs	r5, r7
10000b02:	003c      	movs	r4, r7
10000b04:	9701      	str	r7, [sp, #4]
10000b06:	e5db      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b08:	0030      	movs	r0, r6
10000b0a:	f7ff fbe7 	bl	100002dc <__clzsi2>
10000b0e:	0003      	movs	r3, r0
10000b10:	3318      	adds	r3, #24
10000b12:	2b1f      	cmp	r3, #31
10000b14:	ddd7      	ble.n	10000ac6 <__aeabi_dadd+0x4f2>
10000b16:	0031      	movs	r1, r6
10000b18:	3808      	subs	r0, #8
10000b1a:	4081      	lsls	r1, r0
10000b1c:	429c      	cmp	r4, r3
10000b1e:	dc12      	bgt.n	10000b46 <__aeabi_dadd+0x572>
10000b20:	1b1b      	subs	r3, r3, r4
10000b22:	1c5a      	adds	r2, r3, #1
10000b24:	2a1f      	cmp	r2, #31
10000b26:	ddda      	ble.n	10000ade <__aeabi_dadd+0x50a>
10000b28:	000c      	movs	r4, r1
10000b2a:	3b1f      	subs	r3, #31
10000b2c:	40dc      	lsrs	r4, r3
10000b2e:	0028      	movs	r0, r5
10000b30:	2a20      	cmp	r2, #32
10000b32:	d003      	beq.n	10000b3c <__aeabi_dadd+0x568>
10000b34:	2340      	movs	r3, #64	; 0x40
10000b36:	1a9b      	subs	r3, r3, r2
10000b38:	4099      	lsls	r1, r3
10000b3a:	0008      	movs	r0, r1
10000b3c:	1e43      	subs	r3, r0, #1
10000b3e:	4198      	sbcs	r0, r3
10000b40:	2100      	movs	r1, #0
10000b42:	4320      	orrs	r0, r4
10000b44:	e7d7      	b.n	10000af6 <__aeabi_dadd+0x522>
10000b46:	1ae4      	subs	r4, r4, r3
10000b48:	4b19      	ldr	r3, [pc, #100]	; (10000bb0 <__aeabi_dadd+0x5dc>)
10000b4a:	400b      	ands	r3, r1
10000b4c:	075d      	lsls	r5, r3, #29
10000b4e:	08df      	lsrs	r7, r3, #3
10000b50:	e5b6      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b52:	1ae4      	subs	r4, r4, r3
10000b54:	4b16      	ldr	r3, [pc, #88]	; (10000bb0 <__aeabi_dadd+0x5dc>)
10000b56:	0028      	movs	r0, r5
10000b58:	4019      	ands	r1, r3
10000b5a:	e5ea      	b.n	10000732 <__aeabi_dadd+0x15e>
10000b5c:	0019      	movs	r1, r3
10000b5e:	0010      	movs	r0, r2
10000b60:	e65b      	b.n	1000081a <__aeabi_dadd+0x246>
10000b62:	0019      	movs	r1, r3
10000b64:	0010      	movs	r0, r2
10000b66:	e5e4      	b.n	10000732 <__aeabi_dadd+0x15e>
10000b68:	002c      	movs	r4, r5
10000b6a:	e5e2      	b.n	10000732 <__aeabi_dadd+0x15e>
10000b6c:	0019      	movs	r1, r3
10000b6e:	0010      	movs	r0, r2
10000b70:	9c02      	ldr	r4, [sp, #8]
10000b72:	e754      	b.n	10000a1e <__aeabi_dadd+0x44a>
10000b74:	074a      	lsls	r2, r1, #29
10000b76:	08c7      	lsrs	r7, r0, #3
10000b78:	4317      	orrs	r7, r2
10000b7a:	003d      	movs	r5, r7
10000b7c:	08c9      	lsrs	r1, r1, #3
10000b7e:	429c      	cmp	r4, r3
10000b80:	d10f      	bne.n	10000ba2 <__aeabi_dadd+0x5ce>
10000b82:	430d      	orrs	r5, r1
10000b84:	d104      	bne.n	10000b90 <__aeabi_dadd+0x5bc>
10000b86:	002f      	movs	r7, r5
10000b88:	e59a      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b8a:	2180      	movs	r1, #128	; 0x80
10000b8c:	9701      	str	r7, [sp, #4]
10000b8e:	0309      	lsls	r1, r1, #12
10000b90:	003d      	movs	r5, r7
10000b92:	2780      	movs	r7, #128	; 0x80
10000b94:	033f      	lsls	r7, r7, #12
10000b96:	4c04      	ldr	r4, [pc, #16]	; (10000ba8 <__aeabi_dadd+0x5d4>)
10000b98:	430f      	orrs	r7, r1
10000b9a:	e591      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b9c:	003d      	movs	r5, r7
10000b9e:	9701      	str	r7, [sp, #4]
10000ba0:	e58e      	b.n	100006c0 <__aeabi_dadd+0xec>
10000ba2:	000f      	movs	r7, r1
10000ba4:	e58c      	b.n	100006c0 <__aeabi_dadd+0xec>
10000ba6:	46c0      	nop			; (mov r8, r8)
10000ba8:	000007ff 	.word	0x000007ff
10000bac:	000007fe 	.word	0x000007fe
10000bb0:	ff7fffff 	.word	0xff7fffff

10000bb4 <__eqdf2>:
10000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10000bb6:	000d      	movs	r5, r1
10000bb8:	b087      	sub	sp, #28
10000bba:	9200      	str	r2, [sp, #0]
10000bbc:	9301      	str	r3, [sp, #4]
10000bbe:	0004      	movs	r4, r0
10000bc0:	9004      	str	r0, [sp, #16]
10000bc2:	9801      	ldr	r0, [sp, #4]
10000bc4:	0feb      	lsrs	r3, r5, #31
10000bc6:	0046      	lsls	r6, r0, #1
10000bc8:	0fc7      	lsrs	r7, r0, #31
10000bca:	481a      	ldr	r0, [pc, #104]	; (10000c34 <__eqdf2+0x80>)
10000bcc:	9303      	str	r3, [sp, #12]
10000bce:	4684      	mov	ip, r0
10000bd0:	9b00      	ldr	r3, [sp, #0]
10000bd2:	0309      	lsls	r1, r1, #12
10000bd4:	9305      	str	r3, [sp, #20]
10000bd6:	9b01      	ldr	r3, [sp, #4]
10000bd8:	006a      	lsls	r2, r5, #1
10000bda:	031b      	lsls	r3, r3, #12
10000bdc:	2001      	movs	r0, #1
10000bde:	0b09      	lsrs	r1, r1, #12
10000be0:	0d52      	lsrs	r2, r2, #21
10000be2:	0b1b      	lsrs	r3, r3, #12
10000be4:	0d76      	lsrs	r6, r6, #21
10000be6:	4562      	cmp	r2, ip
10000be8:	d003      	beq.n	10000bf2 <__eqdf2+0x3e>
10000bea:	4566      	cmp	r6, ip
10000bec:	d10d      	bne.n	10000c0a <__eqdf2+0x56>
10000bee:	b007      	add	sp, #28
10000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000bf2:	4296      	cmp	r6, r2
10000bf4:	d1fb      	bne.n	10000bee <__eqdf2+0x3a>
10000bf6:	9a00      	ldr	r2, [sp, #0]
10000bf8:	430b      	orrs	r3, r1
10000bfa:	4313      	orrs	r3, r2
10000bfc:	4323      	orrs	r3, r4
10000bfe:	d1f6      	bne.n	10000bee <__eqdf2+0x3a>
10000c00:	9b03      	ldr	r3, [sp, #12]
10000c02:	1bd8      	subs	r0, r3, r7
10000c04:	1e43      	subs	r3, r0, #1
10000c06:	4198      	sbcs	r0, r3
10000c08:	e7f1      	b.n	10000bee <__eqdf2+0x3a>
10000c0a:	2001      	movs	r0, #1
10000c0c:	42b2      	cmp	r2, r6
10000c0e:	d1ee      	bne.n	10000bee <__eqdf2+0x3a>
10000c10:	4299      	cmp	r1, r3
10000c12:	d1ec      	bne.n	10000bee <__eqdf2+0x3a>
10000c14:	9b04      	ldr	r3, [sp, #16]
10000c16:	9e05      	ldr	r6, [sp, #20]
10000c18:	42b3      	cmp	r3, r6
10000c1a:	d1e8      	bne.n	10000bee <__eqdf2+0x3a>
10000c1c:	9b03      	ldr	r3, [sp, #12]
10000c1e:	42bb      	cmp	r3, r7
10000c20:	d006      	beq.n	10000c30 <__eqdf2+0x7c>
10000c22:	2a00      	cmp	r2, #0
10000c24:	d1e3      	bne.n	10000bee <__eqdf2+0x3a>
10000c26:	4321      	orrs	r1, r4
10000c28:	1e4b      	subs	r3, r1, #1
10000c2a:	4199      	sbcs	r1, r3
10000c2c:	0008      	movs	r0, r1
10000c2e:	e7de      	b.n	10000bee <__eqdf2+0x3a>
10000c30:	2000      	movs	r0, #0
10000c32:	e7dc      	b.n	10000bee <__eqdf2+0x3a>
10000c34:	000007ff 	.word	0x000007ff

10000c38 <__gedf2>:
10000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c3a:	b087      	sub	sp, #28
10000c3c:	9000      	str	r0, [sp, #0]
10000c3e:	9101      	str	r1, [sp, #4]
10000c40:	001d      	movs	r5, r3
10000c42:	9b00      	ldr	r3, [sp, #0]
10000c44:	0014      	movs	r4, r2
10000c46:	9304      	str	r3, [sp, #16]
10000c48:	9b01      	ldr	r3, [sp, #4]
10000c4a:	0329      	lsls	r1, r5, #12
10000c4c:	031a      	lsls	r2, r3, #12
10000c4e:	0b13      	lsrs	r3, r2, #12
10000c50:	4a33      	ldr	r2, [pc, #204]	; (10000d20 <__gedf2+0xe8>)
10000c52:	9303      	str	r3, [sp, #12]
10000c54:	4694      	mov	ip, r2
10000c56:	9b01      	ldr	r3, [sp, #4]
10000c58:	0068      	lsls	r0, r5, #1
10000c5a:	005f      	lsls	r7, r3, #1
10000c5c:	0d7b      	lsrs	r3, r7, #21
10000c5e:	9302      	str	r3, [sp, #8]
10000c60:	9a02      	ldr	r2, [sp, #8]
10000c62:	9b01      	ldr	r3, [sp, #4]
10000c64:	9405      	str	r4, [sp, #20]
10000c66:	0fdb      	lsrs	r3, r3, #31
10000c68:	0b09      	lsrs	r1, r1, #12
10000c6a:	0d40      	lsrs	r0, r0, #21
10000c6c:	0fee      	lsrs	r6, r5, #31
10000c6e:	4562      	cmp	r2, ip
10000c70:	d112      	bne.n	10000c98 <__gedf2+0x60>
10000c72:	9a00      	ldr	r2, [sp, #0]
10000c74:	9f03      	ldr	r7, [sp, #12]
10000c76:	4317      	orrs	r7, r2
10000c78:	d14f      	bne.n	10000d1a <__gedf2+0xe2>
10000c7a:	9a02      	ldr	r2, [sp, #8]
10000c7c:	4290      	cmp	r0, r2
10000c7e:	d004      	beq.n	10000c8a <__gedf2+0x52>
10000c80:	2001      	movs	r0, #1
10000c82:	2b00      	cmp	r3, #0
10000c84:	d006      	beq.n	10000c94 <__gedf2+0x5c>
10000c86:	3802      	subs	r0, #2
10000c88:	e004      	b.n	10000c94 <__gedf2+0x5c>
10000c8a:	4321      	orrs	r1, r4
10000c8c:	1e08      	subs	r0, r1, #0
10000c8e:	d144      	bne.n	10000d1a <__gedf2+0xe2>
10000c90:	42b3      	cmp	r3, r6
10000c92:	d1f5      	bne.n	10000c80 <__gedf2+0x48>
10000c94:	b007      	add	sp, #28
10000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000c98:	4560      	cmp	r0, ip
10000c9a:	d111      	bne.n	10000cc0 <__gedf2+0x88>
10000c9c:	4321      	orrs	r1, r4
10000c9e:	d13c      	bne.n	10000d1a <__gedf2+0xe2>
10000ca0:	9a02      	ldr	r2, [sp, #8]
10000ca2:	2a00      	cmp	r2, #0
10000ca4:	d004      	beq.n	10000cb0 <__gedf2+0x78>
10000ca6:	42b3      	cmp	r3, r6
10000ca8:	d1ea      	bne.n	10000c80 <__gedf2+0x48>
10000caa:	1e18      	subs	r0, r3, #0
10000cac:	d1f2      	bne.n	10000c94 <__gedf2+0x5c>
10000cae:	e005      	b.n	10000cbc <__gedf2+0x84>
10000cb0:	9a00      	ldr	r2, [sp, #0]
10000cb2:	9903      	ldr	r1, [sp, #12]
10000cb4:	4311      	orrs	r1, r2
10000cb6:	d1f6      	bne.n	10000ca6 <__gedf2+0x6e>
10000cb8:	1e30      	subs	r0, r6, #0
10000cba:	d1eb      	bne.n	10000c94 <__gedf2+0x5c>
10000cbc:	2001      	movs	r0, #1
10000cbe:	e02d      	b.n	10000d1c <__gedf2+0xe4>
10000cc0:	9a02      	ldr	r2, [sp, #8]
10000cc2:	2a00      	cmp	r2, #0
10000cc4:	d017      	beq.n	10000cf6 <__gedf2+0xbe>
10000cc6:	2800      	cmp	r0, #0
10000cc8:	d0da      	beq.n	10000c80 <__gedf2+0x48>
10000cca:	42b3      	cmp	r3, r6
10000ccc:	d1d8      	bne.n	10000c80 <__gedf2+0x48>
10000cce:	9a02      	ldr	r2, [sp, #8]
10000cd0:	4282      	cmp	r2, r0
10000cd2:	dcd5      	bgt.n	10000c80 <__gedf2+0x48>
10000cd4:	9a02      	ldr	r2, [sp, #8]
10000cd6:	4282      	cmp	r2, r0
10000cd8:	dbe7      	blt.n	10000caa <__gedf2+0x72>
10000cda:	9a03      	ldr	r2, [sp, #12]
10000cdc:	428a      	cmp	r2, r1
10000cde:	d8cf      	bhi.n	10000c80 <__gedf2+0x48>
10000ce0:	d1e3      	bne.n	10000caa <__gedf2+0x72>
10000ce2:	9a04      	ldr	r2, [sp, #16]
10000ce4:	9905      	ldr	r1, [sp, #20]
10000ce6:	428a      	cmp	r2, r1
10000ce8:	d8ca      	bhi.n	10000c80 <__gedf2+0x48>
10000cea:	9a04      	ldr	r2, [sp, #16]
10000cec:	9905      	ldr	r1, [sp, #20]
10000cee:	2000      	movs	r0, #0
10000cf0:	428a      	cmp	r2, r1
10000cf2:	d2cf      	bcs.n	10000c94 <__gedf2+0x5c>
10000cf4:	e7d9      	b.n	10000caa <__gedf2+0x72>
10000cf6:	9f00      	ldr	r7, [sp, #0]
10000cf8:	9a03      	ldr	r2, [sp, #12]
10000cfa:	4317      	orrs	r7, r2
10000cfc:	2800      	cmp	r0, #0
10000cfe:	d002      	beq.n	10000d06 <__gedf2+0xce>
10000d00:	2f00      	cmp	r7, #0
10000d02:	d0d9      	beq.n	10000cb8 <__gedf2+0x80>
10000d04:	e7cf      	b.n	10000ca6 <__gedf2+0x6e>
10000d06:	430c      	orrs	r4, r1
10000d08:	d004      	beq.n	10000d14 <__gedf2+0xdc>
10000d0a:	2f00      	cmp	r7, #0
10000d0c:	d0d4      	beq.n	10000cb8 <__gedf2+0x80>
10000d0e:	42b3      	cmp	r3, r6
10000d10:	d0e3      	beq.n	10000cda <__gedf2+0xa2>
10000d12:	e7b5      	b.n	10000c80 <__gedf2+0x48>
10000d14:	2f00      	cmp	r7, #0
10000d16:	d0bd      	beq.n	10000c94 <__gedf2+0x5c>
10000d18:	e7b2      	b.n	10000c80 <__gedf2+0x48>
10000d1a:	2002      	movs	r0, #2
10000d1c:	4240      	negs	r0, r0
10000d1e:	e7b9      	b.n	10000c94 <__gedf2+0x5c>
10000d20:	000007ff 	.word	0x000007ff

10000d24 <__ledf2>:
10000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d26:	b087      	sub	sp, #28
10000d28:	9000      	str	r0, [sp, #0]
10000d2a:	9101      	str	r1, [sp, #4]
10000d2c:	001d      	movs	r5, r3
10000d2e:	9b00      	ldr	r3, [sp, #0]
10000d30:	0014      	movs	r4, r2
10000d32:	9304      	str	r3, [sp, #16]
10000d34:	9b01      	ldr	r3, [sp, #4]
10000d36:	0068      	lsls	r0, r5, #1
10000d38:	031a      	lsls	r2, r3, #12
10000d3a:	0b13      	lsrs	r3, r2, #12
10000d3c:	4a34      	ldr	r2, [pc, #208]	; (10000e10 <__ledf2+0xec>)
10000d3e:	9303      	str	r3, [sp, #12]
10000d40:	4694      	mov	ip, r2
10000d42:	9b01      	ldr	r3, [sp, #4]
10000d44:	9405      	str	r4, [sp, #20]
10000d46:	005f      	lsls	r7, r3, #1
10000d48:	0d7b      	lsrs	r3, r7, #21
10000d4a:	9302      	str	r3, [sp, #8]
10000d4c:	9b01      	ldr	r3, [sp, #4]
10000d4e:	9a02      	ldr	r2, [sp, #8]
10000d50:	0fd9      	lsrs	r1, r3, #31
10000d52:	032b      	lsls	r3, r5, #12
10000d54:	0b1b      	lsrs	r3, r3, #12
10000d56:	0d40      	lsrs	r0, r0, #21
10000d58:	0fee      	lsrs	r6, r5, #31
10000d5a:	4562      	cmp	r2, ip
10000d5c:	d113      	bne.n	10000d86 <__ledf2+0x62>
10000d5e:	9a00      	ldr	r2, [sp, #0]
10000d60:	9f03      	ldr	r7, [sp, #12]
10000d62:	4317      	orrs	r7, r2
10000d64:	d152      	bne.n	10000e0c <__ledf2+0xe8>
10000d66:	9a02      	ldr	r2, [sp, #8]
10000d68:	4290      	cmp	r0, r2
10000d6a:	d004      	beq.n	10000d76 <__ledf2+0x52>
10000d6c:	2001      	movs	r0, #1
10000d6e:	2900      	cmp	r1, #0
10000d70:	d007      	beq.n	10000d82 <__ledf2+0x5e>
10000d72:	3802      	subs	r0, #2
10000d74:	e005      	b.n	10000d82 <__ledf2+0x5e>
10000d76:	2002      	movs	r0, #2
10000d78:	4323      	orrs	r3, r4
10000d7a:	d102      	bne.n	10000d82 <__ledf2+0x5e>
10000d7c:	0018      	movs	r0, r3
10000d7e:	42b1      	cmp	r1, r6
10000d80:	d1f4      	bne.n	10000d6c <__ledf2+0x48>
10000d82:	b007      	add	sp, #28
10000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000d86:	4560      	cmp	r0, ip
10000d88:	d113      	bne.n	10000db2 <__ledf2+0x8e>
10000d8a:	2002      	movs	r0, #2
10000d8c:	4323      	orrs	r3, r4
10000d8e:	d1f8      	bne.n	10000d82 <__ledf2+0x5e>
10000d90:	9b02      	ldr	r3, [sp, #8]
10000d92:	2b00      	cmp	r3, #0
10000d94:	d004      	beq.n	10000da0 <__ledf2+0x7c>
10000d96:	42b1      	cmp	r1, r6
10000d98:	d1e8      	bne.n	10000d6c <__ledf2+0x48>
10000d9a:	1e08      	subs	r0, r1, #0
10000d9c:	d1f1      	bne.n	10000d82 <__ledf2+0x5e>
10000d9e:	e005      	b.n	10000dac <__ledf2+0x88>
10000da0:	9b00      	ldr	r3, [sp, #0]
10000da2:	9a03      	ldr	r2, [sp, #12]
10000da4:	431a      	orrs	r2, r3
10000da6:	d1f6      	bne.n	10000d96 <__ledf2+0x72>
10000da8:	1e30      	subs	r0, r6, #0
10000daa:	d1ea      	bne.n	10000d82 <__ledf2+0x5e>
10000dac:	2001      	movs	r0, #1
10000dae:	4240      	negs	r0, r0
10000db0:	e7e7      	b.n	10000d82 <__ledf2+0x5e>
10000db2:	9a02      	ldr	r2, [sp, #8]
10000db4:	2a00      	cmp	r2, #0
10000db6:	d017      	beq.n	10000de8 <__ledf2+0xc4>
10000db8:	2800      	cmp	r0, #0
10000dba:	d0d7      	beq.n	10000d6c <__ledf2+0x48>
10000dbc:	42b1      	cmp	r1, r6
10000dbe:	d1d5      	bne.n	10000d6c <__ledf2+0x48>
10000dc0:	9a02      	ldr	r2, [sp, #8]
10000dc2:	4282      	cmp	r2, r0
10000dc4:	dcd2      	bgt.n	10000d6c <__ledf2+0x48>
10000dc6:	9a02      	ldr	r2, [sp, #8]
10000dc8:	4282      	cmp	r2, r0
10000dca:	dbe6      	blt.n	10000d9a <__ledf2+0x76>
10000dcc:	9a03      	ldr	r2, [sp, #12]
10000dce:	429a      	cmp	r2, r3
10000dd0:	d8cc      	bhi.n	10000d6c <__ledf2+0x48>
10000dd2:	d1e2      	bne.n	10000d9a <__ledf2+0x76>
10000dd4:	9b04      	ldr	r3, [sp, #16]
10000dd6:	9a05      	ldr	r2, [sp, #20]
10000dd8:	4293      	cmp	r3, r2
10000dda:	d8c7      	bhi.n	10000d6c <__ledf2+0x48>
10000ddc:	9b04      	ldr	r3, [sp, #16]
10000dde:	9a05      	ldr	r2, [sp, #20]
10000de0:	2000      	movs	r0, #0
10000de2:	4293      	cmp	r3, r2
10000de4:	d2cd      	bcs.n	10000d82 <__ledf2+0x5e>
10000de6:	e7d8      	b.n	10000d9a <__ledf2+0x76>
10000de8:	9f00      	ldr	r7, [sp, #0]
10000dea:	9a03      	ldr	r2, [sp, #12]
10000dec:	4317      	orrs	r7, r2
10000dee:	2800      	cmp	r0, #0
10000df0:	d002      	beq.n	10000df8 <__ledf2+0xd4>
10000df2:	2f00      	cmp	r7, #0
10000df4:	d0d8      	beq.n	10000da8 <__ledf2+0x84>
10000df6:	e7ce      	b.n	10000d96 <__ledf2+0x72>
10000df8:	431c      	orrs	r4, r3
10000dfa:	d004      	beq.n	10000e06 <__ledf2+0xe2>
10000dfc:	2f00      	cmp	r7, #0
10000dfe:	d0d3      	beq.n	10000da8 <__ledf2+0x84>
10000e00:	42b1      	cmp	r1, r6
10000e02:	d0e3      	beq.n	10000dcc <__ledf2+0xa8>
10000e04:	e7b2      	b.n	10000d6c <__ledf2+0x48>
10000e06:	2f00      	cmp	r7, #0
10000e08:	d0bb      	beq.n	10000d82 <__ledf2+0x5e>
10000e0a:	e7af      	b.n	10000d6c <__ledf2+0x48>
10000e0c:	2002      	movs	r0, #2
10000e0e:	e7b8      	b.n	10000d82 <__ledf2+0x5e>
10000e10:	000007ff 	.word	0x000007ff

10000e14 <__aeabi_dmul>:
10000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e16:	b08b      	sub	sp, #44	; 0x2c
10000e18:	9200      	str	r2, [sp, #0]
10000e1a:	9301      	str	r3, [sp, #4]
10000e1c:	030d      	lsls	r5, r1, #12
10000e1e:	004b      	lsls	r3, r1, #1
10000e20:	0fca      	lsrs	r2, r1, #31
10000e22:	0006      	movs	r6, r0
10000e24:	0b2d      	lsrs	r5, r5, #12
10000e26:	0d5b      	lsrs	r3, r3, #21
10000e28:	9205      	str	r2, [sp, #20]
10000e2a:	d100      	bne.n	10000e2e <__aeabi_dmul+0x1a>
10000e2c:	e114      	b.n	10001058 <__aeabi_dmul+0x244>
10000e2e:	4acf      	ldr	r2, [pc, #828]	; (1000116c <__aeabi_dmul+0x358>)
10000e30:	4293      	cmp	r3, r2
10000e32:	d100      	bne.n	10000e36 <__aeabi_dmul+0x22>
10000e34:	e138      	b.n	100010a8 <__aeabi_dmul+0x294>
10000e36:	00ed      	lsls	r5, r5, #3
10000e38:	0f42      	lsrs	r2, r0, #29
10000e3a:	432a      	orrs	r2, r5
10000e3c:	2580      	movs	r5, #128	; 0x80
10000e3e:	042d      	lsls	r5, r5, #16
10000e40:	4315      	orrs	r5, r2
10000e42:	4acb      	ldr	r2, [pc, #812]	; (10001170 <__aeabi_dmul+0x35c>)
10000e44:	00c4      	lsls	r4, r0, #3
10000e46:	189b      	adds	r3, r3, r2
10000e48:	9303      	str	r3, [sp, #12]
10000e4a:	2300      	movs	r3, #0
10000e4c:	9302      	str	r3, [sp, #8]
10000e4e:	9b01      	ldr	r3, [sp, #4]
10000e50:	9800      	ldr	r0, [sp, #0]
10000e52:	031e      	lsls	r6, r3, #12
10000e54:	005a      	lsls	r2, r3, #1
10000e56:	0fdb      	lsrs	r3, r3, #31
10000e58:	0b36      	lsrs	r6, r6, #12
10000e5a:	0d52      	lsrs	r2, r2, #21
10000e5c:	9304      	str	r3, [sp, #16]
10000e5e:	d100      	bne.n	10000e62 <__aeabi_dmul+0x4e>
10000e60:	e131      	b.n	100010c6 <__aeabi_dmul+0x2b2>
10000e62:	4bc2      	ldr	r3, [pc, #776]	; (1000116c <__aeabi_dmul+0x358>)
10000e64:	429a      	cmp	r2, r3
10000e66:	d100      	bne.n	10000e6a <__aeabi_dmul+0x56>
10000e68:	e153      	b.n	10001112 <__aeabi_dmul+0x2fe>
10000e6a:	0f43      	lsrs	r3, r0, #29
10000e6c:	00f6      	lsls	r6, r6, #3
10000e6e:	4333      	orrs	r3, r6
10000e70:	2680      	movs	r6, #128	; 0x80
10000e72:	49bf      	ldr	r1, [pc, #764]	; (10001170 <__aeabi_dmul+0x35c>)
10000e74:	0436      	lsls	r6, r6, #16
10000e76:	431e      	orrs	r6, r3
10000e78:	00c3      	lsls	r3, r0, #3
10000e7a:	1850      	adds	r0, r2, r1
10000e7c:	2200      	movs	r2, #0
10000e7e:	9905      	ldr	r1, [sp, #20]
10000e80:	9f04      	ldr	r7, [sp, #16]
10000e82:	4079      	eors	r1, r7
10000e84:	9100      	str	r1, [sp, #0]
10000e86:	9903      	ldr	r1, [sp, #12]
10000e88:	1841      	adds	r1, r0, r1
10000e8a:	9106      	str	r1, [sp, #24]
10000e8c:	3101      	adds	r1, #1
10000e8e:	9103      	str	r1, [sp, #12]
10000e90:	9902      	ldr	r1, [sp, #8]
10000e92:	0088      	lsls	r0, r1, #2
10000e94:	4310      	orrs	r0, r2
10000e96:	280a      	cmp	r0, #10
10000e98:	dd00      	ble.n	10000e9c <__aeabi_dmul+0x88>
10000e9a:	e173      	b.n	10001184 <__aeabi_dmul+0x370>
10000e9c:	2802      	cmp	r0, #2
10000e9e:	dd00      	ble.n	10000ea2 <__aeabi_dmul+0x8e>
10000ea0:	e146      	b.n	10001130 <__aeabi_dmul+0x31c>
10000ea2:	3801      	subs	r0, #1
10000ea4:	2801      	cmp	r0, #1
10000ea6:	d800      	bhi.n	10000eaa <__aeabi_dmul+0x96>
10000ea8:	e155      	b.n	10001156 <__aeabi_dmul+0x342>
10000eaa:	0c19      	lsrs	r1, r3, #16
10000eac:	b29b      	uxth	r3, r3
10000eae:	9102      	str	r1, [sp, #8]
10000eb0:	0019      	movs	r1, r3
10000eb2:	0c22      	lsrs	r2, r4, #16
10000eb4:	b2a4      	uxth	r4, r4
10000eb6:	4351      	muls	r1, r2
10000eb8:	0020      	movs	r0, r4
10000eba:	468c      	mov	ip, r1
10000ebc:	9f02      	ldr	r7, [sp, #8]
10000ebe:	9902      	ldr	r1, [sp, #8]
10000ec0:	4358      	muls	r0, r3
10000ec2:	4351      	muls	r1, r2
10000ec4:	4367      	muls	r7, r4
10000ec6:	9105      	str	r1, [sp, #20]
10000ec8:	4467      	add	r7, ip
10000eca:	0c01      	lsrs	r1, r0, #16
10000ecc:	19c9      	adds	r1, r1, r7
10000ece:	9004      	str	r0, [sp, #16]
10000ed0:	458c      	cmp	ip, r1
10000ed2:	d905      	bls.n	10000ee0 <__aeabi_dmul+0xcc>
10000ed4:	2080      	movs	r0, #128	; 0x80
10000ed6:	0240      	lsls	r0, r0, #9
10000ed8:	4684      	mov	ip, r0
10000eda:	9f05      	ldr	r7, [sp, #20]
10000edc:	4467      	add	r7, ip
10000ede:	9705      	str	r7, [sp, #20]
10000ee0:	0c08      	lsrs	r0, r1, #16
10000ee2:	4684      	mov	ip, r0
10000ee4:	4668      	mov	r0, sp
10000ee6:	8a00      	ldrh	r0, [r0, #16]
10000ee8:	0409      	lsls	r1, r1, #16
10000eea:	1809      	adds	r1, r1, r0
10000eec:	9109      	str	r1, [sp, #36]	; 0x24
10000eee:	0c31      	lsrs	r1, r6, #16
10000ef0:	b2b6      	uxth	r6, r6
10000ef2:	9104      	str	r1, [sp, #16]
10000ef4:	0030      	movs	r0, r6
10000ef6:	0021      	movs	r1, r4
10000ef8:	9f04      	ldr	r7, [sp, #16]
10000efa:	4350      	muls	r0, r2
10000efc:	437c      	muls	r4, r7
10000efe:	4371      	muls	r1, r6
10000f00:	437a      	muls	r2, r7
10000f02:	1824      	adds	r4, r4, r0
10000f04:	0c0f      	lsrs	r7, r1, #16
10000f06:	193c      	adds	r4, r7, r4
10000f08:	42a0      	cmp	r0, r4
10000f0a:	d902      	bls.n	10000f12 <__aeabi_dmul+0xfe>
10000f0c:	2080      	movs	r0, #128	; 0x80
10000f0e:	0240      	lsls	r0, r0, #9
10000f10:	1812      	adds	r2, r2, r0
10000f12:	0c20      	lsrs	r0, r4, #16
10000f14:	1882      	adds	r2, r0, r2
10000f16:	0424      	lsls	r4, r4, #16
10000f18:	b289      	uxth	r1, r1
10000f1a:	9207      	str	r2, [sp, #28]
10000f1c:	1862      	adds	r2, r4, r1
10000f1e:	9208      	str	r2, [sp, #32]
10000f20:	9908      	ldr	r1, [sp, #32]
10000f22:	4662      	mov	r2, ip
10000f24:	468c      	mov	ip, r1
10000f26:	0c29      	lsrs	r1, r5, #16
10000f28:	b2ad      	uxth	r5, r5
10000f2a:	0028      	movs	r0, r5
10000f2c:	9f02      	ldr	r7, [sp, #8]
10000f2e:	4358      	muls	r0, r3
10000f30:	436f      	muls	r7, r5
10000f32:	434b      	muls	r3, r1
10000f34:	4462      	add	r2, ip
10000f36:	4694      	mov	ip, r2
10000f38:	9c02      	ldr	r4, [sp, #8]
10000f3a:	18ff      	adds	r7, r7, r3
10000f3c:	0c02      	lsrs	r2, r0, #16
10000f3e:	19d2      	adds	r2, r2, r7
10000f40:	434c      	muls	r4, r1
10000f42:	4293      	cmp	r3, r2
10000f44:	d902      	bls.n	10000f4c <__aeabi_dmul+0x138>
10000f46:	2380      	movs	r3, #128	; 0x80
10000f48:	025b      	lsls	r3, r3, #9
10000f4a:	18e4      	adds	r4, r4, r3
10000f4c:	0c13      	lsrs	r3, r2, #16
10000f4e:	191b      	adds	r3, r3, r4
10000f50:	9302      	str	r3, [sp, #8]
10000f52:	002b      	movs	r3, r5
10000f54:	b280      	uxth	r0, r0
10000f56:	0412      	lsls	r2, r2, #16
10000f58:	1812      	adds	r2, r2, r0
10000f5a:	9804      	ldr	r0, [sp, #16]
10000f5c:	4373      	muls	r3, r6
10000f5e:	4345      	muls	r5, r0
10000f60:	434e      	muls	r6, r1
10000f62:	4341      	muls	r1, r0
10000f64:	19a8      	adds	r0, r5, r6
10000f66:	0c1d      	lsrs	r5, r3, #16
10000f68:	182d      	adds	r5, r5, r0
10000f6a:	42ae      	cmp	r6, r5
10000f6c:	d902      	bls.n	10000f74 <__aeabi_dmul+0x160>
10000f6e:	2080      	movs	r0, #128	; 0x80
10000f70:	0240      	lsls	r0, r0, #9
10000f72:	1809      	adds	r1, r1, r0
10000f74:	9c05      	ldr	r4, [sp, #20]
10000f76:	4660      	mov	r0, ip
10000f78:	46a4      	mov	ip, r4
10000f7a:	9c08      	ldr	r4, [sp, #32]
10000f7c:	4460      	add	r0, ip
10000f7e:	42a0      	cmp	r0, r4
10000f80:	41bf      	sbcs	r7, r7
10000f82:	1880      	adds	r0, r0, r2
10000f84:	4290      	cmp	r0, r2
10000f86:	4192      	sbcs	r2, r2
10000f88:	042e      	lsls	r6, r5, #16
10000f8a:	b29b      	uxth	r3, r3
10000f8c:	18f6      	adds	r6, r6, r3
10000f8e:	9b07      	ldr	r3, [sp, #28]
10000f90:	427f      	negs	r7, r7
10000f92:	18f6      	adds	r6, r6, r3
10000f94:	4253      	negs	r3, r2
10000f96:	9304      	str	r3, [sp, #16]
10000f98:	9b02      	ldr	r3, [sp, #8]
10000f9a:	19f4      	adds	r4, r6, r7
10000f9c:	469c      	mov	ip, r3
10000f9e:	44a4      	add	ip, r4
10000fa0:	4663      	mov	r3, ip
10000fa2:	9a04      	ldr	r2, [sp, #16]
10000fa4:	42bc      	cmp	r4, r7
10000fa6:	41a4      	sbcs	r4, r4
10000fa8:	189b      	adds	r3, r3, r2
10000faa:	9a07      	ldr	r2, [sp, #28]
10000fac:	4264      	negs	r4, r4
10000fae:	4296      	cmp	r6, r2
10000fb0:	41b6      	sbcs	r6, r6
10000fb2:	9a02      	ldr	r2, [sp, #8]
10000fb4:	4276      	negs	r6, r6
10000fb6:	4334      	orrs	r4, r6
10000fb8:	0c2d      	lsrs	r5, r5, #16
10000fba:	1964      	adds	r4, r4, r5
10000fbc:	4594      	cmp	ip, r2
10000fbe:	41ad      	sbcs	r5, r5
10000fc0:	9a04      	ldr	r2, [sp, #16]
10000fc2:	426d      	negs	r5, r5
10000fc4:	4293      	cmp	r3, r2
10000fc6:	4192      	sbcs	r2, r2
10000fc8:	4252      	negs	r2, r2
10000fca:	4315      	orrs	r5, r2
10000fcc:	1964      	adds	r4, r4, r5
10000fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
10000fd0:	1864      	adds	r4, r4, r1
10000fd2:	0241      	lsls	r1, r0, #9
10000fd4:	4311      	orrs	r1, r2
10000fd6:	1e4a      	subs	r2, r1, #1
10000fd8:	4191      	sbcs	r1, r2
10000fda:	0dc0      	lsrs	r0, r0, #23
10000fdc:	0dde      	lsrs	r6, r3, #23
10000fde:	0264      	lsls	r4, r4, #9
10000fe0:	4301      	orrs	r1, r0
10000fe2:	025b      	lsls	r3, r3, #9
10000fe4:	4326      	orrs	r6, r4
10000fe6:	430b      	orrs	r3, r1
10000fe8:	01e4      	lsls	r4, r4, #7
10000fea:	d400      	bmi.n	10000fee <__aeabi_dmul+0x1da>
10000fec:	e0df      	b.n	100011ae <__aeabi_dmul+0x39a>
10000fee:	2101      	movs	r1, #1
10000ff0:	085a      	lsrs	r2, r3, #1
10000ff2:	400b      	ands	r3, r1
10000ff4:	431a      	orrs	r2, r3
10000ff6:	07f3      	lsls	r3, r6, #31
10000ff8:	40ce      	lsrs	r6, r1
10000ffa:	4313      	orrs	r3, r2
10000ffc:	9a03      	ldr	r2, [sp, #12]
10000ffe:	495d      	ldr	r1, [pc, #372]	; (10001174 <__aeabi_dmul+0x360>)
10001000:	1852      	adds	r2, r2, r1
10001002:	2a00      	cmp	r2, #0
10001004:	dc00      	bgt.n	10001008 <__aeabi_dmul+0x1f4>
10001006:	e0d5      	b.n	100011b4 <__aeabi_dmul+0x3a0>
10001008:	0759      	lsls	r1, r3, #29
1000100a:	d009      	beq.n	10001020 <__aeabi_dmul+0x20c>
1000100c:	210f      	movs	r1, #15
1000100e:	4019      	ands	r1, r3
10001010:	2904      	cmp	r1, #4
10001012:	d005      	beq.n	10001020 <__aeabi_dmul+0x20c>
10001014:	1d19      	adds	r1, r3, #4
10001016:	4299      	cmp	r1, r3
10001018:	419b      	sbcs	r3, r3
1000101a:	425b      	negs	r3, r3
1000101c:	18f6      	adds	r6, r6, r3
1000101e:	000b      	movs	r3, r1
10001020:	01f1      	lsls	r1, r6, #7
10001022:	d506      	bpl.n	10001032 <__aeabi_dmul+0x21e>
10001024:	2180      	movs	r1, #128	; 0x80
10001026:	00c9      	lsls	r1, r1, #3
10001028:	468c      	mov	ip, r1
1000102a:	4a53      	ldr	r2, [pc, #332]	; (10001178 <__aeabi_dmul+0x364>)
1000102c:	4016      	ands	r6, r2
1000102e:	9a03      	ldr	r2, [sp, #12]
10001030:	4462      	add	r2, ip
10001032:	4952      	ldr	r1, [pc, #328]	; (1000117c <__aeabi_dmul+0x368>)
10001034:	428a      	cmp	r2, r1
10001036:	dd00      	ble.n	1000103a <__aeabi_dmul+0x226>
10001038:	e109      	b.n	1000124e <__aeabi_dmul+0x43a>
1000103a:	0774      	lsls	r4, r6, #29
1000103c:	08db      	lsrs	r3, r3, #3
1000103e:	431c      	orrs	r4, r3
10001040:	08f6      	lsrs	r6, r6, #3
10001042:	0513      	lsls	r3, r2, #20
10001044:	0336      	lsls	r6, r6, #12
10001046:	9a00      	ldr	r2, [sp, #0]
10001048:	0b36      	lsrs	r6, r6, #12
1000104a:	4333      	orrs	r3, r6
1000104c:	07d2      	lsls	r2, r2, #31
1000104e:	4313      	orrs	r3, r2
10001050:	0020      	movs	r0, r4
10001052:	0019      	movs	r1, r3
10001054:	b00b      	add	sp, #44	; 0x2c
10001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001058:	002c      	movs	r4, r5
1000105a:	4304      	orrs	r4, r0
1000105c:	d02b      	beq.n	100010b6 <__aeabi_dmul+0x2a2>
1000105e:	2d00      	cmp	r5, #0
10001060:	d016      	beq.n	10001090 <__aeabi_dmul+0x27c>
10001062:	0028      	movs	r0, r5
10001064:	f7ff f93a 	bl	100002dc <__clzsi2>
10001068:	0004      	movs	r4, r0
1000106a:	0002      	movs	r2, r0
1000106c:	3c0b      	subs	r4, #11
1000106e:	231d      	movs	r3, #29
10001070:	0030      	movs	r0, r6
10001072:	1b1b      	subs	r3, r3, r4
10001074:	0011      	movs	r1, r2
10001076:	40d8      	lsrs	r0, r3
10001078:	3908      	subs	r1, #8
1000107a:	408d      	lsls	r5, r1
1000107c:	0003      	movs	r3, r0
1000107e:	432b      	orrs	r3, r5
10001080:	0035      	movs	r5, r6
10001082:	408d      	lsls	r5, r1
10001084:	493e      	ldr	r1, [pc, #248]	; (10001180 <__aeabi_dmul+0x36c>)
10001086:	002c      	movs	r4, r5
10001088:	1a8a      	subs	r2, r1, r2
1000108a:	001d      	movs	r5, r3
1000108c:	9203      	str	r2, [sp, #12]
1000108e:	e6dc      	b.n	10000e4a <__aeabi_dmul+0x36>
10001090:	f7ff f924 	bl	100002dc <__clzsi2>
10001094:	0004      	movs	r4, r0
10001096:	0002      	movs	r2, r0
10001098:	3415      	adds	r4, #21
1000109a:	3220      	adds	r2, #32
1000109c:	2c1c      	cmp	r4, #28
1000109e:	dde6      	ble.n	1000106e <__aeabi_dmul+0x25a>
100010a0:	0033      	movs	r3, r6
100010a2:	3808      	subs	r0, #8
100010a4:	4083      	lsls	r3, r0
100010a6:	e7ed      	b.n	10001084 <__aeabi_dmul+0x270>
100010a8:	0004      	movs	r4, r0
100010aa:	432c      	orrs	r4, r5
100010ac:	d007      	beq.n	100010be <__aeabi_dmul+0x2aa>
100010ae:	9303      	str	r3, [sp, #12]
100010b0:	0004      	movs	r4, r0
100010b2:	2303      	movs	r3, #3
100010b4:	e6ca      	b.n	10000e4c <__aeabi_dmul+0x38>
100010b6:	0025      	movs	r5, r4
100010b8:	2301      	movs	r3, #1
100010ba:	9403      	str	r4, [sp, #12]
100010bc:	e6c6      	b.n	10000e4c <__aeabi_dmul+0x38>
100010be:	9303      	str	r3, [sp, #12]
100010c0:	0025      	movs	r5, r4
100010c2:	2302      	movs	r3, #2
100010c4:	e6c2      	b.n	10000e4c <__aeabi_dmul+0x38>
100010c6:	9b00      	ldr	r3, [sp, #0]
100010c8:	4333      	orrs	r3, r6
100010ca:	d029      	beq.n	10001120 <__aeabi_dmul+0x30c>
100010cc:	2e00      	cmp	r6, #0
100010ce:	d014      	beq.n	100010fa <__aeabi_dmul+0x2e6>
100010d0:	0030      	movs	r0, r6
100010d2:	f7ff f903 	bl	100002dc <__clzsi2>
100010d6:	0001      	movs	r1, r0
100010d8:	0003      	movs	r3, r0
100010da:	390b      	subs	r1, #11
100010dc:	221d      	movs	r2, #29
100010de:	0018      	movs	r0, r3
100010e0:	1a52      	subs	r2, r2, r1
100010e2:	9900      	ldr	r1, [sp, #0]
100010e4:	3808      	subs	r0, #8
100010e6:	4086      	lsls	r6, r0
100010e8:	40d1      	lsrs	r1, r2
100010ea:	4331      	orrs	r1, r6
100010ec:	9e00      	ldr	r6, [sp, #0]
100010ee:	4086      	lsls	r6, r0
100010f0:	4823      	ldr	r0, [pc, #140]	; (10001180 <__aeabi_dmul+0x36c>)
100010f2:	1ac0      	subs	r0, r0, r3
100010f4:	0033      	movs	r3, r6
100010f6:	000e      	movs	r6, r1
100010f8:	e6c0      	b.n	10000e7c <__aeabi_dmul+0x68>
100010fa:	f7ff f8ef 	bl	100002dc <__clzsi2>
100010fe:	0001      	movs	r1, r0
10001100:	0003      	movs	r3, r0
10001102:	3115      	adds	r1, #21
10001104:	3320      	adds	r3, #32
10001106:	291c      	cmp	r1, #28
10001108:	dde8      	ble.n	100010dc <__aeabi_dmul+0x2c8>
1000110a:	9900      	ldr	r1, [sp, #0]
1000110c:	3808      	subs	r0, #8
1000110e:	4081      	lsls	r1, r0
10001110:	e7ee      	b.n	100010f0 <__aeabi_dmul+0x2dc>
10001112:	9b00      	ldr	r3, [sp, #0]
10001114:	4333      	orrs	r3, r6
10001116:	d007      	beq.n	10001128 <__aeabi_dmul+0x314>
10001118:	0003      	movs	r3, r0
1000111a:	0010      	movs	r0, r2
1000111c:	2203      	movs	r2, #3
1000111e:	e6ae      	b.n	10000e7e <__aeabi_dmul+0x6a>
10001120:	001e      	movs	r6, r3
10001122:	0018      	movs	r0, r3
10001124:	2201      	movs	r2, #1
10001126:	e6aa      	b.n	10000e7e <__aeabi_dmul+0x6a>
10001128:	0010      	movs	r0, r2
1000112a:	001e      	movs	r6, r3
1000112c:	2202      	movs	r2, #2
1000112e:	e6a6      	b.n	10000e7e <__aeabi_dmul+0x6a>
10001130:	2101      	movs	r1, #1
10001132:	4081      	lsls	r1, r0
10001134:	20a6      	movs	r0, #166	; 0xa6
10001136:	000f      	movs	r7, r1
10001138:	00c0      	lsls	r0, r0, #3
1000113a:	4007      	ands	r7, r0
1000113c:	4201      	tst	r1, r0
1000113e:	d127      	bne.n	10001190 <__aeabi_dmul+0x37c>
10001140:	2090      	movs	r0, #144	; 0x90
10001142:	0080      	lsls	r0, r0, #2
10001144:	4201      	tst	r1, r0
10001146:	d177      	bne.n	10001238 <__aeabi_dmul+0x424>
10001148:	38b9      	subs	r0, #185	; 0xb9
1000114a:	38ff      	subs	r0, #255	; 0xff
1000114c:	4201      	tst	r1, r0
1000114e:	d100      	bne.n	10001152 <__aeabi_dmul+0x33e>
10001150:	e6ab      	b.n	10000eaa <__aeabi_dmul+0x96>
10001152:	9904      	ldr	r1, [sp, #16]
10001154:	9100      	str	r1, [sp, #0]
10001156:	2a02      	cmp	r2, #2
10001158:	d079      	beq.n	1000124e <__aeabi_dmul+0x43a>
1000115a:	2a03      	cmp	r2, #3
1000115c:	d075      	beq.n	1000124a <__aeabi_dmul+0x436>
1000115e:	2a01      	cmp	r2, #1
10001160:	d000      	beq.n	10001164 <__aeabi_dmul+0x350>
10001162:	e74b      	b.n	10000ffc <__aeabi_dmul+0x1e8>
10001164:	2600      	movs	r6, #0
10001166:	0034      	movs	r4, r6
10001168:	0032      	movs	r2, r6
1000116a:	e76a      	b.n	10001042 <__aeabi_dmul+0x22e>
1000116c:	000007ff 	.word	0x000007ff
10001170:	fffffc01 	.word	0xfffffc01
10001174:	000003ff 	.word	0x000003ff
10001178:	feffffff 	.word	0xfeffffff
1000117c:	000007fe 	.word	0x000007fe
10001180:	fffffc0d 	.word	0xfffffc0d
10001184:	9905      	ldr	r1, [sp, #20]
10001186:	9100      	str	r1, [sp, #0]
10001188:	280f      	cmp	r0, #15
1000118a:	d005      	beq.n	10001198 <__aeabi_dmul+0x384>
1000118c:	280b      	cmp	r0, #11
1000118e:	d0e0      	beq.n	10001152 <__aeabi_dmul+0x33e>
10001190:	002e      	movs	r6, r5
10001192:	0023      	movs	r3, r4
10001194:	9a02      	ldr	r2, [sp, #8]
10001196:	e7de      	b.n	10001156 <__aeabi_dmul+0x342>
10001198:	2280      	movs	r2, #128	; 0x80
1000119a:	0312      	lsls	r2, r2, #12
1000119c:	4215      	tst	r5, r2
1000119e:	d04f      	beq.n	10001240 <__aeabi_dmul+0x42c>
100011a0:	4216      	tst	r6, r2
100011a2:	d14d      	bne.n	10001240 <__aeabi_dmul+0x42c>
100011a4:	0035      	movs	r5, r6
100011a6:	9a04      	ldr	r2, [sp, #16]
100011a8:	9200      	str	r2, [sp, #0]
100011aa:	001c      	movs	r4, r3
100011ac:	e048      	b.n	10001240 <__aeabi_dmul+0x42c>
100011ae:	9a06      	ldr	r2, [sp, #24]
100011b0:	9203      	str	r2, [sp, #12]
100011b2:	e723      	b.n	10000ffc <__aeabi_dmul+0x1e8>
100011b4:	2001      	movs	r0, #1
100011b6:	1a80      	subs	r0, r0, r2
100011b8:	2838      	cmp	r0, #56	; 0x38
100011ba:	dcd3      	bgt.n	10001164 <__aeabi_dmul+0x350>
100011bc:	281f      	cmp	r0, #31
100011be:	dc27      	bgt.n	10001210 <__aeabi_dmul+0x3fc>
100011c0:	4926      	ldr	r1, [pc, #152]	; (1000125c <__aeabi_dmul+0x448>)
100011c2:	9a03      	ldr	r2, [sp, #12]
100011c4:	468c      	mov	ip, r1
100011c6:	001c      	movs	r4, r3
100011c8:	4462      	add	r2, ip
100011ca:	0031      	movs	r1, r6
100011cc:	4093      	lsls	r3, r2
100011ce:	4091      	lsls	r1, r2
100011d0:	40c4      	lsrs	r4, r0
100011d2:	001a      	movs	r2, r3
100011d4:	4321      	orrs	r1, r4
100011d6:	1e53      	subs	r3, r2, #1
100011d8:	419a      	sbcs	r2, r3
100011da:	000b      	movs	r3, r1
100011dc:	40c6      	lsrs	r6, r0
100011de:	4313      	orrs	r3, r2
100011e0:	075a      	lsls	r2, r3, #29
100011e2:	d009      	beq.n	100011f8 <__aeabi_dmul+0x3e4>
100011e4:	220f      	movs	r2, #15
100011e6:	401a      	ands	r2, r3
100011e8:	2a04      	cmp	r2, #4
100011ea:	d005      	beq.n	100011f8 <__aeabi_dmul+0x3e4>
100011ec:	1d1a      	adds	r2, r3, #4
100011ee:	429a      	cmp	r2, r3
100011f0:	419b      	sbcs	r3, r3
100011f2:	425b      	negs	r3, r3
100011f4:	18f6      	adds	r6, r6, r3
100011f6:	0013      	movs	r3, r2
100011f8:	2180      	movs	r1, #128	; 0x80
100011fa:	0030      	movs	r0, r6
100011fc:	0409      	lsls	r1, r1, #16
100011fe:	4008      	ands	r0, r1
10001200:	420e      	tst	r6, r1
10001202:	d127      	bne.n	10001254 <__aeabi_dmul+0x440>
10001204:	0774      	lsls	r4, r6, #29
10001206:	08db      	lsrs	r3, r3, #3
10001208:	0002      	movs	r2, r0
1000120a:	431c      	orrs	r4, r3
1000120c:	08f6      	lsrs	r6, r6, #3
1000120e:	e718      	b.n	10001042 <__aeabi_dmul+0x22e>
10001210:	211f      	movs	r1, #31
10001212:	4249      	negs	r1, r1
10001214:	1a8a      	subs	r2, r1, r2
10001216:	0031      	movs	r1, r6
10001218:	40d1      	lsrs	r1, r2
1000121a:	2200      	movs	r2, #0
1000121c:	2820      	cmp	r0, #32
1000121e:	d005      	beq.n	1000122c <__aeabi_dmul+0x418>
10001220:	480f      	ldr	r0, [pc, #60]	; (10001260 <__aeabi_dmul+0x44c>)
10001222:	9a03      	ldr	r2, [sp, #12]
10001224:	4684      	mov	ip, r0
10001226:	4462      	add	r2, ip
10001228:	4096      	lsls	r6, r2
1000122a:	0032      	movs	r2, r6
1000122c:	4313      	orrs	r3, r2
1000122e:	1e5a      	subs	r2, r3, #1
10001230:	4193      	sbcs	r3, r2
10001232:	2600      	movs	r6, #0
10001234:	430b      	orrs	r3, r1
10001236:	e7d3      	b.n	100011e0 <__aeabi_dmul+0x3cc>
10001238:	2580      	movs	r5, #128	; 0x80
1000123a:	003c      	movs	r4, r7
1000123c:	032d      	lsls	r5, r5, #12
1000123e:	9700      	str	r7, [sp, #0]
10001240:	2680      	movs	r6, #128	; 0x80
10001242:	0336      	lsls	r6, r6, #12
10001244:	432e      	orrs	r6, r5
10001246:	4a07      	ldr	r2, [pc, #28]	; (10001264 <__aeabi_dmul+0x450>)
10001248:	e6fb      	b.n	10001042 <__aeabi_dmul+0x22e>
1000124a:	0035      	movs	r5, r6
1000124c:	e7ad      	b.n	100011aa <__aeabi_dmul+0x396>
1000124e:	2600      	movs	r6, #0
10001250:	0034      	movs	r4, r6
10001252:	e7f8      	b.n	10001246 <__aeabi_dmul+0x432>
10001254:	2600      	movs	r6, #0
10001256:	2201      	movs	r2, #1
10001258:	0034      	movs	r4, r6
1000125a:	e6f2      	b.n	10001042 <__aeabi_dmul+0x22e>
1000125c:	0000041e 	.word	0x0000041e
10001260:	0000043e 	.word	0x0000043e
10001264:	000007ff 	.word	0x000007ff

10001268 <__aeabi_dsub>:
10001268:	b5f0      	push	{r4, r5, r6, r7, lr}
1000126a:	b085      	sub	sp, #20
1000126c:	9200      	str	r2, [sp, #0]
1000126e:	9301      	str	r3, [sp, #4]
10001270:	0fcb      	lsrs	r3, r1, #31
10001272:	030d      	lsls	r5, r1, #12
10001274:	9302      	str	r3, [sp, #8]
10001276:	9b01      	ldr	r3, [sp, #4]
10001278:	004c      	lsls	r4, r1, #1
1000127a:	0a6d      	lsrs	r5, r5, #9
1000127c:	0f41      	lsrs	r1, r0, #29
1000127e:	4329      	orrs	r1, r5
10001280:	005d      	lsls	r5, r3, #1
10001282:	031e      	lsls	r6, r3, #12
10001284:	0d6b      	lsrs	r3, r5, #21
10001286:	469c      	mov	ip, r3
10001288:	9b01      	ldr	r3, [sp, #4]
1000128a:	0a76      	lsrs	r6, r6, #9
1000128c:	0fdd      	lsrs	r5, r3, #31
1000128e:	9b00      	ldr	r3, [sp, #0]
10001290:	9a00      	ldr	r2, [sp, #0]
10001292:	0f5b      	lsrs	r3, r3, #29
10001294:	4333      	orrs	r3, r6
10001296:	4ebe      	ldr	r6, [pc, #760]	; (10001590 <__aeabi_dsub+0x328>)
10001298:	0d64      	lsrs	r4, r4, #21
1000129a:	00c0      	lsls	r0, r0, #3
1000129c:	00d2      	lsls	r2, r2, #3
1000129e:	45b4      	cmp	ip, r6
100012a0:	d123      	bne.n	100012ea <__aeabi_dsub+0x82>
100012a2:	001e      	movs	r6, r3
100012a4:	4316      	orrs	r6, r2
100012a6:	9603      	str	r6, [sp, #12]
100012a8:	9f03      	ldr	r7, [sp, #12]
100012aa:	4eba      	ldr	r6, [pc, #744]	; (10001594 <__aeabi_dsub+0x32c>)
100012ac:	19a6      	adds	r6, r4, r6
100012ae:	2f00      	cmp	r7, #0
100012b0:	d00c      	beq.n	100012cc <__aeabi_dsub+0x64>
100012b2:	9f02      	ldr	r7, [sp, #8]
100012b4:	9500      	str	r5, [sp, #0]
100012b6:	42af      	cmp	r7, r5
100012b8:	d000      	beq.n	100012bc <__aeabi_dsub+0x54>
100012ba:	e1b5      	b.n	10001628 <__aeabi_dsub+0x3c0>
100012bc:	2e00      	cmp	r6, #0
100012be:	d100      	bne.n	100012c2 <__aeabi_dsub+0x5a>
100012c0:	e104      	b.n	100014cc <__aeabi_dsub+0x264>
100012c2:	2c00      	cmp	r4, #0
100012c4:	d000      	beq.n	100012c8 <__aeabi_dsub+0x60>
100012c6:	e2ba      	b.n	1000183e <__aeabi_dsub+0x5d6>
100012c8:	4664      	mov	r4, ip
100012ca:	e0b8      	b.n	1000143e <__aeabi_dsub+0x1d6>
100012cc:	2701      	movs	r7, #1
100012ce:	406f      	eors	r7, r5
100012d0:	9d02      	ldr	r5, [sp, #8]
100012d2:	9700      	str	r7, [sp, #0]
100012d4:	42bd      	cmp	r5, r7
100012d6:	d000      	beq.n	100012da <__aeabi_dsub+0x72>
100012d8:	e1af      	b.n	1000163a <__aeabi_dsub+0x3d2>
100012da:	2e00      	cmp	r6, #0
100012dc:	d100      	bne.n	100012e0 <__aeabi_dsub+0x78>
100012de:	e0f5      	b.n	100014cc <__aeabi_dsub+0x264>
100012e0:	2c00      	cmp	r4, #0
100012e2:	d0f1      	beq.n	100012c8 <__aeabi_dsub+0x60>
100012e4:	9903      	ldr	r1, [sp, #12]
100012e6:	0008      	movs	r0, r1
100012e8:	e02f      	b.n	1000134a <__aeabi_dsub+0xe2>
100012ea:	2601      	movs	r6, #1
100012ec:	4075      	eors	r5, r6
100012ee:	9500      	str	r5, [sp, #0]
100012f0:	4665      	mov	r5, ip
100012f2:	9f02      	ldr	r7, [sp, #8]
100012f4:	9e00      	ldr	r6, [sp, #0]
100012f6:	1b65      	subs	r5, r4, r5
100012f8:	42b7      	cmp	r7, r6
100012fa:	d000      	beq.n	100012fe <__aeabi_dsub+0x96>
100012fc:	e12e      	b.n	1000155c <__aeabi_dsub+0x2f4>
100012fe:	2d00      	cmp	r5, #0
10001300:	dc00      	bgt.n	10001304 <__aeabi_dsub+0x9c>
10001302:	e076      	b.n	100013f2 <__aeabi_dsub+0x18a>
10001304:	4667      	mov	r7, ip
10001306:	2f00      	cmp	r7, #0
10001308:	d121      	bne.n	1000134e <__aeabi_dsub+0xe6>
1000130a:	001f      	movs	r7, r3
1000130c:	4317      	orrs	r7, r2
1000130e:	d100      	bne.n	10001312 <__aeabi_dsub+0xaa>
10001310:	e122      	b.n	10001558 <__aeabi_dsub+0x2f0>
10001312:	1e6f      	subs	r7, r5, #1
10001314:	2d01      	cmp	r5, #1
10001316:	d115      	bne.n	10001344 <__aeabi_dsub+0xdc>
10001318:	1882      	adds	r2, r0, r2
1000131a:	4282      	cmp	r2, r0
1000131c:	4180      	sbcs	r0, r0
1000131e:	18c9      	adds	r1, r1, r3
10001320:	4240      	negs	r0, r0
10001322:	1809      	adds	r1, r1, r0
10001324:	2401      	movs	r4, #1
10001326:	0010      	movs	r0, r2
10001328:	020b      	lsls	r3, r1, #8
1000132a:	d400      	bmi.n	1000132e <__aeabi_dsub+0xc6>
1000132c:	e096      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000132e:	2402      	movs	r4, #2
10001330:	4b99      	ldr	r3, [pc, #612]	; (10001598 <__aeabi_dsub+0x330>)
10001332:	0842      	lsrs	r2, r0, #1
10001334:	400b      	ands	r3, r1
10001336:	2101      	movs	r1, #1
10001338:	4001      	ands	r1, r0
1000133a:	430a      	orrs	r2, r1
1000133c:	07d8      	lsls	r0, r3, #31
1000133e:	4310      	orrs	r0, r2
10001340:	0859      	lsrs	r1, r3, #1
10001342:	e08b      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001344:	4e92      	ldr	r6, [pc, #584]	; (10001590 <__aeabi_dsub+0x328>)
10001346:	42b5      	cmp	r5, r6
10001348:	d122      	bne.n	10001390 <__aeabi_dsub+0x128>
1000134a:	4c91      	ldr	r4, [pc, #580]	; (10001590 <__aeabi_dsub+0x328>)
1000134c:	e086      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000134e:	4e90      	ldr	r6, [pc, #576]	; (10001590 <__aeabi_dsub+0x328>)
10001350:	42b4      	cmp	r4, r6
10001352:	d100      	bne.n	10001356 <__aeabi_dsub+0xee>
10001354:	e082      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001356:	2600      	movs	r6, #0
10001358:	46b4      	mov	ip, r6
1000135a:	3601      	adds	r6, #1
1000135c:	2d38      	cmp	r5, #56	; 0x38
1000135e:	dc1a      	bgt.n	10001396 <__aeabi_dsub+0x12e>
10001360:	2680      	movs	r6, #128	; 0x80
10001362:	002f      	movs	r7, r5
10001364:	0436      	lsls	r6, r6, #16
10001366:	4333      	orrs	r3, r6
10001368:	2f1f      	cmp	r7, #31
1000136a:	dc31      	bgt.n	100013d0 <__aeabi_dsub+0x168>
1000136c:	2520      	movs	r5, #32
1000136e:	001e      	movs	r6, r3
10001370:	1bed      	subs	r5, r5, r7
10001372:	40ae      	lsls	r6, r5
10001374:	46b4      	mov	ip, r6
10001376:	0016      	movs	r6, r2
10001378:	9500      	str	r5, [sp, #0]
1000137a:	40fe      	lsrs	r6, r7
1000137c:	4665      	mov	r5, ip
1000137e:	432e      	orrs	r6, r5
10001380:	9d00      	ldr	r5, [sp, #0]
10001382:	40fb      	lsrs	r3, r7
10001384:	40aa      	lsls	r2, r5
10001386:	1e55      	subs	r5, r2, #1
10001388:	41aa      	sbcs	r2, r5
1000138a:	4316      	orrs	r6, r2
1000138c:	469c      	mov	ip, r3
1000138e:	e002      	b.n	10001396 <__aeabi_dsub+0x12e>
10001390:	2601      	movs	r6, #1
10001392:	2f38      	cmp	r7, #56	; 0x38
10001394:	dde8      	ble.n	10001368 <__aeabi_dsub+0x100>
10001396:	1836      	adds	r6, r6, r0
10001398:	4286      	cmp	r6, r0
1000139a:	4180      	sbcs	r0, r0
1000139c:	4461      	add	r1, ip
1000139e:	4240      	negs	r0, r0
100013a0:	1809      	adds	r1, r1, r0
100013a2:	0030      	movs	r0, r6
100013a4:	020b      	lsls	r3, r1, #8
100013a6:	d559      	bpl.n	1000145c <__aeabi_dsub+0x1f4>
100013a8:	2600      	movs	r6, #0
100013aa:	4b79      	ldr	r3, [pc, #484]	; (10001590 <__aeabi_dsub+0x328>)
100013ac:	3401      	adds	r4, #1
100013ae:	46b4      	mov	ip, r6
100013b0:	429c      	cmp	r4, r3
100013b2:	d1bd      	bne.n	10001330 <__aeabi_dsub+0xc8>
100013b4:	4b79      	ldr	r3, [pc, #484]	; (1000159c <__aeabi_dsub+0x334>)
100013b6:	0524      	lsls	r4, r4, #20
100013b8:	401c      	ands	r4, r3
100013ba:	4663      	mov	r3, ip
100013bc:	031b      	lsls	r3, r3, #12
100013be:	0b1b      	lsrs	r3, r3, #12
100013c0:	431c      	orrs	r4, r3
100013c2:	9b02      	ldr	r3, [sp, #8]
100013c4:	0030      	movs	r0, r6
100013c6:	07db      	lsls	r3, r3, #31
100013c8:	431c      	orrs	r4, r3
100013ca:	0021      	movs	r1, r4
100013cc:	b005      	add	sp, #20
100013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100013d0:	003d      	movs	r5, r7
100013d2:	001e      	movs	r6, r3
100013d4:	3d20      	subs	r5, #32
100013d6:	40ee      	lsrs	r6, r5
100013d8:	2500      	movs	r5, #0
100013da:	2f20      	cmp	r7, #32
100013dc:	d003      	beq.n	100013e6 <__aeabi_dsub+0x17e>
100013de:	3540      	adds	r5, #64	; 0x40
100013e0:	1bed      	subs	r5, r5, r7
100013e2:	40ab      	lsls	r3, r5
100013e4:	001d      	movs	r5, r3
100013e6:	4315      	orrs	r5, r2
100013e8:	1e6b      	subs	r3, r5, #1
100013ea:	419d      	sbcs	r5, r3
100013ec:	2300      	movs	r3, #0
100013ee:	432e      	orrs	r6, r5
100013f0:	e7cc      	b.n	1000138c <__aeabi_dsub+0x124>
100013f2:	2d00      	cmp	r5, #0
100013f4:	d06a      	beq.n	100014cc <__aeabi_dsub+0x264>
100013f6:	4665      	mov	r5, ip
100013f8:	1b2d      	subs	r5, r5, r4
100013fa:	2c00      	cmp	r4, #0
100013fc:	d01e      	beq.n	1000143c <__aeabi_dsub+0x1d4>
100013fe:	2400      	movs	r4, #0
10001400:	2601      	movs	r6, #1
10001402:	2d38      	cmp	r5, #56	; 0x38
10001404:	dc12      	bgt.n	1000142c <__aeabi_dsub+0x1c4>
10001406:	2480      	movs	r4, #128	; 0x80
10001408:	0424      	lsls	r4, r4, #16
1000140a:	4321      	orrs	r1, r4
1000140c:	2d1f      	cmp	r5, #31
1000140e:	dc4b      	bgt.n	100014a8 <__aeabi_dsub+0x240>
10001410:	2420      	movs	r4, #32
10001412:	000f      	movs	r7, r1
10001414:	0006      	movs	r6, r0
10001416:	1b64      	subs	r4, r4, r5
10001418:	40a0      	lsls	r0, r4
1000141a:	40a7      	lsls	r7, r4
1000141c:	40ee      	lsrs	r6, r5
1000141e:	4337      	orrs	r7, r6
10001420:	0006      	movs	r6, r0
10001422:	40e9      	lsrs	r1, r5
10001424:	1e70      	subs	r0, r6, #1
10001426:	4186      	sbcs	r6, r0
10001428:	000c      	movs	r4, r1
1000142a:	433e      	orrs	r6, r7
1000142c:	18b0      	adds	r0, r6, r2
1000142e:	4290      	cmp	r0, r2
10001430:	4192      	sbcs	r2, r2
10001432:	18e4      	adds	r4, r4, r3
10001434:	4252      	negs	r2, r2
10001436:	18a1      	adds	r1, r4, r2
10001438:	4664      	mov	r4, ip
1000143a:	e7b3      	b.n	100013a4 <__aeabi_dsub+0x13c>
1000143c:	002c      	movs	r4, r5
1000143e:	000d      	movs	r5, r1
10001440:	4305      	orrs	r5, r0
10001442:	d029      	beq.n	10001498 <__aeabi_dsub+0x230>
10001444:	1e65      	subs	r5, r4, #1
10001446:	2c01      	cmp	r4, #1
10001448:	d123      	bne.n	10001492 <__aeabi_dsub+0x22a>
1000144a:	1880      	adds	r0, r0, r2
1000144c:	4290      	cmp	r0, r2
1000144e:	4192      	sbcs	r2, r2
10001450:	18c9      	adds	r1, r1, r3
10001452:	4252      	negs	r2, r2
10001454:	1889      	adds	r1, r1, r2
10001456:	020b      	lsls	r3, r1, #8
10001458:	d500      	bpl.n	1000145c <__aeabi_dsub+0x1f4>
1000145a:	e768      	b.n	1000132e <__aeabi_dsub+0xc6>
1000145c:	0743      	lsls	r3, r0, #29
1000145e:	d009      	beq.n	10001474 <__aeabi_dsub+0x20c>
10001460:	230f      	movs	r3, #15
10001462:	4003      	ands	r3, r0
10001464:	2b04      	cmp	r3, #4
10001466:	d005      	beq.n	10001474 <__aeabi_dsub+0x20c>
10001468:	1d03      	adds	r3, r0, #4
1000146a:	4283      	cmp	r3, r0
1000146c:	4180      	sbcs	r0, r0
1000146e:	4240      	negs	r0, r0
10001470:	1809      	adds	r1, r1, r0
10001472:	0018      	movs	r0, r3
10001474:	020b      	lsls	r3, r1, #8
10001476:	d400      	bmi.n	1000147a <__aeabi_dsub+0x212>
10001478:	e1e4      	b.n	10001844 <__aeabi_dsub+0x5dc>
1000147a:	2600      	movs	r6, #0
1000147c:	4b44      	ldr	r3, [pc, #272]	; (10001590 <__aeabi_dsub+0x328>)
1000147e:	3401      	adds	r4, #1
10001480:	46b4      	mov	ip, r6
10001482:	429c      	cmp	r4, r3
10001484:	d096      	beq.n	100013b4 <__aeabi_dsub+0x14c>
10001486:	4b44      	ldr	r3, [pc, #272]	; (10001598 <__aeabi_dsub+0x330>)
10001488:	08c0      	lsrs	r0, r0, #3
1000148a:	400b      	ands	r3, r1
1000148c:	075e      	lsls	r6, r3, #29
1000148e:	4306      	orrs	r6, r0
10001490:	e1cd      	b.n	1000182e <__aeabi_dsub+0x5c6>
10001492:	4e3f      	ldr	r6, [pc, #252]	; (10001590 <__aeabi_dsub+0x328>)
10001494:	42b4      	cmp	r4, r6
10001496:	d102      	bne.n	1000149e <__aeabi_dsub+0x236>
10001498:	0019      	movs	r1, r3
1000149a:	0010      	movs	r0, r2
1000149c:	e7de      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000149e:	2d38      	cmp	r5, #56	; 0x38
100014a0:	ddb4      	ble.n	1000140c <__aeabi_dsub+0x1a4>
100014a2:	2400      	movs	r4, #0
100014a4:	2601      	movs	r6, #1
100014a6:	e7c1      	b.n	1000142c <__aeabi_dsub+0x1c4>
100014a8:	002c      	movs	r4, r5
100014aa:	000e      	movs	r6, r1
100014ac:	3c20      	subs	r4, #32
100014ae:	40e6      	lsrs	r6, r4
100014b0:	0034      	movs	r4, r6
100014b2:	2600      	movs	r6, #0
100014b4:	2d20      	cmp	r5, #32
100014b6:	d003      	beq.n	100014c0 <__aeabi_dsub+0x258>
100014b8:	3640      	adds	r6, #64	; 0x40
100014ba:	1b76      	subs	r6, r6, r5
100014bc:	40b1      	lsls	r1, r6
100014be:	000e      	movs	r6, r1
100014c0:	4306      	orrs	r6, r0
100014c2:	1e71      	subs	r1, r6, #1
100014c4:	418e      	sbcs	r6, r1
100014c6:	4326      	orrs	r6, r4
100014c8:	2400      	movs	r4, #0
100014ca:	e7af      	b.n	1000142c <__aeabi_dsub+0x1c4>
100014cc:	4e34      	ldr	r6, [pc, #208]	; (100015a0 <__aeabi_dsub+0x338>)
100014ce:	1c65      	adds	r5, r4, #1
100014d0:	4235      	tst	r5, r6
100014d2:	d133      	bne.n	1000153c <__aeabi_dsub+0x2d4>
100014d4:	000d      	movs	r5, r1
100014d6:	4305      	orrs	r5, r0
100014d8:	2c00      	cmp	r4, #0
100014da:	d111      	bne.n	10001500 <__aeabi_dsub+0x298>
100014dc:	2d00      	cmp	r5, #0
100014de:	d0db      	beq.n	10001498 <__aeabi_dsub+0x230>
100014e0:	001d      	movs	r5, r3
100014e2:	4315      	orrs	r5, r2
100014e4:	d0ba      	beq.n	1000145c <__aeabi_dsub+0x1f4>
100014e6:	1882      	adds	r2, r0, r2
100014e8:	4282      	cmp	r2, r0
100014ea:	4180      	sbcs	r0, r0
100014ec:	18c9      	adds	r1, r1, r3
100014ee:	4240      	negs	r0, r0
100014f0:	1809      	adds	r1, r1, r0
100014f2:	0010      	movs	r0, r2
100014f4:	020b      	lsls	r3, r1, #8
100014f6:	d5b1      	bpl.n	1000145c <__aeabi_dsub+0x1f4>
100014f8:	4b27      	ldr	r3, [pc, #156]	; (10001598 <__aeabi_dsub+0x330>)
100014fa:	3401      	adds	r4, #1
100014fc:	4019      	ands	r1, r3
100014fe:	e7ad      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001500:	2d00      	cmp	r5, #0
10001502:	d100      	bne.n	10001506 <__aeabi_dsub+0x29e>
10001504:	e19b      	b.n	1000183e <__aeabi_dsub+0x5d6>
10001506:	001c      	movs	r4, r3
10001508:	4314      	orrs	r4, r2
1000150a:	2c00      	cmp	r4, #0
1000150c:	d100      	bne.n	10001510 <__aeabi_dsub+0x2a8>
1000150e:	e71c      	b.n	1000134a <__aeabi_dsub+0xe2>
10001510:	074c      	lsls	r4, r1, #29
10001512:	08c0      	lsrs	r0, r0, #3
10001514:	4320      	orrs	r0, r4
10001516:	2480      	movs	r4, #128	; 0x80
10001518:	08c9      	lsrs	r1, r1, #3
1000151a:	0324      	lsls	r4, r4, #12
1000151c:	4221      	tst	r1, r4
1000151e:	d008      	beq.n	10001532 <__aeabi_dsub+0x2ca>
10001520:	08dd      	lsrs	r5, r3, #3
10001522:	4225      	tst	r5, r4
10001524:	d105      	bne.n	10001532 <__aeabi_dsub+0x2ca>
10001526:	0029      	movs	r1, r5
10001528:	075b      	lsls	r3, r3, #29
1000152a:	08d0      	lsrs	r0, r2, #3
1000152c:	4318      	orrs	r0, r3
1000152e:	9b00      	ldr	r3, [sp, #0]
10001530:	9302      	str	r3, [sp, #8]
10001532:	00cb      	lsls	r3, r1, #3
10001534:	0f41      	lsrs	r1, r0, #29
10001536:	4319      	orrs	r1, r3
10001538:	00c0      	lsls	r0, r0, #3
1000153a:	e706      	b.n	1000134a <__aeabi_dsub+0xe2>
1000153c:	4c14      	ldr	r4, [pc, #80]	; (10001590 <__aeabi_dsub+0x328>)
1000153e:	42a5      	cmp	r5, r4
10001540:	d100      	bne.n	10001544 <__aeabi_dsub+0x2dc>
10001542:	e196      	b.n	10001872 <__aeabi_dsub+0x60a>
10001544:	1882      	adds	r2, r0, r2
10001546:	4282      	cmp	r2, r0
10001548:	4180      	sbcs	r0, r0
1000154a:	18cb      	adds	r3, r1, r3
1000154c:	4240      	negs	r0, r0
1000154e:	181b      	adds	r3, r3, r0
10001550:	07d8      	lsls	r0, r3, #31
10001552:	0852      	lsrs	r2, r2, #1
10001554:	4310      	orrs	r0, r2
10001556:	0859      	lsrs	r1, r3, #1
10001558:	002c      	movs	r4, r5
1000155a:	e77f      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000155c:	2d00      	cmp	r5, #0
1000155e:	dd76      	ble.n	1000164e <__aeabi_dsub+0x3e6>
10001560:	4666      	mov	r6, ip
10001562:	2e00      	cmp	r6, #0
10001564:	d12e      	bne.n	100015c4 <__aeabi_dsub+0x35c>
10001566:	001f      	movs	r7, r3
10001568:	4317      	orrs	r7, r2
1000156a:	d0f5      	beq.n	10001558 <__aeabi_dsub+0x2f0>
1000156c:	1e6f      	subs	r7, r5, #1
1000156e:	2d01      	cmp	r5, #1
10001570:	d118      	bne.n	100015a4 <__aeabi_dsub+0x33c>
10001572:	1a82      	subs	r2, r0, r2
10001574:	4290      	cmp	r0, r2
10001576:	4180      	sbcs	r0, r0
10001578:	1ac9      	subs	r1, r1, r3
1000157a:	4240      	negs	r0, r0
1000157c:	1a09      	subs	r1, r1, r0
1000157e:	2401      	movs	r4, #1
10001580:	0010      	movs	r0, r2
10001582:	020b      	lsls	r3, r1, #8
10001584:	d400      	bmi.n	10001588 <__aeabi_dsub+0x320>
10001586:	e769      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001588:	0249      	lsls	r1, r1, #9
1000158a:	0006      	movs	r6, r0
1000158c:	0a4d      	lsrs	r5, r1, #9
1000158e:	e102      	b.n	10001796 <__aeabi_dsub+0x52e>
10001590:	000007ff 	.word	0x000007ff
10001594:	fffff801 	.word	0xfffff801
10001598:	ff7fffff 	.word	0xff7fffff
1000159c:	7ff00000 	.word	0x7ff00000
100015a0:	000007fe 	.word	0x000007fe
100015a4:	4eb7      	ldr	r6, [pc, #732]	; (10001884 <__aeabi_dsub+0x61c>)
100015a6:	42b5      	cmp	r5, r6
100015a8:	d100      	bne.n	100015ac <__aeabi_dsub+0x344>
100015aa:	e6ce      	b.n	1000134a <__aeabi_dsub+0xe2>
100015ac:	2601      	movs	r6, #1
100015ae:	2f38      	cmp	r7, #56	; 0x38
100015b0:	dd15      	ble.n	100015de <__aeabi_dsub+0x376>
100015b2:	1b86      	subs	r6, r0, r6
100015b4:	4663      	mov	r3, ip
100015b6:	42b0      	cmp	r0, r6
100015b8:	4180      	sbcs	r0, r0
100015ba:	1ac9      	subs	r1, r1, r3
100015bc:	4240      	negs	r0, r0
100015be:	1a09      	subs	r1, r1, r0
100015c0:	0030      	movs	r0, r6
100015c2:	e7de      	b.n	10001582 <__aeabi_dsub+0x31a>
100015c4:	4eaf      	ldr	r6, [pc, #700]	; (10001884 <__aeabi_dsub+0x61c>)
100015c6:	42b4      	cmp	r4, r6
100015c8:	d100      	bne.n	100015cc <__aeabi_dsub+0x364>
100015ca:	e747      	b.n	1000145c <__aeabi_dsub+0x1f4>
100015cc:	2600      	movs	r6, #0
100015ce:	46b4      	mov	ip, r6
100015d0:	3601      	adds	r6, #1
100015d2:	2d38      	cmp	r5, #56	; 0x38
100015d4:	dced      	bgt.n	100015b2 <__aeabi_dsub+0x34a>
100015d6:	2680      	movs	r6, #128	; 0x80
100015d8:	002f      	movs	r7, r5
100015da:	0436      	lsls	r6, r6, #16
100015dc:	4333      	orrs	r3, r6
100015de:	2f1f      	cmp	r7, #31
100015e0:	dc11      	bgt.n	10001606 <__aeabi_dsub+0x39e>
100015e2:	2520      	movs	r5, #32
100015e4:	001e      	movs	r6, r3
100015e6:	1bed      	subs	r5, r5, r7
100015e8:	40ae      	lsls	r6, r5
100015ea:	46b4      	mov	ip, r6
100015ec:	0016      	movs	r6, r2
100015ee:	9500      	str	r5, [sp, #0]
100015f0:	40fe      	lsrs	r6, r7
100015f2:	4665      	mov	r5, ip
100015f4:	432e      	orrs	r6, r5
100015f6:	9d00      	ldr	r5, [sp, #0]
100015f8:	40fb      	lsrs	r3, r7
100015fa:	40aa      	lsls	r2, r5
100015fc:	1e55      	subs	r5, r2, #1
100015fe:	41aa      	sbcs	r2, r5
10001600:	4316      	orrs	r6, r2
10001602:	469c      	mov	ip, r3
10001604:	e7d5      	b.n	100015b2 <__aeabi_dsub+0x34a>
10001606:	003d      	movs	r5, r7
10001608:	001e      	movs	r6, r3
1000160a:	3d20      	subs	r5, #32
1000160c:	40ee      	lsrs	r6, r5
1000160e:	2500      	movs	r5, #0
10001610:	2f20      	cmp	r7, #32
10001612:	d003      	beq.n	1000161c <__aeabi_dsub+0x3b4>
10001614:	3540      	adds	r5, #64	; 0x40
10001616:	1bed      	subs	r5, r5, r7
10001618:	40ab      	lsls	r3, r5
1000161a:	001d      	movs	r5, r3
1000161c:	4315      	orrs	r5, r2
1000161e:	1e6b      	subs	r3, r5, #1
10001620:	419d      	sbcs	r5, r3
10001622:	2300      	movs	r3, #0
10001624:	432e      	orrs	r6, r5
10001626:	e7ec      	b.n	10001602 <__aeabi_dsub+0x39a>
10001628:	2e00      	cmp	r6, #0
1000162a:	d067      	beq.n	100016fc <__aeabi_dsub+0x494>
1000162c:	2c00      	cmp	r4, #0
1000162e:	d025      	beq.n	1000167c <__aeabi_dsub+0x414>
10001630:	0019      	movs	r1, r3
10001632:	0010      	movs	r0, r2
10001634:	4c93      	ldr	r4, [pc, #588]	; (10001884 <__aeabi_dsub+0x61c>)
10001636:	9502      	str	r5, [sp, #8]
10001638:	e710      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000163a:	2e00      	cmp	r6, #0
1000163c:	d05e      	beq.n	100016fc <__aeabi_dsub+0x494>
1000163e:	2c00      	cmp	r4, #0
10001640:	d01f      	beq.n	10001682 <__aeabi_dsub+0x41a>
10001642:	9903      	ldr	r1, [sp, #12]
10001644:	4c8f      	ldr	r4, [pc, #572]	; (10001884 <__aeabi_dsub+0x61c>)
10001646:	0008      	movs	r0, r1
10001648:	9b00      	ldr	r3, [sp, #0]
1000164a:	9302      	str	r3, [sp, #8]
1000164c:	e706      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000164e:	2d00      	cmp	r5, #0
10001650:	d054      	beq.n	100016fc <__aeabi_dsub+0x494>
10001652:	4665      	mov	r5, ip
10001654:	1b2d      	subs	r5, r5, r4
10001656:	2c00      	cmp	r4, #0
10001658:	d11f      	bne.n	1000169a <__aeabi_dsub+0x432>
1000165a:	9c00      	ldr	r4, [sp, #0]
1000165c:	9402      	str	r4, [sp, #8]
1000165e:	002c      	movs	r4, r5
10001660:	000d      	movs	r5, r1
10001662:	4305      	orrs	r5, r0
10001664:	d100      	bne.n	10001668 <__aeabi_dsub+0x400>
10001666:	e717      	b.n	10001498 <__aeabi_dsub+0x230>
10001668:	1e65      	subs	r5, r4, #1
1000166a:	2c01      	cmp	r4, #1
1000166c:	d10c      	bne.n	10001688 <__aeabi_dsub+0x420>
1000166e:	1a10      	subs	r0, r2, r0
10001670:	4282      	cmp	r2, r0
10001672:	4192      	sbcs	r2, r2
10001674:	1a59      	subs	r1, r3, r1
10001676:	4252      	negs	r2, r2
10001678:	1a89      	subs	r1, r1, r2
1000167a:	e782      	b.n	10001582 <__aeabi_dsub+0x31a>
1000167c:	9502      	str	r5, [sp, #8]
1000167e:	4664      	mov	r4, ip
10001680:	e7ee      	b.n	10001660 <__aeabi_dsub+0x3f8>
10001682:	9c00      	ldr	r4, [sp, #0]
10001684:	9402      	str	r4, [sp, #8]
10001686:	e7fa      	b.n	1000167e <__aeabi_dsub+0x416>
10001688:	4e7e      	ldr	r6, [pc, #504]	; (10001884 <__aeabi_dsub+0x61c>)
1000168a:	42b4      	cmp	r4, r6
1000168c:	d100      	bne.n	10001690 <__aeabi_dsub+0x428>
1000168e:	e703      	b.n	10001498 <__aeabi_dsub+0x230>
10001690:	2d38      	cmp	r5, #56	; 0x38
10001692:	dd09      	ble.n	100016a8 <__aeabi_dsub+0x440>
10001694:	2100      	movs	r1, #0
10001696:	2601      	movs	r6, #1
10001698:	e014      	b.n	100016c4 <__aeabi_dsub+0x45c>
1000169a:	2d38      	cmp	r5, #56	; 0x38
1000169c:	dc2b      	bgt.n	100016f6 <__aeabi_dsub+0x48e>
1000169e:	2480      	movs	r4, #128	; 0x80
100016a0:	0424      	lsls	r4, r4, #16
100016a2:	4321      	orrs	r1, r4
100016a4:	9c00      	ldr	r4, [sp, #0]
100016a6:	9402      	str	r4, [sp, #8]
100016a8:	2d1f      	cmp	r5, #31
100016aa:	dc13      	bgt.n	100016d4 <__aeabi_dsub+0x46c>
100016ac:	2420      	movs	r4, #32
100016ae:	000f      	movs	r7, r1
100016b0:	1b64      	subs	r4, r4, r5
100016b2:	0006      	movs	r6, r0
100016b4:	40a0      	lsls	r0, r4
100016b6:	40a7      	lsls	r7, r4
100016b8:	40ee      	lsrs	r6, r5
100016ba:	1e44      	subs	r4, r0, #1
100016bc:	41a0      	sbcs	r0, r4
100016be:	40e9      	lsrs	r1, r5
100016c0:	433e      	orrs	r6, r7
100016c2:	4306      	orrs	r6, r0
100016c4:	1b90      	subs	r0, r2, r6
100016c6:	4282      	cmp	r2, r0
100016c8:	4192      	sbcs	r2, r2
100016ca:	1a59      	subs	r1, r3, r1
100016cc:	4252      	negs	r2, r2
100016ce:	4664      	mov	r4, ip
100016d0:	1a89      	subs	r1, r1, r2
100016d2:	e756      	b.n	10001582 <__aeabi_dsub+0x31a>
100016d4:	002c      	movs	r4, r5
100016d6:	000e      	movs	r6, r1
100016d8:	3c20      	subs	r4, #32
100016da:	40e6      	lsrs	r6, r4
100016dc:	2400      	movs	r4, #0
100016de:	2d20      	cmp	r5, #32
100016e0:	d003      	beq.n	100016ea <__aeabi_dsub+0x482>
100016e2:	3440      	adds	r4, #64	; 0x40
100016e4:	1b64      	subs	r4, r4, r5
100016e6:	40a1      	lsls	r1, r4
100016e8:	000c      	movs	r4, r1
100016ea:	4304      	orrs	r4, r0
100016ec:	1e61      	subs	r1, r4, #1
100016ee:	418c      	sbcs	r4, r1
100016f0:	2100      	movs	r1, #0
100016f2:	4326      	orrs	r6, r4
100016f4:	e7e6      	b.n	100016c4 <__aeabi_dsub+0x45c>
100016f6:	9900      	ldr	r1, [sp, #0]
100016f8:	9102      	str	r1, [sp, #8]
100016fa:	e7cb      	b.n	10001694 <__aeabi_dsub+0x42c>
100016fc:	4e62      	ldr	r6, [pc, #392]	; (10001888 <__aeabi_dsub+0x620>)
100016fe:	1c65      	adds	r5, r4, #1
10001700:	4235      	tst	r5, r6
10001702:	d138      	bne.n	10001776 <__aeabi_dsub+0x50e>
10001704:	001d      	movs	r5, r3
10001706:	4315      	orrs	r5, r2
10001708:	46ac      	mov	ip, r5
1000170a:	000d      	movs	r5, r1
1000170c:	4305      	orrs	r5, r0
1000170e:	2c00      	cmp	r4, #0
10001710:	d125      	bne.n	1000175e <__aeabi_dsub+0x4f6>
10001712:	2d00      	cmp	r5, #0
10001714:	d108      	bne.n	10001728 <__aeabi_dsub+0x4c0>
10001716:	4661      	mov	r1, ip
10001718:	0026      	movs	r6, r4
1000171a:	9402      	str	r4, [sp, #8]
1000171c:	2900      	cmp	r1, #0
1000171e:	d100      	bne.n	10001722 <__aeabi_dsub+0x4ba>
10001720:	e648      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001722:	0019      	movs	r1, r3
10001724:	0010      	movs	r0, r2
10001726:	e78f      	b.n	10001648 <__aeabi_dsub+0x3e0>
10001728:	4665      	mov	r5, ip
1000172a:	2d00      	cmp	r5, #0
1000172c:	d100      	bne.n	10001730 <__aeabi_dsub+0x4c8>
1000172e:	e695      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001730:	1a86      	subs	r6, r0, r2
10001732:	42b0      	cmp	r0, r6
10001734:	41bf      	sbcs	r7, r7
10001736:	1acd      	subs	r5, r1, r3
10001738:	427f      	negs	r7, r7
1000173a:	1bed      	subs	r5, r5, r7
1000173c:	022f      	lsls	r7, r5, #8
1000173e:	d506      	bpl.n	1000174e <__aeabi_dsub+0x4e6>
10001740:	1a10      	subs	r0, r2, r0
10001742:	4282      	cmp	r2, r0
10001744:	4192      	sbcs	r2, r2
10001746:	1a59      	subs	r1, r3, r1
10001748:	4252      	negs	r2, r2
1000174a:	1a89      	subs	r1, r1, r2
1000174c:	e77c      	b.n	10001648 <__aeabi_dsub+0x3e0>
1000174e:	0033      	movs	r3, r6
10001750:	432b      	orrs	r3, r5
10001752:	469c      	mov	ip, r3
10001754:	d100      	bne.n	10001758 <__aeabi_dsub+0x4f0>
10001756:	e08f      	b.n	10001878 <__aeabi_dsub+0x610>
10001758:	0029      	movs	r1, r5
1000175a:	0030      	movs	r0, r6
1000175c:	e67e      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000175e:	2d00      	cmp	r5, #0
10001760:	d107      	bne.n	10001772 <__aeabi_dsub+0x50a>
10001762:	4661      	mov	r1, ip
10001764:	2900      	cmp	r1, #0
10001766:	d07a      	beq.n	1000185e <__aeabi_dsub+0x5f6>
10001768:	0019      	movs	r1, r3
1000176a:	9b00      	ldr	r3, [sp, #0]
1000176c:	0010      	movs	r0, r2
1000176e:	9302      	str	r3, [sp, #8]
10001770:	e5eb      	b.n	1000134a <__aeabi_dsub+0xe2>
10001772:	4664      	mov	r4, ip
10001774:	e6c9      	b.n	1000150a <__aeabi_dsub+0x2a2>
10001776:	1a86      	subs	r6, r0, r2
10001778:	42b0      	cmp	r0, r6
1000177a:	41bf      	sbcs	r7, r7
1000177c:	1acd      	subs	r5, r1, r3
1000177e:	427f      	negs	r7, r7
10001780:	1bed      	subs	r5, r5, r7
10001782:	022f      	lsls	r7, r5, #8
10001784:	d528      	bpl.n	100017d8 <__aeabi_dsub+0x570>
10001786:	1a16      	subs	r6, r2, r0
10001788:	42b2      	cmp	r2, r6
1000178a:	4192      	sbcs	r2, r2
1000178c:	1a5b      	subs	r3, r3, r1
1000178e:	4252      	negs	r2, r2
10001790:	1a9d      	subs	r5, r3, r2
10001792:	9b00      	ldr	r3, [sp, #0]
10001794:	9302      	str	r3, [sp, #8]
10001796:	2d00      	cmp	r5, #0
10001798:	d026      	beq.n	100017e8 <__aeabi_dsub+0x580>
1000179a:	0028      	movs	r0, r5
1000179c:	f7fe fd9e 	bl	100002dc <__clzsi2>
100017a0:	0003      	movs	r3, r0
100017a2:	3b08      	subs	r3, #8
100017a4:	2220      	movs	r2, #32
100017a6:	0031      	movs	r1, r6
100017a8:	1ad2      	subs	r2, r2, r3
100017aa:	409d      	lsls	r5, r3
100017ac:	40d1      	lsrs	r1, r2
100017ae:	4329      	orrs	r1, r5
100017b0:	0035      	movs	r5, r6
100017b2:	409d      	lsls	r5, r3
100017b4:	429c      	cmp	r4, r3
100017b6:	dc3d      	bgt.n	10001834 <__aeabi_dsub+0x5cc>
100017b8:	1b1a      	subs	r2, r3, r4
100017ba:	3201      	adds	r2, #1
100017bc:	2320      	movs	r3, #32
100017be:	0008      	movs	r0, r1
100017c0:	1a9b      	subs	r3, r3, r2
100017c2:	002c      	movs	r4, r5
100017c4:	409d      	lsls	r5, r3
100017c6:	4098      	lsls	r0, r3
100017c8:	40d4      	lsrs	r4, r2
100017ca:	1e6b      	subs	r3, r5, #1
100017cc:	419d      	sbcs	r5, r3
100017ce:	40d1      	lsrs	r1, r2
100017d0:	4320      	orrs	r0, r4
100017d2:	4328      	orrs	r0, r5
100017d4:	2400      	movs	r4, #0
100017d6:	e641      	b.n	1000145c <__aeabi_dsub+0x1f4>
100017d8:	0033      	movs	r3, r6
100017da:	432b      	orrs	r3, r5
100017dc:	469c      	mov	ip, r3
100017de:	d1da      	bne.n	10001796 <__aeabi_dsub+0x52e>
100017e0:	001e      	movs	r6, r3
100017e2:	001c      	movs	r4, r3
100017e4:	9302      	str	r3, [sp, #8]
100017e6:	e5e5      	b.n	100013b4 <__aeabi_dsub+0x14c>
100017e8:	0030      	movs	r0, r6
100017ea:	f7fe fd77 	bl	100002dc <__clzsi2>
100017ee:	0003      	movs	r3, r0
100017f0:	3318      	adds	r3, #24
100017f2:	2b1f      	cmp	r3, #31
100017f4:	ddd6      	ble.n	100017a4 <__aeabi_dsub+0x53c>
100017f6:	0031      	movs	r1, r6
100017f8:	3808      	subs	r0, #8
100017fa:	4081      	lsls	r1, r0
100017fc:	429c      	cmp	r4, r3
100017fe:	dc12      	bgt.n	10001826 <__aeabi_dsub+0x5be>
10001800:	1b1b      	subs	r3, r3, r4
10001802:	1c5a      	adds	r2, r3, #1
10001804:	2a1f      	cmp	r2, #31
10001806:	ddd9      	ble.n	100017bc <__aeabi_dsub+0x554>
10001808:	000c      	movs	r4, r1
1000180a:	3b1f      	subs	r3, #31
1000180c:	40dc      	lsrs	r4, r3
1000180e:	0028      	movs	r0, r5
10001810:	2a20      	cmp	r2, #32
10001812:	d003      	beq.n	1000181c <__aeabi_dsub+0x5b4>
10001814:	2340      	movs	r3, #64	; 0x40
10001816:	1a9b      	subs	r3, r3, r2
10001818:	4099      	lsls	r1, r3
1000181a:	0008      	movs	r0, r1
1000181c:	1e43      	subs	r3, r0, #1
1000181e:	4198      	sbcs	r0, r3
10001820:	2100      	movs	r1, #0
10001822:	4320      	orrs	r0, r4
10001824:	e7d6      	b.n	100017d4 <__aeabi_dsub+0x56c>
10001826:	1ae4      	subs	r4, r4, r3
10001828:	4b18      	ldr	r3, [pc, #96]	; (1000188c <__aeabi_dsub+0x624>)
1000182a:	400b      	ands	r3, r1
1000182c:	075e      	lsls	r6, r3, #29
1000182e:	08db      	lsrs	r3, r3, #3
10001830:	469c      	mov	ip, r3
10001832:	e5bf      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001834:	1ae4      	subs	r4, r4, r3
10001836:	4b15      	ldr	r3, [pc, #84]	; (1000188c <__aeabi_dsub+0x624>)
10001838:	0028      	movs	r0, r5
1000183a:	4019      	ands	r1, r3
1000183c:	e60e      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000183e:	0019      	movs	r1, r3
10001840:	0010      	movs	r0, r2
10001842:	e582      	b.n	1000134a <__aeabi_dsub+0xe2>
10001844:	074b      	lsls	r3, r1, #29
10001846:	08c0      	lsrs	r0, r0, #3
10001848:	4303      	orrs	r3, r0
1000184a:	469c      	mov	ip, r3
1000184c:	4b0d      	ldr	r3, [pc, #52]	; (10001884 <__aeabi_dsub+0x61c>)
1000184e:	4666      	mov	r6, ip
10001850:	08c9      	lsrs	r1, r1, #3
10001852:	429c      	cmp	r4, r3
10001854:	d113      	bne.n	1000187e <__aeabi_dsub+0x616>
10001856:	430e      	orrs	r6, r1
10001858:	d104      	bne.n	10001864 <__aeabi_dsub+0x5fc>
1000185a:	46b4      	mov	ip, r6
1000185c:	e5aa      	b.n	100013b4 <__aeabi_dsub+0x14c>
1000185e:	9102      	str	r1, [sp, #8]
10001860:	2180      	movs	r1, #128	; 0x80
10001862:	0309      	lsls	r1, r1, #12
10001864:	2380      	movs	r3, #128	; 0x80
10001866:	031b      	lsls	r3, r3, #12
10001868:	430b      	orrs	r3, r1
1000186a:	4666      	mov	r6, ip
1000186c:	4c05      	ldr	r4, [pc, #20]	; (10001884 <__aeabi_dsub+0x61c>)
1000186e:	469c      	mov	ip, r3
10001870:	e5a0      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001872:	2600      	movs	r6, #0
10001874:	4c03      	ldr	r4, [pc, #12]	; (10001884 <__aeabi_dsub+0x61c>)
10001876:	e7f0      	b.n	1000185a <__aeabi_dsub+0x5f2>
10001878:	0026      	movs	r6, r4
1000187a:	9402      	str	r4, [sp, #8]
1000187c:	e59a      	b.n	100013b4 <__aeabi_dsub+0x14c>
1000187e:	468c      	mov	ip, r1
10001880:	e598      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001882:	46c0      	nop			; (mov r8, r8)
10001884:	000007ff 	.word	0x000007ff
10001888:	000007fe 	.word	0x000007fe
1000188c:	ff7fffff 	.word	0xff7fffff

10001890 <__aeabi_ui2d>:
10001890:	b510      	push	{r4, lr}
10001892:	0003      	movs	r3, r0
10001894:	0004      	movs	r4, r0
10001896:	1e02      	subs	r2, r0, #0
10001898:	d00c      	beq.n	100018b4 <__aeabi_ui2d+0x24>
1000189a:	f7fe fd1f 	bl	100002dc <__clzsi2>
1000189e:	4a0b      	ldr	r2, [pc, #44]	; (100018cc <__aeabi_ui2d+0x3c>)
100018a0:	1a12      	subs	r2, r2, r0
100018a2:	280a      	cmp	r0, #10
100018a4:	dc0d      	bgt.n	100018c2 <__aeabi_ui2d+0x32>
100018a6:	230b      	movs	r3, #11
100018a8:	0021      	movs	r1, r4
100018aa:	1a1b      	subs	r3, r3, r0
100018ac:	40d9      	lsrs	r1, r3
100018ae:	3015      	adds	r0, #21
100018b0:	000b      	movs	r3, r1
100018b2:	4084      	lsls	r4, r0
100018b4:	031b      	lsls	r3, r3, #12
100018b6:	0b1b      	lsrs	r3, r3, #12
100018b8:	0512      	lsls	r2, r2, #20
100018ba:	431a      	orrs	r2, r3
100018bc:	0020      	movs	r0, r4
100018be:	0011      	movs	r1, r2
100018c0:	bd10      	pop	{r4, pc}
100018c2:	0023      	movs	r3, r4
100018c4:	380b      	subs	r0, #11
100018c6:	4083      	lsls	r3, r0
100018c8:	2400      	movs	r4, #0
100018ca:	e7f3      	b.n	100018b4 <__aeabi_ui2d+0x24>
100018cc:	0000041e 	.word	0x0000041e

100018d0 <__aeabi_f2d>:
100018d0:	22fe      	movs	r2, #254	; 0xfe
100018d2:	b570      	push	{r4, r5, r6, lr}
100018d4:	0044      	lsls	r4, r0, #1
100018d6:	0e24      	lsrs	r4, r4, #24
100018d8:	0243      	lsls	r3, r0, #9
100018da:	1c61      	adds	r1, r4, #1
100018dc:	0a5d      	lsrs	r5, r3, #9
100018de:	0fc6      	lsrs	r6, r0, #31
100018e0:	4211      	tst	r1, r2
100018e2:	d00d      	beq.n	10001900 <__aeabi_f2d+0x30>
100018e4:	22e0      	movs	r2, #224	; 0xe0
100018e6:	0092      	lsls	r2, r2, #2
100018e8:	18a4      	adds	r4, r4, r2
100018ea:	0b1b      	lsrs	r3, r3, #12
100018ec:	076d      	lsls	r5, r5, #29
100018ee:	031b      	lsls	r3, r3, #12
100018f0:	0b1b      	lsrs	r3, r3, #12
100018f2:	0524      	lsls	r4, r4, #20
100018f4:	07f6      	lsls	r6, r6, #31
100018f6:	431c      	orrs	r4, r3
100018f8:	4334      	orrs	r4, r6
100018fa:	0028      	movs	r0, r5
100018fc:	0021      	movs	r1, r4
100018fe:	bd70      	pop	{r4, r5, r6, pc}
10001900:	2c00      	cmp	r4, #0
10001902:	d118      	bne.n	10001936 <__aeabi_f2d+0x66>
10001904:	0023      	movs	r3, r4
10001906:	2d00      	cmp	r5, #0
10001908:	d0f1      	beq.n	100018ee <__aeabi_f2d+0x1e>
1000190a:	0028      	movs	r0, r5
1000190c:	f7fe fce6 	bl	100002dc <__clzsi2>
10001910:	280a      	cmp	r0, #10
10001912:	dc0a      	bgt.n	1000192a <__aeabi_f2d+0x5a>
10001914:	230b      	movs	r3, #11
10001916:	002a      	movs	r2, r5
10001918:	1a1b      	subs	r3, r3, r0
1000191a:	40da      	lsrs	r2, r3
1000191c:	0013      	movs	r3, r2
1000191e:	0002      	movs	r2, r0
10001920:	3215      	adds	r2, #21
10001922:	4095      	lsls	r5, r2
10001924:	4c09      	ldr	r4, [pc, #36]	; (1000194c <__aeabi_f2d+0x7c>)
10001926:	1a24      	subs	r4, r4, r0
10001928:	e7e1      	b.n	100018ee <__aeabi_f2d+0x1e>
1000192a:	0003      	movs	r3, r0
1000192c:	3b0b      	subs	r3, #11
1000192e:	409d      	lsls	r5, r3
10001930:	002b      	movs	r3, r5
10001932:	0025      	movs	r5, r4
10001934:	e7f6      	b.n	10001924 <__aeabi_f2d+0x54>
10001936:	2d00      	cmp	r5, #0
10001938:	d006      	beq.n	10001948 <__aeabi_f2d+0x78>
1000193a:	0b1a      	lsrs	r2, r3, #12
1000193c:	2380      	movs	r3, #128	; 0x80
1000193e:	031b      	lsls	r3, r3, #12
10001940:	076d      	lsls	r5, r5, #29
10001942:	4313      	orrs	r3, r2
10001944:	4c02      	ldr	r4, [pc, #8]	; (10001950 <__aeabi_f2d+0x80>)
10001946:	e7d2      	b.n	100018ee <__aeabi_f2d+0x1e>
10001948:	002b      	movs	r3, r5
1000194a:	e7fb      	b.n	10001944 <__aeabi_f2d+0x74>
1000194c:	00000389 	.word	0x00000389
10001950:	000007ff 	.word	0x000007ff

10001954 <__aeabi_d2f>:
10001954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001956:	030b      	lsls	r3, r1, #12
10001958:	004a      	lsls	r2, r1, #1
1000195a:	0a5b      	lsrs	r3, r3, #9
1000195c:	0f46      	lsrs	r6, r0, #29
1000195e:	0d52      	lsrs	r2, r2, #21
10001960:	431e      	orrs	r6, r3
10001962:	1c53      	adds	r3, r2, #1
10001964:	469c      	mov	ip, r3
10001966:	0004      	movs	r4, r0
10001968:	00c7      	lsls	r7, r0, #3
1000196a:	483c      	ldr	r0, [pc, #240]	; (10001a5c <__aeabi_d2f+0x108>)
1000196c:	0fc9      	lsrs	r1, r1, #31
1000196e:	4003      	ands	r3, r0
10001970:	9301      	str	r3, [sp, #4]
10001972:	4663      	mov	r3, ip
10001974:	4203      	tst	r3, r0
10001976:	d049      	beq.n	10001a0c <__aeabi_d2f+0xb8>
10001978:	4b39      	ldr	r3, [pc, #228]	; (10001a60 <__aeabi_d2f+0x10c>)
1000197a:	18d0      	adds	r0, r2, r3
1000197c:	28fe      	cmp	r0, #254	; 0xfe
1000197e:	dc68      	bgt.n	10001a52 <__aeabi_d2f+0xfe>
10001980:	2800      	cmp	r0, #0
10001982:	dc37      	bgt.n	100019f4 <__aeabi_d2f+0xa0>
10001984:	0003      	movs	r3, r0
10001986:	3317      	adds	r3, #23
10001988:	db65      	blt.n	10001a56 <__aeabi_d2f+0x102>
1000198a:	2480      	movs	r4, #128	; 0x80
1000198c:	251e      	movs	r5, #30
1000198e:	0424      	lsls	r4, r4, #16
10001990:	4334      	orrs	r4, r6
10001992:	1a2d      	subs	r5, r5, r0
10001994:	2d1f      	cmp	r5, #31
10001996:	dc10      	bgt.n	100019ba <__aeabi_d2f+0x66>
10001998:	4b32      	ldr	r3, [pc, #200]	; (10001a64 <__aeabi_d2f+0x110>)
1000199a:	18d2      	adds	r2, r2, r3
1000199c:	003b      	movs	r3, r7
1000199e:	4097      	lsls	r7, r2
100019a0:	4094      	lsls	r4, r2
100019a2:	1e78      	subs	r0, r7, #1
100019a4:	4187      	sbcs	r7, r0
100019a6:	40eb      	lsrs	r3, r5
100019a8:	4327      	orrs	r7, r4
100019aa:	433b      	orrs	r3, r7
100019ac:	2407      	movs	r4, #7
100019ae:	001a      	movs	r2, r3
100019b0:	4022      	ands	r2, r4
100019b2:	4223      	tst	r3, r4
100019b4:	d13b      	bne.n	10001a2e <__aeabi_d2f+0xda>
100019b6:	08db      	lsrs	r3, r3, #3
100019b8:	e032      	b.n	10001a20 <__aeabi_d2f+0xcc>
100019ba:	2302      	movs	r3, #2
100019bc:	425b      	negs	r3, r3
100019be:	1a1b      	subs	r3, r3, r0
100019c0:	0020      	movs	r0, r4
100019c2:	40d8      	lsrs	r0, r3
100019c4:	0003      	movs	r3, r0
100019c6:	2000      	movs	r0, #0
100019c8:	2d20      	cmp	r5, #32
100019ca:	d003      	beq.n	100019d4 <__aeabi_d2f+0x80>
100019cc:	4826      	ldr	r0, [pc, #152]	; (10001a68 <__aeabi_d2f+0x114>)
100019ce:	1812      	adds	r2, r2, r0
100019d0:	0020      	movs	r0, r4
100019d2:	4090      	lsls	r0, r2
100019d4:	4338      	orrs	r0, r7
100019d6:	1e42      	subs	r2, r0, #1
100019d8:	4190      	sbcs	r0, r2
100019da:	4303      	orrs	r3, r0
100019dc:	2407      	movs	r4, #7
100019de:	001a      	movs	r2, r3
100019e0:	4022      	ands	r2, r4
100019e2:	4223      	tst	r3, r4
100019e4:	d0e7      	beq.n	100019b6 <__aeabi_d2f+0x62>
100019e6:	220f      	movs	r2, #15
100019e8:	401a      	ands	r2, r3
100019ea:	2a04      	cmp	r2, #4
100019ec:	d024      	beq.n	10001a38 <__aeabi_d2f+0xe4>
100019ee:	2000      	movs	r0, #0
100019f0:	3304      	adds	r3, #4
100019f2:	e008      	b.n	10001a06 <__aeabi_d2f+0xb2>
100019f4:	01a4      	lsls	r4, r4, #6
100019f6:	1e62      	subs	r2, r4, #1
100019f8:	4194      	sbcs	r4, r2
100019fa:	00f6      	lsls	r6, r6, #3
100019fc:	0f7b      	lsrs	r3, r7, #29
100019fe:	4334      	orrs	r4, r6
10001a00:	4323      	orrs	r3, r4
10001a02:	075a      	lsls	r2, r3, #29
10001a04:	d11b      	bne.n	10001a3e <__aeabi_d2f+0xea>
10001a06:	0002      	movs	r2, r0
10001a08:	08db      	lsrs	r3, r3, #3
10001a0a:	e009      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a0c:	9b01      	ldr	r3, [sp, #4]
10001a0e:	2a00      	cmp	r2, #0
10001a10:	d006      	beq.n	10001a20 <__aeabi_d2f+0xcc>
10001a12:	003b      	movs	r3, r7
10001a14:	22ff      	movs	r2, #255	; 0xff
10001a16:	4333      	orrs	r3, r6
10001a18:	d002      	beq.n	10001a20 <__aeabi_d2f+0xcc>
10001a1a:	2380      	movs	r3, #128	; 0x80
10001a1c:	03db      	lsls	r3, r3, #15
10001a1e:	4333      	orrs	r3, r6
10001a20:	025b      	lsls	r3, r3, #9
10001a22:	05d0      	lsls	r0, r2, #23
10001a24:	0a5b      	lsrs	r3, r3, #9
10001a26:	4318      	orrs	r0, r3
10001a28:	07c9      	lsls	r1, r1, #31
10001a2a:	4308      	orrs	r0, r1
10001a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001a2e:	220f      	movs	r2, #15
10001a30:	2000      	movs	r0, #0
10001a32:	401a      	ands	r2, r3
10001a34:	2a04      	cmp	r2, #4
10001a36:	d106      	bne.n	10001a46 <__aeabi_d2f+0xf2>
10001a38:	2200      	movs	r2, #0
10001a3a:	08db      	lsrs	r3, r3, #3
10001a3c:	e7f0      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a3e:	220f      	movs	r2, #15
10001a40:	401a      	ands	r2, r3
10001a42:	2a04      	cmp	r2, #4
10001a44:	d0df      	beq.n	10001a06 <__aeabi_d2f+0xb2>
10001a46:	3304      	adds	r3, #4
10001a48:	015a      	lsls	r2, r3, #5
10001a4a:	d5dc      	bpl.n	10001a06 <__aeabi_d2f+0xb2>
10001a4c:	1c42      	adds	r2, r0, #1
10001a4e:	2300      	movs	r3, #0
10001a50:	e7e6      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a52:	22ff      	movs	r2, #255	; 0xff
10001a54:	e7fb      	b.n	10001a4e <__aeabi_d2f+0xfa>
10001a56:	2200      	movs	r2, #0
10001a58:	0013      	movs	r3, r2
10001a5a:	e7e1      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a5c:	000007fe 	.word	0x000007fe
10001a60:	fffffc80 	.word	0xfffffc80
10001a64:	fffffc82 	.word	0xfffffc82
10001a68:	fffffca2 	.word	0xfffffca2

10001a6c <__aeabi_llsr>:
10001a6c:	40d0      	lsrs	r0, r2
10001a6e:	000b      	movs	r3, r1
10001a70:	40d1      	lsrs	r1, r2
10001a72:	469c      	mov	ip, r3
10001a74:	3a20      	subs	r2, #32
10001a76:	40d3      	lsrs	r3, r2
10001a78:	4318      	orrs	r0, r3
10001a7a:	4252      	negs	r2, r2
10001a7c:	4663      	mov	r3, ip
10001a7e:	4093      	lsls	r3, r2
10001a80:	4318      	orrs	r0, r3
10001a82:	4770      	bx	lr

10001a84 <__aeabi_llsl>:
10001a84:	4091      	lsls	r1, r2
10001a86:	0003      	movs	r3, r0
10001a88:	4090      	lsls	r0, r2
10001a8a:	469c      	mov	ip, r3
10001a8c:	3a20      	subs	r2, #32
10001a8e:	4093      	lsls	r3, r2
10001a90:	4319      	orrs	r1, r3
10001a92:	4252      	negs	r2, r2
10001a94:	4663      	mov	r3, ip
10001a96:	40d3      	lsrs	r3, r2
10001a98:	4319      	orrs	r1, r3
10001a9a:	4770      	bx	lr

10001a9c <__clzdi2>:
10001a9c:	b510      	push	{r4, lr}
10001a9e:	2900      	cmp	r1, #0
10001aa0:	d103      	bne.n	10001aaa <__clzdi2+0xe>
10001aa2:	f7fe fc1b 	bl	100002dc <__clzsi2>
10001aa6:	3020      	adds	r0, #32
10001aa8:	e002      	b.n	10001ab0 <__clzdi2+0x14>
10001aaa:	0008      	movs	r0, r1
10001aac:	f7fe fc16 	bl	100002dc <__clzsi2>
10001ab0:	bd10      	pop	{r4, pc}
10001ab2:	46c0      	nop			; (mov r8, r8)

10001ab4 <__aeabi_d2uiz>:
10001ab4:	b570      	push	{r4, r5, r6, lr}
10001ab6:	2200      	movs	r2, #0
10001ab8:	4b0b      	ldr	r3, [pc, #44]	; (10001ae8 <__aeabi_d2uiz+0x34>)
10001aba:	0004      	movs	r4, r0
10001abc:	000d      	movs	r5, r1
10001abe:	f7fe fc03 	bl	100002c8 <__aeabi_dcmpge>
10001ac2:	2800      	cmp	r0, #0
10001ac4:	d00b      	beq.n	10001ade <__aeabi_d2uiz+0x2a>
10001ac6:	4b08      	ldr	r3, [pc, #32]	; (10001ae8 <__aeabi_d2uiz+0x34>)
10001ac8:	2200      	movs	r2, #0
10001aca:	0020      	movs	r0, r4
10001acc:	0029      	movs	r1, r5
10001ace:	f7ff fbcb 	bl	10001268 <__aeabi_dsub>
10001ad2:	f000 f80b 	bl	10001aec <__aeabi_d2iz>
10001ad6:	2380      	movs	r3, #128	; 0x80
10001ad8:	061b      	lsls	r3, r3, #24
10001ada:	18c0      	adds	r0, r0, r3
10001adc:	bd70      	pop	{r4, r5, r6, pc}
10001ade:	0020      	movs	r0, r4
10001ae0:	0029      	movs	r1, r5
10001ae2:	f000 f803 	bl	10001aec <__aeabi_d2iz>
10001ae6:	e7f9      	b.n	10001adc <__aeabi_d2uiz+0x28>
10001ae8:	41e00000 	.word	0x41e00000

10001aec <__aeabi_d2iz>:
10001aec:	000b      	movs	r3, r1
10001aee:	b570      	push	{r4, r5, r6, lr}
10001af0:	4e11      	ldr	r6, [pc, #68]	; (10001b38 <__aeabi_d2iz+0x4c>)
10001af2:	030c      	lsls	r4, r1, #12
10001af4:	0049      	lsls	r1, r1, #1
10001af6:	0002      	movs	r2, r0
10001af8:	0b24      	lsrs	r4, r4, #12
10001afa:	2000      	movs	r0, #0
10001afc:	0d49      	lsrs	r1, r1, #21
10001afe:	0fdd      	lsrs	r5, r3, #31
10001b00:	42b1      	cmp	r1, r6
10001b02:	dd04      	ble.n	10001b0e <__aeabi_d2iz+0x22>
10001b04:	480d      	ldr	r0, [pc, #52]	; (10001b3c <__aeabi_d2iz+0x50>)
10001b06:	4281      	cmp	r1, r0
10001b08:	dd02      	ble.n	10001b10 <__aeabi_d2iz+0x24>
10001b0a:	4b0d      	ldr	r3, [pc, #52]	; (10001b40 <__aeabi_d2iz+0x54>)
10001b0c:	18e8      	adds	r0, r5, r3
10001b0e:	bd70      	pop	{r4, r5, r6, pc}
10001b10:	2080      	movs	r0, #128	; 0x80
10001b12:	0340      	lsls	r0, r0, #13
10001b14:	4320      	orrs	r0, r4
10001b16:	4c0b      	ldr	r4, [pc, #44]	; (10001b44 <__aeabi_d2iz+0x58>)
10001b18:	1a64      	subs	r4, r4, r1
10001b1a:	2c1f      	cmp	r4, #31
10001b1c:	dc08      	bgt.n	10001b30 <__aeabi_d2iz+0x44>
10001b1e:	4e0a      	ldr	r6, [pc, #40]	; (10001b48 <__aeabi_d2iz+0x5c>)
10001b20:	40e2      	lsrs	r2, r4
10001b22:	1989      	adds	r1, r1, r6
10001b24:	4088      	lsls	r0, r1
10001b26:	4310      	orrs	r0, r2
10001b28:	2d00      	cmp	r5, #0
10001b2a:	d0f0      	beq.n	10001b0e <__aeabi_d2iz+0x22>
10001b2c:	4240      	negs	r0, r0
10001b2e:	e7ee      	b.n	10001b0e <__aeabi_d2iz+0x22>
10001b30:	4b06      	ldr	r3, [pc, #24]	; (10001b4c <__aeabi_d2iz+0x60>)
10001b32:	1a5b      	subs	r3, r3, r1
10001b34:	40d8      	lsrs	r0, r3
10001b36:	e7f7      	b.n	10001b28 <__aeabi_d2iz+0x3c>
10001b38:	000003fe 	.word	0x000003fe
10001b3c:	0000041d 	.word	0x0000041d
10001b40:	7fffffff 	.word	0x7fffffff
10001b44:	00000433 	.word	0x00000433
10001b48:	fffffbed 	.word	0xfffffbed
10001b4c:	00000413 	.word	0x00000413

10001b50 <__aeabi_lmul>:
10001b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001b52:	0c04      	lsrs	r4, r0, #16
10001b54:	000d      	movs	r5, r1
10001b56:	b291      	uxth	r1, r2
10001b58:	000f      	movs	r7, r1
10001b5a:	4361      	muls	r1, r4
10001b5c:	468c      	mov	ip, r1
10001b5e:	0006      	movs	r6, r0
10001b60:	9301      	str	r3, [sp, #4]
10001b62:	b283      	uxth	r3, r0
10001b64:	0c10      	lsrs	r0, r2, #16
10001b66:	435f      	muls	r7, r3
10001b68:	4344      	muls	r4, r0
10001b6a:	4358      	muls	r0, r3
10001b6c:	0c3b      	lsrs	r3, r7, #16
10001b6e:	4460      	add	r0, ip
10001b70:	181b      	adds	r3, r3, r0
10001b72:	4299      	cmp	r1, r3
10001b74:	d902      	bls.n	10001b7c <__aeabi_lmul+0x2c>
10001b76:	2180      	movs	r1, #128	; 0x80
10001b78:	0249      	lsls	r1, r1, #9
10001b7a:	1864      	adds	r4, r4, r1
10001b7c:	9901      	ldr	r1, [sp, #4]
10001b7e:	4355      	muls	r5, r2
10001b80:	4371      	muls	r1, r6
10001b82:	0c18      	lsrs	r0, r3, #16
10001b84:	1904      	adds	r4, r0, r4
10001b86:	041b      	lsls	r3, r3, #16
10001b88:	b2bf      	uxth	r7, r7
10001b8a:	1949      	adds	r1, r1, r5
10001b8c:	19d8      	adds	r0, r3, r7
10001b8e:	1909      	adds	r1, r1, r4
10001b90:	b003      	add	sp, #12
10001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001b94 <__udivmoddi4>:
10001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b96:	0006      	movs	r6, r0
10001b98:	000f      	movs	r7, r1
10001b9a:	0015      	movs	r5, r2
10001b9c:	001c      	movs	r4, r3
10001b9e:	b085      	sub	sp, #20
10001ba0:	428b      	cmp	r3, r1
10001ba2:	d863      	bhi.n	10001c6c <__udivmoddi4+0xd8>
10001ba4:	d101      	bne.n	10001baa <__udivmoddi4+0x16>
10001ba6:	4282      	cmp	r2, r0
10001ba8:	d860      	bhi.n	10001c6c <__udivmoddi4+0xd8>
10001baa:	0021      	movs	r1, r4
10001bac:	0028      	movs	r0, r5
10001bae:	f7ff ff75 	bl	10001a9c <__clzdi2>
10001bb2:	0039      	movs	r1, r7
10001bb4:	9000      	str	r0, [sp, #0]
10001bb6:	0030      	movs	r0, r6
10001bb8:	f7ff ff70 	bl	10001a9c <__clzdi2>
10001bbc:	9b00      	ldr	r3, [sp, #0]
10001bbe:	0021      	movs	r1, r4
10001bc0:	1a1b      	subs	r3, r3, r0
10001bc2:	001a      	movs	r2, r3
10001bc4:	0028      	movs	r0, r5
10001bc6:	9303      	str	r3, [sp, #12]
10001bc8:	f7ff ff5c 	bl	10001a84 <__aeabi_llsl>
10001bcc:	9000      	str	r0, [sp, #0]
10001bce:	9101      	str	r1, [sp, #4]
10001bd0:	42b9      	cmp	r1, r7
10001bd2:	d845      	bhi.n	10001c60 <__udivmoddi4+0xcc>
10001bd4:	d101      	bne.n	10001bda <__udivmoddi4+0x46>
10001bd6:	42b0      	cmp	r0, r6
10001bd8:	d842      	bhi.n	10001c60 <__udivmoddi4+0xcc>
10001bda:	9b00      	ldr	r3, [sp, #0]
10001bdc:	9c01      	ldr	r4, [sp, #4]
10001bde:	2001      	movs	r0, #1
10001be0:	2100      	movs	r1, #0
10001be2:	9a03      	ldr	r2, [sp, #12]
10001be4:	1af6      	subs	r6, r6, r3
10001be6:	41a7      	sbcs	r7, r4
10001be8:	f7ff ff4c 	bl	10001a84 <__aeabi_llsl>
10001bec:	0004      	movs	r4, r0
10001bee:	000d      	movs	r5, r1
10001bf0:	9b03      	ldr	r3, [sp, #12]
10001bf2:	2b00      	cmp	r3, #0
10001bf4:	d02b      	beq.n	10001c4e <__udivmoddi4+0xba>
10001bf6:	9b01      	ldr	r3, [sp, #4]
10001bf8:	9a00      	ldr	r2, [sp, #0]
10001bfa:	07db      	lsls	r3, r3, #31
10001bfc:	0850      	lsrs	r0, r2, #1
10001bfe:	4318      	orrs	r0, r3
10001c00:	9b01      	ldr	r3, [sp, #4]
10001c02:	0859      	lsrs	r1, r3, #1
10001c04:	9b03      	ldr	r3, [sp, #12]
10001c06:	469c      	mov	ip, r3
10001c08:	42b9      	cmp	r1, r7
10001c0a:	d82c      	bhi.n	10001c66 <__udivmoddi4+0xd2>
10001c0c:	d101      	bne.n	10001c12 <__udivmoddi4+0x7e>
10001c0e:	42b0      	cmp	r0, r6
10001c10:	d829      	bhi.n	10001c66 <__udivmoddi4+0xd2>
10001c12:	0032      	movs	r2, r6
10001c14:	003b      	movs	r3, r7
10001c16:	1a12      	subs	r2, r2, r0
10001c18:	418b      	sbcs	r3, r1
10001c1a:	2601      	movs	r6, #1
10001c1c:	1892      	adds	r2, r2, r2
10001c1e:	415b      	adcs	r3, r3
10001c20:	2700      	movs	r7, #0
10001c22:	18b6      	adds	r6, r6, r2
10001c24:	415f      	adcs	r7, r3
10001c26:	2301      	movs	r3, #1
10001c28:	425b      	negs	r3, r3
10001c2a:	449c      	add	ip, r3
10001c2c:	4663      	mov	r3, ip
10001c2e:	2b00      	cmp	r3, #0
10001c30:	d1ea      	bne.n	10001c08 <__udivmoddi4+0x74>
10001c32:	0030      	movs	r0, r6
10001c34:	0039      	movs	r1, r7
10001c36:	9a03      	ldr	r2, [sp, #12]
10001c38:	f7ff ff18 	bl	10001a6c <__aeabi_llsr>
10001c3c:	9a03      	ldr	r2, [sp, #12]
10001c3e:	19a4      	adds	r4, r4, r6
10001c40:	417d      	adcs	r5, r7
10001c42:	0006      	movs	r6, r0
10001c44:	000f      	movs	r7, r1
10001c46:	f7ff ff1d 	bl	10001a84 <__aeabi_llsl>
10001c4a:	1a24      	subs	r4, r4, r0
10001c4c:	418d      	sbcs	r5, r1
10001c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001c50:	2b00      	cmp	r3, #0
10001c52:	d001      	beq.n	10001c58 <__udivmoddi4+0xc4>
10001c54:	601e      	str	r6, [r3, #0]
10001c56:	605f      	str	r7, [r3, #4]
10001c58:	0020      	movs	r0, r4
10001c5a:	0029      	movs	r1, r5
10001c5c:	b005      	add	sp, #20
10001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001c60:	2400      	movs	r4, #0
10001c62:	2500      	movs	r5, #0
10001c64:	e7c4      	b.n	10001bf0 <__udivmoddi4+0x5c>
10001c66:	19b6      	adds	r6, r6, r6
10001c68:	417f      	adcs	r7, r7
10001c6a:	e7dc      	b.n	10001c26 <__udivmoddi4+0x92>
10001c6c:	2400      	movs	r4, #0
10001c6e:	2500      	movs	r5, #0
10001c70:	e7ed      	b.n	10001c4e <__udivmoddi4+0xba>
	...

10001c74 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
10001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c76:	b08b      	sub	sp, #44	; 0x2c
10001c78:	9304      	str	r3, [sp, #16]
10001c7a:	ab10      	add	r3, sp, #64	; 0x40
10001c7c:	881b      	ldrh	r3, [r3, #0]
10001c7e:	0004      	movs	r4, r0
10001c80:	0015      	movs	r5, r2
10001c82:	9103      	str	r1, [sp, #12]
10001c84:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
10001c86:	6883      	ldr	r3, [r0, #8]
10001c88:	9903      	ldr	r1, [sp, #12]
10001c8a:	685b      	ldr	r3, [r3, #4]
10001c8c:	aa08      	add	r2, sp, #32
10001c8e:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
10001c90:	2800      	cmp	r0, #0
10001c92:	db2b      	blt.n	10001cec <pwm_set+0x78>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001c94:	9e08      	ldr	r6, [sp, #32]
10001c96:	9f09      	ldr	r7, [sp, #36]	; 0x24
10001c98:	0028      	movs	r0, r5
10001c9a:	0032      	movs	r2, r6
10001c9c:	003b      	movs	r3, r7
10001c9e:	2100      	movs	r1, #0
10001ca0:	f7ff ff56 	bl	10001b50 <__aeabi_lmul>
10001ca4:	2300      	movs	r3, #0
10001ca6:	4a15      	ldr	r2, [pc, #84]	; (10001cfc <pwm_set+0x88>)
10001ca8:	9106      	str	r1, [sp, #24]
10001caa:	f7fe fb35 	bl	10000318 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10001cae:	9906      	ldr	r1, [sp, #24]
10001cb0:	4b13      	ldr	r3, [pc, #76]	; (10001d00 <pwm_set+0x8c>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001cb2:	0005      	movs	r5, r0
10001cb4:	9007      	str	r0, [sp, #28]
	if (period_cycles > UINT32_MAX) {
10001cb6:	4299      	cmp	r1, r3
10001cb8:	d81a      	bhi.n	10001cf0 <pwm_set+0x7c>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001cba:	0032      	movs	r2, r6
10001cbc:	003b      	movs	r3, r7
10001cbe:	2100      	movs	r1, #0
10001cc0:	9804      	ldr	r0, [sp, #16]
10001cc2:	f7ff ff45 	bl	10001b50 <__aeabi_lmul>
10001cc6:	2300      	movs	r3, #0
10001cc8:	4a0c      	ldr	r2, [pc, #48]	; (10001cfc <pwm_set+0x88>)
10001cca:	000e      	movs	r6, r1
10001ccc:	f7fe fb24 	bl	10000318 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10001cd0:	4a0b      	ldr	r2, [pc, #44]	; (10001d00 <pwm_set+0x8c>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001cd2:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
10001cd4:	4296      	cmp	r6, r2
10001cd6:	d80b      	bhi.n	10001cf0 <pwm_set+0x7c>
	const struct pwm_driver_api *api =
10001cd8:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10001cda:	4285      	cmp	r5, r0
10001cdc:	d30b      	bcc.n	10001cf6 <pwm_set+0x82>
	return api->set_cycles(dev, channel, period, pulse, flags);
10001cde:	9905      	ldr	r1, [sp, #20]
10001ce0:	0020      	movs	r0, r4
10001ce2:	9100      	str	r1, [sp, #0]
10001ce4:	6816      	ldr	r6, [r2, #0]
10001ce6:	9903      	ldr	r1, [sp, #12]
10001ce8:	002a      	movs	r2, r5
10001cea:	47b0      	blx	r6
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
			      (uint32_t)pulse_cycles, flags);
}
10001cec:	b00b      	add	sp, #44	; 0x2c
10001cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
10001cf0:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
10001cf2:	4240      	negs	r0, r0
10001cf4:	e7fa      	b.n	10001cec <pwm_set+0x78>
10001cf6:	2016      	movs	r0, #22
10001cf8:	e7fb      	b.n	10001cf2 <pwm_set+0x7e>
10001cfa:	46c0      	nop			; (mov r8, r8)
10001cfc:	3b9aca00 	.word	0x3b9aca00
10001d00:	3b9ac9ff 	.word	0x3b9ac9ff

10001d04 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
10001d04:	0003      	movs	r3, r0
10001d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001d08:	000a      	movs	r2, r1
	return gpio_pin_configure(spec->port,
				  spec->pin,
10001d0a:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
10001d0c:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
10001d0e:	6800      	ldr	r0, [r0, #0]
10001d10:	4313      	orrs	r3, r2
	const struct gpio_driver_api *api =
10001d12:	6882      	ldr	r2, [r0, #8]
10001d14:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
10001d16:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
10001d18:	02dc      	lsls	r4, r3, #11
10001d1a:	d506      	bpl.n	10001d2a <gpio_pin_configure_dt+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
10001d1c:	24c0      	movs	r4, #192	; 0xc0
10001d1e:	0324      	lsls	r4, r4, #12
10001d20:	4223      	tst	r3, r4
10001d22:	d002      	beq.n	10001d2a <gpio_pin_configure_dt+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
10001d24:	07dd      	lsls	r5, r3, #31
10001d26:	d500      	bpl.n	10001d2a <gpio_pin_configure_dt+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
10001d28:	4063      	eors	r3, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001d2a:	2701      	movs	r7, #1
10001d2c:	003d      	movs	r5, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001d2e:	4c08      	ldr	r4, [pc, #32]	; (10001d50 <gpio_pin_configure_dt+0x4c>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001d30:	6816      	ldr	r6, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001d32:	401c      	ands	r4, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001d34:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001d36:	9401      	str	r4, [sp, #4]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001d38:	0034      	movs	r4, r6
10001d3a:	43ac      	bics	r4, r5
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001d3c:	423b      	tst	r3, r7
10001d3e:	d001      	beq.n	10001d44 <gpio_pin_configure_dt+0x40>
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001d40:	0034      	movs	r4, r6
10001d42:	432c      	orrs	r4, r5
	return api->pin_configure(port, pin, flags);
10001d44:	4663      	mov	r3, ip
}
10001d46:	6014      	str	r4, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001d48:	681b      	ldr	r3, [r3, #0]
10001d4a:	9a01      	ldr	r2, [sp, #4]
10001d4c:	4798      	blx	r3
}
10001d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001d50:	ffefffff 	.word	0xffefffff

10001d54 <gpio_pin_get_dt.constprop.0>:
 *     gpio_pin_get(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
10001d54:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
10001d56:	4807      	ldr	r0, [pc, #28]	; (10001d74 <gpio_pin_get_dt.constprop.0+0x20>)
10001d58:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
10001d5a:	6883      	ldr	r3, [r0, #8]
10001d5c:	a901      	add	r1, sp, #4
10001d5e:	685b      	ldr	r3, [r3, #4]
10001d60:	4798      	blx	r3
	if (ret == 0) {
10001d62:	2800      	cmp	r0, #0
10001d64:	d104      	bne.n	10001d70 <gpio_pin_get_dt.constprop.0+0x1c>
		*value ^= data->invert;
10001d66:	9801      	ldr	r0, [sp, #4]
10001d68:	6823      	ldr	r3, [r4, #0]
10001d6a:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
10001d6c:	0680      	lsls	r0, r0, #26
10001d6e:	0fc0      	lsrs	r0, r0, #31
{
	return gpio_pin_get(spec->port, spec->pin);
}
10001d70:	bd16      	pop	{r1, r2, r4, pc}
10001d72:	46c0      	nop			; (mov r8, r8)
10001d74:	10004908 	.word	0x10004908

10001d78 <servo_tapa>:
 * @brief Funcion para que funciona para los servos de la tapa escoger la direccion del movimiento
 * 
 * @param dir UP DOWN para servo lamina, LEFT RIGH para servo barra
 * @param servo escoger servo0, servo1, servo2
 */
void servo_tapa(enum direction dir,struct pwm_dt_spec servo){
10001d78:	b084      	sub	sp, #16
10001d7a:	b510      	push	{r4, lr}
10001d7c:	9103      	str	r1, [sp, #12]
10001d7e:	9204      	str	r2, [sp, #16]
10001d80:	9305      	str	r3, [sp, #20]
		int ret=-1;
		int minpulse, maxpulse;

		min_max_pulse(servo, &minpulse, &maxpulse);
	
		switch (dir)
10001d82:	2802      	cmp	r0, #2
10001d84:	d80e      	bhi.n	10001da4 <servo_tapa+0x2c>
10001d86:	2800      	cmp	r0, #0
10001d88:	d014      	beq.n	10001db4 <servo_tapa+0x3c>
		{
		case LEFT:
			ret = pwm_set_pulse_dt(&servo, minpulse);
10001d8a:	490b      	ldr	r1, [pc, #44]	; (10001db8 <servo_tapa+0x40>)
			break;
		case RIGTH:
			ret = pwm_set_pulse_dt(&servo, maxpulse);
10001d8c:	a803      	add	r0, sp, #12
10001d8e:	f002 f974 	bl	1000407a <pwm_set_pulse_dt>
10001d92:	1e01      	subs	r1, r0, #0
			printk("Error: direction invalid");
			break;
		}
	
		
		if (ret < 0) {
10001d94:	da02      	bge.n	10001d9c <servo_tapa+0x24>
		printk("Error %d: failed to set pulse width\n", ret);
10001d96:	4809      	ldr	r0, [pc, #36]	; (10001dbc <servo_tapa+0x44>)
10001d98:	f002 f9a1 	bl	100040de <printk>
			return;
		}
	
	
	
}
10001d9c:	bc10      	pop	{r4}
10001d9e:	bc08      	pop	{r3}
10001da0:	b004      	add	sp, #16
10001da2:	4718      	bx	r3
		switch (dir)
10001da4:	2803      	cmp	r0, #3
10001da6:	d005      	beq.n	10001db4 <servo_tapa+0x3c>
			printk("Error: direction invalid");
10001da8:	4805      	ldr	r0, [pc, #20]	; (10001dc0 <servo_tapa+0x48>)
10001daa:	f002 f998 	bl	100040de <printk>
		int ret=-1;
10001dae:	2101      	movs	r1, #1
10001db0:	4249      	negs	r1, r1
10001db2:	e7f0      	b.n	10001d96 <servo_tapa+0x1e>
			ret = pwm_set_pulse_dt(&servo, maxpulse);
10001db4:	4903      	ldr	r1, [pc, #12]	; (10001dc4 <servo_tapa+0x4c>)
10001db6:	e7e9      	b.n	10001d8c <servo_tapa+0x14>
10001db8:	000aae60 	.word	0x000aae60
10001dbc:	10004bd1 	.word	0x10004bd1
10001dc0:	10004bf6 	.word	0x10004bf6
10001dc4:	002625a0 	.word	0x002625a0

10001dc8 <getDistance>:
 * @brief Calcula la distancia del objeto
 * 
 * @param distance out, Indica la distancia en cm
 */
void getDistance(float* distance)
{
10001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}

    if (!device_is_ready(Echo1.port) || !device_is_ready(Trig1.port) || !device_is_ready(Echo2.port) || !device_is_ready(Trig2.port) || !device_is_ready(Echo3.port) || !device_is_ready(Trig3.port) || !device_is_ready(Echo4.port) || !device_is_ready(Trig4.port))
10001dca:	4c7c      	ldr	r4, [pc, #496]	; (10001fbc <getDistance+0x1f4>)
{
10001dcc:	b085      	sub	sp, #20
10001dce:	9003      	str	r0, [sp, #12]
    if (!device_is_ready(Echo1.port) || !device_is_ready(Trig1.port) || !device_is_ready(Echo2.port) || !device_is_ready(Trig2.port) || !device_is_ready(Echo3.port) || !device_is_ready(Trig3.port) || !device_is_ready(Echo4.port) || !device_is_ready(Trig4.port))
10001dd0:	0020      	movs	r0, r4
10001dd2:	f002 f95a 	bl	1000408a <device_is_ready>
10001dd6:	2800      	cmp	r0, #0
10001dd8:	d100      	bne.n	10001ddc <getDistance+0x14>
10001dda:	e0b5      	b.n	10001f48 <getDistance+0x180>
10001ddc:	0020      	movs	r0, r4
10001dde:	f002 f954 	bl	1000408a <device_is_ready>
10001de2:	2800      	cmp	r0, #0
10001de4:	d100      	bne.n	10001de8 <getDistance+0x20>
10001de6:	e0af      	b.n	10001f48 <getDistance+0x180>
10001de8:	0020      	movs	r0, r4
10001dea:	f002 f94e 	bl	1000408a <device_is_ready>
10001dee:	2800      	cmp	r0, #0
10001df0:	d100      	bne.n	10001df4 <getDistance+0x2c>
10001df2:	e0a9      	b.n	10001f48 <getDistance+0x180>
10001df4:	0020      	movs	r0, r4
10001df6:	f002 f948 	bl	1000408a <device_is_ready>
10001dfa:	2800      	cmp	r0, #0
10001dfc:	d100      	bne.n	10001e00 <getDistance+0x38>
10001dfe:	e0a3      	b.n	10001f48 <getDistance+0x180>
10001e00:	0020      	movs	r0, r4
10001e02:	f002 f942 	bl	1000408a <device_is_ready>
10001e06:	2800      	cmp	r0, #0
10001e08:	d100      	bne.n	10001e0c <getDistance+0x44>
10001e0a:	e09d      	b.n	10001f48 <getDistance+0x180>
10001e0c:	0020      	movs	r0, r4
10001e0e:	f002 f93c 	bl	1000408a <device_is_ready>
10001e12:	2800      	cmp	r0, #0
10001e14:	d100      	bne.n	10001e18 <getDistance+0x50>
10001e16:	e097      	b.n	10001f48 <getDistance+0x180>
10001e18:	0020      	movs	r0, r4
10001e1a:	f002 f936 	bl	1000408a <device_is_ready>
10001e1e:	2800      	cmp	r0, #0
10001e20:	d100      	bne.n	10001e24 <getDistance+0x5c>
10001e22:	e091      	b.n	10001f48 <getDistance+0x180>
10001e24:	0020      	movs	r0, r4
10001e26:	f002 f930 	bl	1000408a <device_is_ready>
10001e2a:	2800      	cmp	r0, #0
10001e2c:	d100      	bne.n	10001e30 <getDistance+0x68>
10001e2e:	e08b      	b.n	10001f48 <getDistance+0x180>
    {
        return;
    }

    ConfGpio5 = gpio_pin_configure_dt(&Echo1, GPIO_INPUT);
10001e30:	2180      	movs	r1, #128	; 0x80
10001e32:	4863      	ldr	r0, [pc, #396]	; (10001fc0 <getDistance+0x1f8>)
10001e34:	0249      	lsls	r1, r1, #9
10001e36:	f7ff ff65 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e3a:	21d0      	movs	r1, #208	; 0xd0
    ConfGpio5 = gpio_pin_configure_dt(&Echo1, GPIO_INPUT);
10001e3c:	4b61      	ldr	r3, [pc, #388]	; (10001fc4 <getDistance+0x1fc>)
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e3e:	0349      	lsls	r1, r1, #13
    ConfGpio5 = gpio_pin_configure_dt(&Echo1, GPIO_INPUT);
10001e40:	6018      	str	r0, [r3, #0]
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e42:	4861      	ldr	r0, [pc, #388]	; (10001fc8 <getDistance+0x200>)
    ConfGpio5 = gpio_pin_configure_dt(&Echo1, GPIO_INPUT);
10001e44:	9300      	str	r3, [sp, #0]
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e46:	f7ff ff5d 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e4a:	2180      	movs	r1, #128	; 0x80
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e4c:	4b5f      	ldr	r3, [pc, #380]	; (10001fcc <getDistance+0x204>)
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e4e:	0249      	lsls	r1, r1, #9
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e50:	6018      	str	r0, [r3, #0]
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e52:	485f      	ldr	r0, [pc, #380]	; (10001fd0 <getDistance+0x208>)
    ConfGpio6 = gpio_pin_configure_dt(&Trig1, GPIO_OUTPUT_ACTIVE);
10001e54:	9301      	str	r3, [sp, #4]
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e56:	f7ff ff55 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio8 = gpio_pin_configure_dt(&Trig2, GPIO_OUTPUT_ACTIVE);
10001e5a:	21d0      	movs	r1, #208	; 0xd0
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e5c:	4b5d      	ldr	r3, [pc, #372]	; (10001fd4 <getDistance+0x20c>)
    ConfGpio8 = gpio_pin_configure_dt(&Trig2, GPIO_OUTPUT_ACTIVE);
10001e5e:	0349      	lsls	r1, r1, #13
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e60:	6018      	str	r0, [r3, #0]
    ConfGpio8 = gpio_pin_configure_dt(&Trig2, GPIO_OUTPUT_ACTIVE);
10001e62:	485d      	ldr	r0, [pc, #372]	; (10001fd8 <getDistance+0x210>)
    ConfGpio7 = gpio_pin_configure_dt(&Echo2, GPIO_INPUT);
10001e64:	9302      	str	r3, [sp, #8]
    ConfGpio8 = gpio_pin_configure_dt(&Trig2, GPIO_OUTPUT_ACTIVE);
10001e66:	f7ff ff4d 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio9 = gpio_pin_configure_dt(&Echo3, GPIO_INPUT);
10001e6a:	2180      	movs	r1, #128	; 0x80
    ConfGpio8 = gpio_pin_configure_dt(&Trig2, GPIO_OUTPUT_ACTIVE);
10001e6c:	4f5b      	ldr	r7, [pc, #364]	; (10001fdc <getDistance+0x214>)
    ConfGpio9 = gpio_pin_configure_dt(&Echo3, GPIO_INPUT);
10001e6e:	0249      	lsls	r1, r1, #9
    ConfGpio8 = gpio_pin_configure_dt(&Trig2, GPIO_OUTPUT_ACTIVE);
10001e70:	6038      	str	r0, [r7, #0]
    ConfGpio9 = gpio_pin_configure_dt(&Echo3, GPIO_INPUT);
10001e72:	485b      	ldr	r0, [pc, #364]	; (10001fe0 <getDistance+0x218>)
10001e74:	f7ff ff46 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio10 = gpio_pin_configure_dt(&Trig3, GPIO_OUTPUT_ACTIVE);
10001e78:	21d0      	movs	r1, #208	; 0xd0
    ConfGpio9 = gpio_pin_configure_dt(&Echo3, GPIO_INPUT);
10001e7a:	4e5a      	ldr	r6, [pc, #360]	; (10001fe4 <getDistance+0x21c>)
    ConfGpio10 = gpio_pin_configure_dt(&Trig3, GPIO_OUTPUT_ACTIVE);
10001e7c:	0349      	lsls	r1, r1, #13
    ConfGpio9 = gpio_pin_configure_dt(&Echo3, GPIO_INPUT);
10001e7e:	6030      	str	r0, [r6, #0]
    ConfGpio10 = gpio_pin_configure_dt(&Trig3, GPIO_OUTPUT_ACTIVE);
10001e80:	4859      	ldr	r0, [pc, #356]	; (10001fe8 <getDistance+0x220>)
10001e82:	f7ff ff3f 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio18 = gpio_pin_configure_dt(&Echo4, GPIO_INPUT);
10001e86:	2180      	movs	r1, #128	; 0x80
    ConfGpio10 = gpio_pin_configure_dt(&Trig3, GPIO_OUTPUT_ACTIVE);
10001e88:	4d58      	ldr	r5, [pc, #352]	; (10001fec <getDistance+0x224>)
    ConfGpio18 = gpio_pin_configure_dt(&Echo4, GPIO_INPUT);
10001e8a:	0249      	lsls	r1, r1, #9
    ConfGpio10 = gpio_pin_configure_dt(&Trig3, GPIO_OUTPUT_ACTIVE);
10001e8c:	6028      	str	r0, [r5, #0]
    ConfGpio18 = gpio_pin_configure_dt(&Echo4, GPIO_INPUT);
10001e8e:	4858      	ldr	r0, [pc, #352]	; (10001ff0 <getDistance+0x228>)
10001e90:	f7ff ff38 	bl	10001d04 <gpio_pin_configure_dt>
    ConfGpio26 = gpio_pin_configure_dt(&Trig4, GPIO_OUTPUT_ACTIVE);
10001e94:	21d0      	movs	r1, #208	; 0xd0
    ConfGpio18 = gpio_pin_configure_dt(&Echo4, GPIO_INPUT);
10001e96:	4c57      	ldr	r4, [pc, #348]	; (10001ff4 <getDistance+0x22c>)
    ConfGpio26 = gpio_pin_configure_dt(&Trig4, GPIO_OUTPUT_ACTIVE);
10001e98:	0349      	lsls	r1, r1, #13
    ConfGpio18 = gpio_pin_configure_dt(&Echo4, GPIO_INPUT);
10001e9a:	6020      	str	r0, [r4, #0]
    ConfGpio26 = gpio_pin_configure_dt(&Trig4, GPIO_OUTPUT_ACTIVE);
10001e9c:	4856      	ldr	r0, [pc, #344]	; (10001ff8 <getDistance+0x230>)
10001e9e:	f7ff ff31 	bl	10001d04 <gpio_pin_configure_dt>
10001ea2:	0003      	movs	r3, r0
10001ea4:	4a55      	ldr	r2, [pc, #340]	; (10001ffc <getDistance+0x234>)
10001ea6:	6010      	str	r0, [r2, #0]

    if (ConfGpio5 < 0 || ConfGpio6 < 0 || ConfGpio7 < 0 || ConfGpio8 < 0 || ConfGpio9 < 0 || ConfGpio10 < 0 || ConfGpio18 < 0 || ConfGpio26 < 0)
10001ea8:	9a00      	ldr	r2, [sp, #0]
10001eaa:	6810      	ldr	r0, [r2, #0]
10001eac:	9a01      	ldr	r2, [sp, #4]
10001eae:	6812      	ldr	r2, [r2, #0]
10001eb0:	4310      	orrs	r0, r2
10001eb2:	9a02      	ldr	r2, [sp, #8]
10001eb4:	6812      	ldr	r2, [r2, #0]
10001eb6:	4310      	orrs	r0, r2
10001eb8:	683a      	ldr	r2, [r7, #0]
10001eba:	4310      	orrs	r0, r2
10001ebc:	6832      	ldr	r2, [r6, #0]
10001ebe:	4310      	orrs	r0, r2
10001ec0:	682a      	ldr	r2, [r5, #0]
10001ec2:	4310      	orrs	r0, r2
10001ec4:	6822      	ldr	r2, [r4, #0]
10001ec6:	4310      	orrs	r0, r2
10001ec8:	4318      	orrs	r0, r3
10001eca:	d43d      	bmi.n	10001f48 <getDistance+0x180>
        float time;
        
        int val;
        int aux = 0;
        // TRIGG SIGNAL , pulso de 10u
        trig1signal = 0;
10001ecc:	2400      	movs	r4, #0
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
10001ece:	4d3b      	ldr	r5, [pc, #236]	; (10001fbc <getDistance+0x1f4>)
10001ed0:	4e4b      	ldr	r6, [pc, #300]	; (10002000 <getDistance+0x238>)
10001ed2:	2201      	movs	r2, #1
10001ed4:	2106      	movs	r1, #6
10001ed6:	0028      	movs	r0, r5
10001ed8:	7034      	strb	r4, [r6, #0]
10001eda:	f002 f8da 	bl	10004092 <gpio_pin_set.isra.0>
        gpio_pin_set_dt(&Trig1, !trig1signal);
        uscounter(10);
10001ede:	200a      	movs	r0, #10
10001ee0:	f002 f8ee 	bl	100040c0 <uscounter>
10001ee4:	0028      	movs	r0, r5
10001ee6:	2106      	movs	r1, #6
        gpio_pin_set_dt(&Trig1, trig1signal);
10001ee8:	7832      	ldrb	r2, [r6, #0]
10001eea:	f002 f8d2 	bl	10004092 <gpio_pin_set.isra.0>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
10001eee:	f001 f8e7 	bl	100030c0 <sys_clock_cycle_get_32>
10001ef2:	0005      	movs	r5, r0
        // Echo lecture
        start_time = k_cycle_get_32(); // tiempo inicial
        while (1)
        {

            val = gpio_pin_get_dt(&Echo1);
10001ef4:	f7ff ff2e 	bl	10001d54 <gpio_pin_get_dt.constprop.0>

            if (gpio_pin_get_dt(&Echo1) == 0)
10001ef8:	f7ff ff2c 	bl	10001d54 <gpio_pin_get_dt.constprop.0>
10001efc:	2800      	cmp	r0, #0
10001efe:	d125      	bne.n	10001f4c <getDistance+0x184>
10001f00:	f001 f8de 	bl	100030c0 <sys_clock_cycle_get_32>
            {
                stop_time = k_cycle_get_32();
                cycles_spent = stop_time - start_time;
                if (cycles_spent > 1064000)
10001f04:	4b3f      	ldr	r3, [pc, #252]	; (10002004 <getDistance+0x23c>)
                cycles_spent = stop_time - start_time;
10001f06:	1b44      	subs	r4, r0, r5
                if (cycles_spent > 1064000)
10001f08:	429c      	cmp	r4, r3
10001f0a:	d9f3      	bls.n	10001ef4 <getDistance+0x12c>
                {
                    printk("entre aca %d \n", cycles_spent);
10001f0c:	0021      	movs	r1, r4
10001f0e:	483e      	ldr	r0, [pc, #248]	; (10002008 <getDistance+0x240>)
10001f10:	f002 f8e5 	bl	100040de <printk>
                printf("distancia en cm: %.3f cm <<", *distance);
                break;
            }
        }

        if (ConfGpio5 < 0 || ConfGpio6 < 0 || ConfGpio7 < 0 || ConfGpio8 < 0 || ConfGpio9 < 0 || ConfGpio10 < 0 || ConfGpio18 < 0 || ConfGpio26 < 0)
10001f14:	9b00      	ldr	r3, [sp, #0]
10001f16:	9a01      	ldr	r2, [sp, #4]
10001f18:	681b      	ldr	r3, [r3, #0]
10001f1a:	6812      	ldr	r2, [r2, #0]
10001f1c:	4313      	orrs	r3, r2
10001f1e:	9a02      	ldr	r2, [sp, #8]
10001f20:	6812      	ldr	r2, [r2, #0]
10001f22:	4313      	orrs	r3, r2
10001f24:	683a      	ldr	r2, [r7, #0]
10001f26:	4313      	orrs	r3, r2
10001f28:	4a2e      	ldr	r2, [pc, #184]	; (10001fe4 <getDistance+0x21c>)
10001f2a:	6812      	ldr	r2, [r2, #0]
10001f2c:	4313      	orrs	r3, r2
10001f2e:	4a2f      	ldr	r2, [pc, #188]	; (10001fec <getDistance+0x224>)
10001f30:	6812      	ldr	r2, [r2, #0]
10001f32:	4313      	orrs	r3, r2
10001f34:	4a2f      	ldr	r2, [pc, #188]	; (10001ff4 <getDistance+0x22c>)
10001f36:	6812      	ldr	r2, [r2, #0]
10001f38:	4313      	orrs	r3, r2
10001f3a:	4a30      	ldr	r2, [pc, #192]	; (10001ffc <getDistance+0x234>)
10001f3c:	6812      	ldr	r2, [r2, #0]
10001f3e:	4313      	orrs	r3, r2
10001f40:	d536      	bpl.n	10001fb0 <getDistance+0x1e8>
        {
            printk("fail");
10001f42:	4832      	ldr	r0, [pc, #200]	; (1000200c <getDistance+0x244>)
10001f44:	f002 f8cb 	bl	100040de <printk>
            return;
        }

        k_msleep(1000);
    }
}
10001f48:	b005      	add	sp, #20
10001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f4c:	f001 f8b8 	bl	100030c0 <sys_clock_cycle_get_32>
10001f50:	0005      	movs	r5, r0
                while (gpio_pin_get_dt(&Echo1) == 1)
10001f52:	f7ff feff 	bl	10001d54 <gpio_pin_get_dt.constprop.0>
10001f56:	2801      	cmp	r0, #1
10001f58:	d026      	beq.n	10001fa8 <getDistance+0x1e0>
                printk("Lectura en ciclos: %d<<\n ", cycles_spent);
10001f5a:	0021      	movs	r1, r4
10001f5c:	482c      	ldr	r0, [pc, #176]	; (10002010 <getDistance+0x248>)
10001f5e:	f002 f8be 	bl	100040de <printk>
                time = cycles_spent * 0.00000000751 / 2;
10001f62:	0020      	movs	r0, r4
10001f64:	f7ff fc94 	bl	10001890 <__aeabi_ui2d>
10001f68:	4a2a      	ldr	r2, [pc, #168]	; (10002014 <getDistance+0x24c>)
10001f6a:	4b2b      	ldr	r3, [pc, #172]	; (10002018 <getDistance+0x250>)
10001f6c:	f7fe ff52 	bl	10000e14 <__aeabi_dmul>
10001f70:	2200      	movs	r2, #0
10001f72:	4b2a      	ldr	r3, [pc, #168]	; (1000201c <getDistance+0x254>)
10001f74:	f7fe ff4e 	bl	10000e14 <__aeabi_dmul>
10001f78:	f7ff fcec 	bl	10001954 <__aeabi_d2f>
                *distance = time * 343.3 * 100;
10001f7c:	f7ff fca8 	bl	100018d0 <__aeabi_f2d>
10001f80:	4a27      	ldr	r2, [pc, #156]	; (10002020 <getDistance+0x258>)
10001f82:	4b28      	ldr	r3, [pc, #160]	; (10002024 <getDistance+0x25c>)
10001f84:	f7fe ff46 	bl	10000e14 <__aeabi_dmul>
10001f88:	2200      	movs	r2, #0
10001f8a:	4b27      	ldr	r3, [pc, #156]	; (10002028 <getDistance+0x260>)
10001f8c:	f7fe ff42 	bl	10000e14 <__aeabi_dmul>
10001f90:	f7ff fce0 	bl	10001954 <__aeabi_d2f>
10001f94:	9b03      	ldr	r3, [sp, #12]
10001f96:	6018      	str	r0, [r3, #0]
                printf("distancia en cm: %.3f cm <<", *distance);
10001f98:	f7ff fc9a 	bl	100018d0 <__aeabi_f2d>
10001f9c:	0002      	movs	r2, r0
10001f9e:	000b      	movs	r3, r1
10001fa0:	4822      	ldr	r0, [pc, #136]	; (1000202c <getDistance+0x264>)
10001fa2:	f000 fdcb 	bl	10002b3c <printf>
                break;
10001fa6:	e7b5      	b.n	10001f14 <getDistance+0x14c>
10001fa8:	f001 f88a 	bl	100030c0 <sys_clock_cycle_get_32>
                    cycles_spent = stop_time - start_time; // contando los ciclos
10001fac:	1b44      	subs	r4, r0, r5
10001fae:	e7d0      	b.n	10001f52 <getDistance+0x18a>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
10001fb0:	2100      	movs	r1, #0
10001fb2:	481f      	ldr	r0, [pc, #124]	; (10002030 <getDistance+0x268>)
10001fb4:	f002 f880 	bl	100040b8 <k_sleep.isra.0>
10001fb8:	e788      	b.n	10001ecc <getDistance+0x104>
10001fba:	46c0      	nop			; (mov r8, r8)
10001fbc:	10004908 	.word	0x10004908
10001fc0:	10004a60 	.word	0x10004a60
10001fc4:	20000134 	.word	0x20000134
10001fc8:	10004a58 	.word	0x10004a58
10001fcc:	20000130 	.word	0x20000130
10001fd0:	10004a50 	.word	0x10004a50
10001fd4:	2000012c 	.word	0x2000012c
10001fd8:	10004a48 	.word	0x10004a48
10001fdc:	20000128 	.word	0x20000128
10001fe0:	10004a40 	.word	0x10004a40
10001fe4:	20000124 	.word	0x20000124
10001fe8:	10004a38 	.word	0x10004a38
10001fec:	20000120 	.word	0x20000120
10001ff0:	10004a30 	.word	0x10004a30
10001ff4:	2000011c 	.word	0x2000011c
10001ff8:	10004a28 	.word	0x10004a28
10001ffc:	20000118 	.word	0x20000118
10002000:	200001b8 	.word	0x200001b8
10002004:	00103c40 	.word	0x00103c40
10002008:	10004c0f 	.word	0x10004c0f
1000200c:	10004c54 	.word	0x10004c54
10002010:	10004c1e 	.word	0x10004c1e
10002014:	899cc785 	.word	0x899cc785
10002018:	3e4020aa 	.word	0x3e4020aa
1000201c:	3fe00000 	.word	0x3fe00000
10002020:	cccccccd 	.word	0xcccccccd
10002024:	407574cc 	.word	0x407574cc
10002028:	40590000 	.word	0x40590000
1000202c:	10004c38 	.word	0x10004c38
10002030:	00002710 	.word	0x00002710

10002034 <main>:




void main(void)
{
10002034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	servo_tapa(RIGTH,servo2);
	servo_tapa(LEFT,servo0);
	servo_tapa(RIGTH,servo1);
	servo_tapa(LEFT,servo3);*/
	
	getDistance(&distance);
10002036:	a803      	add	r0, sp, #12
10002038:	f7ff fec6 	bl	10001dc8 <getDistance>
	
	printk("prueba");
1000203c:	480f      	ldr	r0, [pc, #60]	; (1000207c <main+0x48>)
1000203e:	f002 f84e 	bl	100040de <printk>
	int ret;
	
	ret = pwm_set_pulse_dt(&servo2, PWM_USEC(700));
10002042:	490f      	ldr	r1, [pc, #60]	; (10002080 <main+0x4c>)
10002044:	480f      	ldr	r0, [pc, #60]	; (10002084 <main+0x50>)
10002046:	f002 f818 	bl	1000407a <pwm_set_pulse_dt>
1000204a:	1e01      	subs	r1, r0, #0
	
	if (ret < 0) {
1000204c:	da04      	bge.n	10002058 <main+0x24>
		printk("Error %d: failed to set pulse width\n", ret);
1000204e:	480e      	ldr	r0, [pc, #56]	; (10002088 <main+0x54>)
10002050:	f002 f845 	bl	100040de <printk>
	
	

	
	
}
10002054:	b005      	add	sp, #20
10002056:	bd00      	pop	{pc}
		printk("ok");
10002058:	480c      	ldr	r0, [pc, #48]	; (1000208c <main+0x58>)
1000205a:	f002 f840 	bl	100040de <printk>
	servo_tapa(LEFT,servo0);
1000205e:	4b0c      	ldr	r3, [pc, #48]	; (10002090 <main+0x5c>)
10002060:	2002      	movs	r0, #2
10002062:	68da      	ldr	r2, [r3, #12]
10002064:	9200      	str	r2, [sp, #0]
10002066:	cb0e      	ldmia	r3, {r1, r2, r3}
10002068:	f7ff fe86 	bl	10001d78 <servo_tapa>
	servo_tapa(RIGTH,servo1);
1000206c:	4b09      	ldr	r3, [pc, #36]	; (10002094 <main+0x60>)
1000206e:	2000      	movs	r0, #0
10002070:	68da      	ldr	r2, [r3, #12]
10002072:	9200      	str	r2, [sp, #0]
10002074:	cb0e      	ldmia	r3, {r1, r2, r3}
10002076:	f7ff fe7f 	bl	10001d78 <servo_tapa>
1000207a:	e7eb      	b.n	10002054 <main+0x20>
1000207c:	10004c59 	.word	0x10004c59
10002080:	000aae60 	.word	0x000aae60
10002084:	10004a68 	.word	0x10004a68
10002088:	10004bd1 	.word	0x10004bd1
1000208c:	10004c60 	.word	0x10004c60
10002090:	10004a88 	.word	0x10004a88
10002094:	10004a78 	.word	0x10004a78

10002098 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
10002098:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
1000209a:	4b02      	ldr	r3, [pc, #8]	; (100020a4 <char_out+0xc>)
1000209c:	681b      	ldr	r3, [r3, #0]
1000209e:	4798      	blx	r3
}
100020a0:	bd10      	pop	{r4, pc}
100020a2:	46c0      	nop			; (mov r8, r8)
100020a4:	20000000 	.word	0x20000000

100020a8 <__printk_hook_install>:
	_char_out = fn;
100020a8:	4b01      	ldr	r3, [pc, #4]	; (100020b0 <__printk_hook_install+0x8>)
100020aa:	6018      	str	r0, [r3, #0]
}
100020ac:	4770      	bx	lr
100020ae:	46c0      	nop			; (mov r8, r8)
100020b0:	20000000 	.word	0x20000000

100020b4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100020b4:	b513      	push	{r0, r1, r4, lr}
100020b6:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100020b8:	2100      	movs	r1, #0
100020ba:	4c03      	ldr	r4, [pc, #12]	; (100020c8 <vprintk+0x14>)
100020bc:	0002      	movs	r2, r0
100020be:	9100      	str	r1, [sp, #0]
100020c0:	0020      	movs	r0, r4
100020c2:	f000 f803 	bl	100020cc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
100020c6:	bd13      	pop	{r0, r1, r4, pc}
100020c8:	10002099 	.word	0x10002099

100020cc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
100020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100020ce:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
100020d0:	2700      	movs	r7, #0
{
100020d2:	b099      	sub	sp, #100	; 0x64
100020d4:	9004      	str	r0, [sp, #16]
100020d6:	9105      	str	r1, [sp, #20]
100020d8:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
100020da:	9b08      	ldr	r3, [sp, #32]
100020dc:	7818      	ldrb	r0, [r3, #0]
100020de:	2800      	cmp	r0, #0
100020e0:	d101      	bne.n	100020e6 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
100020e2:	0038      	movs	r0, r7
100020e4:	e327      	b.n	10002736 <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
100020e6:	9b08      	ldr	r3, [sp, #32]
100020e8:	3301      	adds	r3, #1
100020ea:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
100020ec:	2825      	cmp	r0, #37	; 0x25
100020ee:	d007      	beq.n	10002100 <z_cbvprintf_impl+0x34>
			OUTC('%');
100020f0:	9905      	ldr	r1, [sp, #20]
100020f2:	9b04      	ldr	r3, [sp, #16]
100020f4:	4798      	blx	r3
100020f6:	2800      	cmp	r0, #0
100020f8:	da00      	bge.n	100020fc <z_cbvprintf_impl+0x30>
100020fa:	e31c      	b.n	10002736 <z_cbvprintf_impl+0x66a>
100020fc:	3701      	adds	r7, #1
		if (bps == NULL) {
100020fe:	e1e3      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
		} state = {
10002100:	ad12      	add	r5, sp, #72	; 0x48
10002102:	2218      	movs	r2, #24
10002104:	2100      	movs	r1, #0
10002106:	0028      	movs	r0, r5
10002108:	f002 f894 	bl	10004234 <memset>
	if (*sp == '%') {
1000210c:	9b08      	ldr	r3, [sp, #32]
1000210e:	785b      	ldrb	r3, [r3, #1]
10002110:	2b25      	cmp	r3, #37	; 0x25
10002112:	d114      	bne.n	1000213e <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10002114:	9a08      	ldr	r2, [sp, #32]
10002116:	72eb      	strb	r3, [r5, #11]
10002118:	3202      	adds	r2, #2
1000211a:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
1000211c:	ab12      	add	r3, sp, #72	; 0x48
1000211e:	7a5a      	ldrb	r2, [r3, #9]
10002120:	07d1      	lsls	r1, r2, #31
10002122:	d400      	bmi.n	10002126 <z_cbvprintf_impl+0x5a>
10002124:	e17f      	b.n	10002426 <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10002126:	cc02      	ldmia	r4!, {r1}
10002128:	9103      	str	r1, [sp, #12]
			if (width < 0) {
1000212a:	2900      	cmp	r1, #0
1000212c:	db00      	blt.n	10002130 <z_cbvprintf_impl+0x64>
1000212e:	e17f      	b.n	10002430 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10002130:	2104      	movs	r1, #4
10002132:	7a18      	ldrb	r0, [r3, #8]
10002134:	4301      	orrs	r1, r0
10002136:	7219      	strb	r1, [r3, #8]
				width = -width;
10002138:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
1000213a:	425b      	negs	r3, r3
1000213c:	e177      	b.n	1000242e <z_cbvprintf_impl+0x362>
1000213e:	2200      	movs	r2, #0
		switch (*sp) {
10002140:	2601      	movs	r6, #1
10002142:	0015      	movs	r5, r2
10002144:	0010      	movs	r0, r2
10002146:	4694      	mov	ip, r2
10002148:	9203      	str	r2, [sp, #12]
1000214a:	9b07      	ldr	r3, [sp, #28]
1000214c:	781b      	ldrb	r3, [r3, #0]
1000214e:	2b2b      	cmp	r3, #43	; 0x2b
10002150:	d06f      	beq.n	10002232 <z_cbvprintf_impl+0x166>
10002152:	d868      	bhi.n	10002226 <z_cbvprintf_impl+0x15a>
10002154:	2b20      	cmp	r3, #32
10002156:	d071      	beq.n	1000223c <z_cbvprintf_impl+0x170>
10002158:	2b23      	cmp	r3, #35	; 0x23
1000215a:	d071      	beq.n	10002240 <z_cbvprintf_impl+0x174>
1000215c:	2a00      	cmp	r2, #0
1000215e:	d005      	beq.n	1000216c <z_cbvprintf_impl+0xa0>
10002160:	ae12      	add	r6, sp, #72	; 0x48
10002162:	7a32      	ldrb	r2, [r6, #8]
10002164:	0011      	movs	r1, r2
10002166:	2240      	movs	r2, #64	; 0x40
10002168:	430a      	orrs	r2, r1
1000216a:	7232      	strb	r2, [r6, #8]
1000216c:	2d00      	cmp	r5, #0
1000216e:	d004      	beq.n	1000217a <z_cbvprintf_impl+0xae>
10002170:	2220      	movs	r2, #32
10002172:	ad12      	add	r5, sp, #72	; 0x48
10002174:	7a2e      	ldrb	r6, [r5, #8]
10002176:	4332      	orrs	r2, r6
10002178:	722a      	strb	r2, [r5, #8]
1000217a:	2800      	cmp	r0, #0
1000217c:	d004      	beq.n	10002188 <z_cbvprintf_impl+0xbc>
1000217e:	2210      	movs	r2, #16
10002180:	a812      	add	r0, sp, #72	; 0x48
10002182:	7a05      	ldrb	r5, [r0, #8]
10002184:	432a      	orrs	r2, r5
10002186:	7202      	strb	r2, [r0, #8]
10002188:	9a03      	ldr	r2, [sp, #12]
1000218a:	2a00      	cmp	r2, #0
1000218c:	d004      	beq.n	10002198 <z_cbvprintf_impl+0xcc>
1000218e:	2208      	movs	r2, #8
10002190:	a912      	add	r1, sp, #72	; 0x48
10002192:	7a08      	ldrb	r0, [r1, #8]
10002194:	4302      	orrs	r2, r0
10002196:	720a      	strb	r2, [r1, #8]
10002198:	4662      	mov	r2, ip
1000219a:	2a00      	cmp	r2, #0
1000219c:	d004      	beq.n	100021a8 <z_cbvprintf_impl+0xdc>
1000219e:	2204      	movs	r2, #4
100021a0:	a912      	add	r1, sp, #72	; 0x48
100021a2:	7a08      	ldrb	r0, [r1, #8]
100021a4:	4302      	orrs	r2, r0
100021a6:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100021a8:	2144      	movs	r1, #68	; 0x44
100021aa:	a812      	add	r0, sp, #72	; 0x48
100021ac:	7a02      	ldrb	r2, [r0, #8]
100021ae:	4011      	ands	r1, r2
100021b0:	2944      	cmp	r1, #68	; 0x44
100021b2:	d102      	bne.n	100021ba <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
100021b4:	2140      	movs	r1, #64	; 0x40
100021b6:	438a      	bics	r2, r1
100021b8:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100021ba:	2280      	movs	r2, #128	; 0x80
100021bc:	7a01      	ldrb	r1, [r0, #8]
100021be:	4252      	negs	r2, r2
100021c0:	430a      	orrs	r2, r1
100021c2:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
100021c4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
100021c6:	250a      	movs	r5, #10
100021c8:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
100021ca:	2b2a      	cmp	r3, #42	; 0x2a
100021cc:	d140      	bne.n	10002250 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
100021ce:	7a41      	ldrb	r1, [r0, #9]
100021d0:	3b29      	subs	r3, #41	; 0x29
100021d2:	430b      	orrs	r3, r1
		return ++sp;
100021d4:	3201      	adds	r2, #1
		conv->width_star = true;
100021d6:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
100021d8:	7815      	ldrb	r5, [r2, #0]
100021da:	2602      	movs	r6, #2
100021dc:	0029      	movs	r1, r5
100021de:	392e      	subs	r1, #46	; 0x2e
100021e0:	424b      	negs	r3, r1
100021e2:	4159      	adcs	r1, r3
100021e4:	a812      	add	r0, sp, #72	; 0x48
100021e6:	7a43      	ldrb	r3, [r0, #9]
100021e8:	0049      	lsls	r1, r1, #1
100021ea:	43b3      	bics	r3, r6
100021ec:	430b      	orrs	r3, r1
100021ee:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
100021f0:	2d2e      	cmp	r5, #46	; 0x2e
100021f2:	d145      	bne.n	10002280 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
100021f4:	7853      	ldrb	r3, [r2, #1]
100021f6:	2b2a      	cmp	r3, #42	; 0x2a
100021f8:	d03d      	beq.n	10002276 <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
100021fa:	2300      	movs	r3, #0
	++sp;
100021fc:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
100021fe:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10002200:	7811      	ldrb	r1, [r2, #0]
10002202:	1c55      	adds	r5, r2, #1
10002204:	0008      	movs	r0, r1
10002206:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10002208:	2809      	cmp	r0, #9
1000220a:	d963      	bls.n	100022d4 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
1000220c:	a912      	add	r1, sp, #72	; 0x48
1000220e:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10002210:	7a0d      	ldrb	r5, [r1, #8]
10002212:	07a8      	lsls	r0, r5, #30
10002214:	4318      	orrs	r0, r3
10002216:	2302      	movs	r3, #2
10002218:	439d      	bics	r5, r3
1000221a:	002b      	movs	r3, r5
1000221c:	0fc0      	lsrs	r0, r0, #31
1000221e:	0040      	lsls	r0, r0, #1
10002220:	4303      	orrs	r3, r0
10002222:	720b      	strb	r3, [r1, #8]
	return sp;
10002224:	e02c      	b.n	10002280 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10002226:	2b2d      	cmp	r3, #45	; 0x2d
10002228:	d00c      	beq.n	10002244 <z_cbvprintf_impl+0x178>
1000222a:	2b30      	cmp	r3, #48	; 0x30
1000222c:	d196      	bne.n	1000215c <z_cbvprintf_impl+0x90>
1000222e:	0032      	movs	r2, r6
10002230:	e000      	b.n	10002234 <z_cbvprintf_impl+0x168>
10002232:	9603      	str	r6, [sp, #12]
			++sp;
10002234:	9b07      	ldr	r3, [sp, #28]
10002236:	3301      	adds	r3, #1
10002238:	9307      	str	r3, [sp, #28]
	} while (loop);
1000223a:	e786      	b.n	1000214a <z_cbvprintf_impl+0x7e>
		switch (*sp) {
1000223c:	0030      	movs	r0, r6
1000223e:	e7f9      	b.n	10002234 <z_cbvprintf_impl+0x168>
10002240:	0035      	movs	r5, r6
10002242:	e7f7      	b.n	10002234 <z_cbvprintf_impl+0x168>
10002244:	46b4      	mov	ip, r6
10002246:	e7f5      	b.n	10002234 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10002248:	0032      	movs	r2, r6
1000224a:	4369      	muls	r1, r5
1000224c:	3930      	subs	r1, #48	; 0x30
1000224e:	1859      	adds	r1, r3, r1
10002250:	7813      	ldrb	r3, [r2, #0]
10002252:	1c56      	adds	r6, r2, #1
10002254:	0018      	movs	r0, r3
10002256:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10002258:	2809      	cmp	r0, #9
1000225a:	d9f5      	bls.n	10002248 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
1000225c:	9b07      	ldr	r3, [sp, #28]
1000225e:	4293      	cmp	r3, r2
10002260:	d0ba      	beq.n	100021d8 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10002262:	2502      	movs	r5, #2
		conv->width_value = width;
10002264:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10002266:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10002268:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
1000226a:	0fc9      	lsrs	r1, r1, #31
1000226c:	0049      	lsls	r1, r1, #1
1000226e:	43a8      	bics	r0, r5
10002270:	4301      	orrs	r1, r0
10002272:	7219      	strb	r1, [r3, #8]
10002274:	e7b0      	b.n	100021d8 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10002276:	2304      	movs	r3, #4
10002278:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
1000227a:	3202      	adds	r2, #2
		conv->prec_star = true;
1000227c:	430b      	orrs	r3, r1
1000227e:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10002280:	7811      	ldrb	r1, [r2, #0]
10002282:	ab12      	add	r3, sp, #72	; 0x48
10002284:	296c      	cmp	r1, #108	; 0x6c
10002286:	d045      	beq.n	10002314 <z_cbvprintf_impl+0x248>
10002288:	d829      	bhi.n	100022de <z_cbvprintf_impl+0x212>
1000228a:	2968      	cmp	r1, #104	; 0x68
1000228c:	d030      	beq.n	100022f0 <z_cbvprintf_impl+0x224>
1000228e:	296a      	cmp	r1, #106	; 0x6a
10002290:	d04c      	beq.n	1000232c <z_cbvprintf_impl+0x260>
10002292:	294c      	cmp	r1, #76	; 0x4c
10002294:	d054      	beq.n	10002340 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
10002296:	7811      	ldrb	r1, [r2, #0]
10002298:	1c53      	adds	r3, r2, #1
1000229a:	aa12      	add	r2, sp, #72	; 0x48
1000229c:	9307      	str	r3, [sp, #28]
1000229e:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
100022a0:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
100022a2:	2978      	cmp	r1, #120	; 0x78
100022a4:	d900      	bls.n	100022a8 <z_cbvprintf_impl+0x1dc>
100022a6:	e0b9      	b.n	1000241c <z_cbvprintf_impl+0x350>
100022a8:	296d      	cmp	r1, #109	; 0x6d
100022aa:	d850      	bhi.n	1000234e <z_cbvprintf_impl+0x282>
100022ac:	2969      	cmp	r1, #105	; 0x69
100022ae:	d900      	bls.n	100022b2 <z_cbvprintf_impl+0x1e6>
100022b0:	e0b4      	b.n	1000241c <z_cbvprintf_impl+0x350>
100022b2:	2957      	cmp	r1, #87	; 0x57
100022b4:	d866      	bhi.n	10002384 <z_cbvprintf_impl+0x2b8>
100022b6:	2941      	cmp	r1, #65	; 0x41
100022b8:	d003      	beq.n	100022c2 <z_cbvprintf_impl+0x1f6>
100022ba:	3945      	subs	r1, #69	; 0x45
100022bc:	2902      	cmp	r1, #2
100022be:	d900      	bls.n	100022c2 <z_cbvprintf_impl+0x1f6>
100022c0:	e0ac      	b.n	1000241c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
100022c2:	2307      	movs	r3, #7
100022c4:	a912      	add	r1, sp, #72	; 0x48
100022c6:	7a8a      	ldrb	r2, [r1, #10]
100022c8:	439a      	bics	r2, r3
100022ca:	3b03      	subs	r3, #3
100022cc:	4313      	orrs	r3, r2
100022ce:	728b      	strb	r3, [r1, #10]
			unsupported = true;
100022d0:	2301      	movs	r3, #1
			break;
100022d2:	e073      	b.n	100023bc <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
100022d4:	4373      	muls	r3, r6
100022d6:	3b30      	subs	r3, #48	; 0x30
100022d8:	002a      	movs	r2, r5
100022da:	185b      	adds	r3, r3, r1
100022dc:	e790      	b.n	10002200 <z_cbvprintf_impl+0x134>
	switch (*sp) {
100022de:	2974      	cmp	r1, #116	; 0x74
100022e0:	d029      	beq.n	10002336 <z_cbvprintf_impl+0x26a>
100022e2:	297a      	cmp	r1, #122	; 0x7a
100022e4:	d1d7      	bne.n	10002296 <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
100022e6:	2178      	movs	r1, #120	; 0x78
100022e8:	7a58      	ldrb	r0, [r3, #9]
100022ea:	4388      	bics	r0, r1
100022ec:	3948      	subs	r1, #72	; 0x48
100022ee:	e00d      	b.n	1000230c <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
100022f0:	7850      	ldrb	r0, [r2, #1]
100022f2:	2178      	movs	r1, #120	; 0x78
100022f4:	2868      	cmp	r0, #104	; 0x68
100022f6:	d106      	bne.n	10002306 <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
100022f8:	7a58      	ldrb	r0, [r3, #9]
100022fa:	4388      	bics	r0, r1
100022fc:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
100022fe:	4301      	orrs	r1, r0
10002300:	7259      	strb	r1, [r3, #9]
			++sp;
10002302:	3202      	adds	r2, #2
10002304:	e7c7      	b.n	10002296 <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
10002306:	7a58      	ldrb	r0, [r3, #9]
10002308:	4388      	bics	r0, r1
1000230a:	2110      	movs	r1, #16
1000230c:	4301      	orrs	r1, r0
1000230e:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10002310:	3201      	adds	r2, #1
10002312:	e7c0      	b.n	10002296 <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10002314:	7850      	ldrb	r0, [r2, #1]
10002316:	2178      	movs	r1, #120	; 0x78
10002318:	286c      	cmp	r0, #108	; 0x6c
1000231a:	d103      	bne.n	10002324 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
1000231c:	7a58      	ldrb	r0, [r3, #9]
1000231e:	4388      	bics	r0, r1
10002320:	3958      	subs	r1, #88	; 0x58
10002322:	e7ec      	b.n	100022fe <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10002324:	7a58      	ldrb	r0, [r3, #9]
10002326:	4388      	bics	r0, r1
10002328:	2118      	movs	r1, #24
1000232a:	e7ef      	b.n	1000230c <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
1000232c:	2178      	movs	r1, #120	; 0x78
1000232e:	7a58      	ldrb	r0, [r3, #9]
10002330:	4388      	bics	r0, r1
10002332:	3950      	subs	r1, #80	; 0x50
10002334:	e7ea      	b.n	1000230c <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10002336:	2178      	movs	r1, #120	; 0x78
10002338:	7a58      	ldrb	r0, [r3, #9]
1000233a:	4388      	bics	r0, r1
1000233c:	3940      	subs	r1, #64	; 0x40
1000233e:	e7e5      	b.n	1000230c <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10002340:	8918      	ldrh	r0, [r3, #8]
10002342:	49a5      	ldr	r1, [pc, #660]	; (100025d8 <z_cbvprintf_impl+0x50c>)
10002344:	4008      	ands	r0, r1
10002346:	49a5      	ldr	r1, [pc, #660]	; (100025dc <z_cbvprintf_impl+0x510>)
10002348:	4301      	orrs	r1, r0
1000234a:	8119      	strh	r1, [r3, #8]
		break;
1000234c:	e7e0      	b.n	10002310 <z_cbvprintf_impl+0x244>
1000234e:	2001      	movs	r0, #1
10002350:	0005      	movs	r5, r0
	switch (conv->specifier) {
10002352:	396e      	subs	r1, #110	; 0x6e
10002354:	b2c9      	uxtb	r1, r1
10002356:	408d      	lsls	r5, r1
10002358:	0029      	movs	r1, r5
1000235a:	4da1      	ldr	r5, [pc, #644]	; (100025e0 <z_cbvprintf_impl+0x514>)
1000235c:	4229      	tst	r1, r5
1000235e:	d138      	bne.n	100023d2 <z_cbvprintf_impl+0x306>
10002360:	2524      	movs	r5, #36	; 0x24
10002362:	4229      	tst	r1, r5
10002364:	d151      	bne.n	1000240a <z_cbvprintf_impl+0x33e>
10002366:	4201      	tst	r1, r0
10002368:	d058      	beq.n	1000241c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
1000236a:	2107      	movs	r1, #7
1000236c:	7a90      	ldrb	r0, [r2, #10]
1000236e:	4388      	bics	r0, r1
10002370:	3904      	subs	r1, #4
10002372:	4301      	orrs	r1, r0
10002374:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10002376:	2278      	movs	r2, #120	; 0x78
10002378:	4013      	ands	r3, r2
1000237a:	3b40      	subs	r3, #64	; 0x40
1000237c:	425a      	negs	r2, r3
1000237e:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10002380:	b2db      	uxtb	r3, r3
10002382:	e01b      	b.n	100023bc <z_cbvprintf_impl+0x2f0>
10002384:	2001      	movs	r0, #1
	switch (conv->specifier) {
10002386:	000d      	movs	r5, r1
10002388:	0006      	movs	r6, r0
1000238a:	3d58      	subs	r5, #88	; 0x58
1000238c:	b2ed      	uxtb	r5, r5
1000238e:	40ae      	lsls	r6, r5
10002390:	0035      	movs	r5, r6
10002392:	26e2      	movs	r6, #226	; 0xe2
10002394:	0236      	lsls	r6, r6, #8
10002396:	4235      	tst	r5, r6
10002398:	d193      	bne.n	100022c2 <z_cbvprintf_impl+0x1f6>
1000239a:	4e92      	ldr	r6, [pc, #584]	; (100025e4 <z_cbvprintf_impl+0x518>)
1000239c:	4235      	tst	r5, r6
1000239e:	d122      	bne.n	100023e6 <z_cbvprintf_impl+0x31a>
100023a0:	2184      	movs	r1, #132	; 0x84
100023a2:	0289      	lsls	r1, r1, #10
100023a4:	420d      	tst	r5, r1
100023a6:	d039      	beq.n	1000241c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
100023a8:	2507      	movs	r5, #7
100023aa:	7a91      	ldrb	r1, [r2, #10]
100023ac:	43a9      	bics	r1, r5
100023ae:	4301      	orrs	r1, r0
100023b0:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100023b2:	2178      	movs	r1, #120	; 0x78
100023b4:	400b      	ands	r3, r1
100023b6:	2b40      	cmp	r3, #64	; 0x40
100023b8:	d011      	beq.n	100023de <z_cbvprintf_impl+0x312>
	bool unsupported = false;
100023ba:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
100023bc:	aa12      	add	r2, sp, #72	; 0x48
100023be:	7a11      	ldrb	r1, [r2, #8]
100023c0:	0788      	lsls	r0, r1, #30
100023c2:	0fc0      	lsrs	r0, r0, #31
100023c4:	4303      	orrs	r3, r0
100023c6:	2002      	movs	r0, #2
100023c8:	005b      	lsls	r3, r3, #1
100023ca:	4381      	bics	r1, r0
100023cc:	4319      	orrs	r1, r3
100023ce:	7211      	strb	r1, [r2, #8]
	return sp;
100023d0:	e6a4      	b.n	1000211c <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
100023d2:	2107      	movs	r1, #7
100023d4:	7a95      	ldrb	r5, [r2, #10]
100023d6:	438d      	bics	r5, r1
100023d8:	3905      	subs	r1, #5
100023da:	4329      	orrs	r1, r5
100023dc:	e7e8      	b.n	100023b0 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
100023de:	7a13      	ldrb	r3, [r2, #8]
100023e0:	4303      	orrs	r3, r0
		conv->invalid = true;
100023e2:	7213      	strb	r3, [r2, #8]
		break;
100023e4:	e7e9      	b.n	100023ba <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
100023e6:	2507      	movs	r5, #7
100023e8:	7a96      	ldrb	r6, [r2, #10]
100023ea:	43ae      	bics	r6, r5
100023ec:	3d05      	subs	r5, #5
100023ee:	4335      	orrs	r5, r6
100023f0:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100023f2:	2578      	movs	r5, #120	; 0x78
100023f4:	402b      	ands	r3, r5
100023f6:	2b40      	cmp	r3, #64	; 0x40
100023f8:	d102      	bne.n	10002400 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
100023fa:	7a15      	ldrb	r5, [r2, #8]
100023fc:	4328      	orrs	r0, r5
100023fe:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10002400:	2963      	cmp	r1, #99	; 0x63
10002402:	d1da      	bne.n	100023ba <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
10002404:	1e5a      	subs	r2, r3, #1
10002406:	4193      	sbcs	r3, r2
10002408:	e7ba      	b.n	10002380 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
1000240a:	2107      	movs	r1, #7
1000240c:	7a90      	ldrb	r0, [r2, #10]
1000240e:	4388      	bics	r0, r1
10002410:	3904      	subs	r1, #4
10002412:	4301      	orrs	r1, r0
10002414:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
10002416:	2278      	movs	r2, #120	; 0x78
10002418:	4013      	ands	r3, r2
1000241a:	e7f3      	b.n	10002404 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
1000241c:	2301      	movs	r3, #1
1000241e:	aa12      	add	r2, sp, #72	; 0x48
10002420:	7a11      	ldrb	r1, [r2, #8]
10002422:	430b      	orrs	r3, r1
10002424:	e7dd      	b.n	100023e2 <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
10002426:	7a19      	ldrb	r1, [r3, #8]
10002428:	297f      	cmp	r1, #127	; 0x7f
1000242a:	d90f      	bls.n	1000244c <z_cbvprintf_impl+0x380>
			width = conv->width_value;
1000242c:	68db      	ldr	r3, [r3, #12]
		int width = -1;
1000242e:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10002430:	ab12      	add	r3, sp, #72	; 0x48
10002432:	0751      	lsls	r1, r2, #29
10002434:	d50c      	bpl.n	10002450 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
10002436:	cc04      	ldmia	r4!, {r2}
10002438:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
1000243a:	2a00      	cmp	r2, #0
1000243c:	da0c      	bge.n	10002458 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
1000243e:	2102      	movs	r1, #2
10002440:	7a5a      	ldrb	r2, [r3, #9]
10002442:	438a      	bics	r2, r1
10002444:	725a      	strb	r2, [r3, #9]
		int precision = -1;
10002446:	2301      	movs	r3, #1
10002448:	425b      	negs	r3, r3
1000244a:	e004      	b.n	10002456 <z_cbvprintf_impl+0x38a>
		int width = -1;
1000244c:	2301      	movs	r3, #1
1000244e:	e674      	b.n	1000213a <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10002450:	0792      	lsls	r2, r2, #30
10002452:	d5f8      	bpl.n	10002446 <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10002454:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
10002456:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10002458:	2500      	movs	r5, #0
1000245a:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
1000245c:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
1000245e:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10002460:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10002462:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10002464:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10002466:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10002468:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
1000246a:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
1000246c:	2b01      	cmp	r3, #1
1000246e:	d130      	bne.n	100024d2 <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10002470:	1ed0      	subs	r0, r2, #3
10002472:	2804      	cmp	r0, #4
10002474:	d804      	bhi.n	10002480 <z_cbvprintf_impl+0x3b4>
10002476:	f7fd fe97 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000247a:	450e      	.short	0x450e
1000247c:	0e45      	.short	0x0e45
1000247e:	0e          	.byte	0x0e
1000247f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10002480:	6823      	ldr	r3, [r4, #0]
10002482:	17d8      	asrs	r0, r3, #31
10002484:	9312      	str	r3, [sp, #72]	; 0x48
10002486:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10002488:	2a01      	cmp	r2, #1
1000248a:	d109      	bne.n	100024a0 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
1000248c:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
1000248e:	9312      	str	r3, [sp, #72]	; 0x48
10002490:	17db      	asrs	r3, r3, #31
10002492:	604b      	str	r3, [r1, #4]
10002494:	e006      	b.n	100024a4 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10002496:	cc08      	ldmia	r4!, {r3}
10002498:	9312      	str	r3, [sp, #72]	; 0x48
1000249a:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
1000249c:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
1000249e:	e002      	b.n	100024a6 <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
100024a0:	2a02      	cmp	r2, #2
100024a2:	d014      	beq.n	100024ce <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
100024a4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100024a6:	a912      	add	r1, sp, #72	; 0x48
100024a8:	7a0b      	ldrb	r3, [r1, #8]
100024aa:	2003      	movs	r0, #3
100024ac:	001d      	movs	r5, r3
100024ae:	4005      	ands	r5, r0
100024b0:	4203      	tst	r3, r0
100024b2:	d045      	beq.n	10002540 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100024b4:	9b07      	ldr	r3, [sp, #28]
100024b6:	9a08      	ldr	r2, [sp, #32]
100024b8:	9905      	ldr	r1, [sp, #20]
100024ba:	9804      	ldr	r0, [sp, #16]
100024bc:	f001 fe71 	bl	100041a2 <outs>
100024c0:	2800      	cmp	r0, #0
100024c2:	da00      	bge.n	100024c6 <z_cbvprintf_impl+0x3fa>
100024c4:	e137      	b.n	10002736 <z_cbvprintf_impl+0x66a>
100024c6:	183f      	adds	r7, r7, r0
			continue;
100024c8:	9b07      	ldr	r3, [sp, #28]
100024ca:	9308      	str	r3, [sp, #32]
100024cc:	e605      	b.n	100020da <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
100024ce:	b21b      	sxth	r3, r3
100024d0:	e7dd      	b.n	1000248e <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
100024d2:	2b02      	cmp	r3, #2
100024d4:	d125      	bne.n	10002522 <z_cbvprintf_impl+0x456>
			switch (length_mod) {
100024d6:	1ed0      	subs	r0, r2, #3
100024d8:	2804      	cmp	r0, #4
100024da:	d804      	bhi.n	100024e6 <z_cbvprintf_impl+0x41a>
100024dc:	f7fd fe64 	bl	100001a8 <__gnu_thumb1_case_uqi>
100024e0:	1912120d 	.word	0x1912120d
100024e4:	19          	.byte	0x19
100024e5:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
100024e6:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
100024e8:	2a01      	cmp	r2, #1
100024ea:	d016      	beq.n	1000251a <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
100024ec:	9312      	str	r3, [sp, #72]	; 0x48
100024ee:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
100024f0:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
100024f2:	2a02      	cmp	r2, #2
100024f4:	d1d7      	bne.n	100024a6 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
100024f6:	9312      	str	r3, [sp, #72]	; 0x48
100024f8:	e7d5      	b.n	100024a6 <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
100024fa:	cc08      	ldmia	r4!, {r3}
100024fc:	9312      	str	r3, [sp, #72]	; 0x48
100024fe:	2300      	movs	r3, #0
10002500:	9313      	str	r3, [sp, #76]	; 0x4c
10002502:	e7d0      	b.n	100024a6 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
10002504:	2307      	movs	r3, #7
10002506:	3407      	adds	r4, #7
10002508:	439c      	bics	r4, r3
				value->uint =
1000250a:	cc03      	ldmia	r4!, {r0, r1}
1000250c:	9012      	str	r0, [sp, #72]	; 0x48
1000250e:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10002510:	e7c9      	b.n	100024a6 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
10002512:	cc08      	ldmia	r4!, {r3}
10002514:	9312      	str	r3, [sp, #72]	; 0x48
10002516:	2300      	movs	r3, #0
10002518:	e7c0      	b.n	1000249c <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
1000251a:	b2db      	uxtb	r3, r3
1000251c:	9312      	str	r3, [sp, #72]	; 0x48
1000251e:	604d      	str	r5, [r1, #4]
10002520:	e7c1      	b.n	100024a6 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
10002522:	2b04      	cmp	r3, #4
10002524:	d108      	bne.n	10002538 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
10002526:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10002528:	3303      	adds	r3, #3
1000252a:	439c      	bics	r4, r3
1000252c:	6820      	ldr	r0, [r4, #0]
1000252e:	6861      	ldr	r1, [r4, #4]
10002530:	3408      	adds	r4, #8
10002532:	9012      	str	r0, [sp, #72]	; 0x48
10002534:	9113      	str	r1, [sp, #76]	; 0x4c
10002536:	e7b6      	b.n	100024a6 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10002538:	2b03      	cmp	r3, #3
1000253a:	d1b4      	bne.n	100024a6 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
1000253c:	cc08      	ldmia	r4!, {r3}
1000253e:	e7da      	b.n	100024f6 <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10002540:	7ac8      	ldrb	r0, [r1, #11]
10002542:	2878      	cmp	r0, #120	; 0x78
10002544:	d8c0      	bhi.n	100024c8 <z_cbvprintf_impl+0x3fc>
10002546:	2862      	cmp	r0, #98	; 0x62
10002548:	d82b      	bhi.n	100025a2 <z_cbvprintf_impl+0x4d6>
1000254a:	2825      	cmp	r0, #37	; 0x25
1000254c:	d100      	bne.n	10002550 <z_cbvprintf_impl+0x484>
1000254e:	e5cf      	b.n	100020f0 <z_cbvprintf_impl+0x24>
10002550:	2858      	cmp	r0, #88	; 0x58
10002552:	d1b9      	bne.n	100024c8 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10002554:	9812      	ldr	r0, [sp, #72]	; 0x48
10002556:	9913      	ldr	r1, [sp, #76]	; 0x4c
10002558:	231e      	movs	r3, #30
1000255a:	aa0a      	add	r2, sp, #40	; 0x28
1000255c:	189b      	adds	r3, r3, r2
1000255e:	9300      	str	r3, [sp, #0]
10002560:	aa14      	add	r2, sp, #80	; 0x50
10002562:	ab0c      	add	r3, sp, #48	; 0x30
10002564:	f001 fdd0 	bl	10004108 <encode_uint>
			if (precision >= 0) {
10002568:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
1000256a:	0006      	movs	r6, r0
			if (precision >= 0) {
1000256c:	2b00      	cmp	r3, #0
1000256e:	db0d      	blt.n	1000258c <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10002570:	231e      	movs	r3, #30
				conv->flag_zero = false;
10002572:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10002574:	aa0a      	add	r2, sp, #40	; 0x28
10002576:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10002578:	aa12      	add	r2, sp, #72	; 0x48
1000257a:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
1000257c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
1000257e:	4381      	bics	r1, r0
10002580:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10002582:	9906      	ldr	r1, [sp, #24]
10002584:	4299      	cmp	r1, r3
10002586:	d901      	bls.n	1000258c <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10002588:	1acb      	subs	r3, r1, r3
1000258a:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
1000258c:	2e00      	cmp	r6, #0
1000258e:	d09b      	beq.n	100024c8 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10002590:	231e      	movs	r3, #30
10002592:	aa0a      	add	r2, sp, #40	; 0x28
10002594:	189b      	adds	r3, r3, r2
10002596:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10002598:	9306      	str	r3, [sp, #24]
1000259a:	2d00      	cmp	r5, #0
1000259c:	d032      	beq.n	10002604 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
1000259e:	3001      	adds	r0, #1
100025a0:	e030      	b.n	10002604 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
100025a2:	3863      	subs	r0, #99	; 0x63
100025a4:	2815      	cmp	r0, #21
100025a6:	d88f      	bhi.n	100024c8 <z_cbvprintf_impl+0x3fc>
100025a8:	f7fd fe08 	bl	100001bc <__gnu_thumb1_case_shi>
100025ac:	0068005e 	.word	0x0068005e
100025b0:	ff8eff8e 	.word	0xff8eff8e
100025b4:	ff8eff8e 	.word	0xff8eff8e
100025b8:	ff8e0068 	.word	0xff8e0068
100025bc:	ff8eff8e 	.word	0xff8eff8e
100025c0:	00a0ff8e 	.word	0x00a0ff8e
100025c4:	007c007a 	.word	0x007c007a
100025c8:	ff8eff8e 	.word	0xff8eff8e
100025cc:	ff8e001e 	.word	0xff8e001e
100025d0:	ff8e007a 	.word	0xff8e007a
100025d4:	007aff8e 	.word	0x007aff8e
100025d8:	ffff87fd 	.word	0xffff87fd
100025dc:	00004002 	.word	0x00004002
100025e0:	00000482 	.word	0x00000482
100025e4:	00000801 	.word	0x00000801
			if (precision >= 0) {
100025e8:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
100025ea:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
100025ec:	2b00      	cmp	r3, #0
100025ee:	db37      	blt.n	10002660 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
100025f0:	0019      	movs	r1, r3
100025f2:	0030      	movs	r0, r6
100025f4:	f001 fe0b 	bl	1000420e <strnlen>
			bpe = bps + len;
100025f8:	1833      	adds	r3, r6, r0
		char sign = 0;
100025fa:	2500      	movs	r5, #0
			bpe = bps + len;
100025fc:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
100025fe:	2e00      	cmp	r6, #0
10002600:	d100      	bne.n	10002604 <z_cbvprintf_impl+0x538>
10002602:	e761      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10002604:	ab12      	add	r3, sp, #72	; 0x48
10002606:	7a9b      	ldrb	r3, [r3, #10]
10002608:	2210      	movs	r2, #16
1000260a:	0019      	movs	r1, r3
1000260c:	4011      	ands	r1, r2
1000260e:	910b      	str	r1, [sp, #44]	; 0x2c
10002610:	4213      	tst	r3, r2
10002612:	d100      	bne.n	10002616 <z_cbvprintf_impl+0x54a>
10002614:	e085      	b.n	10002722 <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10002616:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10002618:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000261a:	920a      	str	r2, [sp, #40]	; 0x28
1000261c:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
1000261e:	065b      	lsls	r3, r3, #25
10002620:	d501      	bpl.n	10002626 <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
10002622:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002624:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10002626:	9b03      	ldr	r3, [sp, #12]
10002628:	2b00      	cmp	r3, #0
1000262a:	dc00      	bgt.n	1000262e <z_cbvprintf_impl+0x562>
1000262c:	e094      	b.n	10002758 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
1000262e:	1a1b      	subs	r3, r3, r0
10002630:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10002632:	ab12      	add	r3, sp, #72	; 0x48
10002634:	7a1b      	ldrb	r3, [r3, #8]
10002636:	075a      	lsls	r2, r3, #29
10002638:	0fd1      	lsrs	r1, r2, #31
1000263a:	9108      	str	r1, [sp, #32]
1000263c:	2a00      	cmp	r2, #0
1000263e:	da00      	bge.n	10002642 <z_cbvprintf_impl+0x576>
10002640:	e08a      	b.n	10002758 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
10002642:	065b      	lsls	r3, r3, #25
10002644:	d400      	bmi.n	10002648 <z_cbvprintf_impl+0x57c>
10002646:	e078      	b.n	1000273a <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10002648:	2d00      	cmp	r5, #0
1000264a:	d007      	beq.n	1000265c <z_cbvprintf_impl+0x590>
						OUTC(sign);
1000264c:	0028      	movs	r0, r5
1000264e:	9905      	ldr	r1, [sp, #20]
10002650:	9b04      	ldr	r3, [sp, #16]
10002652:	4798      	blx	r3
10002654:	2800      	cmp	r0, #0
10002656:	db6e      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
10002658:	9d08      	ldr	r5, [sp, #32]
1000265a:	3701      	adds	r7, #1
					pad = '0';
1000265c:	2330      	movs	r3, #48	; 0x30
1000265e:	e06d      	b.n	1000273c <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10002660:	0030      	movs	r0, r6
10002662:	f001 fdcc 	bl	100041fe <strlen>
10002666:	e7c7      	b.n	100025f8 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10002668:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
1000266a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000266c:	ae0c      	add	r6, sp, #48	; 0x30
1000266e:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10002670:	aa0a      	add	r2, sp, #40	; 0x28
10002672:	189b      	adds	r3, r3, r2
		char sign = 0;
10002674:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10002676:	2001      	movs	r0, #1
			bpe = buf + 1;
10002678:	9306      	str	r3, [sp, #24]
1000267a:	e7c3      	b.n	10002604 <z_cbvprintf_impl+0x538>
				sign = '+';
1000267c:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
1000267e:	071a      	lsls	r2, r3, #28
10002680:	d402      	bmi.n	10002688 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
10002682:	06db      	lsls	r3, r3, #27
10002684:	0fdb      	lsrs	r3, r3, #31
10002686:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10002688:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000268a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
1000268c:	2b00      	cmp	r3, #0
1000268e:	db00      	blt.n	10002692 <z_cbvprintf_impl+0x5c6>
10002690:	e760      	b.n	10002554 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
10002692:	2100      	movs	r1, #0
10002694:	4250      	negs	r0, r2
10002696:	4199      	sbcs	r1, r3
				sign = '-';
10002698:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
1000269a:	9012      	str	r0, [sp, #72]	; 0x48
1000269c:	9113      	str	r1, [sp, #76]	; 0x4c
1000269e:	e759      	b.n	10002554 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
100026a0:	2500      	movs	r5, #0
100026a2:	e757      	b.n	10002554 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
100026a4:	9812      	ldr	r0, [sp, #72]	; 0x48
100026a6:	ad12      	add	r5, sp, #72	; 0x48
100026a8:	2800      	cmp	r0, #0
100026aa:	d034      	beq.n	10002716 <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
100026ac:	231e      	movs	r3, #30
100026ae:	aa0a      	add	r2, sp, #40	; 0x28
100026b0:	189b      	adds	r3, r3, r2
100026b2:	9300      	str	r3, [sp, #0]
100026b4:	aa14      	add	r2, sp, #80	; 0x50
100026b6:	ab0c      	add	r3, sp, #48	; 0x30
100026b8:	2100      	movs	r1, #0
100026ba:	f001 fd25 	bl	10004108 <encode_uint>
				conv->altform_0c = true;
100026be:	23ef      	movs	r3, #239	; 0xef
100026c0:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
100026c2:	0006      	movs	r6, r0
				conv->altform_0c = true;
100026c4:	401a      	ands	r2, r3
100026c6:	4b48      	ldr	r3, [pc, #288]	; (100027e8 <z_cbvprintf_impl+0x71c>)
100026c8:	4313      	orrs	r3, r2
100026ca:	816b      	strh	r3, [r5, #10]
		char sign = 0;
100026cc:	2500      	movs	r5, #0
			if (precision >= 0) {
100026ce:	9b06      	ldr	r3, [sp, #24]
100026d0:	42ab      	cmp	r3, r5
100026d2:	db00      	blt.n	100026d6 <z_cbvprintf_impl+0x60a>
100026d4:	e74c      	b.n	10002570 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
100026d6:	42a8      	cmp	r0, r5
100026d8:	d100      	bne.n	100026dc <z_cbvprintf_impl+0x610>
100026da:	e6f5      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100026dc:	231e      	movs	r3, #30
100026de:	aa0a      	add	r2, sp, #40	; 0x28
100026e0:	189b      	adds	r3, r3, r2
100026e2:	1a18      	subs	r0, r3, r0
100026e4:	231e      	movs	r3, #30
100026e6:	189b      	adds	r3, r3, r2
100026e8:	9306      	str	r3, [sp, #24]
100026ea:	e78b      	b.n	10002604 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
100026ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
100026ee:	2a07      	cmp	r2, #7
100026f0:	d900      	bls.n	100026f4 <z_cbvprintf_impl+0x628>
100026f2:	e6e9      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
100026f4:	0010      	movs	r0, r2
100026f6:	f7fd fd57 	bl	100001a8 <__gnu_thumb1_case_uqi>
100026fa:	040c      	.short	0x040c
100026fc:	08080c06 	.word	0x08080c06
10002700:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10002702:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10002704:	e6e0      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10002706:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10002708:	e6de      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
1000270a:	17fa      	asrs	r2, r7, #31
1000270c:	601f      	str	r7, [r3, #0]
1000270e:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10002710:	e6da      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10002712:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10002714:	e6d8      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10002716:	4b35      	ldr	r3, [pc, #212]	; (100027ec <z_cbvprintf_impl+0x720>)
		char sign = 0;
10002718:	0005      	movs	r5, r0
1000271a:	4e35      	ldr	r6, [pc, #212]	; (100027f0 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
1000271c:	2005      	movs	r0, #5
			bpe = bps + 5;
1000271e:	9306      	str	r3, [sp, #24]
10002720:	e770      	b.n	10002604 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10002722:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10002724:	0fd2      	lsrs	r2, r2, #31
10002726:	1880      	adds	r0, r0, r2
10002728:	e776      	b.n	10002618 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
1000272a:	9905      	ldr	r1, [sp, #20]
1000272c:	9809      	ldr	r0, [sp, #36]	; 0x24
1000272e:	9b04      	ldr	r3, [sp, #16]
10002730:	4798      	blx	r3
10002732:	2800      	cmp	r0, #0
10002734:	da05      	bge.n	10002742 <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10002736:	b019      	add	sp, #100	; 0x64
10002738:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
1000273a:	2320      	movs	r3, #32
					pad = '0';
1000273c:	9309      	str	r3, [sp, #36]	; 0x24
1000273e:	9b03      	ldr	r3, [sp, #12]
10002740:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10002742:	9b08      	ldr	r3, [sp, #32]
10002744:	001a      	movs	r2, r3
10002746:	3a01      	subs	r2, #1
10002748:	9208      	str	r2, [sp, #32]
1000274a:	2b00      	cmp	r3, #0
1000274c:	dced      	bgt.n	1000272a <z_cbvprintf_impl+0x65e>
1000274e:	9a03      	ldr	r2, [sp, #12]
10002750:	19d7      	adds	r7, r2, r7
10002752:	1aff      	subs	r7, r7, r3
10002754:	9b08      	ldr	r3, [sp, #32]
10002756:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10002758:	2d00      	cmp	r5, #0
1000275a:	d006      	beq.n	1000276a <z_cbvprintf_impl+0x69e>
			OUTC(sign);
1000275c:	0028      	movs	r0, r5
1000275e:	9905      	ldr	r1, [sp, #20]
10002760:	9b04      	ldr	r3, [sp, #16]
10002762:	4798      	blx	r3
10002764:	2800      	cmp	r0, #0
10002766:	dbe6      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
10002768:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
1000276a:	ab12      	add	r3, sp, #72	; 0x48
1000276c:	7a9b      	ldrb	r3, [r3, #10]
1000276e:	06da      	lsls	r2, r3, #27
10002770:	d401      	bmi.n	10002776 <z_cbvprintf_impl+0x6aa>
10002772:	071b      	lsls	r3, r3, #28
10002774:	d506      	bpl.n	10002784 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10002776:	2030      	movs	r0, #48	; 0x30
10002778:	9905      	ldr	r1, [sp, #20]
1000277a:	9b04      	ldr	r3, [sp, #16]
1000277c:	4798      	blx	r3
1000277e:	2800      	cmp	r0, #0
10002780:	dbd9      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
10002782:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10002784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002786:	2b00      	cmp	r3, #0
10002788:	d007      	beq.n	1000279a <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
1000278a:	ab12      	add	r3, sp, #72	; 0x48
1000278c:	7ad8      	ldrb	r0, [r3, #11]
1000278e:	9905      	ldr	r1, [sp, #20]
10002790:	9b04      	ldr	r3, [sp, #16]
10002792:	4798      	blx	r3
10002794:	2800      	cmp	r0, #0
10002796:	dbce      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
10002798:	3701      	adds	r7, #1
				while (width-- > 0) {
1000279a:	003d      	movs	r5, r7
1000279c:	e006      	b.n	100027ac <z_cbvprintf_impl+0x6e0>
				OUTC('0');
1000279e:	2030      	movs	r0, #48	; 0x30
100027a0:	9905      	ldr	r1, [sp, #20]
100027a2:	9b04      	ldr	r3, [sp, #16]
100027a4:	4798      	blx	r3
100027a6:	2800      	cmp	r0, #0
100027a8:	dbc5      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
100027aa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
100027ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100027ae:	19db      	adds	r3, r3, r7
100027b0:	1b5b      	subs	r3, r3, r5
100027b2:	2b00      	cmp	r3, #0
100027b4:	dcf3      	bgt.n	1000279e <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
100027b6:	0032      	movs	r2, r6
100027b8:	9b06      	ldr	r3, [sp, #24]
100027ba:	9905      	ldr	r1, [sp, #20]
100027bc:	9804      	ldr	r0, [sp, #16]
100027be:	f001 fcf0 	bl	100041a2 <outs>
100027c2:	2800      	cmp	r0, #0
100027c4:	dbb7      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
100027c6:	1947      	adds	r7, r0, r5
100027c8:	003d      	movs	r5, r7
		while (width > 0) {
100027ca:	9b03      	ldr	r3, [sp, #12]
100027cc:	195b      	adds	r3, r3, r5
100027ce:	1bdb      	subs	r3, r3, r7
100027d0:	2b00      	cmp	r3, #0
100027d2:	dc00      	bgt.n	100027d6 <z_cbvprintf_impl+0x70a>
100027d4:	e678      	b.n	100024c8 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
100027d6:	2020      	movs	r0, #32
100027d8:	9905      	ldr	r1, [sp, #20]
100027da:	9b04      	ldr	r3, [sp, #16]
100027dc:	4798      	blx	r3
100027de:	2800      	cmp	r0, #0
100027e0:	dba9      	blt.n	10002736 <z_cbvprintf_impl+0x66a>
100027e2:	3701      	adds	r7, #1
			--width;
100027e4:	e7f1      	b.n	100027ca <z_cbvprintf_impl+0x6fe>
100027e6:	46c0      	nop			; (mov r8, r8)
100027e8:	00007810 	.word	0x00007810
100027ec:	10004c68 	.word	0x10004c68
100027f0:	10004c63 	.word	0x10004c63

100027f4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
100027f4:	4901      	ldr	r1, [pc, #4]	; (100027fc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
100027f6:	2210      	movs	r2, #16
	str	r2, [r1]
100027f8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
100027fa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
100027fc:	e000ed10 	.word	0xe000ed10

10002800 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10002800:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10002804:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10002806:	b662      	cpsie	i
	isb
10002808:	f3bf 8f6f 	isb	sy

	bx	lr
1000280c:	4770      	bx	lr
1000280e:	46c0      	nop			; (mov r8, r8)

10002810 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10002810:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10002812:	0600      	lsls	r0, r0, #24
10002814:	d405      	bmi.n	10002822 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002816:	221f      	movs	r2, #31
10002818:	401a      	ands	r2, r3
1000281a:	2301      	movs	r3, #1
1000281c:	4093      	lsls	r3, r2
1000281e:	4a01      	ldr	r2, [pc, #4]	; (10002824 <arch_irq_enable+0x14>)
10002820:	6013      	str	r3, [r2, #0]
}
10002822:	4770      	bx	lr
10002824:	e000e100 	.word	0xe000e100

10002828 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10002828:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000282a:	25ff      	movs	r5, #255	; 0xff
1000282c:	2203      	movs	r2, #3
1000282e:	000b      	movs	r3, r1
10002830:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10002832:	b240      	sxtb	r0, r0
10002834:	4002      	ands	r2, r0
10002836:	00d2      	lsls	r2, r2, #3
10002838:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000283a:	015b      	lsls	r3, r3, #5
1000283c:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000283e:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002840:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10002842:	2800      	cmp	r0, #0
10002844:	db0a      	blt.n	1000285c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002846:	24c0      	movs	r4, #192	; 0xc0
10002848:	4a0a      	ldr	r2, [pc, #40]	; (10002874 <z_arm_irq_priority_set+0x4c>)
1000284a:	0880      	lsrs	r0, r0, #2
1000284c:	0080      	lsls	r0, r0, #2
1000284e:	1880      	adds	r0, r0, r2
10002850:	00a4      	lsls	r4, r4, #2
10002852:	5902      	ldr	r2, [r0, r4]
10002854:	400a      	ands	r2, r1
10002856:	4313      	orrs	r3, r2
10002858:	5103      	str	r3, [r0, r4]
}
1000285a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000285c:	220f      	movs	r2, #15
1000285e:	4010      	ands	r0, r2
10002860:	3808      	subs	r0, #8
10002862:	4a05      	ldr	r2, [pc, #20]	; (10002878 <z_arm_irq_priority_set+0x50>)
10002864:	0880      	lsrs	r0, r0, #2
10002866:	0080      	lsls	r0, r0, #2
10002868:	1880      	adds	r0, r0, r2
1000286a:	69c2      	ldr	r2, [r0, #28]
1000286c:	4011      	ands	r1, r2
1000286e:	4319      	orrs	r1, r3
10002870:	61c1      	str	r1, [r0, #28]
10002872:	e7f2      	b.n	1000285a <z_arm_irq_priority_set+0x32>
10002874:	e000e100 	.word	0xe000e100
10002878:	e000ed00 	.word	0xe000ed00

1000287c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
1000287c:	bf30      	wfi
    b z_SysNmiOnReset
1000287e:	e7fd      	b.n	1000287c <z_SysNmiOnReset>

10002880 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10002880:	22ff      	movs	r2, #255	; 0xff
10002882:	4b08      	ldr	r3, [pc, #32]	; (100028a4 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10002884:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10002886:	4393      	bics	r3, r2
10002888:	4a07      	ldr	r2, [pc, #28]	; (100028a8 <z_arm_prep_c+0x28>)
1000288a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1000288c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10002890:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10002894:	f000 fed0 	bl	10003638 <z_bss_zero>
	z_data_copy();
10002898:	f001 fa82 	bl	10003da0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
1000289c:	f000 f8f2 	bl	10002a84 <z_arm_interrupt_init>
	z_cstart();
100028a0:	f000 ff0a 	bl	100036b8 <z_cstart>
100028a4:	10000100 	.word	0x10000100
100028a8:	e000ed00 	.word	0xe000ed00

100028ac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
100028ac:	4a08      	ldr	r2, [pc, #32]	; (100028d0 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
100028ae:	4909      	ldr	r1, [pc, #36]	; (100028d4 <arch_swap+0x28>)
	_current->arch.basepri = key;
100028b0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
100028b2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
100028b4:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
100028b6:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
100028b8:	2380      	movs	r3, #128	; 0x80
100028ba:	4907      	ldr	r1, [pc, #28]	; (100028d8 <arch_swap+0x2c>)
100028bc:	055b      	lsls	r3, r3, #21
100028be:	6848      	ldr	r0, [r1, #4]
100028c0:	4303      	orrs	r3, r0
100028c2:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
100028c4:	b662      	cpsie	i
100028c6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
100028ca:	6893      	ldr	r3, [r2, #8]
100028cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
100028ce:	4770      	bx	lr
100028d0:	20000180 	.word	0x20000180
100028d4:	10004ba4 	.word	0x10004ba4
100028d8:	e000ed00 	.word	0xe000ed00

100028dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
100028dc:	4913      	ldr	r1, [pc, #76]	; (1000292c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
100028de:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
100028e0:	4813      	ldr	r0, [pc, #76]	; (10002930 <_thread_irq_disabled+0x22>)
    add r0, r2
100028e2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
100028e4:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
100028e8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
100028ea:	4643      	mov	r3, r8
    mov r4, r9
100028ec:	464c      	mov	r4, r9
    mov r5, r10
100028ee:	4655      	mov	r5, sl
    mov r6, r11
100028f0:	465e      	mov	r6, fp
    mov r7, ip
100028f2:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
100028f4:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100028f6:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
100028f8:	4f0e      	ldr	r7, [pc, #56]	; (10002934 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
100028fa:	4e0f      	ldr	r6, [pc, #60]	; (10002938 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
100028fc:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
100028fe:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10002900:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10002902:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10002904:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10002906:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10002908:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
1000290a:	d100      	bne.n	1000290e <_thread_irq_disabled>
    cpsie i
1000290c:	b662      	cpsie	i

1000290e <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
1000290e:	4c08      	ldr	r4, [pc, #32]	; (10002930 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10002910:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10002912:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10002914:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10002916:	4698      	mov	r8, r3
    mov r9, r4
10002918:	46a1      	mov	r9, r4
    mov r10, r5
1000291a:	46aa      	mov	sl, r5
    mov r11, r6
1000291c:	46b3      	mov	fp, r6
    mov ip, r7
1000291e:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10002920:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10002922:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10002924:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10002928:	4770      	bx	lr
1000292a:	0000      	.short	0x0000
    ldr r1, =_kernel
1000292c:	20000180 	.word	0x20000180
    ldr r0, =_thread_offset_to_callee_saved
10002930:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10002934:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10002938:	08000000 	.word	0x08000000

1000293c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
1000293c:	2004      	movs	r0, #4
  mov r1, lr
1000293e:	4671      	mov	r1, lr
  tst r1, r0
10002940:	4201      	tst	r1, r0
  beq _stack_frame_msp
10002942:	d002      	beq.n	1000294a <_stack_frame_msp>
  mrs r0, PSP
10002944:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10002948:	d101      	bne.n	1000294e <_stack_frame_endif>

1000294a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
1000294a:	f3ef 8008 	mrs	r0, MSP

1000294e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
1000294e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10002950:	3902      	subs	r1, #2
    ldrb r1, [r1]
10002952:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10002954:	2902      	cmp	r1, #2
    beq _oops
10002956:	d0ff      	beq.n	10002958 <_oops>

10002958 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10002958:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
1000295a:	f001 fc3d 	bl	100041d8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
1000295e:	bd01      	pop	{r0, pc}

10002960 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10002960:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10002962:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10002964:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10002966:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10002968:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
1000296a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
1000296c:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
1000296e:	4906      	ldr	r1, [pc, #24]	; (10002988 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10002970:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10002972:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10002974:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10002976:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10002978:	2380      	movs	r3, #128	; 0x80
1000297a:	045b      	lsls	r3, r3, #17
1000297c:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
1000297e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10002980:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10002982:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10002984:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10002986:	bd10      	pop	{r4, pc}
10002988:	100040f5 	.word	0x100040f5

1000298c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
1000298c:	4b06      	ldr	r3, [pc, #24]	; (100029a8 <arch_switch_to_main_thread+0x1c>)
1000298e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10002990:	1c10      	adds	r0, r2, #0
10002992:	f381 8809 	msr	PSP, r1
10002996:	2100      	movs	r1, #0
10002998:	b662      	cpsie	i
1000299a:	f3bf 8f6f 	isb	sy
1000299e:	2200      	movs	r2, #0
100029a0:	2300      	movs	r3, #0
100029a2:	f001 fba7 	bl	100040f4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
100029a6:	46c0      	nop			; (mov r8, r8)
100029a8:	20000180 	.word	0x20000180

100029ac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
100029ac:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
100029ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
100029b2:	4905      	ldr	r1, [pc, #20]	; (100029c8 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
100029b4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
100029b6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
100029b8:	4904      	ldr	r1, [pc, #16]	; (100029cc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
100029ba:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
100029bc:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
100029be:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
100029c0:	bc09      	pop	{r0, r3}
	mov lr, r3
100029c2:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
100029c4:	4902      	ldr	r1, [pc, #8]	; (100029d0 <_isr_wrapper+0x24>)
	bx r1
100029c6:	4708      	bx	r1
	ldr r1, =16
100029c8:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
100029cc:	10004938 	.word	0x10004938
	ldr r1, =z_arm_int_exit
100029d0:	100029d5 	.word	0x100029d5

100029d4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
100029d4:	4b04      	ldr	r3, [pc, #16]	; (100029e8 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
100029d6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
100029d8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
100029da:	4288      	cmp	r0, r1
	beq _EXIT_EXC
100029dc:	d002      	beq.n	100029e4 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
100029de:	4903      	ldr	r1, [pc, #12]	; (100029ec <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
100029e0:	4a03      	ldr	r2, [pc, #12]	; (100029f0 <_EXIT_EXC+0xc>)
	str r2, [r1]
100029e2:	600a      	str	r2, [r1, #0]

100029e4 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
100029e4:	4770      	bx	lr
100029e6:	0000      	.short	0x0000
	ldr r3, =_kernel
100029e8:	20000180 	.word	0x20000180
	ldr r1, =_SCS_ICSR
100029ec:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
100029f0:	10000000 	.word	0x10000000

100029f4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
100029f4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100029f6:	4b1b      	ldr	r3, [pc, #108]	; (10002a64 <z_arm_fault+0x70>)
{
100029f8:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100029fa:	685b      	ldr	r3, [r3, #4]
{
100029fc:	b088      	sub	sp, #32
100029fe:	05db      	lsls	r3, r3, #23
10002a00:	0ddb      	lsrs	r3, r3, #23
10002a02:	b662      	cpsie	i
10002a04:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10002a08:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002a0a:	0e16      	lsrs	r6, r2, #24
		return NULL;
10002a0c:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002a0e:	2eff      	cmp	r6, #255	; 0xff
10002a10:	d109      	bne.n	10002a26 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10002a12:	3ef3      	subs	r6, #243	; 0xf3
10002a14:	4016      	ands	r6, r2
10002a16:	2e08      	cmp	r6, #8
10002a18:	d005      	beq.n	10002a26 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10002a1a:	0001      	movs	r1, r0
			*nested_exc = true;
10002a1c:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10002a1e:	0712      	lsls	r2, r2, #28
10002a20:	d501      	bpl.n	10002a26 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10002a22:	0021      	movs	r1, r4
	*nested_exc = false;
10002a24:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10002a26:	2400      	movs	r4, #0
	switch (fault) {
10002a28:	2b03      	cmp	r3, #3
10002a2a:	d106      	bne.n	10002a3a <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10002a2c:	698b      	ldr	r3, [r1, #24]
10002a2e:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10002a30:	881a      	ldrh	r2, [r3, #0]
10002a32:	4b0d      	ldr	r3, [pc, #52]	; (10002a68 <z_arm_fault+0x74>)
10002a34:	429a      	cmp	r2, r3
10002a36:	d100      	bne.n	10002a3a <z_arm_fault+0x46>
		reason = esf->basic.r0;
10002a38:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10002a3a:	2220      	movs	r2, #32
10002a3c:	4668      	mov	r0, sp
10002a3e:	f001 fbf0 	bl	10004222 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10002a42:	9b07      	ldr	r3, [sp, #28]
10002a44:	2d00      	cmp	r5, #0
10002a46:	d00a      	beq.n	10002a5e <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10002a48:	05da      	lsls	r2, r3, #23
10002a4a:	d102      	bne.n	10002a52 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10002a4c:	4a07      	ldr	r2, [pc, #28]	; (10002a6c <z_arm_fault+0x78>)
10002a4e:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10002a50:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
10002a52:	4669      	mov	r1, sp
10002a54:	0020      	movs	r0, r4
10002a56:	f001 fbbb 	bl	100041d0 <z_arm_fatal_error>
}
10002a5a:	b008      	add	sp, #32
10002a5c:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10002a5e:	0a5b      	lsrs	r3, r3, #9
10002a60:	025b      	lsls	r3, r3, #9
10002a62:	e7f5      	b.n	10002a50 <z_arm_fault+0x5c>
10002a64:	e000ed00 	.word	0xe000ed00
10002a68:	0000df02 	.word	0x0000df02
10002a6c:	000001ff 	.word	0x000001ff

10002a70 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10002a70:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10002a74:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10002a78:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10002a7a:	4672      	mov	r2, lr
	bl z_arm_fault
10002a7c:	f7ff ffba 	bl	100029f4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10002a80:	bd01      	pop	{r0, pc}
10002a82:	46c0      	nop			; (mov r8, r8)

10002a84 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10002a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002a86:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10002a88:	2200      	movs	r2, #0
10002a8a:	2603      	movs	r6, #3
10002a8c:	25ff      	movs	r5, #255	; 0xff
10002a8e:	00a4      	lsls	r4, r4, #2
10002a90:	0010      	movs	r0, r2
10002a92:	002f      	movs	r7, r5
10002a94:	4030      	ands	r0, r6
10002a96:	00c0      	lsls	r0, r0, #3
10002a98:	4087      	lsls	r7, r0
10002a9a:	4905      	ldr	r1, [pc, #20]	; (10002ab0 <z_arm_interrupt_init+0x2c>)
10002a9c:	0893      	lsrs	r3, r2, #2
10002a9e:	009b      	lsls	r3, r3, #2
10002aa0:	185b      	adds	r3, r3, r1
10002aa2:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10002aa4:	3201      	adds	r2, #1
10002aa6:	43b9      	bics	r1, r7
10002aa8:	5119      	str	r1, [r3, r4]
10002aaa:	2a1a      	cmp	r2, #26
10002aac:	d1f0      	bne.n	10002a90 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002ab0:	e000e100 	.word	0xe000e100

10002ab4 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10002ab4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10002ab6:	4807      	ldr	r0, [pc, #28]	; (10002ad4 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10002ab8:	4907      	ldr	r1, [pc, #28]	; (10002ad8 <__start+0x24>)
    adds r0, r0, r1
10002aba:	1840      	adds	r0, r0, r1
    msr PSP, r0
10002abc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10002ac0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10002ac4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10002ac6:	4308      	orrs	r0, r1
    msr CONTROL, r0
10002ac8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10002acc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10002ad0:	f7ff fed6 	bl	10002880 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10002ad4:	200001c0 	.word	0x200001c0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10002ad8:	00000800 	.word	0x00000800

10002adc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10002adc:	b510      	push	{r4, lr}
	if (_current == thread) {
10002ade:	4b0a      	ldr	r3, [pc, #40]	; (10002b08 <z_impl_k_thread_abort+0x2c>)
10002ae0:	689b      	ldr	r3, [r3, #8]
10002ae2:	4283      	cmp	r3, r0
10002ae4:	d10d      	bne.n	10002b02 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10002ae6:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10002aea:	2b00      	cmp	r3, #0
10002aec:	d009      	beq.n	10002b02 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002aee:	2280      	movs	r2, #128	; 0x80
10002af0:	4b06      	ldr	r3, [pc, #24]	; (10002b0c <z_impl_k_thread_abort+0x30>)
10002af2:	0552      	lsls	r2, r2, #21
10002af4:	6859      	ldr	r1, [r3, #4]
10002af6:	430a      	orrs	r2, r1
10002af8:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10002afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002afc:	4904      	ldr	r1, [pc, #16]	; (10002b10 <z_impl_k_thread_abort+0x34>)
10002afe:	400a      	ands	r2, r1
10002b00:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10002b02:	f001 f8f1 	bl	10003ce8 <z_thread_abort>
}
10002b06:	bd10      	pop	{r4, pc}
10002b08:	20000180 	.word	0x20000180
10002b0c:	e000ed00 	.word	0xe000ed00
10002b10:	ffff7fff 	.word	0xffff7fff

10002b14 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10002b14:	4b01      	ldr	r3, [pc, #4]	; (10002b1c <__stdout_hook_install+0x8>)
10002b16:	6018      	str	r0, [r3, #0]
}
10002b18:	4770      	bx	lr
10002b1a:	46c0      	nop			; (mov r8, r8)
10002b1c:	20000004 	.word	0x20000004

10002b20 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
10002b20:	3902      	subs	r1, #2
{
10002b22:	b510      	push	{r4, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
10002b24:	2901      	cmp	r1, #1
10002b26:	d803      	bhi.n	10002b30 <z_impl_zephyr_fputc+0x10>
10002b28:	4b03      	ldr	r3, [pc, #12]	; (10002b38 <z_impl_zephyr_fputc+0x18>)
10002b2a:	681b      	ldr	r3, [r3, #0]
10002b2c:	4798      	blx	r3
}
10002b2e:	bd10      	pop	{r4, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
10002b30:	2001      	movs	r0, #1
10002b32:	4240      	negs	r0, r0
10002b34:	e7fb      	b.n	10002b2e <z_impl_zephyr_fputc+0xe>
10002b36:	46c0      	nop			; (mov r8, r8)
10002b38:	20000004 	.word	0x20000004

10002b3c <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
10002b3c:	b40f      	push	{r0, r1, r2, r3}
10002b3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002b40:	2100      	movs	r1, #0
10002b42:	ab06      	add	r3, sp, #24
10002b44:	cb04      	ldmia	r3!, {r2}
10002b46:	4805      	ldr	r0, [pc, #20]	; (10002b5c <printf+0x20>)
10002b48:	9100      	str	r1, [sp, #0]
10002b4a:	3102      	adds	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
10002b4c:	9303      	str	r3, [sp, #12]
10002b4e:	f7ff fabd 	bl	100020cc <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
10002b52:	b005      	add	sp, #20
10002b54:	bc08      	pop	{r3}
10002b56:	b004      	add	sp, #16
10002b58:	4718      	bx	r3
10002b5a:	46c0      	nop			; (mov r8, r8)
10002b5c:	1000424d 	.word	0x1000424d

10002b60 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002b60:	4b0e      	ldr	r3, [pc, #56]	; (10002b9c <rp2040_init+0x3c>)
10002b62:	4a0f      	ldr	r2, [pc, #60]	; (10002ba0 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10002b64:	b570      	push	{r4, r5, r6, lr}
10002b66:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002b68:	4d0e      	ldr	r5, [pc, #56]	; (10002ba4 <rp2040_init+0x44>)
10002b6a:	4b0f      	ldr	r3, [pc, #60]	; (10002ba8 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10002b6c:	4c0f      	ldr	r4, [pc, #60]	; (10002bac <rp2040_init+0x4c>)
10002b6e:	602b      	str	r3, [r5, #0]
10002b70:	0019      	movs	r1, r3
10002b72:	68a2      	ldr	r2, [r4, #8]
10002b74:	4391      	bics	r1, r2
10002b76:	d1fb      	bne.n	10002b70 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10002b78:	f000 fb28 	bl	100031cc <clocks_init>
10002b7c:	4b0c      	ldr	r3, [pc, #48]	; (10002bb0 <rp2040_init+0x50>)
10002b7e:	602b      	str	r3, [r5, #0]
10002b80:	68a3      	ldr	r3, [r4, #8]
10002b82:	01db      	lsls	r3, r3, #7
10002b84:	3380      	adds	r3, #128	; 0x80
10002b86:	d1fb      	bne.n	10002b80 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10002b88:	f3ef 8310 	mrs	r3, PRIMASK
10002b8c:	b672      	cpsid	i
	if (key != 0U) {
10002b8e:	2b00      	cmp	r3, #0
10002b90:	d102      	bne.n	10002b98 <rp2040_init+0x38>
	__asm__ volatile(
10002b92:	b662      	cpsie	i
10002b94:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10002b98:	2000      	movs	r0, #0
10002b9a:	bd70      	pop	{r4, r5, r6, pc}
10002b9c:	4000e000 	.word	0x4000e000
10002ba0:	ffffcdbf 	.word	0xffffcdbf
10002ba4:	4000f000 	.word	0x4000f000
10002ba8:	003c3ffe 	.word	0x003c3ffe
10002bac:	4000c000 	.word	0x4000c000
10002bb0:	01ffffff 	.word	0x01ffffff

10002bb4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10002bb4:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10002bb6:	4808      	ldr	r0, [pc, #32]	; (10002bd8 <uart_console_init+0x24>)
10002bb8:	f001 fdb7 	bl	1000472a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
10002bbc:	2800      	cmp	r0, #0
10002bbe:	d008      	beq.n	10002bd2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10002bc0:	4c06      	ldr	r4, [pc, #24]	; (10002bdc <uart_console_init+0x28>)
10002bc2:	0020      	movs	r0, r4
10002bc4:	f7ff ffa6 	bl	10002b14 <__stdout_hook_install>
	__printk_hook_install(console_out);
10002bc8:	0020      	movs	r0, r4
10002bca:	f7ff fa6d 	bl	100020a8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
10002bce:	2000      	movs	r0, #0
}
10002bd0:	bd10      	pop	{r4, pc}
		return -ENODEV;
10002bd2:	2013      	movs	r0, #19
10002bd4:	4240      	negs	r0, r0
10002bd6:	e7fb      	b.n	10002bd0 <uart_console_init+0x1c>
10002bd8:	100048f0 	.word	0x100048f0
10002bdc:	10002be1 	.word	0x10002be1

10002be0 <console_out>:
{
10002be0:	b570      	push	{r4, r5, r6, lr}
10002be2:	0004      	movs	r4, r0
10002be4:	4d07      	ldr	r5, [pc, #28]	; (10002c04 <console_out+0x24>)
	if ('\n' == c) {
10002be6:	280a      	cmp	r0, #10
10002be8:	d104      	bne.n	10002bf4 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10002bea:	68ab      	ldr	r3, [r5, #8]
10002bec:	210d      	movs	r1, #13
10002bee:	0028      	movs	r0, r5
10002bf0:	685b      	ldr	r3, [r3, #4]
10002bf2:	4798      	blx	r3
10002bf4:	68ab      	ldr	r3, [r5, #8]
10002bf6:	0028      	movs	r0, r5
10002bf8:	685b      	ldr	r3, [r3, #4]
10002bfa:	b2e1      	uxtb	r1, r4
10002bfc:	4798      	blx	r3
}
10002bfe:	0020      	movs	r0, r4
10002c00:	bd70      	pop	{r4, r5, r6, pc}
10002c02:	46c0      	nop			; (mov r8, r8)
10002c04:	100048f0 	.word	0x100048f0

10002c08 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10002c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002c0a:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002c0c:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10002c0e:	6903      	ldr	r3, [r0, #16]
10002c10:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10002c12:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10002c14:	4a14      	ldr	r2, [pc, #80]	; (10002c68 <gpio_rpi_isr+0x60>)
10002c16:	3308      	adds	r3, #8
10002c18:	009b      	lsls	r3, r3, #2
10002c1a:	589b      	ldr	r3, [r3, r2]
10002c1c:	2207      	movs	r2, #7
10002c1e:	4022      	ands	r2, r4
10002c20:	0092      	lsls	r2, r2, #2
10002c22:	40d3      	lsrs	r3, r2
		if (events) {
10002c24:	220f      	movs	r2, #15
10002c26:	4213      	tst	r3, r2
10002c28:	d103      	bne.n	10002c32 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002c2a:	3401      	adds	r4, #1
10002c2c:	2c1e      	cmp	r4, #30
10002c2e:	d1f0      	bne.n	10002c12 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10002c30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10002c32:	210f      	movs	r1, #15
10002c34:	0020      	movs	r0, r4
10002c36:	f000 fc0b 	bl	10003450 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10002c3a:	9b01      	ldr	r3, [sp, #4]
10002c3c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002c3e:	2900      	cmp	r1, #0
10002c40:	d0f3      	beq.n	10002c2a <gpio_rpi_isr+0x22>
10002c42:	2701      	movs	r7, #1
10002c44:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10002c46:	680d      	ldr	r5, [r1, #0]
10002c48:	2900      	cmp	r1, #0
10002c4a:	d0ee      	beq.n	10002c2a <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10002c4c:	688b      	ldr	r3, [r1, #8]
10002c4e:	001a      	movs	r2, r3
10002c50:	403a      	ands	r2, r7
10002c52:	423b      	tst	r3, r7
10002c54:	d002      	beq.n	10002c5c <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10002c56:	0030      	movs	r0, r6
10002c58:	684b      	ldr	r3, [r1, #4]
10002c5a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002c5c:	1e2b      	subs	r3, r5, #0
10002c5e:	d000      	beq.n	10002c62 <gpio_rpi_isr+0x5a>
10002c60:	682b      	ldr	r3, [r5, #0]
10002c62:	0029      	movs	r1, r5
10002c64:	001d      	movs	r5, r3
10002c66:	e7ef      	b.n	10002c48 <gpio_rpi_isr+0x40>
10002c68:	40014100 	.word	0x40014100

10002c6c <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
10002c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
10002c6e:	6844      	ldr	r4, [r0, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10002c70:	2100      	movs	r1, #0
10002c72:	69e0      	ldr	r0, [r4, #28]
10002c74:	aa01      	add	r2, sp, #4
10002c76:	f001 fc72 	bl	1000455e <pinctrl_lookup_state>
	if (ret < 0) {
10002c7a:	2800      	cmp	r0, #0
10002c7c:	db32      	blt.n	10002ce4 <pwm_rpi_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10002c7e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002c80:	2200      	movs	r2, #0
10002c82:	7919      	ldrb	r1, [r3, #4]
10002c84:	6818      	ldr	r0, [r3, #0]
10002c86:	f001 fc7d 	bl	10004584 <pinctrl_configure_pins>
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
10002c8a:	2800      	cmp	r0, #0
10002c8c:	d12a      	bne.n	10002ce4 <pwm_rpi_init+0x78>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
		return err;
	}

	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002c8e:	0001      	movs	r1, r0
10002c90:	1d23      	adds	r3, r4, #4
	if (err) {
10002c92:	4c15      	ldr	r4, [pc, #84]	; (10002ce8 <pwm_rpi_init+0x7c>)
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10002c94:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002c96:	4f15      	ldr	r7, [pc, #84]	; (10002cec <pwm_rpi_init+0x80>)
10002c98:	434a      	muls	r2, r1
10002c9a:	46bc      	mov	ip, r7
10002c9c:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10002c9e:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002ca0:	4667      	mov	r7, ip
10002ca2:	4d11      	ldr	r5, [pc, #68]	; (10002ce8 <pwm_rpi_init+0x7c>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002ca4:	3101      	adds	r1, #1
10002ca6:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
10002ca8:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002caa:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10002cac:	4f10      	ldr	r7, [pc, #64]	; (10002cf0 <pwm_rpi_init+0x84>)
10002cae:	46bc      	mov	ip, r7
10002cb0:	4494      	add	ip, r2
10002cb2:	4667      	mov	r7, ip
10002cb4:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
10002cb6:	4f0f      	ldr	r7, [pc, #60]	; (10002cf4 <pwm_rpi_init+0x88>)
10002cb8:	19d2      	adds	r2, r2, r7
10002cba:	4f0f      	ldr	r7, [pc, #60]	; (10002cf8 <pwm_rpi_init+0x8c>)
10002cbc:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10002cbe:	2210      	movs	r2, #16
10002cc0:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10002cc2:	602e      	str	r6, [r5, #0]
 * \param fract 4 bit fractional part of the clock divider
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10002cc4:	781a      	ldrb	r2, [r3, #0]
10002cc6:	785e      	ldrb	r6, [r3, #1]
10002cc8:	0112      	lsls	r2, r2, #4
10002cca:	4332      	orrs	r2, r6
10002ccc:	606a      	str	r2, [r5, #4]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002cce:	2501      	movs	r5, #1
10002cd0:	6822      	ldr	r2, [r4, #0]
10002cd2:	3303      	adds	r3, #3
10002cd4:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002cd6:	2280      	movs	r2, #128	; 0x80
10002cd8:	0152      	lsls	r2, r2, #5
10002cda:	4322      	orrs	r2, r4
10002cdc:	6015      	str	r5, [r2, #0]
10002cde:	3414      	adds	r4, #20
10002ce0:	2908      	cmp	r1, #8
10002ce2:	d1d7      	bne.n	10002c94 <pwm_rpi_init+0x28>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
10002ce4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002ce6:	46c0      	nop			; (mov r8, r8)
10002ce8:	40050000 	.word	0x40050000
10002cec:	40050008 	.word	0x40050008
10002cf0:	4005000c 	.word	0x4005000c
10002cf4:	40050010 	.word	0x40050010
10002cf8:	0000ffff 	.word	0x0000ffff

10002cfc <pwm_rpi_set_cycles>:
{
10002cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002cfe:	ac08      	add	r4, sp, #32
10002d00:	8824      	ldrh	r4, [r4, #0]
10002d02:	9200      	str	r2, [sp, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002d04:	290f      	cmp	r1, #15
10002d06:	d83e      	bhi.n	10002d86 <pwm_rpi_set_cycles+0x8a>
	if (period_cycles > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10002d08:	2680      	movs	r6, #128	; 0x80
10002d0a:	0015      	movs	r5, r2
10002d0c:	0276      	lsls	r6, r6, #9
10002d0e:	431d      	orrs	r5, r3
10002d10:	42b5      	cmp	r5, r6
10002d12:	d238      	bcs.n	10002d86 <pwm_rpi_set_cycles+0x8a>
	return channel % 2;
10002d14:	2601      	movs	r6, #1
10002d16:	000d      	movs	r5, r1
10002d18:	4035      	ands	r5, r6
10002d1a:	9501      	str	r5, [sp, #4]
10002d1c:	2514      	movs	r5, #20
	return channel / 2;
10002d1e:	084f      	lsrs	r7, r1, #1
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10002d20:	437d      	muls	r5, r7
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002d22:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10002d24:	4034      	ands	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002d26:	6800      	ldr	r0, [r0, #0]
10002d28:	1940      	adds	r0, r0, r5
10002d2a:	6802      	ldr	r2, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10002d2c:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
10002d2e:	4231      	tst	r1, r6
10002d30:	d024      	beq.n	10002d7c <pwm_rpi_set_cycles+0x80>
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002d32:	0891      	lsrs	r1, r2, #2
10002d34:	4031      	ands	r1, r6
		pwm_polarity_b = inverted;
10002d36:	0020      	movs	r0, r4
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002d38:	000c      	movs	r4, r1
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
10002d3a:	00c0      	lsls	r0, r0, #3
10002d3c:	00a4      	lsls	r4, r4, #2
10002d3e:	4304      	orrs	r4, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002d40:	200c      	movs	r0, #12
10002d42:	4912      	ldr	r1, [pc, #72]	; (10002d8c <pwm_rpi_set_cycles+0x90>)
10002d44:	000a      	movs	r2, r1
10002d46:	1869      	adds	r1, r5, r1
10002d48:	680e      	ldr	r6, [r1, #0]
10002d4a:	4074      	eors	r4, r6
10002d4c:	4004      	ands	r4, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002d4e:	2080      	movs	r0, #128	; 0x80
10002d50:	0140      	lsls	r0, r0, #5
10002d52:	4301      	orrs	r1, r0
10002d54:	600c      	str	r4, [r1, #0]
    pwm_hw->slice[slice_num].top = wrap;
10002d56:	2114      	movs	r1, #20
10002d58:	4379      	muls	r1, r7
10002d5a:	1889      	adds	r1, r1, r2
10002d5c:	9a00      	ldr	r2, [sp, #0]
10002d5e:	610a      	str	r2, [r1, #16]
    hw_write_masked(
10002d60:	4a0b      	ldr	r2, [pc, #44]	; (10002d90 <pwm_rpi_set_cycles+0x94>)
10002d62:	18ad      	adds	r5, r5, r2
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
10002d64:	9a01      	ldr	r2, [sp, #4]
10002d66:	2a00      	cmp	r2, #0
10002d68:	d00b      	beq.n	10002d82 <pwm_rpi_set_cycles+0x86>
    hw_write_masked(
10002d6a:	4a0a      	ldr	r2, [pc, #40]	; (10002d94 <pwm_rpi_set_cycles+0x98>)
10002d6c:	041b      	lsls	r3, r3, #16
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002d6e:	6829      	ldr	r1, [r5, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002d70:	4305      	orrs	r5, r0
	return 0;
10002d72:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002d74:	404b      	eors	r3, r1
10002d76:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002d78:	602a      	str	r2, [r5, #0]
};
10002d7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10002d7c:	08c0      	lsrs	r0, r0, #3
10002d7e:	4030      	ands	r0, r6
10002d80:	e7db      	b.n	10002d3a <pwm_rpi_set_cycles+0x3e>
10002d82:	4a05      	ldr	r2, [pc, #20]	; (10002d98 <pwm_rpi_set_cycles+0x9c>)
10002d84:	e7f3      	b.n	10002d6e <pwm_rpi_set_cycles+0x72>
		return -EINVAL;
10002d86:	2016      	movs	r0, #22
10002d88:	4240      	negs	r0, r0
10002d8a:	e7f6      	b.n	10002d7a <pwm_rpi_set_cycles+0x7e>
10002d8c:	40050000 	.word	0x40050000
10002d90:	4005000c 	.word	0x4005000c
10002d94:	ffff0000 	.word	0xffff0000
10002d98:	0000ffff 	.word	0x0000ffff

10002d9c <pwm_rpi_get_cycles_per_sec>:
{
10002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002d9e:	0015      	movs	r5, r2
	return channel / 2;
10002da0:	084a      	lsrs	r2, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002da2:	290f      	cmp	r1, #15
10002da4:	d825      	bhi.n	10002df2 <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
10002da6:	2303      	movs	r3, #3
10002da8:	4353      	muls	r3, r2
10002daa:	6844      	ldr	r4, [r0, #4]
10002dac:	18e4      	adds	r4, r4, r3
		(float)cfg->slice_configs[slice].frac / 16.0;
10002dae:	7960      	ldrb	r0, [r4, #5]
10002db0:	f7fd fbd4 	bl	1000055c <__aeabi_ui2f>
10002db4:	f7fe fd8c 	bl	100018d0 <__aeabi_f2d>
10002db8:	2200      	movs	r2, #0
10002dba:	4b0f      	ldr	r3, [pc, #60]	; (10002df8 <pwm_rpi_get_cycles_per_sec+0x5c>)
10002dbc:	f7fe f82a 	bl	10000e14 <__aeabi_dmul>
10002dc0:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
10002dc2:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10002dc4:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
10002dc6:	f7fd fbc9 	bl	1000055c <__aeabi_ui2f>
10002dca:	f7fe fd81 	bl	100018d0 <__aeabi_f2d>
10002dce:	0002      	movs	r2, r0
10002dd0:	000b      	movs	r3, r1
10002dd2:	0030      	movs	r0, r6
10002dd4:	0039      	movs	r1, r7
10002dd6:	f7fd fbfd 	bl	100005d4 <__aeabi_dadd>
10002dda:	f7fe fdbb 	bl	10001954 <__aeabi_d2f>
10002dde:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10002de0:	4806      	ldr	r0, [pc, #24]	; (10002dfc <pwm_rpi_get_cycles_per_sec+0x60>)
10002de2:	f7fd fad9 	bl	10000398 <__aeabi_fdiv>
10002de6:	f7fd fab7 	bl	10000358 <__aeabi_f2ulz>
10002dea:	6028      	str	r0, [r5, #0]
10002dec:	6069      	str	r1, [r5, #4]
	return 0;
10002dee:	2000      	movs	r0, #0
}
10002df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10002df2:	2016      	movs	r0, #22
10002df4:	4240      	negs	r0, r0
10002df6:	e7fb      	b.n	10002df0 <pwm_rpi_get_cycles_per_sec+0x54>
10002df8:	3fb00000 	.word	0x3fb00000
10002dfc:	4cee6b28 	.word	0x4cee6b28

10002e00 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10002e00:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002e02:	4903      	ldr	r1, [pc, #12]	; (10002e10 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10002e04:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002e06:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002e08:	400b      	ands	r3, r1
10002e0a:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002e0c:	4770      	bx	lr
10002e0e:	46c0      	nop			; (mov r8, r8)
10002e10:	fffff83f 	.word	0xfffff83f

10002e14 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10002e14:	b510      	push	{r4, lr}
10002e16:	2b03      	cmp	r3, #3
10002e18:	d823      	bhi.n	10002e62 <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10002e1a:	2a01      	cmp	r2, #1
10002e1c:	d002      	beq.n	10002e24 <uart_rpi_set_format.isra.0+0x10>
10002e1e:	2a03      	cmp	r2, #3
10002e20:	d11f      	bne.n	10002e62 <uart_rpi_set_format.isra.0+0x4e>
10002e22:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10002e24:	2902      	cmp	r1, #2
10002e26:	d81c      	bhi.n	10002e62 <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10002e28:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e2a:	3a01      	subs	r2, #1
10002e2c:	480e      	ldr	r0, [pc, #56]	; (10002e68 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002e2e:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e30:	00d2      	lsls	r2, r2, #3
10002e32:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002e34:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e36:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002e38:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e3a:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002e3c:	4299      	cmp	r1, r3
10002e3e:	d005      	beq.n	10002e4c <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e40:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002e42:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e44:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002e46:	424b      	negs	r3, r1
10002e48:	4159      	adcs	r1, r3
10002e4a:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e4c:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e4e:	236e      	movs	r3, #110	; 0x6e
10002e50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10002e52:	404a      	eors	r2, r1
10002e54:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e56:	2380      	movs	r3, #128	; 0x80
10002e58:	015b      	lsls	r3, r3, #5
10002e5a:	4303      	orrs	r3, r0
	return 0;
10002e5c:	2000      	movs	r0, #0
10002e5e:	601a      	str	r2, [r3, #0]
}
10002e60:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002e62:	2016      	movs	r0, #22
10002e64:	4240      	negs	r0, r0
10002e66:	e7fb      	b.n	10002e60 <uart_rpi_set_format.isra.0+0x4c>
10002e68:	10004c84 	.word	0x10004c84

10002e6c <uart_rpi_init>:
{
10002e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10002e6e:	6845      	ldr	r5, [r0, #4]
{
10002e70:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10002e72:	682b      	ldr	r3, [r5, #0]
{
10002e74:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10002e76:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10002e78:	2100      	movs	r1, #0
10002e7a:	68a8      	ldr	r0, [r5, #8]
10002e7c:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10002e7e:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10002e80:	9301      	str	r3, [sp, #4]
10002e82:	f001 fb6c 	bl	1000455e <pinctrl_lookup_state>
	if (ret < 0) {
10002e86:	2800      	cmp	r0, #0
10002e88:	db23      	blt.n	10002ed2 <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10002e8a:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002e8c:	2200      	movs	r2, #0
10002e8e:	7919      	ldrb	r1, [r3, #4]
10002e90:	6818      	ldr	r0, [r3, #0]
10002e92:	f001 fb77 	bl	10004584 <pinctrl_configure_pins>
	if (ret < 0) {
10002e96:	2800      	cmp	r0, #0
10002e98:	db1b      	blt.n	10002ed2 <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10002e9a:	6831      	ldr	r1, [r6, #0]
10002e9c:	9801      	ldr	r0, [sp, #4]
10002e9e:	f000 fb41 	bl	10003524 <uart_init>
	if (baudrate == 0) {
10002ea2:	2800      	cmp	r0, #0
10002ea4:	d017      	beq.n	10002ed6 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10002ea6:	4b0d      	ldr	r3, [pc, #52]	; (10002edc <uart_rpi_init+0x70>)
10002ea8:	6030      	str	r0, [r6, #0]
10002eaa:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10002eac:	2201      	movs	r2, #1
10002eae:	2303      	movs	r3, #3
10002eb0:	2100      	movs	r1, #0
10002eb2:	6860      	ldr	r0, [r4, #4]
10002eb4:	f7ff ffae 	bl	10002e14 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10002eb8:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002eba:	23c0      	movs	r3, #192	; 0xc0
10002ebc:	322c      	adds	r2, #44	; 0x2c
10002ebe:	019b      	lsls	r3, r3, #6
10002ec0:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10002ec2:	2600      	movs	r6, #0
10002ec4:	2210      	movs	r2, #16
10002ec6:	601a      	str	r2, [r3, #0]
10002ec8:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10002eca:	0020      	movs	r0, r4
10002ecc:	696b      	ldr	r3, [r5, #20]
10002ece:	4798      	blx	r3
	return 0;
10002ed0:	0030      	movs	r0, r6
}
10002ed2:	b005      	add	sp, #20
10002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10002ed6:	2016      	movs	r0, #22
10002ed8:	4240      	negs	r0, r0
10002eda:	e7fa      	b.n	10002ed2 <uart_rpi_init+0x66>
10002edc:	00030100 	.word	0x00030100

10002ee0 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10002ee0:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10002ee2:	4b0a      	ldr	r3, [pc, #40]	; (10002f0c <elapsed+0x2c>)
10002ee4:	4a0a      	ldr	r2, [pc, #40]	; (10002f10 <elapsed+0x30>)
10002ee6:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10002ee8:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10002eea:	4d0a      	ldr	r5, [pc, #40]	; (10002f14 <elapsed+0x34>)
10002eec:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10002eee:	03c9      	lsls	r1, r1, #15
10002ef0:	d401      	bmi.n	10002ef6 <elapsed+0x16>
	    || (val1 < val2)) {
10002ef2:	42a0      	cmp	r0, r4
10002ef4:	d204      	bcs.n	10002f00 <elapsed+0x20>
		overflow_cyc += last_load;
10002ef6:	6811      	ldr	r1, [r2, #0]
10002ef8:	6828      	ldr	r0, [r5, #0]
10002efa:	1809      	adds	r1, r1, r0
10002efc:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10002efe:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10002f00:	682b      	ldr	r3, [r5, #0]
10002f02:	6810      	ldr	r0, [r2, #0]
10002f04:	18c0      	adds	r0, r0, r3
10002f06:	1b00      	subs	r0, r0, r4
}
10002f08:	bd30      	pop	{r4, r5, pc}
10002f0a:	46c0      	nop			; (mov r8, r8)
10002f0c:	e000e010 	.word	0xe000e010
10002f10:	20000148 	.word	0x20000148
10002f14:	20000154 	.word	0x20000154

10002f18 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10002f18:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002f1a:	4a09      	ldr	r2, [pc, #36]	; (10002f40 <sys_clock_driver_init+0x28>)
10002f1c:	6a13      	ldr	r3, [r2, #32]
10002f1e:	021b      	lsls	r3, r3, #8
10002f20:	0a1b      	lsrs	r3, r3, #8
10002f22:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10002f24:	4b07      	ldr	r3, [pc, #28]	; (10002f44 <sys_clock_driver_init+0x2c>)
10002f26:	4a08      	ldr	r2, [pc, #32]	; (10002f48 <sys_clock_driver_init+0x30>)
10002f28:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002f2a:	4b08      	ldr	r3, [pc, #32]	; (10002f4c <sys_clock_driver_init+0x34>)
10002f2c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10002f2e:	4b08      	ldr	r3, [pc, #32]	; (10002f50 <sys_clock_driver_init+0x38>)
10002f30:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002f32:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10002f34:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002f36:	6819      	ldr	r1, [r3, #0]
10002f38:	430a      	orrs	r2, r1
10002f3a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10002f3c:	4770      	bx	lr
10002f3e:	46c0      	nop			; (mov r8, r8)
10002f40:	e000ed00 	.word	0xe000ed00
10002f44:	20000154 	.word	0x20000154
10002f48:	000030d3 	.word	0x000030d3
10002f4c:	20000148 	.word	0x20000148
10002f50:	e000e010 	.word	0xe000e010

10002f54 <sys_clock_isr>:
{
10002f54:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10002f56:	f7ff ffc3 	bl	10002ee0 <elapsed>
	cycle_count += overflow_cyc;
10002f5a:	4b0b      	ldr	r3, [pc, #44]	; (10002f88 <sys_clock_isr+0x34>)
10002f5c:	4a0b      	ldr	r2, [pc, #44]	; (10002f8c <sys_clock_isr+0x38>)
10002f5e:	6818      	ldr	r0, [r3, #0]
10002f60:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002f62:	4c0b      	ldr	r4, [pc, #44]	; (10002f90 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10002f64:	1840      	adds	r0, r0, r1
10002f66:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10002f68:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002f6a:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002f6c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002f6e:	4909      	ldr	r1, [pc, #36]	; (10002f94 <sys_clock_isr+0x40>)
10002f70:	1b40      	subs	r0, r0, r5
10002f72:	f7fd f92d 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10002f76:	4b07      	ldr	r3, [pc, #28]	; (10002f94 <sys_clock_isr+0x40>)
10002f78:	4343      	muls	r3, r0
10002f7a:	195b      	adds	r3, r3, r5
10002f7c:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10002f7e:	f000 fff3 	bl	10003f68 <sys_clock_announce>
	z_arm_int_exit();
10002f82:	f7ff fd27 	bl	100029d4 <z_arm_exc_exit>
}
10002f86:	bd70      	pop	{r4, r5, r6, pc}
10002f88:	20000148 	.word	0x20000148
10002f8c:	20000150 	.word	0x20000150
10002f90:	2000014c 	.word	0x2000014c
10002f94:	000030d4 	.word	0x000030d4

10002f98 <sys_clock_set_timeout>:
{
10002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f9a:	4d32      	ldr	r5, [pc, #200]	; (10003064 <sys_clock_set_timeout+0xcc>)
10002f9c:	4f32      	ldr	r7, [pc, #200]	; (10003068 <sys_clock_set_timeout+0xd0>)
10002f9e:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10002fa0:	2900      	cmp	r1, #0
10002fa2:	d054      	beq.n	1000304e <sys_clock_set_timeout+0xb6>
10002fa4:	1c43      	adds	r3, r0, #1
10002fa6:	d108      	bne.n	10002fba <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10002fa8:	2201      	movs	r2, #1
10002faa:	682b      	ldr	r3, [r5, #0]
10002fac:	4393      	bics	r3, r2
10002fae:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10002fb0:	23ff      	movs	r3, #255	; 0xff
10002fb2:	061b      	lsls	r3, r3, #24
10002fb4:	603b      	str	r3, [r7, #0]
}
10002fb6:	b005      	add	sp, #20
10002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10002fba:	683b      	ldr	r3, [r7, #0]
10002fbc:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10002fbe:	2600      	movs	r6, #0
10002fc0:	2801      	cmp	r0, #1
10002fc2:	dd04      	ble.n	10002fce <sys_clock_set_timeout+0x36>
10002fc4:	4b29      	ldr	r3, [pc, #164]	; (1000306c <sys_clock_set_timeout+0xd4>)
10002fc6:	001e      	movs	r6, r3
10002fc8:	4298      	cmp	r0, r3
10002fca:	dc00      	bgt.n	10002fce <sys_clock_set_timeout+0x36>
10002fcc:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10002fce:	f3ef 8310 	mrs	r3, PRIMASK
10002fd2:	b672      	cpsid	i
10002fd4:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10002fd6:	f7ff ff83 	bl	10002ee0 <elapsed>
	overflow_cyc = 0U;
10002fda:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10002fdc:	68ab      	ldr	r3, [r5, #8]
10002fde:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10002fe0:	4b23      	ldr	r3, [pc, #140]	; (10003070 <sys_clock_set_timeout+0xd8>)
10002fe2:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10002fe4:	4b23      	ldr	r3, [pc, #140]	; (10003074 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10002fe6:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10002fe8:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10002fea:	4b23      	ldr	r3, [pc, #140]	; (10003078 <sys_clock_set_timeout+0xe0>)
10002fec:	681b      	ldr	r3, [r3, #0]
10002fee:	9300      	str	r3, [sp, #0]
10002ff0:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10002ff2:	4290      	cmp	r0, r2
10002ff4:	db31      	blt.n	1000305a <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10002ff6:	4b21      	ldr	r3, [pc, #132]	; (1000307c <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002ff8:	4a21      	ldr	r2, [pc, #132]	; (10003080 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10002ffa:	435e      	muls	r6, r3
		delay += unannounced;
10002ffc:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002ffe:	0019      	movs	r1, r3
10003000:	1880      	adds	r0, r0, r2
10003002:	f7fd f8e5 	bl	100001d0 <__udivsi3>
		delay =
10003006:	4b1d      	ldr	r3, [pc, #116]	; (1000307c <sys_clock_set_timeout+0xe4>)
10003008:	4358      	muls	r0, r3
		delay -= unannounced;
1000300a:	9b00      	ldr	r3, [sp, #0]
1000300c:	1b1b      	subs	r3, r3, r4
1000300e:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10003010:	2380      	movs	r3, #128	; 0x80
10003012:	00db      	lsls	r3, r3, #3
10003014:	4298      	cmp	r0, r3
10003016:	d923      	bls.n	10003060 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10003018:	4b1a      	ldr	r3, [pc, #104]	; (10003084 <sys_clock_set_timeout+0xec>)
1000301a:	4298      	cmp	r0, r3
1000301c:	d820      	bhi.n	10003060 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
1000301e:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10003020:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10003022:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10003024:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10003026:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10003028:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
1000302a:	9b02      	ldr	r3, [sp, #8]
1000302c:	9802      	ldr	r0, [sp, #8]
1000302e:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10003030:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10003032:	4288      	cmp	r0, r1
10003034:	d202      	bcs.n	1000303c <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10003036:	9a01      	ldr	r2, [sp, #4]
10003038:	189b      	adds	r3, r3, r2
1000303a:	191a      	adds	r2, r3, r4
1000303c:	4b0c      	ldr	r3, [pc, #48]	; (10003070 <sys_clock_set_timeout+0xd8>)
1000303e:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10003040:	9b03      	ldr	r3, [sp, #12]
10003042:	2b00      	cmp	r3, #0
10003044:	d1b7      	bne.n	10002fb6 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10003046:	b662      	cpsie	i
10003048:	f3bf 8f6f 	isb	sy
1000304c:	e7b3      	b.n	10002fb6 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
1000304e:	683b      	ldr	r3, [r7, #0]
10003050:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10003052:	1c43      	adds	r3, r0, #1
10003054:	d1b3      	bne.n	10002fbe <sys_clock_set_timeout+0x26>
10003056:	4805      	ldr	r0, [pc, #20]	; (1000306c <sys_clock_set_timeout+0xd4>)
10003058:	e7b8      	b.n	10002fcc <sys_clock_set_timeout+0x34>
1000305a:	2080      	movs	r0, #128	; 0x80
1000305c:	00c0      	lsls	r0, r0, #3
1000305e:	e7de      	b.n	1000301e <sys_clock_set_timeout+0x86>
10003060:	0018      	movs	r0, r3
10003062:	e7dc      	b.n	1000301e <sys_clock_set_timeout+0x86>
10003064:	e000e010 	.word	0xe000e010
10003068:	20000154 	.word	0x20000154
1000306c:	0000053d 	.word	0x0000053d
10003070:	20000150 	.word	0x20000150
10003074:	20000148 	.word	0x20000148
10003078:	2000014c 	.word	0x2000014c
1000307c:	000030d4 	.word	0x000030d4
10003080:	000030d3 	.word	0x000030d3
10003084:	00ffc684 	.word	0x00ffc684

10003088 <sys_clock_elapsed>:
{
10003088:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000308a:	f3ef 8410 	mrs	r4, PRIMASK
1000308e:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10003090:	f7ff ff26 	bl	10002ee0 <elapsed>
10003094:	4b07      	ldr	r3, [pc, #28]	; (100030b4 <sys_clock_elapsed+0x2c>)
10003096:	4a08      	ldr	r2, [pc, #32]	; (100030b8 <sys_clock_elapsed+0x30>)
10003098:	681b      	ldr	r3, [r3, #0]
1000309a:	6812      	ldr	r2, [r2, #0]
1000309c:	1a9b      	subs	r3, r3, r2
1000309e:	1818      	adds	r0, r3, r0
	if (key != 0U) {
100030a0:	2c00      	cmp	r4, #0
100030a2:	d102      	bne.n	100030aa <sys_clock_elapsed+0x22>
	__asm__ volatile(
100030a4:	b662      	cpsie	i
100030a6:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
100030aa:	4904      	ldr	r1, [pc, #16]	; (100030bc <sys_clock_elapsed+0x34>)
100030ac:	f7fd f890 	bl	100001d0 <__udivsi3>
}
100030b0:	bd10      	pop	{r4, pc}
100030b2:	46c0      	nop			; (mov r8, r8)
100030b4:	20000150 	.word	0x20000150
100030b8:	2000014c 	.word	0x2000014c
100030bc:	000030d4 	.word	0x000030d4

100030c0 <sys_clock_cycle_get_32>:
{
100030c0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100030c2:	f3ef 8410 	mrs	r4, PRIMASK
100030c6:	b672      	cpsid	i
	uint32_t ret = elapsed() + cycle_count;
100030c8:	f7ff ff0a 	bl	10002ee0 <elapsed>
100030cc:	4b04      	ldr	r3, [pc, #16]	; (100030e0 <sys_clock_cycle_get_32+0x20>)
100030ce:	681b      	ldr	r3, [r3, #0]
100030d0:	18c0      	adds	r0, r0, r3
	if (key != 0U) {
100030d2:	2c00      	cmp	r4, #0
100030d4:	d102      	bne.n	100030dc <sys_clock_cycle_get_32+0x1c>
	__asm__ volatile(
100030d6:	b662      	cpsie	i
100030d8:	f3bf 8f6f 	isb	sy
}
100030dc:	bd10      	pop	{r4, pc}
100030de:	46c0      	nop			; (mov r8, r8)
100030e0:	20000150 	.word	0x20000150

100030e4 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100030e6:	b085      	sub	sp, #20
100030e8:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100030ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100030ec:	0005      	movs	r5, r0
100030ee:	000f      	movs	r7, r1
        return false;
100030f0:	2000      	movs	r0, #0
    if (freq > src_freq)
100030f2:	429a      	cmp	r2, r3
100030f4:	d863      	bhi.n	100031be <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100030f6:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100030f8:	0e1a      	lsrs	r2, r3, #24
100030fa:	021b      	lsls	r3, r3, #8
100030fc:	9203      	str	r2, [sp, #12]
100030fe:	9302      	str	r3, [sp, #8]
10003100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003102:	0003      	movs	r3, r0
10003104:	9903      	ldr	r1, [sp, #12]
10003106:	9802      	ldr	r0, [sp, #8]
10003108:	f7fd f906 	bl	10000318 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000310c:	436c      	muls	r4, r5
1000310e:	4b2d      	ldr	r3, [pc, #180]	; (100031c4 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003110:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003112:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10003114:	6863      	ldr	r3, [r4, #4]
10003116:	4283      	cmp	r3, r0
10003118:	d200      	bcs.n	1000311c <clock_configure+0x38>
        clock->div = div;
1000311a:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
1000311c:	1f2b      	subs	r3, r5, #4
1000311e:	b2db      	uxtb	r3, r3
10003120:	9300      	str	r3, [sp, #0]
10003122:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10003124:	9a00      	ldr	r2, [sp, #0]
10003126:	019b      	lsls	r3, r3, #6
10003128:	4323      	orrs	r3, r4
1000312a:	2a01      	cmp	r2, #1
1000312c:	d81b      	bhi.n	10003166 <clock_configure+0x82>
1000312e:	2f01      	cmp	r7, #1
10003130:	d119      	bne.n	10003166 <clock_configure+0x82>
10003132:	2203      	movs	r2, #3
10003134:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10003136:	68a3      	ldr	r3, [r4, #8]
10003138:	423b      	tst	r3, r7
1000313a:	d0fc      	beq.n	10003136 <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
1000313c:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000313e:	6823      	ldr	r3, [r4, #0]
10003140:	0152      	lsls	r2, r2, #5
10003142:	405a      	eors	r2, r3
10003144:	23e0      	movs	r3, #224	; 0xe0
10003146:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003148:	2380      	movs	r3, #128	; 0x80
1000314a:	015b      	lsls	r3, r3, #5
1000314c:	4323      	orrs	r3, r4
1000314e:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003150:	2103      	movs	r1, #3
10003152:	6822      	ldr	r2, [r4, #0]
10003154:	407a      	eors	r2, r7
10003156:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003158:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
1000315a:	2301      	movs	r3, #1
1000315c:	40bb      	lsls	r3, r7
1000315e:	68a2      	ldr	r2, [r4, #8]
10003160:	4213      	tst	r3, r2
10003162:	d0fc      	beq.n	1000315e <clock_configure+0x7a>
10003164:	e01a      	b.n	1000319c <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003166:	2280      	movs	r2, #128	; 0x80
10003168:	0112      	lsls	r2, r2, #4
1000316a:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
1000316c:	4b16      	ldr	r3, [pc, #88]	; (100031c8 <clock_configure+0xe4>)
1000316e:	00aa      	lsls	r2, r5, #2
10003170:	58d1      	ldr	r1, [r2, r3]
10003172:	2900      	cmp	r1, #0
10003174:	d005      	beq.n	10003182 <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10003176:	6958      	ldr	r0, [r3, #20]
10003178:	f7fd f82a 	bl	100001d0 <__udivsi3>
1000317c:	3001      	adds	r0, #1
            asm volatile (
1000317e:	3801      	subs	r0, #1
10003180:	d1fd      	bne.n	1000317e <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10003182:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003184:	6823      	ldr	r3, [r4, #0]
10003186:	0152      	lsls	r2, r2, #5
10003188:	405a      	eors	r2, r3
1000318a:	23e0      	movs	r3, #224	; 0xe0
1000318c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000318e:	2380      	movs	r3, #128	; 0x80
10003190:	015b      	lsls	r3, r3, #5
10003192:	4323      	orrs	r3, r4
10003194:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10003196:	9a00      	ldr	r2, [sp, #0]
10003198:	2a01      	cmp	r2, #1
1000319a:	d9d9      	bls.n	10003150 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000319c:	2380      	movs	r3, #128	; 0x80
1000319e:	2280      	movs	r2, #128	; 0x80
100031a0:	019b      	lsls	r3, r3, #6
100031a2:	4323      	orrs	r3, r4
100031a4:	0112      	lsls	r2, r2, #4
100031a6:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100031a8:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
100031aa:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100031ac:	0032      	movs	r2, r6
100031ae:	2300      	movs	r3, #0
100031b0:	9903      	ldr	r1, [sp, #12]
100031b2:	f7fd f8b1 	bl	10000318 <__aeabi_uldivmod>
100031b6:	4c04      	ldr	r4, [pc, #16]	; (100031c8 <clock_configure+0xe4>)
100031b8:	00ad      	lsls	r5, r5, #2
100031ba:	5160      	str	r0, [r4, r5]
100031bc:	2001      	movs	r0, #1

    return true;
}
100031be:	b005      	add	sp, #20
100031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031c2:	46c0      	nop			; (mov r8, r8)
100031c4:	40008000 	.word	0x40008000
100031c8:	20000158 	.word	0x20000158

100031cc <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100031cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100031ce:	200c      	movs	r0, #12
100031d0:	f000 f8da 	bl	10003388 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100031d4:	f000 f8e0 	bl	10003398 <running_on_fpga>
100031d8:	2800      	cmp	r0, #0
100031da:	d00a      	beq.n	100031f2 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
100031dc:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
100031de:	4a2b      	ldr	r2, [pc, #172]	; (1000328c <clocks_init+0xc0>)
100031e0:	482b      	ldr	r0, [pc, #172]	; (10003290 <clocks_init+0xc4>)
100031e2:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
100031e4:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
100031e6:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
100031e8:	2b0a      	cmp	r3, #10
100031ea:	d1fa      	bne.n	100031e2 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
100031ec:	4b29      	ldr	r3, [pc, #164]	; (10003294 <clocks_init+0xc8>)
100031ee:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
100031f0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
100031f2:	4d29      	ldr	r5, [pc, #164]	; (10003298 <clocks_init+0xcc>)
100031f4:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
100031f6:	f000 f8b3 	bl	10003360 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100031fa:	2201      	movs	r2, #1
100031fc:	4b27      	ldr	r3, [pc, #156]	; (1000329c <clocks_init+0xd0>)
100031fe:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10003200:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10003202:	2b01      	cmp	r3, #1
10003204:	d1fc      	bne.n	10003200 <clocks_init+0x34>
10003206:	2203      	movs	r2, #3
10003208:	4b25      	ldr	r3, [pc, #148]	; (100032a0 <clocks_init+0xd4>)
1000320a:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
1000320c:	6bac      	ldr	r4, [r5, #56]	; 0x38
1000320e:	2c01      	cmp	r4, #1
10003210:	d1fc      	bne.n	1000320c <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10003212:	2502      	movs	r5, #2
10003214:	0021      	movs	r1, r4
10003216:	9500      	str	r5, [sp, #0]
10003218:	2306      	movs	r3, #6
1000321a:	4a22      	ldr	r2, [pc, #136]	; (100032a4 <clocks_init+0xd8>)
1000321c:	4822      	ldr	r0, [pc, #136]	; (100032a8 <clocks_init+0xdc>)
1000321e:	f000 f853 	bl	100032c8 <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
10003222:	0021      	movs	r1, r4
10003224:	9500      	str	r5, [sp, #0]
10003226:	2305      	movs	r3, #5
10003228:	4a20      	ldr	r2, [pc, #128]	; (100032ac <clocks_init+0xe0>)
1000322a:	4821      	ldr	r0, [pc, #132]	; (100032b0 <clocks_init+0xe4>)
1000322c:	f000 f84c 	bl	100032c8 <pll_init>
    clock_configure(clk_ref,
10003230:	4b20      	ldr	r3, [pc, #128]	; (100032b4 <clocks_init+0xe8>)
10003232:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10003234:	4d20      	ldr	r5, [pc, #128]	; (100032b8 <clocks_init+0xec>)
    clock_configure(clk_ref,
10003236:	9300      	str	r3, [sp, #0]
10003238:	2200      	movs	r2, #0
1000323a:	2004      	movs	r0, #4
1000323c:	f7ff ff52 	bl	100030e4 <clock_configure>
    clock_configure(clk_sys,
10003240:	002b      	movs	r3, r5
10003242:	0021      	movs	r1, r4
10003244:	2200      	movs	r2, #0
10003246:	9500      	str	r5, [sp, #0]
10003248:	2005      	movs	r0, #5
1000324a:	f7ff ff4b 	bl	100030e4 <clock_configure>
    clock_configure(clk_usb,
1000324e:	2200      	movs	r2, #0
10003250:	4c0f      	ldr	r4, [pc, #60]	; (10003290 <clocks_init+0xc4>)
10003252:	0011      	movs	r1, r2
10003254:	0023      	movs	r3, r4
10003256:	9400      	str	r4, [sp, #0]
10003258:	2007      	movs	r0, #7
1000325a:	f7ff ff43 	bl	100030e4 <clock_configure>
    clock_configure(clk_adc,
1000325e:	2200      	movs	r2, #0
10003260:	0023      	movs	r3, r4
10003262:	0011      	movs	r1, r2
10003264:	9400      	str	r4, [sp, #0]
10003266:	2008      	movs	r0, #8
10003268:	f7ff ff3c 	bl	100030e4 <clock_configure>
    clock_configure(clk_rtc,
1000326c:	2200      	movs	r2, #0
1000326e:	4b09      	ldr	r3, [pc, #36]	; (10003294 <clocks_init+0xc8>)
10003270:	0011      	movs	r1, r2
10003272:	9300      	str	r3, [sp, #0]
10003274:	2009      	movs	r0, #9
10003276:	0023      	movs	r3, r4
10003278:	f7ff ff34 	bl	100030e4 <clock_configure>
    clock_configure(clk_peri,
1000327c:	2200      	movs	r2, #0
1000327e:	002b      	movs	r3, r5
10003280:	0011      	movs	r1, r2
10003282:	9500      	str	r5, [sp, #0]
10003284:	2006      	movs	r0, #6
10003286:	f7ff ff2d 	bl	100030e4 <clock_configure>
1000328a:	e7b1      	b.n	100031f0 <clocks_init+0x24>
1000328c:	20000158 	.word	0x20000158
10003290:	02dc6c00 	.word	0x02dc6c00
10003294:	0000b71b 	.word	0x0000b71b
10003298:	40008000 	.word	0x40008000
1000329c:	4000b03c 	.word	0x4000b03c
100032a0:	4000b030 	.word	0x4000b030
100032a4:	59682f00 	.word	0x59682f00
100032a8:	40028000 	.word	0x40028000
100032ac:	1c9c3800 	.word	0x1c9c3800
100032b0:	4002c000 	.word	0x4002c000
100032b4:	00b71b00 	.word	0x00b71b00
100032b8:	07735940 	.word	0x07735940

100032bc <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100032bc:	4b01      	ldr	r3, [pc, #4]	; (100032c4 <clock_get_hz+0x8>)
100032be:	0080      	lsls	r0, r0, #2
100032c0:	58c0      	ldr	r0, [r0, r3]
}
100032c2:	4770      	bx	lr
100032c4:	20000158 	.word	0x20000158

100032c8 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100032ca:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100032cc:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100032ce:	0017      	movs	r7, r2
100032d0:	001e      	movs	r6, r3
100032d2:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100032d4:	f7fc ff7c 	bl	100001d0 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100032d8:	491c      	ldr	r1, [pc, #112]	; (1000334c <pll_init+0x84>)
100032da:	4341      	muls	r1, r0
100032dc:	0038      	movs	r0, r7
100032de:	f7fc ff77 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100032e2:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100032e4:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100032e6:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100032e8:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100032ea:	6822      	ldr	r2, [r4, #0]
100032ec:	2a00      	cmp	r2, #0
100032ee:	da0c      	bge.n	1000330a <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100032f0:	213f      	movs	r1, #63	; 0x3f
100032f2:	6822      	ldr	r2, [r4, #0]
100032f4:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100032f6:	42aa      	cmp	r2, r5
100032f8:	d107      	bne.n	1000330a <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100032fa:	68a2      	ldr	r2, [r4, #8]
100032fc:	0512      	lsls	r2, r2, #20
100032fe:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003300:	4282      	cmp	r2, r0
10003302:	d102      	bne.n	1000330a <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10003304:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10003306:	2b00      	cmp	r3, #0
10003308:	d01b      	beq.n	10003342 <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000330a:	4a11      	ldr	r2, [pc, #68]	; (10003350 <pll_init+0x88>)
1000330c:	4294      	cmp	r4, r2
1000330e:	d019      	beq.n	10003344 <pll_init+0x7c>
10003310:	2280      	movs	r2, #128	; 0x80
10003312:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003314:	490f      	ldr	r1, [pc, #60]	; (10003354 <pll_init+0x8c>)
10003316:	4e10      	ldr	r6, [pc, #64]	; (10003358 <pll_init+0x90>)
10003318:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000331a:	4910      	ldr	r1, [pc, #64]	; (1000335c <pll_init+0x94>)
1000331c:	600a      	str	r2, [r1, #0]
1000331e:	0017      	movs	r7, r2
10003320:	68b1      	ldr	r1, [r6, #8]
10003322:	438f      	bics	r7, r1
10003324:	d1fb      	bne.n	1000331e <pll_init+0x56>
10003326:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10003328:	1d21      	adds	r1, r4, #4
1000332a:	0192      	lsls	r2, r2, #6
1000332c:	430a      	orrs	r2, r1
1000332e:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10003330:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10003332:	60a0      	str	r0, [r4, #8]
10003334:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10003336:	6821      	ldr	r1, [r4, #0]
10003338:	2900      	cmp	r1, #0
1000333a:	dafc      	bge.n	10003336 <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
1000333c:	60e3      	str	r3, [r4, #12]
1000333e:	2308      	movs	r3, #8
10003340:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10003342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10003344:	2280      	movs	r2, #128	; 0x80
10003346:	0192      	lsls	r2, r2, #6
10003348:	e7e4      	b.n	10003314 <pll_init+0x4c>
1000334a:	46c0      	nop			; (mov r8, r8)
1000334c:	000f4240 	.word	0x000f4240
10003350:	4002c000 	.word	0x4002c000
10003354:	4000e000 	.word	0x4000e000
10003358:	4000c000 	.word	0x4000c000
1000335c:	4000f000 	.word	0x4000f000

10003360 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10003360:	22aa      	movs	r2, #170	; 0xaa
10003362:	4b06      	ldr	r3, [pc, #24]	; (1000337c <xosc_init+0x1c>)
10003364:	0112      	lsls	r2, r2, #4
10003366:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10003368:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000336a:	4905      	ldr	r1, [pc, #20]	; (10003380 <xosc_init+0x20>)
1000336c:	60da      	str	r2, [r3, #12]
1000336e:	4a05      	ldr	r2, [pc, #20]	; (10003384 <xosc_init+0x24>)
10003370:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10003372:	685a      	ldr	r2, [r3, #4]
10003374:	2a00      	cmp	r2, #0
10003376:	dafc      	bge.n	10003372 <xosc_init+0x12>
}
10003378:	4770      	bx	lr
1000337a:	46c0      	nop			; (mov r8, r8)
1000337c:	40024000 	.word	0x40024000
10003380:	00fab000 	.word	0x00fab000
10003384:	40026000 	.word	0x40026000

10003388 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10003388:	2380      	movs	r3, #128	; 0x80
1000338a:	4a02      	ldr	r2, [pc, #8]	; (10003394 <watchdog_start_tick+0xc>)
1000338c:	009b      	lsls	r3, r3, #2
1000338e:	4303      	orrs	r3, r0
10003390:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10003392:	4770      	bx	lr
10003394:	40058000 	.word	0x40058000

10003398 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10003398:	4b02      	ldr	r3, [pc, #8]	; (100033a4 <running_on_fpga+0xc>)
1000339a:	6818      	ldr	r0, [r3, #0]
1000339c:	0780      	lsls	r0, r0, #30
1000339e:	0fc0      	lsrs	r0, r0, #31
}
100033a0:	4770      	bx	lr
100033a2:	46c0      	nop			; (mov r8, r8)
100033a4:	4006c000 	.word	0x4006c000

100033a8 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100033a8:	4b08      	ldr	r3, [pc, #32]	; (100033cc <gpio_set_function+0x24>)
100033aa:	0082      	lsls	r2, r0, #2
100033ac:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100033ae:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100033b0:	b510      	push	{r4, lr}
100033b2:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100033b4:	00c0      	lsls	r0, r0, #3
100033b6:	4063      	eors	r3, r4
100033b8:	24c0      	movs	r4, #192	; 0xc0
100033ba:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100033bc:	2480      	movs	r4, #128	; 0x80
100033be:	0164      	lsls	r4, r4, #5
100033c0:	4322      	orrs	r2, r4
100033c2:	6013      	str	r3, [r2, #0]
100033c4:	4b02      	ldr	r3, [pc, #8]	; (100033d0 <gpio_set_function+0x28>)
100033c6:	18c0      	adds	r0, r0, r3
100033c8:	6041      	str	r1, [r0, #4]
}
100033ca:	bd10      	pop	{r4, pc}
100033cc:	4001c004 	.word	0x4001c004
100033d0:	40014000 	.word	0x40014000

100033d4 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
100033d4:	4b07      	ldr	r3, [pc, #28]	; (100033f4 <gpio_set_pulls+0x20>)
100033d6:	0080      	lsls	r0, r0, #2
100033d8:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100033da:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100033dc:	00c9      	lsls	r1, r1, #3
100033de:	0092      	lsls	r2, r2, #2
    hw_write_masked(
100033e0:	430a      	orrs	r2, r1
100033e2:	405a      	eors	r2, r3
100033e4:	230c      	movs	r3, #12
100033e6:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100033e8:	2380      	movs	r3, #128	; 0x80
100033ea:	015b      	lsls	r3, r3, #5
100033ec:	4303      	orrs	r3, r0
100033ee:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100033f0:	4770      	bx	lr
100033f2:	46c0      	nop			; (mov r8, r8)
100033f4:	4001c004 	.word	0x4001c004

100033f8 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
100033f8:	4b05      	ldr	r3, [pc, #20]	; (10003410 <gpio_set_input_hysteresis_enabled+0x18>)
100033fa:	0080      	lsls	r0, r0, #2
100033fc:	18c0      	adds	r0, r0, r3
100033fe:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003400:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003402:	2900      	cmp	r1, #0
10003404:	d100      	bne.n	10003408 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003406:	23c0      	movs	r3, #192	; 0xc0
10003408:	019b      	lsls	r3, r3, #6
1000340a:	4303      	orrs	r3, r0
1000340c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000340e:	4770      	bx	lr
10003410:	4001c004 	.word	0x4001c004

10003414 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10003414:	4b05      	ldr	r3, [pc, #20]	; (1000342c <gpio_set_slew_rate+0x18>)
10003416:	0080      	lsls	r0, r0, #2
10003418:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000341a:	6803      	ldr	r3, [r0, #0]
1000341c:	4059      	eors	r1, r3
1000341e:	2301      	movs	r3, #1
10003420:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003422:	2380      	movs	r3, #128	; 0x80
10003424:	015b      	lsls	r3, r3, #5
10003426:	4303      	orrs	r3, r0
10003428:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000342a:	4770      	bx	lr
1000342c:	4001c004 	.word	0x4001c004

10003430 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10003430:	4b06      	ldr	r3, [pc, #24]	; (1000344c <gpio_set_drive_strength+0x1c>)
10003432:	0080      	lsls	r0, r0, #2
10003434:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003436:	6803      	ldr	r3, [r0, #0]
10003438:	0109      	lsls	r1, r1, #4
1000343a:	4059      	eors	r1, r3
1000343c:	2330      	movs	r3, #48	; 0x30
1000343e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003440:	2380      	movs	r3, #128	; 0x80
10003442:	015b      	lsls	r3, r3, #5
10003444:	4303      	orrs	r3, r0
10003446:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10003448:	4770      	bx	lr
1000344a:	46c0      	nop			; (mov r8, r8)
1000344c:	4001c004 	.word	0x4001c004

10003450 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10003450:	2207      	movs	r2, #7
10003452:	08c3      	lsrs	r3, r0, #3
10003454:	4010      	ands	r0, r2
10003456:	0080      	lsls	r0, r0, #2
10003458:	4081      	lsls	r1, r0
1000345a:	4a02      	ldr	r2, [pc, #8]	; (10003464 <gpio_acknowledge_irq+0x14>)
1000345c:	333c      	adds	r3, #60	; 0x3c
1000345e:	009b      	lsls	r3, r3, #2
10003460:	5099      	str	r1, [r3, r2]
}
10003462:	4770      	bx	lr
10003464:	40014000 	.word	0x40014000

10003468 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000346a:	23d0      	movs	r3, #208	; 0xd0
1000346c:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000346e:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003470:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003472:	4263      	negs	r3, r4
10003474:	415c      	adcs	r4, r3
10003476:	232f      	movs	r3, #47	; 0x2f
10003478:	4264      	negs	r4, r4
1000347a:	439c      	bics	r4, r3
1000347c:	4b0a      	ldr	r3, [pc, #40]	; (100034a8 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000347e:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003480:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003482:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10003484:	f7ff ffe4 	bl	10003450 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10003488:	2307      	movs	r3, #7
1000348a:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000348c:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
1000348e:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003490:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
10003492:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003494:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003496:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003498:	2e00      	cmp	r6, #0
1000349a:	d100      	bne.n	1000349e <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000349c:	23c0      	movs	r3, #192	; 0xc0
1000349e:	019b      	lsls	r3, r3, #6
100034a0:	4323      	orrs	r3, r4
100034a2:	601f      	str	r7, [r3, #0]
}
100034a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100034a6:	46c0      	nop			; (mov r8, r8)
100034a8:	40014130 	.word	0x40014130

100034ac <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100034ac:	4b05      	ldr	r3, [pc, #20]	; (100034c4 <gpio_set_input_enabled+0x18>)
100034ae:	0080      	lsls	r0, r0, #2
100034b0:	18c0      	adds	r0, r0, r3
100034b2:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100034b4:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100034b6:	2900      	cmp	r1, #0
100034b8:	d100      	bne.n	100034bc <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100034ba:	23c0      	movs	r3, #192	; 0xc0
100034bc:	019b      	lsls	r3, r3, #6
100034be:	4303      	orrs	r3, r0
100034c0:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
100034c2:	4770      	bx	lr
100034c4:	4001c004 	.word	0x4001c004

100034c8 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100034c8:	b570      	push	{r4, r5, r6, lr}
100034ca:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100034cc:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100034ce:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100034d0:	f7ff fef4 	bl	100032bc <clock_get_hz>
100034d4:	0021      	movs	r1, r4
100034d6:	00c0      	lsls	r0, r0, #3
100034d8:	f7fc fe7a 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
100034dc:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
100034de:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
100034e0:	d007      	beq.n	100034f2 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
100034e2:	4b0e      	ldr	r3, [pc, #56]	; (1000351c <uart_set_baudrate+0x54>)
100034e4:	429d      	cmp	r5, r3
100034e6:	d815      	bhi.n	10003514 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
100034e8:	237f      	movs	r3, #127	; 0x7f
100034ea:	4018      	ands	r0, r3
100034ec:	1900      	adds	r0, r0, r4
100034ee:	002c      	movs	r4, r5
100034f0:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100034f2:	2380      	movs	r3, #128	; 0x80
100034f4:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
100034f6:	6274      	str	r4, [r6, #36]	; 0x24
100034f8:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
100034fa:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
100034fc:	362c      	adds	r6, #44	; 0x2c
100034fe:	4333      	orrs	r3, r6
10003500:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10003502:	2006      	movs	r0, #6
10003504:	f7ff feda 	bl	100032bc <clock_get_hz>
10003508:	01a1      	lsls	r1, r4, #6
1000350a:	1949      	adds	r1, r1, r5
1000350c:	0080      	lsls	r0, r0, #2
1000350e:	f7fc fe5f 	bl	100001d0 <__udivsi3>
}
10003512:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10003514:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10003516:	4c02      	ldr	r4, [pc, #8]	; (10003520 <uart_set_baudrate+0x58>)
10003518:	e7eb      	b.n	100034f2 <uart_set_baudrate+0x2a>
1000351a:	46c0      	nop			; (mov r8, r8)
1000351c:	0000fffe 	.word	0x0000fffe
10003520:	0000ffff 	.word	0x0000ffff

10003524 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10003524:	b570      	push	{r4, r5, r6, lr}
10003526:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10003528:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000352a:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
1000352c:	f7ff fec6 	bl	100032bc <clock_get_hz>
10003530:	2800      	cmp	r0, #0
10003532:	d02e      	beq.n	10003592 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003534:	4b19      	ldr	r3, [pc, #100]	; (1000359c <uart_init+0x78>)
10003536:	429c      	cmp	r4, r3
10003538:	d02c      	beq.n	10003594 <uart_init+0x70>
1000353a:	2380      	movs	r3, #128	; 0x80
1000353c:	03db      	lsls	r3, r3, #15
1000353e:	4a18      	ldr	r2, [pc, #96]	; (100035a0 <uart_init+0x7c>)
10003540:	4918      	ldr	r1, [pc, #96]	; (100035a4 <uart_init+0x80>)
10003542:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003544:	4a18      	ldr	r2, [pc, #96]	; (100035a8 <uart_init+0x84>)
10003546:	6013      	str	r3, [r2, #0]
10003548:	0018      	movs	r0, r3
1000354a:	688a      	ldr	r2, [r1, #8]
1000354c:	4390      	bics	r0, r2
1000354e:	d1fb      	bne.n	10003548 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10003550:	4b16      	ldr	r3, [pc, #88]	; (100035ac <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10003552:	4a17      	ldr	r2, [pc, #92]	; (100035b0 <uart_init+0x8c>)
10003554:	18e3      	adds	r3, r4, r3
10003556:	4259      	negs	r1, r3
10003558:	414b      	adcs	r3, r1
1000355a:	2180      	movs	r1, #128	; 0x80
1000355c:	005b      	lsls	r3, r3, #1
1000355e:	0049      	lsls	r1, r1, #1
10003560:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10003562:	0020      	movs	r0, r4
10003564:	0029      	movs	r1, r5
10003566:	f7ff ffaf 	bl	100034c8 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000356a:	2360      	movs	r3, #96	; 0x60
1000356c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000356e:	0021      	movs	r1, r4
10003570:	4053      	eors	r3, r2
10003572:	226e      	movs	r2, #110	; 0x6e
10003574:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003576:	2280      	movs	r2, #128	; 0x80
10003578:	312c      	adds	r1, #44	; 0x2c
1000357a:	0152      	lsls	r2, r2, #5
1000357c:	430a      	orrs	r2, r1
1000357e:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10003580:	4b0c      	ldr	r3, [pc, #48]	; (100035b4 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003582:	2210      	movs	r2, #16
10003584:	6323      	str	r3, [r4, #48]	; 0x30
10003586:	2380      	movs	r3, #128	; 0x80
10003588:	019b      	lsls	r3, r3, #6
1000358a:	430b      	orrs	r3, r1
1000358c:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000358e:	2303      	movs	r3, #3
10003590:	64a3      	str	r3, [r4, #72]	; 0x48
}
10003592:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003594:	2380      	movs	r3, #128	; 0x80
10003596:	041b      	lsls	r3, r3, #16
10003598:	e7d1      	b.n	1000353e <uart_init+0x1a>
1000359a:	46c0      	nop			; (mov r8, r8)
1000359c:	40038000 	.word	0x40038000
100035a0:	4000e000 	.word	0x4000e000
100035a4:	4000c000 	.word	0x4000c000
100035a8:	4000f000 	.word	0x4000f000
100035ac:	bffc8000 	.word	0xbffc8000
100035b0:	200001b4 	.word	0x200001b4
100035b4:	00000301 	.word	0x00000301

100035b8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
100035b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
100035ba:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100035bc:	4e10      	ldr	r6, [pc, #64]	; (10003600 <z_sys_init_run_level+0x48>)
100035be:	0083      	lsls	r3, r0, #2
100035c0:	3001      	adds	r0, #1
100035c2:	599c      	ldr	r4, [r3, r6]
100035c4:	0083      	lsls	r3, r0, #2
100035c6:	9301      	str	r3, [sp, #4]
100035c8:	9b01      	ldr	r3, [sp, #4]
100035ca:	58f3      	ldr	r3, [r6, r3]
100035cc:	42a3      	cmp	r3, r4
100035ce:	d800      	bhi.n	100035d2 <z_sys_init_run_level+0x1a>
		}
	}
}
100035d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
100035d2:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
100035d4:	6823      	ldr	r3, [r4, #0]
100035d6:	0028      	movs	r0, r5
100035d8:	4798      	blx	r3
		if (dev != NULL) {
100035da:	2d00      	cmp	r5, #0
100035dc:	d00d      	beq.n	100035fa <z_sys_init_run_level+0x42>
			if (rc != 0) {
100035de:	2800      	cmp	r0, #0
100035e0:	d007      	beq.n	100035f2 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
100035e2:	17c2      	asrs	r2, r0, #31
100035e4:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
100035e6:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
100035e8:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
100035ea:	28ff      	cmp	r0, #255	; 0xff
100035ec:	dd00      	ble.n	100035f0 <z_sys_init_run_level+0x38>
100035ee:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
100035f0:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
100035f2:	68ea      	ldr	r2, [r5, #12]
100035f4:	7853      	ldrb	r3, [r2, #1]
100035f6:	433b      	orrs	r3, r7
100035f8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100035fa:	3408      	adds	r4, #8
100035fc:	e7e4      	b.n	100035c8 <z_sys_init_run_level+0x10>
100035fe:	46c0      	nop			; (mov r8, r8)
10003600:	10004ba8 	.word	0x10004ba8

10003604 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10003604:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10003606:	2401      	movs	r4, #1
10003608:	4b09      	ldr	r3, [pc, #36]	; (10003630 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000360a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
1000360c:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000360e:	f7ff ffd3 	bl	100035b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10003612:	f000 fd29 	bl	10004068 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10003616:	2004      	movs	r0, #4
10003618:	f7ff ffce 	bl	100035b8 <z_sys_init_run_level>

	z_init_static_threads();
1000361c:	f000 f8ce 	bl	100037bc <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10003620:	f7fe fd08 	bl	10002034 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10003624:	4a03      	ldr	r2, [pc, #12]	; (10003634 <bg_thread_main+0x30>)
10003626:	7b13      	ldrb	r3, [r2, #12]
10003628:	43a3      	bics	r3, r4
1000362a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
1000362c:	bd10      	pop	{r4, pc}
1000362e:	46c0      	nop			; (mov r8, r8)
10003630:	200001b9 	.word	0x200001b9
10003634:	200000a0 	.word	0x200000a0

10003638 <z_bss_zero>:
{
10003638:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
1000363a:	4a03      	ldr	r2, [pc, #12]	; (10003648 <z_bss_zero+0x10>)
1000363c:	4803      	ldr	r0, [pc, #12]	; (1000364c <z_bss_zero+0x14>)
1000363e:	2100      	movs	r1, #0
10003640:	1a12      	subs	r2, r2, r0
10003642:	f001 f89c 	bl	1000477e <z_early_memset>
}
10003646:	bd10      	pop	{r4, pc}
10003648:	200001bc 	.word	0x200001bc
1000364c:	20000030 	.word	0x20000030

10003650 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10003650:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10003652:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10003654:	2501      	movs	r5, #1
{
10003656:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
10003658:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
1000365a:	0201      	lsls	r1, r0, #8
1000365c:	4811      	ldr	r0, [pc, #68]	; (100036a4 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
1000365e:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10003660:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10003662:	2000      	movs	r0, #0
{
10003664:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10003666:	9504      	str	r5, [sp, #16]
10003668:	350e      	adds	r5, #14
1000366a:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000366c:	3509      	adds	r5, #9
1000366e:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10003670:	4b0d      	ldr	r3, [pc, #52]	; (100036a8 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10003672:	9005      	str	r0, [sp, #20]
10003674:	9002      	str	r0, [sp, #8]
10003676:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003678:	480c      	ldr	r0, [pc, #48]	; (100036ac <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000367a:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000367c:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
1000367e:	4b0c      	ldr	r3, [pc, #48]	; (100036b0 <z_init_cpu+0x60>)
10003680:	0030      	movs	r0, r6
10003682:	9500      	str	r5, [sp, #0]
10003684:	0052      	lsls	r2, r2, #1
10003686:	f000 f86f 	bl	10003768 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000368a:	2204      	movs	r2, #4
1000368c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
1000368e:	752c      	strb	r4, [r5, #20]
10003690:	4393      	bics	r3, r2
10003692:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10003694:	3401      	adds	r4, #1
10003696:	4b07      	ldr	r3, [pc, #28]	; (100036b4 <z_init_cpu+0x64>)
10003698:	02e4      	lsls	r4, r4, #11
1000369a:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
1000369c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
1000369e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100036a0:	b006      	add	sp, #24
100036a2:	bd70      	pop	{r4, r5, r6, pc}
100036a4:	200009c0 	.word	0x200009c0
100036a8:	20000030 	.word	0x20000030
100036ac:	20000180 	.word	0x20000180
100036b0:	1000478f 	.word	0x1000478f
100036b4:	200001c0 	.word	0x200001c0

100036b8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
100036b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100036ba:	2000      	movs	r0, #0
{
100036bc:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100036be:	f7ff ff7b 	bl	100035b8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
100036c2:	4b21      	ldr	r3, [pc, #132]	; (10003748 <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
100036c4:	f383 8808 	msr	MSP, r3
100036c8:	4920      	ldr	r1, [pc, #128]	; (1000374c <z_cstart+0x94>)
100036ca:	4b21      	ldr	r3, [pc, #132]	; (10003750 <z_cstart+0x98>)
100036cc:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
100036ce:	2500      	movs	r5, #0
100036d0:	401a      	ands	r2, r3
100036d2:	23e0      	movs	r3, #224	; 0xe0
100036d4:	041b      	lsls	r3, r3, #16
100036d6:	4313      	orrs	r3, r2
100036d8:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
100036da:	f000 fd8f 	bl	100041fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
100036de:	f7ff f889 	bl	100027f4 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
100036e2:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
100036e4:	4e1b      	ldr	r6, [pc, #108]	; (10003754 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
100036e6:	ab06      	add	r3, sp, #24
100036e8:	32ff      	adds	r2, #255	; 0xff
100036ea:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
100036ec:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
100036ee:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
100036f0:	f001 f81a 	bl	10004728 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
100036f4:	2001      	movs	r0, #1
100036f6:	f7ff ff5f 	bl	100035b8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
100036fa:	2002      	movs	r0, #2
100036fc:	f7ff ff5c 	bl	100035b8 <z_sys_init_run_level>
	z_sched_init();
10003700:	f000 fa44 	bl	10003b8c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10003704:	4c14      	ldr	r4, [pc, #80]	; (10003758 <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10003706:	4b15      	ldr	r3, [pc, #84]	; (1000375c <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
10003708:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000370a:	2280      	movs	r2, #128	; 0x80
1000370c:	9305      	str	r3, [sp, #20]
1000370e:	2301      	movs	r3, #1
10003710:	4e13      	ldr	r6, [pc, #76]	; (10003760 <z_cstart+0xa8>)
10003712:	4914      	ldr	r1, [pc, #80]	; (10003764 <z_cstart+0xac>)
10003714:	9304      	str	r3, [sp, #16]
10003716:	00d2      	lsls	r2, r2, #3
10003718:	0033      	movs	r3, r6
1000371a:	0020      	movs	r0, r4
1000371c:	9503      	str	r5, [sp, #12]
1000371e:	9502      	str	r5, [sp, #8]
10003720:	9501      	str	r5, [sp, #4]
10003722:	9500      	str	r5, [sp, #0]
10003724:	f000 f820 	bl	10003768 <z_setup_new_thread>
10003728:	2204      	movs	r2, #4
1000372a:	0007      	movs	r7, r0
1000372c:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
1000372e:	0020      	movs	r0, r4
10003730:	4393      	bics	r3, r2
10003732:	7363      	strb	r3, [r4, #13]
10003734:	f001 f861 	bl	100047fa <z_ready_thread>
	z_init_cpu(0);
10003738:	0028      	movs	r0, r5
1000373a:	f7ff ff89 	bl	10003650 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
1000373e:	0032      	movs	r2, r6
10003740:	0039      	movs	r1, r7
10003742:	0020      	movs	r0, r4
10003744:	f7ff f922 	bl	1000298c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10003748:	200009c0 	.word	0x200009c0
1000374c:	e000ed00 	.word	0xe000ed00
10003750:	ff00ffff 	.word	0xff00ffff
10003754:	20000180 	.word	0x20000180
10003758:	200000a0 	.word	0x200000a0
1000375c:	10004caf 	.word	0x10004caf
10003760:	10003605 	.word	0x10003605
10003764:	20000ac0 	.word	0x20000ac0

10003768 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10003768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1000376a:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
1000376c:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
1000376e:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10003770:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10003772:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10003774:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10003776:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10003778:	2004      	movs	r0, #4
1000377a:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
1000377c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
1000377e:	3207      	adds	r2, #7
	thread_base->prio = priority;
10003780:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003782:	2007      	movs	r0, #7
10003784:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10003786:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
1000378a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
1000378c:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
1000378e:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10003790:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003792:	9202      	str	r2, [sp, #8]
10003794:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003796:	0020      	movs	r0, r4
10003798:	9201      	str	r2, [sp, #4]
1000379a:	9a08      	ldr	r2, [sp, #32]
1000379c:	9200      	str	r2, [sp, #0]
1000379e:	002a      	movs	r2, r5
100037a0:	f7ff f8de 	bl	10002960 <arch_new_thread>
	if (!_current) {
100037a4:	4b04      	ldr	r3, [pc, #16]	; (100037b8 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
100037a6:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
100037a8:	689b      	ldr	r3, [r3, #8]
100037aa:	42b3      	cmp	r3, r6
100037ac:	d000      	beq.n	100037b0 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
100037ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
100037b0:	0028      	movs	r0, r5
100037b2:	6663      	str	r3, [r4, #100]	; 0x64
100037b4:	b004      	add	sp, #16
100037b6:	bd70      	pop	{r4, r5, r6, pc}
100037b8:	20000180 	.word	0x20000180

100037bc <z_init_static_threads>:
{
100037bc:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
100037be:	4c20      	ldr	r4, [pc, #128]	; (10003840 <z_init_static_threads+0x84>)
{
100037c0:	b086      	sub	sp, #24
100037c2:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
100037c4:	4d1f      	ldr	r5, [pc, #124]	; (10003844 <z_init_static_threads+0x88>)
100037c6:	42ac      	cmp	r4, r5
100037c8:	d308      	bcc.n	100037dc <z_init_static_threads+0x20>
	k_sched_lock();
100037ca:	f000 f9b9 	bl	10003b40 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
100037ce:	0034      	movs	r4, r6
100037d0:	42ac      	cmp	r4, r5
100037d2:	d319      	bcc.n	10003808 <z_init_static_threads+0x4c>
	k_sched_unlock();
100037d4:	f000 f9c4 	bl	10003b60 <k_sched_unlock>
}
100037d8:	b006      	add	sp, #24
100037da:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
100037dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
100037de:	9305      	str	r3, [sp, #20]
100037e0:	6a23      	ldr	r3, [r4, #32]
100037e2:	9304      	str	r3, [sp, #16]
100037e4:	69e3      	ldr	r3, [r4, #28]
100037e6:	9303      	str	r3, [sp, #12]
100037e8:	69a3      	ldr	r3, [r4, #24]
100037ea:	9302      	str	r3, [sp, #8]
100037ec:	6963      	ldr	r3, [r4, #20]
100037ee:	9301      	str	r3, [sp, #4]
100037f0:	6923      	ldr	r3, [r4, #16]
100037f2:	9300      	str	r3, [sp, #0]
100037f4:	68e3      	ldr	r3, [r4, #12]
100037f6:	68a2      	ldr	r2, [r4, #8]
100037f8:	6861      	ldr	r1, [r4, #4]
100037fa:	6820      	ldr	r0, [r4, #0]
100037fc:	f7ff ffb4 	bl	10003768 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10003800:	6823      	ldr	r3, [r4, #0]
10003802:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10003804:	3430      	adds	r4, #48	; 0x30
10003806:	e7dd      	b.n	100037c4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10003808:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000380a:	1c5a      	adds	r2, r3, #1
1000380c:	d00f      	beq.n	1000382e <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
1000380e:	43d8      	mvns	r0, r3
10003810:	17c0      	asrs	r0, r0, #31
10003812:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10003814:	220a      	movs	r2, #10
10003816:	2300      	movs	r3, #0
10003818:	17c1      	asrs	r1, r0, #31
1000381a:	f7fe f999 	bl	10001b50 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
1000381e:	6826      	ldr	r6, [r4, #0]
10003820:	000b      	movs	r3, r1
10003822:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10003824:	4301      	orrs	r1, r0
10003826:	d104      	bne.n	10003832 <z_init_static_threads+0x76>
	z_sched_start(thread);
10003828:	0030      	movs	r0, r6
1000382a:	f000 f943 	bl	10003ab4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
1000382e:	3430      	adds	r4, #48	; 0x30
10003830:	e7ce      	b.n	100037d0 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003832:	0030      	movs	r0, r6
10003834:	4904      	ldr	r1, [pc, #16]	; (10003848 <z_init_static_threads+0x8c>)
10003836:	3018      	adds	r0, #24
10003838:	f000 fb20 	bl	10003e7c <z_add_timeout>
1000383c:	e7f7      	b.n	1000382e <z_init_static_threads+0x72>
1000383e:	46c0      	nop			; (mov r8, r8)
10003840:	10004a08 	.word	0x10004a08
10003844:	10004a08 	.word	0x10004a08
10003848:	100047c3 	.word	0x100047c3

1000384c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
1000384c:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
1000384e:	4d07      	ldr	r5, [pc, #28]	; (1000386c <z_reset_time_slice+0x20>)
10003850:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
10003852:	2c00      	cmp	r4, #0
10003854:	d008      	beq.n	10003868 <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10003856:	f7ff fc17 	bl	10003088 <sys_clock_elapsed>
1000385a:	4b05      	ldr	r3, [pc, #20]	; (10003870 <z_reset_time_slice+0x24>)
1000385c:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
1000385e:	2100      	movs	r1, #0
10003860:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10003862:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
10003864:	f000 fffd 	bl	10004862 <z_set_timeout_expiry>
	}
}
10003868:	bd70      	pop	{r4, r5, r6, pc}
1000386a:	46c0      	nop			; (mov r8, r8)
1000386c:	200001ac 	.word	0x200001ac
10003870:	20000180 	.word	0x20000180

10003874 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10003874:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10003876:	4d0e      	ldr	r5, [pc, #56]	; (100038b0 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003878:	4b0e      	ldr	r3, [pc, #56]	; (100038b4 <update_cache+0x40>)
	return list->head == list;
1000387a:	69ec      	ldr	r4, [r5, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000387c:	429c      	cmp	r4, r3
1000387e:	d001      	beq.n	10003884 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10003880:	2c00      	cmp	r4, #0
10003882:	d100      	bne.n	10003886 <update_cache+0x12>
10003884:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10003886:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10003888:	2800      	cmp	r0, #0
1000388a:	d108      	bne.n	1000389e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
1000388c:	7b5a      	ldrb	r2, [r3, #13]
1000388e:	06d2      	lsls	r2, r2, #27
10003890:	d105      	bne.n	1000389e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10003892:	69a2      	ldr	r2, [r4, #24]
10003894:	2a00      	cmp	r2, #0
10003896:	d102      	bne.n	1000389e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10003898:	89da      	ldrh	r2, [r3, #14]
1000389a:	2a7f      	cmp	r2, #127	; 0x7f
1000389c:	d805      	bhi.n	100038aa <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
1000389e:	429c      	cmp	r4, r3
100038a0:	d002      	beq.n	100038a8 <update_cache+0x34>
			z_reset_time_slice(thread);
100038a2:	0020      	movs	r0, r4
100038a4:	f7ff ffd2 	bl	1000384c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
100038a8:	0023      	movs	r3, r4
100038aa:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
100038ac:	bd70      	pop	{r4, r5, r6, pc}
100038ae:	46c0      	nop			; (mov r8, r8)
100038b0:	20000180 	.word	0x20000180
100038b4:	2000019c 	.word	0x2000019c

100038b8 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
100038b8:	220d      	movs	r2, #13
{
100038ba:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
100038bc:	5682      	ldrsb	r2, [r0, r2]
{
100038be:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100038c0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
100038c2:	2a00      	cmp	r2, #0
100038c4:	da04      	bge.n	100038d0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100038c6:	227f      	movs	r2, #127	; 0x7f
100038c8:	4013      	ands	r3, r2
100038ca:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
100038cc:	f000 ff66 	bl	1000479c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
100038d0:	2380      	movs	r3, #128	; 0x80
100038d2:	7b62      	ldrb	r2, [r4, #13]
100038d4:	425b      	negs	r3, r3
100038d6:	4313      	orrs	r3, r2
	return list->head == list;
100038d8:	4a13      	ldr	r2, [pc, #76]	; (10003928 <move_thread_to_end_of_prio_q+0x70>)
100038da:	7363      	strb	r3, [r4, #13]
100038dc:	69d3      	ldr	r3, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100038de:	4813      	ldr	r0, [pc, #76]	; (1000392c <move_thread_to_end_of_prio_q+0x74>)
100038e0:	4283      	cmp	r3, r0
100038e2:	d100      	bne.n	100038e6 <move_thread_to_end_of_prio_q+0x2e>
100038e4:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
100038e6:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100038e8:	2b00      	cmp	r3, #0
100038ea:	d104      	bne.n	100038f6 <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
100038ec:	6020      	str	r0, [r4, #0]
	node->prev = tail;
100038ee:	6061      	str	r1, [r4, #4]

	tail->next = node;
100038f0:	600c      	str	r4, [r1, #0]
	list->tail = node;
100038f2:	6214      	str	r4, [r2, #32]
}
100038f4:	e00c      	b.n	10003910 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
100038f6:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
100038f8:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
100038fa:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
100038fc:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
100038fe:	42b5      	cmp	r5, r6
10003900:	d00d      	beq.n	1000391e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003902:	42ae      	cmp	r6, r5
10003904:	dd0b      	ble.n	1000391e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10003906:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10003908:	6023      	str	r3, [r4, #0]
	node->prev = prev;
1000390a:	6061      	str	r1, [r4, #4]
	prev->next = node;
1000390c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
1000390e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10003910:	6890      	ldr	r0, [r2, #8]
10003912:	1b00      	subs	r0, r0, r4
10003914:	4243      	negs	r3, r0
10003916:	4158      	adcs	r0, r3
10003918:	f7ff ffac 	bl	10003874 <update_cache>
}
1000391c:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
1000391e:	4299      	cmp	r1, r3
10003920:	d0e4      	beq.n	100038ec <move_thread_to_end_of_prio_q+0x34>
10003922:	681b      	ldr	r3, [r3, #0]
10003924:	e7e0      	b.n	100038e8 <move_thread_to_end_of_prio_q+0x30>
10003926:	46c0      	nop			; (mov r8, r8)
10003928:	20000180 	.word	0x20000180
1000392c:	2000019c 	.word	0x2000019c

10003930 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003930:	230d      	movs	r3, #13
{
10003932:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003934:	56c3      	ldrsb	r3, [r0, r3]
10003936:	7b41      	ldrb	r1, [r0, #13]
10003938:	2b00      	cmp	r3, #0
1000393a:	db26      	blt.n	1000398a <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
1000393c:	06cb      	lsls	r3, r1, #27
1000393e:	d124      	bne.n	1000398a <ready_thread+0x5a>
	return node->next != NULL;
10003940:	6983      	ldr	r3, [r0, #24]
10003942:	2b00      	cmp	r3, #0
10003944:	d121      	bne.n	1000398a <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10003946:	2280      	movs	r2, #128	; 0x80
10003948:	4252      	negs	r2, r2
1000394a:	430a      	orrs	r2, r1
1000394c:	7342      	strb	r2, [r0, #13]
	return list->head == list;
1000394e:	4a11      	ldr	r2, [pc, #68]	; (10003994 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003950:	4c11      	ldr	r4, [pc, #68]	; (10003998 <ready_thread+0x68>)
	return list->head == list;
10003952:	69d1      	ldr	r1, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003954:	42a1      	cmp	r1, r4
10003956:	d000      	beq.n	1000395a <ready_thread+0x2a>
10003958:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
1000395a:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000395c:	2b00      	cmp	r3, #0
1000395e:	d104      	bne.n	1000396a <ready_thread+0x3a>
	node->next = list;
10003960:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10003962:	6041      	str	r1, [r0, #4]
	tail->next = node;
10003964:	6008      	str	r0, [r1, #0]
	list->tail = node;
10003966:	6210      	str	r0, [r2, #32]
}
10003968:	e00c      	b.n	10003984 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
1000396a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
1000396c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
1000396e:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10003970:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10003972:	42b5      	cmp	r5, r6
10003974:	d00a      	beq.n	1000398c <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003976:	42ae      	cmp	r6, r5
10003978:	dd08      	ble.n	1000398c <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
1000397a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
1000397c:	6003      	str	r3, [r0, #0]
	node->prev = prev;
1000397e:	6042      	str	r2, [r0, #4]
	prev->next = node;
10003980:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10003982:	6058      	str	r0, [r3, #4]
		update_cache(0);
10003984:	2000      	movs	r0, #0
10003986:	f7ff ff75 	bl	10003874 <update_cache>
}
1000398a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
1000398c:	428b      	cmp	r3, r1
1000398e:	d0e7      	beq.n	10003960 <ready_thread+0x30>
10003990:	681b      	ldr	r3, [r3, #0]
10003992:	e7e3      	b.n	1000395c <ready_thread+0x2c>
10003994:	20000180 	.word	0x20000180
10003998:	2000019c 	.word	0x2000019c

1000399c <unready_thread>:
	if (z_is_thread_queued(thread)) {
1000399c:	220d      	movs	r2, #13
{
1000399e:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
100039a0:	5682      	ldrsb	r2, [r0, r2]
{
100039a2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100039a4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
100039a6:	2a00      	cmp	r2, #0
100039a8:	da04      	bge.n	100039b4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100039aa:	227f      	movs	r2, #127	; 0x7f
100039ac:	4013      	ands	r3, r2
100039ae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100039b0:	f000 fef4 	bl	1000479c <sys_dlist_remove>
	update_cache(thread == _current);
100039b4:	4b03      	ldr	r3, [pc, #12]	; (100039c4 <unready_thread+0x28>)
100039b6:	6898      	ldr	r0, [r3, #8]
100039b8:	1b00      	subs	r0, r0, r4
100039ba:	4243      	negs	r3, r0
100039bc:	4158      	adcs	r0, r3
100039be:	f7ff ff59 	bl	10003874 <update_cache>
}
100039c2:	bd10      	pop	{r4, pc}
100039c4:	20000180 	.word	0x20000180

100039c8 <k_sched_time_slice_set>:
{
100039c8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100039ca:	f3ef 8410 	mrs	r4, PRIMASK
100039ce:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
100039d0:	230a      	movs	r3, #10
100039d2:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
100039d4:	2800      	cmp	r0, #0
100039d6:	dd02      	ble.n	100039de <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
100039d8:	2b02      	cmp	r3, #2
100039da:	da00      	bge.n	100039de <k_sched_time_slice_set+0x16>
100039dc:	2302      	movs	r3, #2
		_current_cpu->slice_ticks = 0;
100039de:	2000      	movs	r0, #0
100039e0:	4a07      	ldr	r2, [pc, #28]	; (10003a00 <k_sched_time_slice_set+0x38>)
100039e2:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
100039e4:	4807      	ldr	r0, [pc, #28]	; (10003a04 <k_sched_time_slice_set+0x3c>)
100039e6:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
100039e8:	4b07      	ldr	r3, [pc, #28]	; (10003a08 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
100039ea:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
100039ec:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
100039ee:	f7ff ff2d 	bl	1000384c <z_reset_time_slice>
	if (key != 0U) {
100039f2:	2c00      	cmp	r4, #0
100039f4:	d102      	bne.n	100039fc <k_sched_time_slice_set+0x34>
	__asm__ volatile(
100039f6:	b662      	cpsie	i
100039f8:	f3bf 8f6f 	isb	sy
}
100039fc:	bd10      	pop	{r4, pc}
100039fe:	46c0      	nop			; (mov r8, r8)
10003a00:	20000180 	.word	0x20000180
10003a04:	200001ac 	.word	0x200001ac
10003a08:	200001a8 	.word	0x200001a8

10003a0c <z_time_slice>:
{
10003a0c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003a0e:	f3ef 8510 	mrs	r5, PRIMASK
10003a12:	b672      	cpsid	i
	if (pending_current == _current) {
10003a14:	4b17      	ldr	r3, [pc, #92]	; (10003a74 <z_time_slice+0x68>)
10003a16:	4a18      	ldr	r2, [pc, #96]	; (10003a78 <z_time_slice+0x6c>)
10003a18:	689c      	ldr	r4, [r3, #8]
10003a1a:	6811      	ldr	r1, [r2, #0]
10003a1c:	428c      	cmp	r4, r1
10003a1e:	d108      	bne.n	10003a32 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10003a20:	0020      	movs	r0, r4
10003a22:	f7ff ff13 	bl	1000384c <z_reset_time_slice>
	if (key != 0U) {
10003a26:	2d00      	cmp	r5, #0
10003a28:	d102      	bne.n	10003a30 <z_time_slice+0x24>
	__asm__ volatile(
10003a2a:	b662      	cpsie	i
10003a2c:	f3bf 8f6f 	isb	sy
}
10003a30:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10003a32:	2100      	movs	r1, #0
10003a34:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
10003a36:	4a11      	ldr	r2, [pc, #68]	; (10003a7c <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
10003a38:	6812      	ldr	r2, [r2, #0]
10003a3a:	428a      	cmp	r2, r1
10003a3c:	d018      	beq.n	10003a70 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
10003a3e:	89e2      	ldrh	r2, [r4, #14]
10003a40:	2a7f      	cmp	r2, #127	; 0x7f
10003a42:	d815      	bhi.n	10003a70 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
10003a44:	7b62      	ldrb	r2, [r4, #13]
10003a46:	06d2      	lsls	r2, r2, #27
10003a48:	d112      	bne.n	10003a70 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10003a4a:	210e      	movs	r1, #14
10003a4c:	4a0c      	ldr	r2, [pc, #48]	; (10003a80 <z_time_slice+0x74>)
10003a4e:	5661      	ldrsb	r1, [r4, r1]
10003a50:	6812      	ldr	r2, [r2, #0]
10003a52:	4291      	cmp	r1, r2
10003a54:	db0c      	blt.n	10003a70 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
10003a56:	4a0b      	ldr	r2, [pc, #44]	; (10003a84 <z_time_slice+0x78>)
10003a58:	4294      	cmp	r4, r2
10003a5a:	d009      	beq.n	10003a70 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
10003a5c:	691a      	ldr	r2, [r3, #16]
10003a5e:	4282      	cmp	r2, r0
10003a60:	dc03      	bgt.n	10003a6a <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
10003a62:	0020      	movs	r0, r4
10003a64:	f7ff ff28 	bl	100038b8 <move_thread_to_end_of_prio_q>
10003a68:	e7da      	b.n	10003a20 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
10003a6a:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
10003a6c:	611a      	str	r2, [r3, #16]
10003a6e:	e7da      	b.n	10003a26 <z_time_slice+0x1a>
10003a70:	2200      	movs	r2, #0
10003a72:	e7fb      	b.n	10003a6c <z_time_slice+0x60>
10003a74:	20000180 	.word	0x20000180
10003a78:	200001a4 	.word	0x200001a4
10003a7c:	200001ac 	.word	0x200001ac
10003a80:	200001a8 	.word	0x200001a8
10003a84:	20000030 	.word	0x20000030

10003a88 <z_reschedule>:
{
10003a88:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003a8a:	2900      	cmp	r1, #0
10003a8c:	d10a      	bne.n	10003aa4 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003a8e:	f3ef 8005 	mrs	r0, IPSR
10003a92:	2800      	cmp	r0, #0
10003a94:	d107      	bne.n	10003aa6 <z_reschedule+0x1e>
	return new_thread != _current;
10003a96:	4b06      	ldr	r3, [pc, #24]	; (10003ab0 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10003a98:	689a      	ldr	r2, [r3, #8]
10003a9a:	699b      	ldr	r3, [r3, #24]
10003a9c:	429a      	cmp	r2, r3
10003a9e:	d002      	beq.n	10003aa6 <z_reschedule+0x1e>
	ret = arch_swap(key);
10003aa0:	f7fe ff04 	bl	100028ac <arch_swap>
}
10003aa4:	bd10      	pop	{r4, pc}
10003aa6:	b662      	cpsie	i
10003aa8:	f3bf 8f6f 	isb	sy
10003aac:	e7fa      	b.n	10003aa4 <z_reschedule+0x1c>
10003aae:	46c0      	nop			; (mov r8, r8)
10003ab0:	20000180 	.word	0x20000180

10003ab4 <z_sched_start>:
{
10003ab4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003ab6:	f3ef 8410 	mrs	r4, PRIMASK
10003aba:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003abc:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10003abe:	7b43      	ldrb	r3, [r0, #13]
10003ac0:	4213      	tst	r3, r2
10003ac2:	d105      	bne.n	10003ad0 <z_sched_start+0x1c>
	if (key != 0U) {
10003ac4:	2c00      	cmp	r4, #0
10003ac6:	d102      	bne.n	10003ace <z_sched_start+0x1a>
	__asm__ volatile(
10003ac8:	b662      	cpsie	i
10003aca:	f3bf 8f6f 	isb	sy
}
10003ace:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003ad0:	4393      	bics	r3, r2
10003ad2:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10003ad4:	f7ff ff2c 	bl	10003930 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003ad8:	0021      	movs	r1, r4
10003ada:	4802      	ldr	r0, [pc, #8]	; (10003ae4 <z_sched_start+0x30>)
10003adc:	f7ff ffd4 	bl	10003a88 <z_reschedule>
10003ae0:	e7f5      	b.n	10003ace <z_sched_start+0x1a>
10003ae2:	46c0      	nop			; (mov r8, r8)
10003ae4:	200001ba 	.word	0x200001ba

10003ae8 <z_impl_k_thread_suspend>:
{
10003ae8:	b570      	push	{r4, r5, r6, lr}
10003aea:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10003aec:	3018      	adds	r0, #24
10003aee:	f000 fea5 	bl	1000483c <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10003af2:	f3ef 8610 	mrs	r6, PRIMASK
10003af6:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10003af8:	220d      	movs	r2, #13
10003afa:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10003afc:	7b63      	ldrb	r3, [r4, #13]
10003afe:	2a00      	cmp	r2, #0
10003b00:	da05      	bge.n	10003b0e <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003b02:	227f      	movs	r2, #127	; 0x7f
10003b04:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003b06:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003b08:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003b0a:	f000 fe47 	bl	1000479c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003b0e:	2310      	movs	r3, #16
		update_cache(thread == _current);
10003b10:	4d0a      	ldr	r5, [pc, #40]	; (10003b3c <z_impl_k_thread_suspend+0x54>)
10003b12:	7b62      	ldrb	r2, [r4, #13]
10003b14:	68a8      	ldr	r0, [r5, #8]
10003b16:	4313      	orrs	r3, r2
10003b18:	1b00      	subs	r0, r0, r4
10003b1a:	7363      	strb	r3, [r4, #13]
10003b1c:	4243      	negs	r3, r0
10003b1e:	4158      	adcs	r0, r3
10003b20:	f7ff fea8 	bl	10003874 <update_cache>
	if (key != 0U) {
10003b24:	2e00      	cmp	r6, #0
10003b26:	d102      	bne.n	10003b2e <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10003b28:	b662      	cpsie	i
10003b2a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10003b2e:	68ab      	ldr	r3, [r5, #8]
10003b30:	42a3      	cmp	r3, r4
10003b32:	d101      	bne.n	10003b38 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10003b34:	f000 fe7b 	bl	1000482e <z_reschedule_unlocked>
}
10003b38:	bd70      	pop	{r4, r5, r6, pc}
10003b3a:	46c0      	nop			; (mov r8, r8)
10003b3c:	20000180 	.word	0x20000180

10003b40 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003b40:	f3ef 8110 	mrs	r1, PRIMASK
10003b44:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10003b46:	4b05      	ldr	r3, [pc, #20]	; (10003b5c <k_sched_lock+0x1c>)
10003b48:	689a      	ldr	r2, [r3, #8]
10003b4a:	7bd3      	ldrb	r3, [r2, #15]
10003b4c:	3b01      	subs	r3, #1
10003b4e:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10003b50:	2900      	cmp	r1, #0
10003b52:	d102      	bne.n	10003b5a <k_sched_lock+0x1a>
	__asm__ volatile(
10003b54:	b662      	cpsie	i
10003b56:	f3bf 8f6f 	isb	sy
}
10003b5a:	4770      	bx	lr
10003b5c:	20000180 	.word	0x20000180

10003b60 <k_sched_unlock>:
{
10003b60:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003b62:	f3ef 8410 	mrs	r4, PRIMASK
10003b66:	b672      	cpsid	i
		++_current->base.sched_locked;
10003b68:	4b07      	ldr	r3, [pc, #28]	; (10003b88 <k_sched_unlock+0x28>)
		update_cache(0);
10003b6a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10003b6c:	689a      	ldr	r2, [r3, #8]
10003b6e:	7bd3      	ldrb	r3, [r2, #15]
10003b70:	3301      	adds	r3, #1
10003b72:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10003b74:	f7ff fe7e 	bl	10003874 <update_cache>
	if (key != 0U) {
10003b78:	2c00      	cmp	r4, #0
10003b7a:	d102      	bne.n	10003b82 <k_sched_unlock+0x22>
	__asm__ volatile(
10003b7c:	b662      	cpsie	i
10003b7e:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10003b82:	f000 fe54 	bl	1000482e <z_reschedule_unlocked>
}
10003b86:	bd10      	pop	{r4, pc}
10003b88:	20000180 	.word	0x20000180

10003b8c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003b8c:	2100      	movs	r1, #0
{
10003b8e:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10003b90:	4b03      	ldr	r3, [pc, #12]	; (10003ba0 <z_sched_init+0x14>)
10003b92:	4a04      	ldr	r2, [pc, #16]	; (10003ba4 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003b94:	0008      	movs	r0, r1
10003b96:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
10003b98:	621a      	str	r2, [r3, #32]
10003b9a:	f7ff ff15 	bl	100039c8 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10003b9e:	bd10      	pop	{r4, pc}
10003ba0:	20000180 	.word	0x20000180
10003ba4:	2000019c 	.word	0x2000019c

10003ba8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003baa:	f3ef 8510 	mrs	r5, PRIMASK
10003bae:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003bb0:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10003bb2:	4c19      	ldr	r4, [pc, #100]	; (10003c18 <z_impl_k_yield+0x70>)
10003bb4:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003bb6:	7b43      	ldrb	r3, [r0, #13]
10003bb8:	4013      	ands	r3, r2
10003bba:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003bbc:	f000 fdee 	bl	1000479c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003bc0:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10003bc2:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10003bc4:	4252      	negs	r2, r2
10003bc6:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003bc8:	4814      	ldr	r0, [pc, #80]	; (10003c1c <z_impl_k_yield+0x74>)
10003bca:	430a      	orrs	r2, r1
10003bcc:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10003bce:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003bd0:	4282      	cmp	r2, r0
10003bd2:	d100      	bne.n	10003bd6 <z_impl_k_yield+0x2e>
10003bd4:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10003bd6:	6a21      	ldr	r1, [r4, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003bd8:	2a00      	cmp	r2, #0
10003bda:	d104      	bne.n	10003be6 <z_impl_k_yield+0x3e>
	node->next = list;
10003bdc:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10003bde:	6059      	str	r1, [r3, #4]
	tail->next = node;
10003be0:	600b      	str	r3, [r1, #0]
	list->tail = node;
10003be2:	6223      	str	r3, [r4, #32]
}
10003be4:	e00c      	b.n	10003c00 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10003be6:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10003be8:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10003bea:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10003bec:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10003bee:	42be      	cmp	r6, r7
10003bf0:	d00d      	beq.n	10003c0e <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003bf2:	42b7      	cmp	r7, r6
10003bf4:	dd0b      	ble.n	10003c0e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10003bf6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10003bf8:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10003bfa:	6059      	str	r1, [r3, #4]
	prev->next = node;
10003bfc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10003bfe:	6053      	str	r3, [r2, #4]
	update_cache(1);
10003c00:	2001      	movs	r0, #1
10003c02:	f7ff fe37 	bl	10003874 <update_cache>
10003c06:	0028      	movs	r0, r5
10003c08:	f7fe fe50 	bl	100028ac <arch_swap>
	z_swap(&sched_spinlock, key);
}
10003c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10003c0e:	428a      	cmp	r2, r1
10003c10:	d0e4      	beq.n	10003bdc <z_impl_k_yield+0x34>
10003c12:	6812      	ldr	r2, [r2, #0]
10003c14:	e7e0      	b.n	10003bd8 <z_impl_k_yield+0x30>
10003c16:	46c0      	nop			; (mov r8, r8)
10003c18:	20000180 	.word	0x20000180
10003c1c:	2000019c 	.word	0x2000019c

10003c20 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10003c20:	0003      	movs	r3, r0
{
10003c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10003c24:	430b      	orrs	r3, r1
{
10003c26:	0004      	movs	r4, r0
10003c28:	000d      	movs	r5, r1
	if (ticks == 0) {
10003c2a:	2b00      	cmp	r3, #0
10003c2c:	d103      	bne.n	10003c36 <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
10003c2e:	f7ff ffbb 	bl	10003ba8 <z_impl_k_yield>
		k_yield();
		return 0;
10003c32:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10003c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10003c36:	1c4b      	adds	r3, r1, #1
10003c38:	db2e      	blt.n	10003c98 <z_tick_sleep+0x78>
10003c3a:	1c4b      	adds	r3, r1, #1
10003c3c:	d101      	bne.n	10003c42 <z_tick_sleep+0x22>
10003c3e:	1c83      	adds	r3, r0, #2
10003c40:	d32a      	bcc.n	10003c98 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10003c42:	f000 fe25 	bl	10004890 <sys_clock_tick_get_32>
10003c46:	1907      	adds	r7, r0, r4
10003c48:	f3ef 8310 	mrs	r3, PRIMASK
10003c4c:	b672      	cpsid	i
	pending_current = _current;
10003c4e:	4e14      	ldr	r6, [pc, #80]	; (10003ca0 <z_tick_sleep+0x80>)
10003c50:	9301      	str	r3, [sp, #4]
10003c52:	68b0      	ldr	r0, [r6, #8]
10003c54:	4b13      	ldr	r3, [pc, #76]	; (10003ca4 <z_tick_sleep+0x84>)
10003c56:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10003c58:	f7ff fea0 	bl	1000399c <unready_thread>
	z_add_thread_timeout(_current, timeout);
10003c5c:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003c5e:	0022      	movs	r2, r4
10003c60:	002b      	movs	r3, r5
10003c62:	4911      	ldr	r1, [pc, #68]	; (10003ca8 <z_tick_sleep+0x88>)
10003c64:	3018      	adds	r0, #24
10003c66:	f000 f909 	bl	10003e7c <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003c6a:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10003c6c:	68b2      	ldr	r2, [r6, #8]
10003c6e:	9801      	ldr	r0, [sp, #4]
10003c70:	7b51      	ldrb	r1, [r2, #13]
10003c72:	430b      	orrs	r3, r1
10003c74:	7353      	strb	r3, [r2, #13]
10003c76:	f7fe fe19 	bl	100028ac <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10003c7a:	f000 fe09 	bl	10004890 <sys_clock_tick_get_32>
10003c7e:	2300      	movs	r3, #0
10003c80:	003a      	movs	r2, r7
10003c82:	0004      	movs	r4, r0
10003c84:	001d      	movs	r5, r3
10003c86:	1b12      	subs	r2, r2, r4
10003c88:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10003c8a:	42ab      	cmp	r3, r5
10003c8c:	dc02      	bgt.n	10003c94 <z_tick_sleep+0x74>
10003c8e:	d1d0      	bne.n	10003c32 <z_tick_sleep+0x12>
10003c90:	42aa      	cmp	r2, r5
10003c92:	d0ce      	beq.n	10003c32 <z_tick_sleep+0x12>
		return ticks;
10003c94:	0010      	movs	r0, r2
10003c96:	e7cd      	b.n	10003c34 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10003c98:	2702      	movs	r7, #2
10003c9a:	427f      	negs	r7, r7
10003c9c:	1b3f      	subs	r7, r7, r4
10003c9e:	e7d3      	b.n	10003c48 <z_tick_sleep+0x28>
10003ca0:	20000180 	.word	0x20000180
10003ca4:	200001a4 	.word	0x200001a4
10003ca8:	100047c3 	.word	0x100047c3

10003cac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10003cac:	b510      	push	{r4, lr}
10003cae:	000b      	movs	r3, r1
10003cb0:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003cb2:	1c42      	adds	r2, r0, #1
10003cb4:	d107      	bne.n	10003cc6 <z_impl_k_sleep+0x1a>
10003cb6:	3301      	adds	r3, #1
10003cb8:	d105      	bne.n	10003cc6 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10003cba:	4b07      	ldr	r3, [pc, #28]	; (10003cd8 <z_impl_k_sleep+0x2c>)
10003cbc:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
10003cbe:	f7ff ff13 	bl	10003ae8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10003cc2:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10003cc4:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10003cc6:	0021      	movs	r1, r4
10003cc8:	f7ff ffaa 	bl	10003c20 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10003ccc:	220a      	movs	r2, #10
10003cce:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10003cd0:	17c1      	asrs	r1, r0, #31
10003cd2:	f7fc fb21 	bl	10000318 <__aeabi_uldivmod>
	return ret;
10003cd6:	e7f5      	b.n	10003cc4 <z_impl_k_sleep+0x18>
10003cd8:	20000180 	.word	0x20000180

10003cdc <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10003cdc:	4b01      	ldr	r3, [pc, #4]	; (10003ce4 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10003cde:	6898      	ldr	r0, [r3, #8]
}
10003ce0:	4770      	bx	lr
10003ce2:	46c0      	nop			; (mov r8, r8)
10003ce4:	20000180 	.word	0x20000180

10003ce8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10003ce8:	b570      	push	{r4, r5, r6, lr}
10003cea:	0004      	movs	r4, r0
10003cec:	f3ef 8610 	mrs	r6, PRIMASK
10003cf0:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10003cf2:	7b03      	ldrb	r3, [r0, #12]
10003cf4:	07db      	lsls	r3, r3, #31
10003cf6:	d508      	bpl.n	10003d0a <z_thread_abort+0x22>
	if (key != 0U) {
10003cf8:	2e00      	cmp	r6, #0
10003cfa:	d102      	bne.n	10003d02 <z_thread_abort+0x1a>
	__asm__ volatile(
10003cfc:	b662      	cpsie	i
10003cfe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10003d02:	2004      	movs	r0, #4
10003d04:	b662      	cpsie	i
10003d06:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10003d08:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10003d0a:	2308      	movs	r3, #8
10003d0c:	7b42      	ldrb	r2, [r0, #13]
10003d0e:	421a      	tst	r2, r3
10003d10:	d005      	beq.n	10003d1e <z_thread_abort+0x36>
	if (key != 0U) {
10003d12:	2e00      	cmp	r6, #0
10003d14:	d1f8      	bne.n	10003d08 <z_thread_abort+0x20>
	__asm__ volatile(
10003d16:	b662      	cpsie	i
10003d18:	f3bf 8f6f 	isb	sy
10003d1c:	e7f4      	b.n	10003d08 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10003d1e:	2120      	movs	r1, #32
10003d20:	0010      	movs	r0, r2
10003d22:	4388      	bics	r0, r1
10003d24:	0001      	movs	r1, r0
10003d26:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10003d28:	b248      	sxtb	r0, r1
10003d2a:	2800      	cmp	r0, #0
10003d2c:	db20      	blt.n	10003d70 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10003d2e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10003d30:	68a3      	ldr	r3, [r4, #8]
10003d32:	2b00      	cmp	r3, #0
10003d34:	d002      	beq.n	10003d3c <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10003d36:	0020      	movs	r0, r4
10003d38:	f000 fd38 	bl	100047ac <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10003d3c:	0020      	movs	r0, r4
10003d3e:	3018      	adds	r0, #24
10003d40:	f000 fd7c 	bl	1000483c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10003d44:	0023      	movs	r3, r4
	return list->head == list;
10003d46:	6da5      	ldr	r5, [r4, #88]	; 0x58
10003d48:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003d4a:	429d      	cmp	r5, r3
10003d4c:	d001      	beq.n	10003d52 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10003d4e:	2d00      	cmp	r5, #0
10003d50:	d116      	bne.n	10003d80 <z_thread_abort+0x98>
		update_cache(1);
10003d52:	2001      	movs	r0, #1
10003d54:	f7ff fd8e 	bl	10003874 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10003d58:	4b10      	ldr	r3, [pc, #64]	; (10003d9c <z_thread_abort+0xb4>)
10003d5a:	689b      	ldr	r3, [r3, #8]
10003d5c:	42a3      	cmp	r3, r4
10003d5e:	d1d8      	bne.n	10003d12 <z_thread_abort+0x2a>
10003d60:	f3ef 8305 	mrs	r3, IPSR
10003d64:	2b00      	cmp	r3, #0
10003d66:	d1d4      	bne.n	10003d12 <z_thread_abort+0x2a>
10003d68:	0030      	movs	r0, r6
10003d6a:	f7fe fd9f 	bl	100028ac <arch_swap>
	return ret;
10003d6e:	e7d0      	b.n	10003d12 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003d70:	215f      	movs	r1, #95	; 0x5f
10003d72:	400a      	ands	r2, r1
10003d74:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003d76:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003d78:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003d7a:	f000 fd0f 	bl	1000479c <sys_dlist_remove>
}
10003d7e:	e7d7      	b.n	10003d30 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10003d80:	0028      	movs	r0, r5
10003d82:	f000 fd13 	bl	100047ac <unpend_thread_no_timeout>
10003d86:	0028      	movs	r0, r5
10003d88:	3018      	adds	r0, #24
10003d8a:	f000 fd57 	bl	1000483c <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10003d8e:	2300      	movs	r3, #0
		ready_thread(thread);
10003d90:	0028      	movs	r0, r5
10003d92:	66eb      	str	r3, [r5, #108]	; 0x6c
10003d94:	f7ff fdcc 	bl	10003930 <ready_thread>
10003d98:	e7d4      	b.n	10003d44 <z_thread_abort+0x5c>
10003d9a:	46c0      	nop			; (mov r8, r8)
10003d9c:	20000180 	.word	0x20000180

10003da0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10003da0:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10003da2:	4806      	ldr	r0, [pc, #24]	; (10003dbc <z_data_copy+0x1c>)
10003da4:	4a06      	ldr	r2, [pc, #24]	; (10003dc0 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10003da6:	4907      	ldr	r1, [pc, #28]	; (10003dc4 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10003da8:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10003daa:	f000 fcec 	bl	10004786 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10003dae:	4a06      	ldr	r2, [pc, #24]	; (10003dc8 <z_data_copy+0x28>)
10003db0:	4906      	ldr	r1, [pc, #24]	; (10003dcc <z_data_copy+0x2c>)
10003db2:	4807      	ldr	r0, [pc, #28]	; (10003dd0 <z_data_copy+0x30>)
10003db4:	f000 fce7 	bl	10004786 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10003db8:	bd10      	pop	{r4, pc}
10003dba:	46c0      	nop			; (mov r8, r8)
10003dbc:	20000000 	.word	0x20000000
10003dc0:	20000030 	.word	0x20000030
10003dc4:	10004cf8 	.word	0x10004cf8
10003dc8:	00000000 	.word	0x00000000
10003dcc:	10004cf8 	.word	0x10004cf8
10003dd0:	20000000 	.word	0x20000000

10003dd4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10003dd4:	2000      	movs	r0, #0
{
10003dd6:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10003dd8:	4b03      	ldr	r3, [pc, #12]	; (10003de8 <elapsed+0x14>)
10003dda:	681b      	ldr	r3, [r3, #0]
10003ddc:	4283      	cmp	r3, r0
10003dde:	d101      	bne.n	10003de4 <elapsed+0x10>
10003de0:	f7ff f952 	bl	10003088 <sys_clock_elapsed>
}
10003de4:	bd10      	pop	{r4, pc}
10003de6:	46c0      	nop			; (mov r8, r8)
10003de8:	200001b0 	.word	0x200001b0

10003dec <next_timeout>:

static int32_t next_timeout(void)
{
10003dec:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
10003dee:	4b12      	ldr	r3, [pc, #72]	; (10003e38 <next_timeout+0x4c>)
10003df0:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003df2:	429e      	cmp	r6, r3
10003df4:	d10a      	bne.n	10003e0c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10003df6:	f7ff ffed 	bl	10003dd4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
10003dfa:	4810      	ldr	r0, [pc, #64]	; (10003e3c <next_timeout+0x50>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
10003dfc:	4b10      	ldr	r3, [pc, #64]	; (10003e40 <next_timeout+0x54>)
10003dfe:	691b      	ldr	r3, [r3, #16]
10003e00:	2b00      	cmp	r3, #0
10003e02:	d002      	beq.n	10003e0a <next_timeout+0x1e>
10003e04:	4298      	cmp	r0, r3
10003e06:	dd00      	ble.n	10003e0a <next_timeout+0x1e>
10003e08:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
10003e0a:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
10003e0c:	f7ff ffe2 	bl	10003dd4 <elapsed>
	if ((to == NULL) ||
10003e10:	2e00      	cmp	r6, #0
10003e12:	d0f2      	beq.n	10003dfa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10003e14:	6932      	ldr	r2, [r6, #16]
10003e16:	6973      	ldr	r3, [r6, #20]
10003e18:	0004      	movs	r4, r0
10003e1a:	17c5      	asrs	r5, r0, #31
10003e1c:	1b12      	subs	r2, r2, r4
10003e1e:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10003e20:	2b00      	cmp	r3, #0
10003e22:	dcea      	bgt.n	10003dfa <next_timeout+0xe>
10003e24:	d103      	bne.n	10003e2e <next_timeout+0x42>
10003e26:	2180      	movs	r1, #128	; 0x80
10003e28:	0609      	lsls	r1, r1, #24
10003e2a:	428a      	cmp	r2, r1
10003e2c:	d2e5      	bcs.n	10003dfa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
10003e2e:	43d8      	mvns	r0, r3
10003e30:	17c0      	asrs	r0, r0, #31
10003e32:	4010      	ands	r0, r2
10003e34:	e7e2      	b.n	10003dfc <next_timeout+0x10>
10003e36:	46c0      	nop			; (mov r8, r8)
10003e38:	20000020 	.word	0x20000020
10003e3c:	7fffffff 	.word	0x7fffffff
10003e40:	20000180 	.word	0x20000180

10003e44 <remove_timeout>:
{
10003e44:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10003e46:	2800      	cmp	r0, #0
10003e48:	d00e      	beq.n	10003e68 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10003e4a:	4b0b      	ldr	r3, [pc, #44]	; (10003e78 <remove_timeout+0x34>)
10003e4c:	685b      	ldr	r3, [r3, #4]
10003e4e:	4298      	cmp	r0, r3
10003e50:	d00a      	beq.n	10003e68 <remove_timeout+0x24>
10003e52:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10003e54:	2900      	cmp	r1, #0
10003e56:	d007      	beq.n	10003e68 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10003e58:	690a      	ldr	r2, [r1, #16]
10003e5a:	694b      	ldr	r3, [r1, #20]
10003e5c:	6904      	ldr	r4, [r0, #16]
10003e5e:	6945      	ldr	r5, [r0, #20]
10003e60:	1912      	adds	r2, r2, r4
10003e62:	416b      	adcs	r3, r5
10003e64:	610a      	str	r2, [r1, #16]
10003e66:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10003e68:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10003e6a:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10003e6c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10003e6e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10003e70:	2300      	movs	r3, #0
10003e72:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10003e74:	6043      	str	r3, [r0, #4]
}
10003e76:	bd30      	pop	{r4, r5, pc}
10003e78:	20000020 	.word	0x20000020

10003e7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003e7e:	0004      	movs	r4, r0
10003e80:	0016      	movs	r6, r2
10003e82:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003e84:	1c53      	adds	r3, r2, #1
10003e86:	d101      	bne.n	10003e8c <z_add_timeout+0x10>
10003e88:	1c7b      	adds	r3, r7, #1
10003e8a:	d05d      	beq.n	10003f48 <z_add_timeout+0xcc>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10003e8c:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10003e8e:	f3ef 8310 	mrs	r3, PRIMASK
10003e92:	b672      	cpsid	i
10003e94:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10003e96:	2f00      	cmp	r7, #0
10003e98:	da23      	bge.n	10003ee2 <z_add_timeout+0x66>
10003e9a:	1c7b      	adds	r3, r7, #1
10003e9c:	d101      	bne.n	10003ea2 <z_add_timeout+0x26>
10003e9e:	1cb3      	adds	r3, r6, #2
10003ea0:	d81f      	bhi.n	10003ee2 <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10003ea2:	4b2e      	ldr	r3, [pc, #184]	; (10003f5c <z_add_timeout+0xe0>)
10003ea4:	6818      	ldr	r0, [r3, #0]
10003ea6:	6859      	ldr	r1, [r3, #4]
10003ea8:	2202      	movs	r2, #2
10003eaa:	4252      	negs	r2, r2
10003eac:	17d3      	asrs	r3, r2, #31
10003eae:	1a12      	subs	r2, r2, r0
10003eb0:	418b      	sbcs	r3, r1
10003eb2:	1b92      	subs	r2, r2, r6
10003eb4:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10003eb6:	2b00      	cmp	r3, #0
10003eb8:	dc04      	bgt.n	10003ec4 <z_add_timeout+0x48>
10003eba:	d101      	bne.n	10003ec0 <z_add_timeout+0x44>
10003ebc:	2a00      	cmp	r2, #0
10003ebe:	d101      	bne.n	10003ec4 <z_add_timeout+0x48>
10003ec0:	2201      	movs	r2, #1
10003ec2:	2300      	movs	r3, #0
	return list->head == list;
10003ec4:	4f26      	ldr	r7, [pc, #152]	; (10003f60 <z_add_timeout+0xe4>)
10003ec6:	6122      	str	r2, [r4, #16]
10003ec8:	6163      	str	r3, [r4, #20]
10003eca:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003ecc:	42bd      	cmp	r5, r7
10003ece:	d100      	bne.n	10003ed2 <z_add_timeout+0x56>
10003ed0:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
10003ed2:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10003ed4:	2d00      	cmp	r5, #0
10003ed6:	d10f      	bne.n	10003ef8 <z_add_timeout+0x7c>
	node->next = list;
10003ed8:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10003eda:	6066      	str	r6, [r4, #4]
	tail->next = node;
10003edc:	6034      	str	r4, [r6, #0]
	list->tail = node;
10003ede:	607c      	str	r4, [r7, #4]
}
10003ee0:	e01c      	b.n	10003f1c <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
10003ee2:	f7ff ff77 	bl	10003dd4 <elapsed>
10003ee6:	2201      	movs	r2, #1
10003ee8:	2300      	movs	r3, #0
10003eea:	1992      	adds	r2, r2, r6
10003eec:	417b      	adcs	r3, r7
10003eee:	0006      	movs	r6, r0
10003ef0:	17c7      	asrs	r7, r0, #31
10003ef2:	1992      	adds	r2, r2, r6
10003ef4:	417b      	adcs	r3, r7
10003ef6:	e7e5      	b.n	10003ec4 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10003ef8:	6928      	ldr	r0, [r5, #16]
10003efa:	6969      	ldr	r1, [r5, #20]
10003efc:	6922      	ldr	r2, [r4, #16]
10003efe:	6963      	ldr	r3, [r4, #20]
10003f00:	4299      	cmp	r1, r3
10003f02:	dc02      	bgt.n	10003f0a <z_add_timeout+0x8e>
10003f04:	d121      	bne.n	10003f4a <z_add_timeout+0xce>
10003f06:	4290      	cmp	r0, r2
10003f08:	d91f      	bls.n	10003f4a <z_add_timeout+0xce>
				t->dticks -= to->dticks;
10003f0a:	1a80      	subs	r0, r0, r2
10003f0c:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10003f0e:	686b      	ldr	r3, [r5, #4]
10003f10:	6128      	str	r0, [r5, #16]
10003f12:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10003f14:	6063      	str	r3, [r4, #4]
	node->next = successor;
10003f16:	6025      	str	r5, [r4, #0]
	prev->next = node;
10003f18:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10003f1a:	606c      	str	r4, [r5, #4]
	return list->head == list;
10003f1c:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003f1e:	42bb      	cmp	r3, r7
10003f20:	d00c      	beq.n	10003f3c <z_add_timeout+0xc0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10003f22:	429c      	cmp	r4, r3
10003f24:	d10a      	bne.n	10003f3c <z_add_timeout+0xc0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
10003f26:	f7ff ff61 	bl	10003dec <next_timeout>

			if (next_time == 0 ||
10003f2a:	2800      	cmp	r0, #0
10003f2c:	d003      	beq.n	10003f36 <z_add_timeout+0xba>
			    _current_cpu->slice_ticks != next_time) {
10003f2e:	4b0d      	ldr	r3, [pc, #52]	; (10003f64 <z_add_timeout+0xe8>)
			if (next_time == 0 ||
10003f30:	691b      	ldr	r3, [r3, #16]
10003f32:	4283      	cmp	r3, r0
10003f34:	d002      	beq.n	10003f3c <z_add_timeout+0xc0>
				sys_clock_set_timeout(next_time, false);
10003f36:	2100      	movs	r1, #0
10003f38:	f7ff f82e 	bl	10002f98 <sys_clock_set_timeout>
	if (key != 0U) {
10003f3c:	9b01      	ldr	r3, [sp, #4]
10003f3e:	2b00      	cmp	r3, #0
10003f40:	d102      	bne.n	10003f48 <z_add_timeout+0xcc>
	__asm__ volatile(
10003f42:	b662      	cpsie	i
10003f44:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10003f48:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
10003f4a:	1a12      	subs	r2, r2, r0
10003f4c:	418b      	sbcs	r3, r1
10003f4e:	6122      	str	r2, [r4, #16]
10003f50:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10003f52:	42b5      	cmp	r5, r6
10003f54:	d0c0      	beq.n	10003ed8 <z_add_timeout+0x5c>
10003f56:	682d      	ldr	r5, [r5, #0]
10003f58:	e7bc      	b.n	10003ed4 <z_add_timeout+0x58>
10003f5a:	46c0      	nop			; (mov r8, r8)
10003f5c:	20000110 	.word	0x20000110
10003f60:	20000020 	.word	0x20000020
10003f64:	20000180 	.word	0x20000180

10003f68 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10003f68:	b5f0      	push	{r4, r5, r6, r7, lr}
10003f6a:	b087      	sub	sp, #28
10003f6c:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10003f6e:	f7ff fd4d 	bl	10003a0c <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10003f72:	f3ef 8310 	mrs	r3, PRIMASK
10003f76:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10003f78:	9301      	str	r3, [sp, #4]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10003f7a:	4b2d      	ldr	r3, [pc, #180]	; (10004030 <sys_clock_announce+0xc8>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10003f7c:	4f2d      	ldr	r7, [pc, #180]	; (10004034 <sys_clock_announce+0xcc>)
	announce_remaining = ticks;
10003f7e:	601c      	str	r4, [r3, #0]
10003f80:	469c      	mov	ip, r3
		curr_tick += dt;
10003f82:	6839      	ldr	r1, [r7, #0]
10003f84:	687a      	ldr	r2, [r7, #4]
	return list->head == list;
10003f86:	4b2c      	ldr	r3, [pc, #176]	; (10004038 <sys_clock_announce+0xd0>)
10003f88:	9102      	str	r1, [sp, #8]
10003f8a:	9203      	str	r2, [sp, #12]
10003f8c:	681d      	ldr	r5, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003f8e:	429d      	cmp	r5, r3
10003f90:	d011      	beq.n	10003fb6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
10003f92:	2d00      	cmp	r5, #0
10003f94:	d00f      	beq.n	10003fb6 <sys_clock_announce+0x4e>
10003f96:	696a      	ldr	r2, [r5, #20]
10003f98:	692e      	ldr	r6, [r5, #16]
10003f9a:	17e3      	asrs	r3, r4, #31
10003f9c:	429a      	cmp	r2, r3
10003f9e:	dc02      	bgt.n	10003fa6 <sys_clock_announce+0x3e>
10003fa0:	d121      	bne.n	10003fe6 <sys_clock_announce+0x7e>
10003fa2:	42a6      	cmp	r6, r4
10003fa4:	d91f      	bls.n	10003fe6 <sys_clock_announce+0x7e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
10003fa6:	0019      	movs	r1, r3
10003fa8:	692a      	ldr	r2, [r5, #16]
10003faa:	696b      	ldr	r3, [r5, #20]
10003fac:	0020      	movs	r0, r4
10003fae:	1a12      	subs	r2, r2, r0
10003fb0:	418b      	sbcs	r3, r1
10003fb2:	612a      	str	r2, [r5, #16]
10003fb4:	616b      	str	r3, [r5, #20]
	}

	curr_tick += announce_remaining;
10003fb6:	9802      	ldr	r0, [sp, #8]
10003fb8:	9903      	ldr	r1, [sp, #12]
10003fba:	0022      	movs	r2, r4
10003fbc:	17e3      	asrs	r3, r4, #31
10003fbe:	1812      	adds	r2, r2, r0
10003fc0:	414b      	adcs	r3, r1
	announce_remaining = 0;
10003fc2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
10003fc4:	603a      	str	r2, [r7, #0]
10003fc6:	607b      	str	r3, [r7, #4]
	announce_remaining = 0;
10003fc8:	4663      	mov	r3, ip
10003fca:	601c      	str	r4, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
10003fcc:	f7ff ff0e 	bl	10003dec <next_timeout>
10003fd0:	0021      	movs	r1, r4
10003fd2:	f7fe ffe1 	bl	10002f98 <sys_clock_set_timeout>
	if (key != 0U) {
10003fd6:	9b01      	ldr	r3, [sp, #4]
10003fd8:	42a3      	cmp	r3, r4
10003fda:	d102      	bne.n	10003fe2 <sys_clock_announce+0x7a>
	__asm__ volatile(
10003fdc:	b662      	cpsie	i
10003fde:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10003fe2:	b007      	add	sp, #28
10003fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
10003fe6:	17f3      	asrs	r3, r6, #31
10003fe8:	9604      	str	r6, [sp, #16]
10003fea:	9305      	str	r3, [sp, #20]
10003fec:	9b04      	ldr	r3, [sp, #16]
10003fee:	9c05      	ldr	r4, [sp, #20]
10003ff0:	9802      	ldr	r0, [sp, #8]
10003ff2:	9903      	ldr	r1, [sp, #12]
10003ff4:	18c0      	adds	r0, r0, r3
10003ff6:	4161      	adcs	r1, r4
		t->dticks = 0;
10003ff8:	2300      	movs	r3, #0
10003ffa:	2400      	movs	r4, #0
		curr_tick += dt;
10003ffc:	4a0d      	ldr	r2, [pc, #52]	; (10004034 <sys_clock_announce+0xcc>)
		t->dticks = 0;
10003ffe:	612b      	str	r3, [r5, #16]
10004000:	616c      	str	r4, [r5, #20]
		curr_tick += dt;
10004002:	6010      	str	r0, [r2, #0]
10004004:	6051      	str	r1, [r2, #4]
		remove_timeout(t);
10004006:	0028      	movs	r0, r5
10004008:	f7ff ff1c 	bl	10003e44 <remove_timeout>
	if (key != 0U) {
1000400c:	9b01      	ldr	r3, [sp, #4]
1000400e:	2b00      	cmp	r3, #0
10004010:	d102      	bne.n	10004018 <sys_clock_announce+0xb0>
	__asm__ volatile(
10004012:	b662      	cpsie	i
10004014:	f3bf 8f6f 	isb	sy
		t->fn(t);
10004018:	0028      	movs	r0, r5
1000401a:	68ab      	ldr	r3, [r5, #8]
1000401c:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000401e:	f3ef 8310 	mrs	r3, PRIMASK
10004022:	b672      	cpsid	i
10004024:	9301      	str	r3, [sp, #4]
		announce_remaining -= dt;
10004026:	4b02      	ldr	r3, [pc, #8]	; (10004030 <sys_clock_announce+0xc8>)
10004028:	681c      	ldr	r4, [r3, #0]
1000402a:	1ba4      	subs	r4, r4, r6
1000402c:	e7a5      	b.n	10003f7a <sys_clock_announce+0x12>
1000402e:	46c0      	nop			; (mov r8, r8)
10004030:	200001b0 	.word	0x200001b0
10004034:	20000110 	.word	0x20000110
10004038:	20000020 	.word	0x20000020

1000403c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
1000403c:	b510      	push	{r4, lr}
1000403e:	f3ef 8410 	mrs	r4, PRIMASK
10004042:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
10004044:	f7ff fec6 	bl	10003dd4 <elapsed>
10004048:	0002      	movs	r2, r0
1000404a:	4906      	ldr	r1, [pc, #24]	; (10004064 <sys_clock_tick_get+0x28>)
1000404c:	17c3      	asrs	r3, r0, #31
1000404e:	6808      	ldr	r0, [r1, #0]
10004050:	6849      	ldr	r1, [r1, #4]
10004052:	1880      	adds	r0, r0, r2
10004054:	4159      	adcs	r1, r3
	if (key != 0U) {
10004056:	2c00      	cmp	r4, #0
10004058:	d102      	bne.n	10004060 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000405a:	b662      	cpsie	i
1000405c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10004060:	bd10      	pop	{r4, pc}
10004062:	46c0      	nop			; (mov r8, r8)
10004064:	20000110 	.word	0x20000110

10004068 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10004068:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
1000406a:	4802      	ldr	r0, [pc, #8]	; (10004074 <boot_banner+0xc>)
1000406c:	f000 f837 	bl	100040de <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10004070:	bd10      	pop	{r4, pc}
10004072:	46c0      	nop			; (mov r8, r8)
10004074:	10004cb4 	.word	0x10004cb4

10004078 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10004078:	4770      	bx	lr

1000407a <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
1000407a:	b507      	push	{r0, r1, r2, lr}
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
1000407c:	8982      	ldrh	r2, [r0, #12]
{
1000407e:	000b      	movs	r3, r1
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
10004080:	9200      	str	r2, [sp, #0]
10004082:	c807      	ldmia	r0, {r0, r1, r2}
10004084:	f7fd fdf6 	bl	10001c74 <pwm_set>
		       spec->flags);
}
10004088:	bd0e      	pop	{r1, r2, r3, pc}

1000408a <device_is_ready>:

extern bool z_impl_device_is_ready(const struct device * dev);

__pinned_func
static inline bool device_is_ready(const struct device * dev)
{
1000408a:	b510      	push	{r4, lr}
1000408c:	f000 fb4d 	bl	1000472a <z_device_is_ready>
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
}
10004090:	bd10      	pop	{r4, pc}

10004092 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10004092:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
10004094:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10004096:	001c      	movs	r4, r3
10004098:	408c      	lsls	r4, r1
1000409a:	0021      	movs	r1, r4
1000409c:	6904      	ldr	r4, [r0, #16]
1000409e:	6824      	ldr	r4, [r4, #0]
100040a0:	420c      	tst	r4, r1
100040a2:	d000      	beq.n	100040a6 <gpio_pin_set.isra.0+0x14>
		value = (value != 0) ? 0 : 1;
100040a4:	405a      	eors	r2, r3
	if (value != 0)	{
100040a6:	2a00      	cmp	r2, #0
100040a8:	d003      	beq.n	100040b2 <gpio_pin_set.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
100040aa:	6883      	ldr	r3, [r0, #8]
100040ac:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
100040ae:	4798      	blx	r3
}
100040b0:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
100040b2:	6883      	ldr	r3, [r0, #8]
100040b4:	691b      	ldr	r3, [r3, #16]
100040b6:	e7fa      	b.n	100040ae <gpio_pin_set.isra.0+0x1c>

100040b8 <k_sleep.isra.0>:
static inline int32_t k_sleep(k_timeout_t timeout)
100040b8:	b510      	push	{r4, lr}
	return z_impl_k_sleep(timeout);
100040ba:	f7ff fdf7 	bl	10003cac <z_impl_k_sleep>
}
100040be:	bd10      	pop	{r4, pc}

100040c0 <uscounter>:
 * @brief 
 * 
 * @param tiempo en milisegundos 
 */
void uscounter(uint8_t us)
{
100040c0:	b570      	push	{r4, r5, r6, lr}
100040c2:	0006      	movs	r6, r0
100040c4:	f7fe fffc 	bl	100030c0 <sys_clock_cycle_get_32>
	start_time = k_cycle_get_32();
	do
	{
		stop_time = k_cycle_get_32();
		cycles_spent = stop_time - start_time;
	} while (cycles_spent <= 133 * us); // 133 ciclos es un us.
100040c8:	2485      	movs	r4, #133	; 0x85
100040ca:	0005      	movs	r5, r0
100040cc:	4374      	muls	r4, r6
100040ce:	f7fe fff7 	bl	100030c0 <sys_clock_cycle_get_32>
		cycles_spent = stop_time - start_time;
100040d2:	1b40      	subs	r0, r0, r5
	} while (cycles_spent <= 133 * us); // 133 ciclos es un us.
100040d4:	4284      	cmp	r4, r0
100040d6:	d2fa      	bcs.n	100040ce <uscounter+0xe>
	/*//clock-frequency = <133000000>;
	  //1 ciclo : 00000000751s
	printk("ciclos usados: %d <<<\n", cycles_spent);
	printk("start: %d <<<\n", start_time);
	printk("stop:  %d <<<\n", stop_time); */
}
100040d8:	bd70      	pop	{r4, r5, r6, pc}

100040da <arch_printk_char_out>:
}
100040da:	2000      	movs	r0, #0
100040dc:	4770      	bx	lr

100040de <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
100040de:	b40f      	push	{r0, r1, r2, r3}
100040e0:	b507      	push	{r0, r1, r2, lr}
100040e2:	a904      	add	r1, sp, #16
100040e4:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
100040e6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
100040e8:	f7fd ffe4 	bl	100020b4 <vprintk>

	va_end(ap);
}
100040ec:	b003      	add	sp, #12
100040ee:	bc08      	pop	{r3}
100040f0:	b004      	add	sp, #16
100040f2:	4718      	bx	r3

100040f4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
100040f4:	b510      	push	{r4, lr}
100040f6:	0004      	movs	r4, r0
100040f8:	0008      	movs	r0, r1
100040fa:	0011      	movs	r1, r2
100040fc:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100040fe:	47a0      	blx	r4
	return z_impl_z_current_get();
10004100:	f7ff fdec 	bl	10003cdc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10004104:	f7fe fcea 	bl	10002adc <z_impl_k_thread_abort>

10004108 <encode_uint>:
{
10004108:	b5f0      	push	{r4, r5, r6, r7, lr}
1000410a:	b085      	sub	sp, #20
1000410c:	9001      	str	r0, [sp, #4]
1000410e:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10004110:	78d3      	ldrb	r3, [r2, #3]
{
10004112:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10004114:	001a      	movs	r2, r3
10004116:	3a41      	subs	r2, #65	; 0x41
10004118:	000f      	movs	r7, r1
	switch (specifier) {
1000411a:	2408      	movs	r4, #8
1000411c:	9202      	str	r2, [sp, #8]
1000411e:	2b6f      	cmp	r3, #111	; 0x6f
10004120:	d00a      	beq.n	10004138 <encode_uint+0x30>
10004122:	d804      	bhi.n	1000412e <encode_uint+0x26>
		return 16;
10004124:	1924      	adds	r4, r4, r4
	switch (specifier) {
10004126:	2b58      	cmp	r3, #88	; 0x58
10004128:	d006      	beq.n	10004138 <encode_uint+0x30>
		return 10;
1000412a:	3c06      	subs	r4, #6
1000412c:	e004      	b.n	10004138 <encode_uint+0x30>
	switch (specifier) {
1000412e:	2208      	movs	r2, #8
		return 16;
10004130:	2410      	movs	r4, #16
	switch (specifier) {
10004132:	4393      	bics	r3, r2
10004134:	2b70      	cmp	r3, #112	; 0x70
10004136:	d1f8      	bne.n	1000412a <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10004138:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
1000413a:	0022      	movs	r2, r4
1000413c:	2300      	movs	r3, #0
1000413e:	0039      	movs	r1, r7
10004140:	9801      	ldr	r0, [sp, #4]
10004142:	f7fc f8e9 	bl	10000318 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004146:	0013      	movs	r3, r2
10004148:	468c      	mov	ip, r1
1000414a:	b2d2      	uxtb	r2, r2
1000414c:	2b09      	cmp	r3, #9
1000414e:	d81a      	bhi.n	10004186 <encode_uint+0x7e>
10004150:	3230      	adds	r2, #48	; 0x30
10004152:	b2d3      	uxtb	r3, r2
10004154:	3e01      	subs	r6, #1
10004156:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10004158:	2300      	movs	r3, #0
1000415a:	42bb      	cmp	r3, r7
1000415c:	d102      	bne.n	10004164 <encode_uint+0x5c>
1000415e:	9b01      	ldr	r3, [sp, #4]
10004160:	429c      	cmp	r4, r3
10004162:	d802      	bhi.n	1000416a <encode_uint+0x62>
10004164:	9b03      	ldr	r3, [sp, #12]
10004166:	429e      	cmp	r6, r3
10004168:	d80a      	bhi.n	10004180 <encode_uint+0x78>
	if (conv->flag_hash) {
1000416a:	782b      	ldrb	r3, [r5, #0]
1000416c:	069b      	lsls	r3, r3, #26
1000416e:	d504      	bpl.n	1000417a <encode_uint+0x72>
		if (radix == 8) {
10004170:	2c08      	cmp	r4, #8
10004172:	d110      	bne.n	10004196 <encode_uint+0x8e>
			conv->altform_0 = true;
10004174:	78ab      	ldrb	r3, [r5, #2]
10004176:	4323      	orrs	r3, r4
10004178:	70ab      	strb	r3, [r5, #2]
}
1000417a:	0030      	movs	r0, r6
1000417c:	b005      	add	sp, #20
1000417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10004180:	4667      	mov	r7, ip
10004182:	9001      	str	r0, [sp, #4]
10004184:	e7d9      	b.n	1000413a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004186:	0013      	movs	r3, r2
10004188:	9902      	ldr	r1, [sp, #8]
1000418a:	3357      	adds	r3, #87	; 0x57
1000418c:	b2db      	uxtb	r3, r3
1000418e:	2919      	cmp	r1, #25
10004190:	d8e0      	bhi.n	10004154 <encode_uint+0x4c>
10004192:	3237      	adds	r2, #55	; 0x37
10004194:	e7dd      	b.n	10004152 <encode_uint+0x4a>
		} else if (radix == 16) {
10004196:	2c10      	cmp	r4, #16
10004198:	d1ef      	bne.n	1000417a <encode_uint+0x72>
			conv->altform_0c = true;
1000419a:	78ab      	ldrb	r3, [r5, #2]
1000419c:	431c      	orrs	r4, r3
1000419e:	70ac      	strb	r4, [r5, #2]
	return bp;
100041a0:	e7eb      	b.n	1000417a <encode_uint+0x72>

100041a2 <outs>:
{
100041a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100041a4:	0007      	movs	r7, r0
100041a6:	0015      	movs	r5, r2
100041a8:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100041aa:	0014      	movs	r4, r2
{
100041ac:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100041ae:	42a6      	cmp	r6, r4
100041b0:	d806      	bhi.n	100041c0 <outs+0x1e>
100041b2:	2e00      	cmp	r6, #0
100041b4:	d001      	beq.n	100041ba <outs+0x18>
	return (int)count;
100041b6:	1b60      	subs	r0, r4, r5
100041b8:	e008      	b.n	100041cc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100041ba:	7823      	ldrb	r3, [r4, #0]
100041bc:	2b00      	cmp	r3, #0
100041be:	d0fa      	beq.n	100041b6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
100041c0:	7820      	ldrb	r0, [r4, #0]
100041c2:	9901      	ldr	r1, [sp, #4]
100041c4:	47b8      	blx	r7
		if (rc < 0) {
100041c6:	3401      	adds	r4, #1
100041c8:	2800      	cmp	r0, #0
100041ca:	daf0      	bge.n	100041ae <outs+0xc>
}
100041cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100041ce <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
100041ce:	4770      	bx	lr

100041d0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100041d0:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100041d2:	f000 fabe 	bl	10004752 <z_fatal_error>
}
100041d6:	bd10      	pop	{r4, pc}

100041d8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
100041d8:	b510      	push	{r4, lr}
100041da:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
100041dc:	6800      	ldr	r0, [r0, #0]
100041de:	f000 fab8 	bl	10004752 <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
100041e2:	bd10      	pop	{r4, pc}

100041e4 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
100041e4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
100041e6:	2100      	movs	r1, #0
100041e8:	2001      	movs	r0, #1
100041ea:	f7ff fff1 	bl	100041d0 <z_arm_fatal_error>
}
100041ee:	bd10      	pop	{r4, pc}

100041f0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
100041f0:	b510      	push	{r4, lr}
	handler();
100041f2:	f7fe fb43 	bl	1000287c <z_SysNmiOnReset>
	z_arm_int_exit();
100041f6:	f7fe fbed 	bl	100029d4 <z_arm_exc_exit>
}
100041fa:	bd10      	pop	{r4, pc}

100041fc <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
100041fc:	4770      	bx	lr

100041fe <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
100041fe:	0003      	movs	r3, r0
	size_t n = 0;
10004200:	2000      	movs	r0, #0

	while (*s != '\0') {
10004202:	5c1a      	ldrb	r2, [r3, r0]
10004204:	2a00      	cmp	r2, #0
10004206:	d100      	bne.n	1000420a <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10004208:	4770      	bx	lr
		n++;
1000420a:	3001      	adds	r0, #1
1000420c:	e7f9      	b.n	10004202 <strlen+0x4>

1000420e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
1000420e:	0003      	movs	r3, r0
	size_t n = 0;
10004210:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10004212:	5c1a      	ldrb	r2, [r3, r0]
10004214:	2a00      	cmp	r2, #0
10004216:	d001      	beq.n	1000421c <strnlen+0xe>
10004218:	4288      	cmp	r0, r1
1000421a:	d100      	bne.n	1000421e <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
1000421c:	4770      	bx	lr
		n++;
1000421e:	3001      	adds	r0, #1
10004220:	e7f7      	b.n	10004212 <strnlen+0x4>

10004222 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10004222:	2300      	movs	r3, #0
{
10004224:	b510      	push	{r4, lr}
	while (n > 0) {
10004226:	429a      	cmp	r2, r3
10004228:	d100      	bne.n	1000422c <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
1000422a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
1000422c:	5ccc      	ldrb	r4, [r1, r3]
1000422e:	54c4      	strb	r4, [r0, r3]
		n--;
10004230:	3301      	adds	r3, #1
10004232:	e7f8      	b.n	10004226 <memcpy+0x4>

10004234 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10004234:	0003      	movs	r3, r0
10004236:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10004238:	1882      	adds	r2, r0, r2
1000423a:	4293      	cmp	r3, r2
1000423c:	d100      	bne.n	10004240 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000423e:	4770      	bx	lr
		*(d_byte++) = c_byte;
10004240:	7019      	strb	r1, [r3, #0]
		n--;
10004242:	3301      	adds	r3, #1
10004244:	e7f9      	b.n	1000423a <memset+0x6>

10004246 <_stdout_hook_default>:
	return EOF;
10004246:	2001      	movs	r0, #1
}
10004248:	4240      	negs	r0, r0
1000424a:	4770      	bx	lr

1000424c <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
1000424c:	b510      	push	{r4, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
1000424e:	f7fe fc67 	bl	10002b20 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
10004252:	bd10      	pop	{r4, pc}

10004254 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10004254:	23d0      	movs	r3, #208	; 0xd0
10004256:	061b      	lsls	r3, r3, #24
10004258:	685b      	ldr	r3, [r3, #4]
}
1000425a:	2000      	movs	r0, #0
	*value = gpio_get_all();
1000425c:	600b      	str	r3, [r1, #0]
}
1000425e:	4770      	bx	lr

10004260 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10004260:	23d0      	movs	r3, #208	; 0xd0
10004262:	061b      	lsls	r3, r3, #24
10004264:	6918      	ldr	r0, [r3, #16]
10004266:	4042      	eors	r2, r0
10004268:	4011      	ands	r1, r2
}
1000426a:	2000      	movs	r0, #0
1000426c:	61d9      	str	r1, [r3, #28]
1000426e:	4770      	bx	lr

10004270 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
10004270:	23d0      	movs	r3, #208	; 0xd0
10004272:	061b      	lsls	r3, r3, #24
}
10004274:	2000      	movs	r0, #0
10004276:	6159      	str	r1, [r3, #20]
10004278:	4770      	bx	lr

1000427a <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
1000427a:	23d0      	movs	r3, #208	; 0xd0
1000427c:	061b      	lsls	r3, r3, #24
}
1000427e:	2000      	movs	r0, #0
10004280:	6199      	str	r1, [r3, #24]
10004282:	4770      	bx	lr

10004284 <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
10004284:	23d0      	movs	r3, #208	; 0xd0
10004286:	061b      	lsls	r3, r3, #24
}
10004288:	2000      	movs	r0, #0
1000428a:	61d9      	str	r1, [r3, #28]
1000428c:	4770      	bx	lr

1000428e <gpio_rpi_manage_callback>:
{
1000428e:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10004290:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10004292:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10004294:	2800      	cmp	r0, #0
10004296:	d021      	beq.n	100042dc <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004298:	4288      	cmp	r0, r1
1000429a:	d11b      	bne.n	100042d4 <gpio_rpi_manage_callback+0x46>
	return node->next;
1000429c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
1000429e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
100042a0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
100042a2:	42a1      	cmp	r1, r4
100042a4:	d100      	bne.n	100042a8 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100042a6:	6098      	str	r0, [r3, #8]
	parent->next = child;
100042a8:	2000      	movs	r0, #0
100042aa:	6008      	str	r0, [r1, #0]
	if (set) {
100042ac:	4282      	cmp	r2, r0
100042ae:	d006      	beq.n	100042be <gpio_rpi_manage_callback+0x30>
	return list->head;
100042b0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
100042b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
100042b4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
100042b6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
100042b8:	2a00      	cmp	r2, #0
100042ba:	d100      	bne.n	100042be <gpio_rpi_manage_callback+0x30>
	list->tail = node;
100042bc:	6099      	str	r1, [r3, #8]
	return 0;
100042be:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
100042c0:	e010      	b.n	100042e4 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100042c2:	4281      	cmp	r1, r0
100042c4:	d106      	bne.n	100042d4 <gpio_rpi_manage_callback+0x46>
	return node->next;
100042c6:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
100042c8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100042ca:	6898      	ldr	r0, [r3, #8]
100042cc:	4281      	cmp	r1, r0
100042ce:	d1eb      	bne.n	100042a8 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100042d0:	609c      	str	r4, [r3, #8]
}
100042d2:	e7e9      	b.n	100042a8 <gpio_rpi_manage_callback+0x1a>
	return node->next;
100042d4:	0004      	movs	r4, r0
100042d6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100042d8:	2800      	cmp	r0, #0
100042da:	d1f2      	bne.n	100042c2 <gpio_rpi_manage_callback+0x34>
			if (!set) {
100042dc:	2a00      	cmp	r2, #0
100042de:	d1e7      	bne.n	100042b0 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
100042e0:	2016      	movs	r0, #22
100042e2:	4240      	negs	r0, r0
}
100042e4:	bd10      	pop	{r4, pc}

100042e6 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
100042e6:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
100042e8:	6843      	ldr	r3, [r0, #4]
100042ea:	685b      	ldr	r3, [r3, #4]
100042ec:	4798      	blx	r3
	return 0;
}
100042ee:	2000      	movs	r0, #0
100042f0:	bd10      	pop	{r4, pc}

100042f2 <gpio_rpi_pin_interrupt_configure>:
{
100042f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100042f4:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
100042f6:	6907      	ldr	r7, [r0, #16]
{
100042f8:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
100042fa:	210f      	movs	r1, #15
100042fc:	2200      	movs	r2, #0
100042fe:	0028      	movs	r0, r5
{
10004300:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004302:	f7ff f8b1 	bl	10003468 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004306:	2201      	movs	r2, #1
10004308:	0013      	movs	r3, r2
1000430a:	40ab      	lsls	r3, r5
1000430c:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
1000430e:	2380      	movs	r3, #128	; 0x80
10004310:	039b      	lsls	r3, r3, #14
10004312:	429e      	cmp	r6, r3
10004314:	d105      	bne.n	10004322 <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004316:	68fb      	ldr	r3, [r7, #12]
10004318:	9a01      	ldr	r2, [sp, #4]
1000431a:	4393      	bics	r3, r2
}
1000431c:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000431e:	60fb      	str	r3, [r7, #12]
}
10004320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
10004322:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10004324:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10004326:	04db      	lsls	r3, r3, #19
10004328:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
1000432a:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
1000432c:	01f6      	lsls	r6, r6, #7
1000432e:	d50d      	bpl.n	1000434c <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10004330:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
10004332:	2b00      	cmp	r3, #0
10004334:	d001      	beq.n	1000433a <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10004336:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10004338:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
1000433a:	2201      	movs	r2, #1
1000433c:	0028      	movs	r0, r5
1000433e:	f7ff f893 	bl	10003468 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004342:	68fb      	ldr	r3, [r7, #12]
10004344:	9a01      	ldr	r2, [sp, #4]
10004346:	431a      	orrs	r2, r3
10004348:	0013      	movs	r3, r2
1000434a:	e7e7      	b.n	1000431c <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
1000434c:	2b00      	cmp	r3, #0
1000434e:	d0f4      	beq.n	1000433a <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
10004350:	2302      	movs	r3, #2
10004352:	e7f1      	b.n	10004338 <gpio_rpi_pin_interrupt_configure+0x46>

10004354 <gpio_rpi_configure>:
{
10004354:	b570      	push	{r4, r5, r6, lr}
10004356:	000d      	movs	r5, r1
10004358:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
1000435a:	0793      	lsls	r3, r2, #30
1000435c:	d423      	bmi.n	100043a6 <gpio_rpi_configure+0x52>
	gpio_set_function(pin, GPIO_FUNC_SIO);
1000435e:	2105      	movs	r1, #5
10004360:	0028      	movs	r0, r5
10004362:	f7ff f821 	bl	100033a8 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10004366:	03a3      	lsls	r3, r4, #14
10004368:	d50d      	bpl.n	10004386 <gpio_rpi_configure+0x32>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
1000436a:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
1000436c:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
1000436e:	40ab      	lsls	r3, r5
    sio_hw->gpio_oe_set = mask;
10004370:	0612      	lsls	r2, r2, #24
10004372:	6253      	str	r3, [r2, #36]	; 0x24
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
10004374:	0321      	lsls	r1, r4, #12
10004376:	d502      	bpl.n	1000437e <gpio_rpi_configure+0x2a>
    sio_hw->gpio_set = mask;
10004378:	6153      	str	r3, [r2, #20]
	return 0;
1000437a:	2000      	movs	r0, #0
}
1000437c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000437e:	0364      	lsls	r4, r4, #13
10004380:	d5fb      	bpl.n	1000437a <gpio_rpi_configure+0x26>
    sio_hw->gpio_clr = mask;
10004382:	6193      	str	r3, [r2, #24]
}
10004384:	e7f9      	b.n	1000437a <gpio_rpi_configure+0x26>
	} else if (flags & GPIO_INPUT) {
10004386:	03e3      	lsls	r3, r4, #15
10004388:	d5f7      	bpl.n	1000437a <gpio_rpi_configure+0x26>
    uint32_t mask = 1ul << gpio;
1000438a:	2301      	movs	r3, #1
1000438c:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000438e:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10004390:	40a9      	lsls	r1, r5
    sio_hw->gpio_oe_clr = mask;
10004392:	0612      	lsls	r2, r2, #24
10004394:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
10004396:	0962      	lsrs	r2, r4, #5
10004398:	0921      	lsrs	r1, r4, #4
1000439a:	0028      	movs	r0, r5
1000439c:	401a      	ands	r2, r3
1000439e:	4019      	ands	r1, r3
100043a0:	f7ff f818 	bl	100033d4 <gpio_set_pulls>
100043a4:	e7e9      	b.n	1000437a <gpio_rpi_configure+0x26>
		return -ENOTSUP;
100043a6:	2086      	movs	r0, #134	; 0x86
100043a8:	4240      	negs	r0, r0
100043aa:	e7e7      	b.n	1000437c <gpio_rpi_configure+0x28>

100043ac <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
100043ac:	b510      	push	{r4, lr}
100043ae:	2200      	movs	r2, #0
100043b0:	2103      	movs	r1, #3
100043b2:	200d      	movs	r0, #13
100043b4:	f7fe fa38 	bl	10002828 <z_arm_irq_priority_set>
100043b8:	200d      	movs	r0, #13
100043ba:	f7fe fa29 	bl	10002810 <arch_irq_enable>
100043be:	bd10      	pop	{r4, pc}

100043c0 <uart_rpi_poll_in>:
{
100043c0:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
100043c2:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
100043c4:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100043c6:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
100043c8:	699c      	ldr	r4, [r3, #24]
100043ca:	0020      	movs	r0, r4
100043cc:	4010      	ands	r0, r2
100043ce:	4214      	tst	r4, r2
100043d0:	d102      	bne.n	100043d8 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
100043d2:	681b      	ldr	r3, [r3, #0]
100043d4:	700b      	strb	r3, [r1, #0]
}
100043d6:	bd10      	pop	{r4, pc}
		return -1;
100043d8:	2001      	movs	r0, #1
100043da:	4240      	negs	r0, r0
100043dc:	e7fb      	b.n	100043d6 <uart_rpi_poll_in+0x16>

100043de <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
100043de:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100043e0:	6843      	ldr	r3, [r0, #4]
100043e2:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
100043e4:	6998      	ldr	r0, [r3, #24]
100043e6:	4210      	tst	r0, r2
100043e8:	d1fc      	bne.n	100043e4 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
100043ea:	6019      	str	r1, [r3, #0]
}
100043ec:	4770      	bx	lr

100043ee <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
100043ee:	6843      	ldr	r3, [r0, #4]
100043f0:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
100043f2:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
100043f4:	0518      	lsls	r0, r3, #20
100043f6:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
100043f8:	055a      	lsls	r2, r3, #21
100043fa:	d501      	bpl.n	10004400 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
100043fc:	2208      	movs	r2, #8
100043fe:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10004400:	059a      	lsls	r2, r3, #22
10004402:	d501      	bpl.n	10004408 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10004404:	2202      	movs	r2, #2
10004406:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10004408:	05db      	lsls	r3, r3, #23
1000440a:	d501      	bpl.n	10004410 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
1000440c:	2304      	movs	r3, #4
1000440e:	4318      	orrs	r0, r3
}
10004410:	4770      	bx	lr

10004412 <uart_rpi_fifo_fill>:
{
10004412:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10004414:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10004416:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10004418:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
1000441a:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000441c:	699c      	ldr	r4, [r3, #24]
1000441e:	422c      	tst	r4, r5
10004420:	d102      	bne.n	10004428 <uart_rpi_fifo_fill+0x16>
10004422:	1a14      	subs	r4, r2, r0
10004424:	2c00      	cmp	r4, #0
10004426:	dc00      	bgt.n	1000442a <uart_rpi_fifo_fill+0x18>
}
10004428:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
1000442a:	5c0c      	ldrb	r4, [r1, r0]
1000442c:	3001      	adds	r0, #1
1000442e:	601c      	str	r4, [r3, #0]
10004430:	e7f4      	b.n	1000441c <uart_rpi_fifo_fill+0xa>

10004432 <uart_rpi_fifo_read>:
{
10004432:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10004434:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10004436:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10004438:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
1000443a:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000443c:	699c      	ldr	r4, [r3, #24]
1000443e:	422c      	tst	r4, r5
10004440:	d102      	bne.n	10004448 <uart_rpi_fifo_read+0x16>
10004442:	1a14      	subs	r4, r2, r0
10004444:	2c00      	cmp	r4, #0
10004446:	dc00      	bgt.n	1000444a <uart_rpi_fifo_read+0x18>
}
10004448:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
1000444a:	681c      	ldr	r4, [r3, #0]
1000444c:	540c      	strb	r4, [r1, r0]
1000444e:	3001      	adds	r0, #1
10004450:	e7f4      	b.n	1000443c <uart_rpi_fifo_read+0xa>

10004452 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004452:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10004454:	6843      	ldr	r3, [r0, #4]
10004456:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004458:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000445a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000445c:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000445e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10004460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10004462:	438a      	bics	r2, r1
10004464:	635a      	str	r2, [r3, #52]	; 0x34
}
10004466:	4770      	bx	lr

10004468 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10004468:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000446a:	6843      	ldr	r3, [r0, #4]
1000446c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000446e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10004470:	438b      	bics	r3, r1
10004472:	6393      	str	r3, [r2, #56]	; 0x38
}
10004474:	4770      	bx	lr

10004476 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004476:	6843      	ldr	r3, [r0, #4]
10004478:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
1000447a:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000447c:	0680      	lsls	r0, r0, #26
1000447e:	0fc0      	lsrs	r0, r0, #31
}
10004480:	4770      	bx	lr

10004482 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004482:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10004484:	6843      	ldr	r3, [r0, #4]
10004486:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004488:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000448a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
1000448c:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000448e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10004490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10004492:	438a      	bics	r2, r1
10004494:	635a      	str	r2, [r3, #52]	; 0x34
}
10004496:	4770      	bx	lr

10004498 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10004498:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000449a:	6843      	ldr	r3, [r0, #4]
1000449c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000449e:	6b93      	ldr	r3, [r2, #56]	; 0x38
100044a0:	438b      	bics	r3, r1
100044a2:	6393      	str	r3, [r2, #56]	; 0x38
}
100044a4:	4770      	bx	lr

100044a6 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100044a6:	6843      	ldr	r3, [r0, #4]
100044a8:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100044aa:	6998      	ldr	r0, [r3, #24]
100044ac:	0600      	lsls	r0, r0, #24
100044ae:	0fc0      	lsrs	r0, r0, #31
}
100044b0:	4770      	bx	lr

100044b2 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100044b2:	6843      	ldr	r3, [r0, #4]
100044b4:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
100044b6:	6c18      	ldr	r0, [r3, #64]	; 0x40
100044b8:	06c0      	lsls	r0, r0, #27
100044ba:	0fc0      	lsrs	r0, r0, #31
}
100044bc:	4770      	bx	lr

100044be <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
100044be:	6843      	ldr	r3, [r0, #4]
100044c0:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
100044c2:	23f8      	movs	r3, #248	; 0xf8
100044c4:	6b91      	ldr	r1, [r2, #56]	; 0x38
100044c6:	00db      	lsls	r3, r3, #3
100044c8:	430b      	orrs	r3, r1
100044ca:	6393      	str	r3, [r2, #56]	; 0x38
}
100044cc:	4770      	bx	lr

100044ce <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
100044ce:	b510      	push	{r4, lr}
100044d0:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
100044d2:	f7ff ffee 	bl	100044b2 <uart_rpi_irq_rx_ready>
100044d6:	0003      	movs	r3, r0
100044d8:	2001      	movs	r0, #1
100044da:	2b00      	cmp	r3, #0
100044dc:	d104      	bne.n	100044e8 <uart_rpi_irq_is_pending+0x1a>
100044de:	0020      	movs	r0, r4
100044e0:	f7ff ffc9 	bl	10004476 <uart_rpi_irq_tx_ready>
100044e4:	1e43      	subs	r3, r0, #1
100044e6:	4198      	sbcs	r0, r3
}
100044e8:	bd10      	pop	{r4, pc}

100044ea <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
100044ea:	2001      	movs	r0, #1
100044ec:	4770      	bx	lr

100044ee <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
100044ee:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
100044f0:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
100044f2:	60da      	str	r2, [r3, #12]
}
100044f4:	4770      	bx	lr

100044f6 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
100044f6:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
100044f8:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
100044fa:	6893      	ldr	r3, [r2, #8]
100044fc:	2b00      	cmp	r3, #0
100044fe:	d001      	beq.n	10004504 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10004500:	68d1      	ldr	r1, [r2, #12]
10004502:	4798      	blx	r3
	}
}
10004504:	bd10      	pop	{r4, pc}

10004506 <uart_rpi_config_get>:
{
10004506:	0003      	movs	r3, r0
10004508:	b510      	push	{r4, lr}
1000450a:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
1000450c:	2208      	movs	r2, #8
1000450e:	6919      	ldr	r1, [r3, #16]
10004510:	f7ff fe87 	bl	10004222 <memcpy>
}
10004514:	2000      	movs	r0, #0
10004516:	bd10      	pop	{r4, pc}

10004518 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10004518:	b510      	push	{r4, lr}
1000451a:	2200      	movs	r2, #0
1000451c:	2103      	movs	r1, #3
1000451e:	2014      	movs	r0, #20
10004520:	f7fe f982 	bl	10002828 <z_arm_irq_priority_set>
10004524:	2014      	movs	r0, #20
10004526:	f7fe f973 	bl	10002810 <arch_irq_enable>
1000452a:	bd10      	pop	{r4, pc}

1000452c <uart_rpi_configure>:
{
1000452c:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
1000452e:	6843      	ldr	r3, [r0, #4]
{
10004530:	0006      	movs	r6, r0
10004532:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10004534:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10004536:	6809      	ldr	r1, [r1, #0]
10004538:	6818      	ldr	r0, [r3, #0]
1000453a:	f7fe ffc5 	bl	100034c8 <uart_set_baudrate>
	if (baudrate == 0) {
1000453e:	2800      	cmp	r0, #0
10004540:	d102      	bne.n	10004548 <uart_rpi_configure+0x1c>
		return -EINVAL;
10004542:	2016      	movs	r0, #22
10004544:	4240      	negs	r0, r0
}
10004546:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10004548:	79a3      	ldrb	r3, [r4, #6]
1000454a:	7962      	ldrb	r2, [r4, #5]
1000454c:	7921      	ldrb	r1, [r4, #4]
1000454e:	6870      	ldr	r0, [r6, #4]
10004550:	f7fe fc60 	bl	10002e14 <uart_rpi_set_format.isra.0>
10004554:	2800      	cmp	r0, #0
10004556:	d1f4      	bne.n	10004542 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10004558:	cc06      	ldmia	r4!, {r1, r2}
1000455a:	c506      	stmia	r5!, {r1, r2}
	return 0;
1000455c:	e7f3      	b.n	10004546 <uart_rpi_configure+0x1a>

1000455e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
1000455e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10004560:	6803      	ldr	r3, [r0, #0]
10004562:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10004564:	7905      	ldrb	r5, [r0, #4]
10004566:	6804      	ldr	r4, [r0, #0]
10004568:	00ed      	lsls	r5, r5, #3
1000456a:	1964      	adds	r4, r4, r5
1000456c:	42a3      	cmp	r3, r4
1000456e:	d302      	bcc.n	10004576 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10004570:	2002      	movs	r0, #2
10004572:	4240      	negs	r0, r0
}
10004574:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10004576:	795c      	ldrb	r4, [r3, #5]
10004578:	428c      	cmp	r4, r1
1000457a:	d001      	beq.n	10004580 <pinctrl_lookup_state+0x22>
		(*state)++;
1000457c:	3308      	adds	r3, #8
1000457e:	e7f0      	b.n	10004562 <pinctrl_lookup_state+0x4>
			return 0;
10004580:	2000      	movs	r0, #0
10004582:	e7f7      	b.n	10004574 <pinctrl_lookup_state+0x16>

10004584 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004586:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004588:	2601      	movs	r6, #1
1000458a:	008d      	lsls	r5, r1, #2
1000458c:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
1000458e:	42ac      	cmp	r4, r5
10004590:	d101      	bne.n	10004596 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10004592:	2000      	movs	r0, #0
10004594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10004596:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10004598:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
1000459a:	06c0      	lsls	r0, r0, #27
1000459c:	0ec0      	lsrs	r0, r0, #27
1000459e:	f000 f8b8 	bl	10004712 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100045a2:	8821      	ldrh	r1, [r4, #0]
100045a4:	7820      	ldrb	r0, [r4, #0]
100045a6:	05c9      	lsls	r1, r1, #23
100045a8:	06c0      	lsls	r0, r0, #27
100045aa:	0f09      	lsrs	r1, r1, #28
100045ac:	0ec0      	lsrs	r0, r0, #27
100045ae:	f7fe fefb 	bl	100033a8 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
100045b2:	7861      	ldrb	r1, [r4, #1]
100045b4:	7820      	ldrb	r0, [r4, #0]
100045b6:	09ca      	lsrs	r2, r1, #7
100045b8:	06c0      	lsls	r0, r0, #27
100045ba:	0649      	lsls	r1, r1, #25
100045bc:	0fc9      	lsrs	r1, r1, #31
100045be:	0ec0      	lsrs	r0, r0, #27
100045c0:	f7fe ff08 	bl	100033d4 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
100045c4:	7861      	ldrb	r1, [r4, #1]
100045c6:	7820      	ldrb	r0, [r4, #0]
100045c8:	06c9      	lsls	r1, r1, #27
100045ca:	06c0      	lsls	r0, r0, #27
100045cc:	0f09      	lsrs	r1, r1, #28
100045ce:	0ec0      	lsrs	r0, r0, #27
100045d0:	f7fe ff2e 	bl	10003430 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100045d4:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100045d6:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100045d8:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100045da:	06c0      	lsls	r0, r0, #27
100045dc:	4031      	ands	r1, r6
100045de:	0ec0      	lsrs	r0, r0, #27
100045e0:	f7fe ff18 	bl	10003414 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
100045e4:	78a1      	ldrb	r1, [r4, #2]
100045e6:	7820      	ldrb	r0, [r4, #0]
100045e8:	0789      	lsls	r1, r1, #30
100045ea:	06c0      	lsls	r0, r0, #27
100045ec:	0fc9      	lsrs	r1, r1, #31
100045ee:	0ec0      	lsrs	r0, r0, #27
100045f0:	f7fe ff02 	bl	100033f8 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
100045f4:	78a1      	ldrb	r1, [r4, #2]
100045f6:	7820      	ldrb	r0, [r4, #0]
100045f8:	07c9      	lsls	r1, r1, #31
100045fa:	06c0      	lsls	r0, r0, #27
100045fc:	0fc9      	lsrs	r1, r1, #31
100045fe:	0ec0      	lsrs	r0, r0, #27
10004600:	f7fe ff54 	bl	100034ac <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10004604:	003c      	movs	r4, r7
10004606:	e7c2      	b.n	1000458e <pinctrl_configure_pins+0xa>

10004608 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10004608:	2000      	movs	r0, #0
1000460a:	4770      	bx	lr

1000460c <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
1000460c:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
1000460e:	7900      	ldrb	r0, [r0, #4]
10004610:	2802      	cmp	r0, #2
10004612:	d009      	beq.n	10004628 <reset_rpi_read_register.isra.0+0x1c>
10004614:	2804      	cmp	r0, #4
10004616:	d00b      	beq.n	10004630 <reset_rpi_read_register.isra.0+0x24>
10004618:	2801      	cmp	r0, #1
1000461a:	d10c      	bne.n	10004636 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
1000461c:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
1000461e:	780b      	ldrb	r3, [r1, #0]
10004620:	b2db      	uxtb	r3, r3
	return 0;
10004622:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10004624:	6013      	str	r3, [r2, #0]
}
10004626:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10004628:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
1000462a:	880b      	ldrh	r3, [r1, #0]
1000462c:	b29b      	uxth	r3, r3
		break;
1000462e:	e7f8      	b.n	10004622 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10004630:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10004632:	680b      	ldr	r3, [r1, #0]
		break;
10004634:	e7f5      	b.n	10004622 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
10004636:	2016      	movs	r0, #22
10004638:	4240      	negs	r0, r0
1000463a:	e7f4      	b.n	10004626 <reset_rpi_read_register.isra.0+0x1a>

1000463c <reset_rpi_update>:
{
1000463c:	0003      	movs	r3, r0
1000463e:	b5f0      	push	{r4, r5, r6, r7, lr}
10004640:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10004642:	685f      	ldr	r7, [r3, #4]
{
10004644:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10004646:	793e      	ldrb	r6, [r7, #4]
{
10004648:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000464a:	00f1      	lsls	r1, r6, #3
1000464c:	f7fb fdfc 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10004650:	aa03      	add	r2, sp, #12
10004652:	0004      	movs	r4, r0
10004654:	000d      	movs	r5, r1
10004656:	b281      	uxth	r1, r0
10004658:	0038      	movs	r0, r7
1000465a:	f7ff ffd7 	bl	1000460c <reset_rpi_read_register.isra.0>
	if (ret) {
1000465e:	2800      	cmp	r0, #0
10004660:	d117      	bne.n	10004692 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10004662:	2201      	movs	r2, #1
10004664:	9903      	ldr	r1, [sp, #12]
10004666:	b2ed      	uxtb	r5, r5
10004668:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
1000466a:	000b      	movs	r3, r1
		value |= BIT(regbit);
1000466c:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
1000466e:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10004670:	797d      	ldrb	r5, [r7, #5]
10004672:	9a01      	ldr	r2, [sp, #4]
10004674:	4295      	cmp	r5, r2
10004676:	d001      	beq.n	1000467c <reset_rpi_update+0x40>
		value |= BIT(regbit);
10004678:	4663      	mov	r3, ip
1000467a:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
1000467c:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
1000467e:	2e02      	cmp	r6, #2
10004680:	d009      	beq.n	10004696 <reset_rpi_update+0x5a>
10004682:	2e04      	cmp	r6, #4
10004684:	d00c      	beq.n	100046a0 <reset_rpi_update+0x64>
10004686:	2e01      	cmp	r6, #1
10004688:	d10e      	bne.n	100046a8 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
1000468a:	b2a4      	uxth	r4, r4
1000468c:	b2db      	uxtb	r3, r3
1000468e:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10004690:	7023      	strb	r3, [r4, #0]
}
10004692:	b005      	add	sp, #20
10004694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10004696:	b2a4      	uxth	r4, r4
10004698:	b29b      	uxth	r3, r3
1000469a:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
1000469c:	8023      	strh	r3, [r4, #0]
}
1000469e:	e7f8      	b.n	10004692 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
100046a0:	b2a4      	uxth	r4, r4
100046a2:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100046a4:	6023      	str	r3, [r4, #0]
}
100046a6:	e7f4      	b.n	10004692 <reset_rpi_update+0x56>
	switch (config->reg_width) {
100046a8:	2016      	movs	r0, #22
100046aa:	4240      	negs	r0, r0
100046ac:	e7f1      	b.n	10004692 <reset_rpi_update+0x56>

100046ae <reset_rpi_line_assert>:
{
100046ae:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
100046b0:	2201      	movs	r2, #1
100046b2:	f7ff ffc3 	bl	1000463c <reset_rpi_update>
}
100046b6:	bd10      	pop	{r4, pc}

100046b8 <reset_rpi_line_deassert>:
{
100046b8:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
100046ba:	2200      	movs	r2, #0
100046bc:	f7ff ffbe 	bl	1000463c <reset_rpi_update>
}
100046c0:	bd10      	pop	{r4, pc}

100046c2 <reset_rpi_line_toggle>:
{
100046c2:	b570      	push	{r4, r5, r6, lr}
100046c4:	0004      	movs	r4, r0
100046c6:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
100046c8:	f7ff fff1 	bl	100046ae <reset_rpi_line_assert>
	if (ret) {
100046cc:	2800      	cmp	r0, #0
100046ce:	d103      	bne.n	100046d8 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
100046d0:	0029      	movs	r1, r5
100046d2:	0020      	movs	r0, r4
100046d4:	f7ff fff0 	bl	100046b8 <reset_rpi_line_deassert>
}
100046d8:	bd70      	pop	{r4, r5, r6, pc}

100046da <reset_rpi_status>:
{
100046da:	0003      	movs	r3, r0
100046dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
100046de:	685e      	ldr	r6, [r3, #4]
{
100046e0:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100046e2:	7931      	ldrb	r1, [r6, #4]
{
100046e4:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
100046e6:	00c9      	lsls	r1, r1, #3
100046e8:	f7fb fdae 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100046ec:	aa01      	add	r2, sp, #4
100046ee:	000d      	movs	r5, r1
100046f0:	b281      	uxth	r1, r0
100046f2:	0030      	movs	r0, r6
100046f4:	f7ff ff8a 	bl	1000460c <reset_rpi_read_register.isra.0>
	if (ret) {
100046f8:	2800      	cmp	r0, #0
100046fa:	d109      	bne.n	10004710 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
100046fc:	9b01      	ldr	r3, [sp, #4]
100046fe:	b2ed      	uxtb	r5, r5
10004700:	40eb      	lsrs	r3, r5
10004702:	2201      	movs	r2, #1
10004704:	439a      	bics	r2, r3
10004706:	7973      	ldrb	r3, [r6, #5]
10004708:	4259      	negs	r1, r3
1000470a:	414b      	adcs	r3, r1
1000470c:	4053      	eors	r3, r2
1000470e:	7023      	strb	r3, [r4, #0]
}
10004710:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10004712 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10004712:	2301      	movs	r3, #1
10004714:	22d0      	movs	r2, #208	; 0xd0
10004716:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10004718:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000471a:	0612      	lsls	r2, r2, #24
1000471c:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000471e:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10004720:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10004722:	f7fe fe41 	bl	100033a8 <gpio_set_function>
}
10004726:	bd10      	pop	{r4, pc}

10004728 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10004728:	4770      	bx	lr

1000472a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
1000472a:	2800      	cmp	r0, #0
1000472c:	d009      	beq.n	10004742 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
1000472e:	2301      	movs	r3, #1
10004730:	68c2      	ldr	r2, [r0, #12]
10004732:	2000      	movs	r0, #0
10004734:	7851      	ldrb	r1, [r2, #1]
10004736:	4219      	tst	r1, r3
10004738:	d002      	beq.n	10004740 <z_device_is_ready+0x16>
1000473a:	7810      	ldrb	r0, [r2, #0]
1000473c:	4242      	negs	r2, r0
1000473e:	4150      	adcs	r0, r2
10004740:	4018      	ands	r0, r3
}
10004742:	4770      	bx	lr

10004744 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10004744:	f3ef 8310 	mrs	r3, PRIMASK
10004748:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
1000474a:	e7fe      	b.n	1000474a <arch_system_halt+0x6>

1000474c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
1000474c:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
1000474e:	f7ff fff9 	bl	10004744 <arch_system_halt>

10004752 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10004752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004754:	0005      	movs	r5, r0
10004756:	000e      	movs	r6, r1
10004758:	f3ef 8710 	mrs	r7, PRIMASK
1000475c:	b672      	cpsid	i
	return z_impl_z_current_get();
1000475e:	f7ff fabd 	bl	10003cdc <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10004762:	0031      	movs	r1, r6
10004764:	0004      	movs	r4, r0
10004766:	0028      	movs	r0, r5
10004768:	f7ff fff0 	bl	1000474c <k_sys_fatal_error_handler>
	if (key != 0U) {
1000476c:	2f00      	cmp	r7, #0
1000476e:	d102      	bne.n	10004776 <z_fatal_error+0x24>
	__asm__ volatile(
10004770:	b662      	cpsie	i
10004772:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10004776:	0020      	movs	r0, r4
10004778:	f7fe f9b0 	bl	10002adc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
1000477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000477e <z_early_memset>:
{
1000477e:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10004780:	f7ff fd58 	bl	10004234 <memset>
}
10004784:	bd10      	pop	{r4, pc}

10004786 <z_early_memcpy>:
{
10004786:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10004788:	f7ff fd4b 	bl	10004222 <memcpy>
}
1000478c:	bd10      	pop	{r4, pc}

1000478e <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
1000478e:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004790:	f3ef 8310 	mrs	r3, PRIMASK
10004794:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10004796:	f7fe f833 	bl	10002800 <arch_cpu_idle>
1000479a:	e7f9      	b.n	10004790 <idle+0x2>

1000479c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
1000479c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000479e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
100047a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100047a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100047a4:	2300      	movs	r3, #0
100047a6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100047a8:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
100047aa:	4770      	bx	lr

100047ac <unpend_thread_no_timeout>:
{
100047ac:	b510      	push	{r4, lr}
100047ae:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
100047b0:	f7ff fff4 	bl	1000479c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
100047b4:	2202      	movs	r2, #2
100047b6:	7b63      	ldrb	r3, [r4, #13]
100047b8:	4393      	bics	r3, r2
100047ba:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
100047bc:	2300      	movs	r3, #0
100047be:	60a3      	str	r3, [r4, #8]
}
100047c0:	bd10      	pop	{r4, pc}

100047c2 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
100047c2:	3818      	subs	r0, #24
{
100047c4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
100047c6:	0004      	movs	r4, r0
100047c8:	f3ef 8510 	mrs	r5, PRIMASK
100047cc:	b672      	cpsid	i
		if (!killed) {
100047ce:	2328      	movs	r3, #40	; 0x28
100047d0:	7b42      	ldrb	r2, [r0, #13]
100047d2:	421a      	tst	r2, r3
100047d4:	d10b      	bne.n	100047ee <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
100047d6:	6883      	ldr	r3, [r0, #8]
100047d8:	2b00      	cmp	r3, #0
100047da:	d001      	beq.n	100047e0 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
100047dc:	f7ff ffe6 	bl	100047ac <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
100047e0:	2214      	movs	r2, #20
100047e2:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
100047e4:	0020      	movs	r0, r4
100047e6:	4393      	bics	r3, r2
100047e8:	7363      	strb	r3, [r4, #13]
100047ea:	f7ff f8a1 	bl	10003930 <ready_thread>
	if (key != 0U) {
100047ee:	2d00      	cmp	r5, #0
100047f0:	d102      	bne.n	100047f8 <z_thread_timeout+0x36>
	__asm__ volatile(
100047f2:	b662      	cpsie	i
100047f4:	f3bf 8f6f 	isb	sy
}
100047f8:	bd70      	pop	{r4, r5, r6, pc}

100047fa <z_ready_thread>:
{
100047fa:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100047fc:	f3ef 8410 	mrs	r4, PRIMASK
10004800:	b672      	cpsid	i
			ready_thread(thread);
10004802:	f7ff f895 	bl	10003930 <ready_thread>
	if (key != 0U) {
10004806:	2c00      	cmp	r4, #0
10004808:	d102      	bne.n	10004810 <z_ready_thread+0x16>
	__asm__ volatile(
1000480a:	b662      	cpsie	i
1000480c:	f3bf 8f6f 	isb	sy
}
10004810:	bd10      	pop	{r4, pc}

10004812 <z_reschedule_irqlock>:
{
10004812:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10004814:	2800      	cmp	r0, #0
10004816:	d105      	bne.n	10004824 <z_reschedule_irqlock+0x12>
10004818:	f3ef 8005 	mrs	r0, IPSR
1000481c:	2800      	cmp	r0, #0
1000481e:	d102      	bne.n	10004826 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10004820:	f7fe f844 	bl	100028ac <arch_swap>
}
10004824:	bd10      	pop	{r4, pc}
10004826:	b662      	cpsie	i
10004828:	f3bf 8f6f 	isb	sy
1000482c:	e7fa      	b.n	10004824 <z_reschedule_irqlock+0x12>

1000482e <z_reschedule_unlocked>:
{
1000482e:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004830:	f3ef 8010 	mrs	r0, PRIMASK
10004834:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10004836:	f7ff ffec 	bl	10004812 <z_reschedule_irqlock>
}
1000483a:	bd10      	pop	{r4, pc}

1000483c <z_abort_timeout>:
{
1000483c:	b510      	push	{r4, lr}
1000483e:	f3ef 8410 	mrs	r4, PRIMASK
10004842:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10004844:	6803      	ldr	r3, [r0, #0]
10004846:	2b00      	cmp	r3, #0
10004848:	d008      	beq.n	1000485c <z_abort_timeout+0x20>
			remove_timeout(to);
1000484a:	f7ff fafb 	bl	10003e44 <remove_timeout>
			ret = 0;
1000484e:	2000      	movs	r0, #0
	if (key != 0U) {
10004850:	2c00      	cmp	r4, #0
10004852:	d102      	bne.n	1000485a <z_abort_timeout+0x1e>
	__asm__ volatile(
10004854:	b662      	cpsie	i
10004856:	f3bf 8f6f 	isb	sy
}
1000485a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
1000485c:	2016      	movs	r0, #22
1000485e:	4240      	negs	r0, r0
10004860:	e7f6      	b.n	10004850 <z_abort_timeout+0x14>

10004862 <z_set_timeout_expiry>:
{
10004862:	b570      	push	{r4, r5, r6, lr}
10004864:	0004      	movs	r4, r0
10004866:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10004868:	f3ef 8610 	mrs	r6, PRIMASK
1000486c:	b672      	cpsid	i
		int next_to = next_timeout();
1000486e:	f7ff fabd 	bl	10003dec <next_timeout>
			      || (ticks <= next_to);
10004872:	2801      	cmp	r0, #1
10004874:	dd06      	ble.n	10004884 <z_set_timeout_expiry+0x22>
10004876:	42a0      	cmp	r0, r4
10004878:	db04      	blt.n	10004884 <z_set_timeout_expiry+0x22>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
1000487a:	dd00      	ble.n	1000487e <z_set_timeout_expiry+0x1c>
1000487c:	0020      	movs	r0, r4
1000487e:	0029      	movs	r1, r5
10004880:	f7fe fb8a 	bl	10002f98 <sys_clock_set_timeout>
	if (key != 0U) {
10004884:	2e00      	cmp	r6, #0
10004886:	d102      	bne.n	1000488e <z_set_timeout_expiry+0x2c>
	__asm__ volatile(
10004888:	b662      	cpsie	i
1000488a:	f3bf 8f6f 	isb	sy
}
1000488e:	bd70      	pop	{r4, r5, r6, pc}

10004890 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10004890:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10004892:	f7ff fbd3 	bl	1000403c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10004896:	bd10      	pop	{r4, pc}
