
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000ea0 100027cd 10003c61 10002789     ... .'..a<...'..
	...
1000012c:	10002655 00000000 00000000 100025f5     U&...........%..
1000013c:	10002c2d                                -,..

10000140 <_irq_vector_table>:
10000140:	100026c5 100026c5 100026c5 100026c5     .&...&...&...&..
10000150:	100026c5 100026c5 100026c5 100026c5     .&...&...&...&..
10000160:	100026c5 100026c5 100026c5 100026c5     .&...&...&...&..
10000170:	100026c5 100026c5 100026c5 100026c5     .&...&...&...&..
10000180:	100026c5 100026c5 100026c5 100026c5     .&...&...&...&..
10000190:	100026c5 100026c5 100026c5 100026c5     .&...&...&...&..
100001a0:	100026c5 100026c5                       .&...&..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__aeabi_cdrcmple>:
10000260:	4684      	mov	ip, r0
10000262:	0010      	movs	r0, r2
10000264:	4662      	mov	r2, ip
10000266:	468c      	mov	ip, r1
10000268:	0019      	movs	r1, r3
1000026a:	4663      	mov	r3, ip
1000026c:	e000      	b.n	10000270 <__aeabi_cdcmpeq>
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_cdcmpeq>:
10000270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10000272:	f000 fd57 	bl	10000d24 <__ledf2>
10000276:	2800      	cmp	r0, #0
10000278:	d401      	bmi.n	1000027e <__aeabi_cdcmpeq+0xe>
1000027a:	2100      	movs	r1, #0
1000027c:	42c8      	cmn	r0, r1
1000027e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10000280 <__aeabi_dcmpeq>:
10000280:	b510      	push	{r4, lr}
10000282:	f000 fc97 	bl	10000bb4 <__eqdf2>
10000286:	4240      	negs	r0, r0
10000288:	3001      	adds	r0, #1
1000028a:	bd10      	pop	{r4, pc}

1000028c <__aeabi_dcmplt>:
1000028c:	b510      	push	{r4, lr}
1000028e:	f000 fd49 	bl	10000d24 <__ledf2>
10000292:	2800      	cmp	r0, #0
10000294:	db01      	blt.n	1000029a <__aeabi_dcmplt+0xe>
10000296:	2000      	movs	r0, #0
10000298:	bd10      	pop	{r4, pc}
1000029a:	2001      	movs	r0, #1
1000029c:	bd10      	pop	{r4, pc}
1000029e:	46c0      	nop			; (mov r8, r8)

100002a0 <__aeabi_dcmple>:
100002a0:	b510      	push	{r4, lr}
100002a2:	f000 fd3f 	bl	10000d24 <__ledf2>
100002a6:	2800      	cmp	r0, #0
100002a8:	dd01      	ble.n	100002ae <__aeabi_dcmple+0xe>
100002aa:	2000      	movs	r0, #0
100002ac:	bd10      	pop	{r4, pc}
100002ae:	2001      	movs	r0, #1
100002b0:	bd10      	pop	{r4, pc}
100002b2:	46c0      	nop			; (mov r8, r8)

100002b4 <__aeabi_dcmpgt>:
100002b4:	b510      	push	{r4, lr}
100002b6:	f000 fcbf 	bl	10000c38 <__gedf2>
100002ba:	2800      	cmp	r0, #0
100002bc:	dc01      	bgt.n	100002c2 <__aeabi_dcmpgt+0xe>
100002be:	2000      	movs	r0, #0
100002c0:	bd10      	pop	{r4, pc}
100002c2:	2001      	movs	r0, #1
100002c4:	bd10      	pop	{r4, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__aeabi_dcmpge>:
100002c8:	b510      	push	{r4, lr}
100002ca:	f000 fcb5 	bl	10000c38 <__gedf2>
100002ce:	2800      	cmp	r0, #0
100002d0:	da01      	bge.n	100002d6 <__aeabi_dcmpge+0xe>
100002d2:	2000      	movs	r0, #0
100002d4:	bd10      	pop	{r4, pc}
100002d6:	2001      	movs	r0, #1
100002d8:	bd10      	pop	{r4, pc}
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__clzsi2>:
100002dc:	211c      	movs	r1, #28
100002de:	2301      	movs	r3, #1
100002e0:	041b      	lsls	r3, r3, #16
100002e2:	4298      	cmp	r0, r3
100002e4:	d301      	bcc.n	100002ea <__clzsi2+0xe>
100002e6:	0c00      	lsrs	r0, r0, #16
100002e8:	3910      	subs	r1, #16
100002ea:	0a1b      	lsrs	r3, r3, #8
100002ec:	4298      	cmp	r0, r3
100002ee:	d301      	bcc.n	100002f4 <__clzsi2+0x18>
100002f0:	0a00      	lsrs	r0, r0, #8
100002f2:	3908      	subs	r1, #8
100002f4:	091b      	lsrs	r3, r3, #4
100002f6:	4298      	cmp	r0, r3
100002f8:	d301      	bcc.n	100002fe <__clzsi2+0x22>
100002fa:	0900      	lsrs	r0, r0, #4
100002fc:	3904      	subs	r1, #4
100002fe:	a202      	add	r2, pc, #8	; (adr r2, 10000308 <__clzsi2+0x2c>)
10000300:	5c10      	ldrb	r0, [r2, r0]
10000302:	1840      	adds	r0, r0, r1
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)
10000308:	02020304 	.word	0x02020304
1000030c:	01010101 	.word	0x01010101
	...

10000318 <__aeabi_uldivmod>:
10000318:	2b00      	cmp	r3, #0
1000031a:	d111      	bne.n	10000340 <__aeabi_uldivmod+0x28>
1000031c:	2a00      	cmp	r2, #0
1000031e:	d10f      	bne.n	10000340 <__aeabi_uldivmod+0x28>
10000320:	2900      	cmp	r1, #0
10000322:	d100      	bne.n	10000326 <__aeabi_uldivmod+0xe>
10000324:	2800      	cmp	r0, #0
10000326:	d002      	beq.n	1000032e <__aeabi_uldivmod+0x16>
10000328:	2100      	movs	r1, #0
1000032a:	43c9      	mvns	r1, r1
1000032c:	0008      	movs	r0, r1
1000032e:	b407      	push	{r0, r1, r2}
10000330:	4802      	ldr	r0, [pc, #8]	; (1000033c <__aeabi_uldivmod+0x24>)
10000332:	a102      	add	r1, pc, #8	; (adr r1, 1000033c <__aeabi_uldivmod+0x24>)
10000334:	1840      	adds	r0, r0, r1
10000336:	9002      	str	r0, [sp, #8]
10000338:	bd03      	pop	{r0, r1, pc}
1000033a:	46c0      	nop			; (mov r8, r8)
1000033c:	ffffff21 	.word	0xffffff21
10000340:	b403      	push	{r0, r1}
10000342:	4668      	mov	r0, sp
10000344:	b501      	push	{r0, lr}
10000346:	9802      	ldr	r0, [sp, #8]
10000348:	f001 fc24 	bl	10001b94 <__udivmoddi4>
1000034c:	9b01      	ldr	r3, [sp, #4]
1000034e:	469e      	mov	lr, r3
10000350:	b002      	add	sp, #8
10000352:	bc0c      	pop	{r2, r3}
10000354:	4770      	bx	lr
10000356:	46c0      	nop			; (mov r8, r8)

10000358 <__aeabi_f2ulz>:
10000358:	b5d0      	push	{r4, r6, r7, lr}
1000035a:	f001 fab9 	bl	100018d0 <__aeabi_f2d>
1000035e:	2200      	movs	r2, #0
10000360:	4b0b      	ldr	r3, [pc, #44]	; (10000390 <__aeabi_f2ulz+0x38>)
10000362:	0006      	movs	r6, r0
10000364:	000f      	movs	r7, r1
10000366:	f000 fd55 	bl	10000e14 <__aeabi_dmul>
1000036a:	f001 fba3 	bl	10001ab4 <__aeabi_d2uiz>
1000036e:	0004      	movs	r4, r0
10000370:	f001 fa8e 	bl	10001890 <__aeabi_ui2d>
10000374:	2200      	movs	r2, #0
10000376:	4b07      	ldr	r3, [pc, #28]	; (10000394 <__aeabi_f2ulz+0x3c>)
10000378:	f000 fd4c 	bl	10000e14 <__aeabi_dmul>
1000037c:	0002      	movs	r2, r0
1000037e:	000b      	movs	r3, r1
10000380:	0030      	movs	r0, r6
10000382:	0039      	movs	r1, r7
10000384:	f000 ff70 	bl	10001268 <__aeabi_dsub>
10000388:	f001 fb94 	bl	10001ab4 <__aeabi_d2uiz>
1000038c:	0021      	movs	r1, r4
1000038e:	bdd0      	pop	{r4, r6, r7, pc}
10000390:	3df00000 	.word	0x3df00000
10000394:	41f00000 	.word	0x41f00000

10000398 <__aeabi_fdiv>:
10000398:	b5f0      	push	{r4, r5, r6, r7, lr}
1000039a:	0fc3      	lsrs	r3, r0, #31
1000039c:	b085      	sub	sp, #20
1000039e:	0244      	lsls	r4, r0, #9
100003a0:	0045      	lsls	r5, r0, #1
100003a2:	1c0f      	adds	r7, r1, #0
100003a4:	0a64      	lsrs	r4, r4, #9
100003a6:	0e2d      	lsrs	r5, r5, #24
100003a8:	9303      	str	r3, [sp, #12]
100003aa:	9302      	str	r3, [sp, #8]
100003ac:	d00a      	beq.n	100003c4 <__aeabi_fdiv+0x2c>
100003ae:	2dff      	cmp	r5, #255	; 0xff
100003b0:	d03b      	beq.n	1000042a <__aeabi_fdiv+0x92>
100003b2:	2380      	movs	r3, #128	; 0x80
100003b4:	00e4      	lsls	r4, r4, #3
100003b6:	04db      	lsls	r3, r3, #19
100003b8:	431c      	orrs	r4, r3
100003ba:	2300      	movs	r3, #0
100003bc:	3d7f      	subs	r5, #127	; 0x7f
100003be:	9501      	str	r5, [sp, #4]
100003c0:	9300      	str	r3, [sp, #0]
100003c2:	e00e      	b.n	100003e2 <__aeabi_fdiv+0x4a>
100003c4:	2301      	movs	r3, #1
100003c6:	9401      	str	r4, [sp, #4]
100003c8:	9300      	str	r3, [sp, #0]
100003ca:	2c00      	cmp	r4, #0
100003cc:	d009      	beq.n	100003e2 <__aeabi_fdiv+0x4a>
100003ce:	0020      	movs	r0, r4
100003d0:	f7ff ff84 	bl	100002dc <__clzsi2>
100003d4:	1f43      	subs	r3, r0, #5
100003d6:	409c      	lsls	r4, r3
100003d8:	2376      	movs	r3, #118	; 0x76
100003da:	425b      	negs	r3, r3
100003dc:	1a1b      	subs	r3, r3, r0
100003de:	9301      	str	r3, [sp, #4]
100003e0:	9500      	str	r5, [sp, #0]
100003e2:	027d      	lsls	r5, r7, #9
100003e4:	007e      	lsls	r6, r7, #1
100003e6:	0a6d      	lsrs	r5, r5, #9
100003e8:	0e36      	lsrs	r6, r6, #24
100003ea:	0fff      	lsrs	r7, r7, #31
100003ec:	2e00      	cmp	r6, #0
100003ee:	d023      	beq.n	10000438 <__aeabi_fdiv+0xa0>
100003f0:	2eff      	cmp	r6, #255	; 0xff
100003f2:	d02e      	beq.n	10000452 <__aeabi_fdiv+0xba>
100003f4:	2380      	movs	r3, #128	; 0x80
100003f6:	00ed      	lsls	r5, r5, #3
100003f8:	04db      	lsls	r3, r3, #19
100003fa:	431d      	orrs	r5, r3
100003fc:	0033      	movs	r3, r6
100003fe:	3b7f      	subs	r3, #127	; 0x7f
10000400:	2200      	movs	r2, #0
10000402:	9801      	ldr	r0, [sp, #4]
10000404:	9903      	ldr	r1, [sp, #12]
10000406:	1ac3      	subs	r3, r0, r3
10000408:	9800      	ldr	r0, [sp, #0]
1000040a:	4079      	eors	r1, r7
1000040c:	0080      	lsls	r0, r0, #2
1000040e:	4310      	orrs	r0, r2
10000410:	3801      	subs	r0, #1
10000412:	280e      	cmp	r0, #14
10000414:	d823      	bhi.n	1000045e <__aeabi_fdiv+0xc6>
10000416:	f7ff fec7 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000041a:	994d      	.short	0x994d
1000041c:	99929973 	.word	0x99929973
10000420:	924d4d73 	.word	0x924d4d73
10000424:	61616173 	.word	0x61616173
10000428:	53          	.byte	0x53
10000429:	00          	.byte	0x00
1000042a:	2302      	movs	r3, #2
1000042c:	9501      	str	r5, [sp, #4]
1000042e:	9300      	str	r3, [sp, #0]
10000430:	2c00      	cmp	r4, #0
10000432:	d0d6      	beq.n	100003e2 <__aeabi_fdiv+0x4a>
10000434:	3301      	adds	r3, #1
10000436:	e7c3      	b.n	100003c0 <__aeabi_fdiv+0x28>
10000438:	002b      	movs	r3, r5
1000043a:	2201      	movs	r2, #1
1000043c:	2d00      	cmp	r5, #0
1000043e:	d0e0      	beq.n	10000402 <__aeabi_fdiv+0x6a>
10000440:	0028      	movs	r0, r5
10000442:	f7ff ff4b 	bl	100002dc <__clzsi2>
10000446:	1f43      	subs	r3, r0, #5
10000448:	409d      	lsls	r5, r3
1000044a:	2376      	movs	r3, #118	; 0x76
1000044c:	425b      	negs	r3, r3
1000044e:	1a1b      	subs	r3, r3, r0
10000450:	e7d6      	b.n	10000400 <__aeabi_fdiv+0x68>
10000452:	0033      	movs	r3, r6
10000454:	2202      	movs	r2, #2
10000456:	2d00      	cmp	r5, #0
10000458:	d0d3      	beq.n	10000402 <__aeabi_fdiv+0x6a>
1000045a:	3201      	adds	r2, #1
1000045c:	e7d1      	b.n	10000402 <__aeabi_fdiv+0x6a>
1000045e:	0164      	lsls	r4, r4, #5
10000460:	016d      	lsls	r5, r5, #5
10000462:	42ac      	cmp	r4, r5
10000464:	d328      	bcc.n	100004b8 <__aeabi_fdiv+0x120>
10000466:	201a      	movs	r0, #26
10000468:	2201      	movs	r2, #1
1000046a:	1b64      	subs	r4, r4, r5
1000046c:	2601      	movs	r6, #1
1000046e:	0027      	movs	r7, r4
10000470:	0052      	lsls	r2, r2, #1
10000472:	0064      	lsls	r4, r4, #1
10000474:	2f00      	cmp	r7, #0
10000476:	db01      	blt.n	1000047c <__aeabi_fdiv+0xe4>
10000478:	42a5      	cmp	r5, r4
1000047a:	d801      	bhi.n	10000480 <__aeabi_fdiv+0xe8>
1000047c:	1b64      	subs	r4, r4, r5
1000047e:	4332      	orrs	r2, r6
10000480:	3801      	subs	r0, #1
10000482:	2800      	cmp	r0, #0
10000484:	d1f3      	bne.n	1000046e <__aeabi_fdiv+0xd6>
10000486:	1e60      	subs	r0, r4, #1
10000488:	4184      	sbcs	r4, r0
1000048a:	4314      	orrs	r4, r2
1000048c:	0018      	movs	r0, r3
1000048e:	307f      	adds	r0, #127	; 0x7f
10000490:	2800      	cmp	r0, #0
10000492:	dd38      	ble.n	10000506 <__aeabi_fdiv+0x16e>
10000494:	0762      	lsls	r2, r4, #29
10000496:	d004      	beq.n	100004a2 <__aeabi_fdiv+0x10a>
10000498:	220f      	movs	r2, #15
1000049a:	4022      	ands	r2, r4
1000049c:	2a04      	cmp	r2, #4
1000049e:	d000      	beq.n	100004a2 <__aeabi_fdiv+0x10a>
100004a0:	3404      	adds	r4, #4
100004a2:	0122      	lsls	r2, r4, #4
100004a4:	d503      	bpl.n	100004ae <__aeabi_fdiv+0x116>
100004a6:	3380      	adds	r3, #128	; 0x80
100004a8:	0018      	movs	r0, r3
100004aa:	4a2b      	ldr	r2, [pc, #172]	; (10000558 <__aeabi_fdiv+0x1c0>)
100004ac:	4014      	ands	r4, r2
100004ae:	08e5      	lsrs	r5, r4, #3
100004b0:	28fe      	cmp	r0, #254	; 0xfe
100004b2:	dd1d      	ble.n	100004f0 <__aeabi_fdiv+0x158>
100004b4:	2500      	movs	r5, #0
100004b6:	e00f      	b.n	100004d8 <__aeabi_fdiv+0x140>
100004b8:	201b      	movs	r0, #27
100004ba:	2200      	movs	r2, #0
100004bc:	3b01      	subs	r3, #1
100004be:	e7d5      	b.n	1000046c <__aeabi_fdiv+0xd4>
100004c0:	2380      	movs	r3, #128	; 0x80
100004c2:	03db      	lsls	r3, r3, #15
100004c4:	421c      	tst	r4, r3
100004c6:	d003      	beq.n	100004d0 <__aeabi_fdiv+0x138>
100004c8:	421d      	tst	r5, r3
100004ca:	d101      	bne.n	100004d0 <__aeabi_fdiv+0x138>
100004cc:	002c      	movs	r4, r5
100004ce:	9702      	str	r7, [sp, #8]
100004d0:	2580      	movs	r5, #128	; 0x80
100004d2:	9902      	ldr	r1, [sp, #8]
100004d4:	03ed      	lsls	r5, r5, #15
100004d6:	4325      	orrs	r5, r4
100004d8:	20ff      	movs	r0, #255	; 0xff
100004da:	e009      	b.n	100004f0 <__aeabi_fdiv+0x158>
100004dc:	9903      	ldr	r1, [sp, #12]
100004de:	9a00      	ldr	r2, [sp, #0]
100004e0:	2a02      	cmp	r2, #2
100004e2:	d0e7      	beq.n	100004b4 <__aeabi_fdiv+0x11c>
100004e4:	2a03      	cmp	r2, #3
100004e6:	d02f      	beq.n	10000548 <__aeabi_fdiv+0x1b0>
100004e8:	2500      	movs	r5, #0
100004ea:	0028      	movs	r0, r5
100004ec:	2a01      	cmp	r2, #1
100004ee:	d1cd      	bne.n	1000048c <__aeabi_fdiv+0xf4>
100004f0:	026d      	lsls	r5, r5, #9
100004f2:	0a6d      	lsrs	r5, r5, #9
100004f4:	05c0      	lsls	r0, r0, #23
100004f6:	4328      	orrs	r0, r5
100004f8:	07c9      	lsls	r1, r1, #31
100004fa:	4308      	orrs	r0, r1
100004fc:	b005      	add	sp, #20
100004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000500:	002c      	movs	r4, r5
10000502:	0039      	movs	r1, r7
10000504:	e7ec      	b.n	100004e0 <__aeabi_fdiv+0x148>
10000506:	2201      	movs	r2, #1
10000508:	2500      	movs	r5, #0
1000050a:	1a12      	subs	r2, r2, r0
1000050c:	0028      	movs	r0, r5
1000050e:	2a1b      	cmp	r2, #27
10000510:	dcee      	bgt.n	100004f0 <__aeabi_fdiv+0x158>
10000512:	339e      	adds	r3, #158	; 0x9e
10000514:	0025      	movs	r5, r4
10000516:	409c      	lsls	r4, r3
10000518:	40d5      	lsrs	r5, r2
1000051a:	1e63      	subs	r3, r4, #1
1000051c:	419c      	sbcs	r4, r3
1000051e:	4325      	orrs	r5, r4
10000520:	076b      	lsls	r3, r5, #29
10000522:	d004      	beq.n	1000052e <__aeabi_fdiv+0x196>
10000524:	230f      	movs	r3, #15
10000526:	402b      	ands	r3, r5
10000528:	2b04      	cmp	r3, #4
1000052a:	d000      	beq.n	1000052e <__aeabi_fdiv+0x196>
1000052c:	3504      	adds	r5, #4
1000052e:	2380      	movs	r3, #128	; 0x80
10000530:	0028      	movs	r0, r5
10000532:	04db      	lsls	r3, r3, #19
10000534:	4018      	ands	r0, r3
10000536:	421d      	tst	r5, r3
10000538:	d10b      	bne.n	10000552 <__aeabi_fdiv+0x1ba>
1000053a:	08ed      	lsrs	r5, r5, #3
1000053c:	e7d8      	b.n	100004f0 <__aeabi_fdiv+0x158>
1000053e:	2480      	movs	r4, #128	; 0x80
10000540:	2300      	movs	r3, #0
10000542:	03e4      	lsls	r4, r4, #15
10000544:	9302      	str	r3, [sp, #8]
10000546:	e7c3      	b.n	100004d0 <__aeabi_fdiv+0x138>
10000548:	9102      	str	r1, [sp, #8]
1000054a:	e7c1      	b.n	100004d0 <__aeabi_fdiv+0x138>
1000054c:	2500      	movs	r5, #0
1000054e:	0028      	movs	r0, r5
10000550:	e7ce      	b.n	100004f0 <__aeabi_fdiv+0x158>
10000552:	2500      	movs	r5, #0
10000554:	2001      	movs	r0, #1
10000556:	e7cb      	b.n	100004f0 <__aeabi_fdiv+0x158>
10000558:	f7ffffff 	.word	0xf7ffffff

1000055c <__aeabi_ui2f>:
1000055c:	2300      	movs	r3, #0
1000055e:	b570      	push	{r4, r5, r6, lr}
10000560:	0004      	movs	r4, r0
10000562:	4298      	cmp	r0, r3
10000564:	d009      	beq.n	1000057a <__aeabi_ui2f+0x1e>
10000566:	f7ff feb9 	bl	100002dc <__clzsi2>
1000056a:	239e      	movs	r3, #158	; 0x9e
1000056c:	1a1b      	subs	r3, r3, r0
1000056e:	2b96      	cmp	r3, #150	; 0x96
10000570:	dc08      	bgt.n	10000584 <__aeabi_ui2f+0x28>
10000572:	2808      	cmp	r0, #8
10000574:	d029      	beq.n	100005ca <__aeabi_ui2f+0x6e>
10000576:	3808      	subs	r0, #8
10000578:	4084      	lsls	r4, r0
1000057a:	0264      	lsls	r4, r4, #9
1000057c:	05d8      	lsls	r0, r3, #23
1000057e:	0a64      	lsrs	r4, r4, #9
10000580:	4320      	orrs	r0, r4
10000582:	bd70      	pop	{r4, r5, r6, pc}
10000584:	2b99      	cmp	r3, #153	; 0x99
10000586:	dd1b      	ble.n	100005c0 <__aeabi_ui2f+0x64>
10000588:	0002      	movs	r2, r0
1000058a:	0021      	movs	r1, r4
1000058c:	321b      	adds	r2, #27
1000058e:	4091      	lsls	r1, r2
10000590:	000a      	movs	r2, r1
10000592:	1e51      	subs	r1, r2, #1
10000594:	418a      	sbcs	r2, r1
10000596:	2105      	movs	r1, #5
10000598:	1a09      	subs	r1, r1, r0
1000059a:	40cc      	lsrs	r4, r1
1000059c:	4314      	orrs	r4, r2
1000059e:	0022      	movs	r2, r4
100005a0:	4d0b      	ldr	r5, [pc, #44]	; (100005d0 <__aeabi_ui2f+0x74>)
100005a2:	402a      	ands	r2, r5
100005a4:	0761      	lsls	r1, r4, #29
100005a6:	d004      	beq.n	100005b2 <__aeabi_ui2f+0x56>
100005a8:	210f      	movs	r1, #15
100005aa:	4021      	ands	r1, r4
100005ac:	2904      	cmp	r1, #4
100005ae:	d000      	beq.n	100005b2 <__aeabi_ui2f+0x56>
100005b0:	3204      	adds	r2, #4
100005b2:	0151      	lsls	r1, r2, #5
100005b4:	d502      	bpl.n	100005bc <__aeabi_ui2f+0x60>
100005b6:	239f      	movs	r3, #159	; 0x9f
100005b8:	402a      	ands	r2, r5
100005ba:	1a1b      	subs	r3, r3, r0
100005bc:	08d4      	lsrs	r4, r2, #3
100005be:	e7dc      	b.n	1000057a <__aeabi_ui2f+0x1e>
100005c0:	1f42      	subs	r2, r0, #5
100005c2:	2805      	cmp	r0, #5
100005c4:	d0eb      	beq.n	1000059e <__aeabi_ui2f+0x42>
100005c6:	4094      	lsls	r4, r2
100005c8:	e7e9      	b.n	1000059e <__aeabi_ui2f+0x42>
100005ca:	2396      	movs	r3, #150	; 0x96
100005cc:	e7d5      	b.n	1000057a <__aeabi_ui2f+0x1e>
100005ce:	46c0      	nop			; (mov r8, r8)
100005d0:	fbffffff 	.word	0xfbffffff

100005d4 <__aeabi_dadd>:
100005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100005d6:	b087      	sub	sp, #28
100005d8:	9204      	str	r2, [sp, #16]
100005da:	9305      	str	r3, [sp, #20]
100005dc:	0fcb      	lsrs	r3, r1, #31
100005de:	9301      	str	r3, [sp, #4]
100005e0:	9b05      	ldr	r3, [sp, #20]
100005e2:	030d      	lsls	r5, r1, #12
100005e4:	004c      	lsls	r4, r1, #1
100005e6:	0a6d      	lsrs	r5, r5, #9
100005e8:	0f41      	lsrs	r1, r0, #29
100005ea:	005f      	lsls	r7, r3, #1
100005ec:	4329      	orrs	r1, r5
100005ee:	031d      	lsls	r5, r3, #12
100005f0:	0d7b      	lsrs	r3, r7, #21
100005f2:	9302      	str	r3, [sp, #8]
100005f4:	9b05      	ldr	r3, [sp, #20]
100005f6:	0a6d      	lsrs	r5, r5, #9
100005f8:	0fdb      	lsrs	r3, r3, #31
100005fa:	9303      	str	r3, [sp, #12]
100005fc:	9b04      	ldr	r3, [sp, #16]
100005fe:	9a04      	ldr	r2, [sp, #16]
10000600:	0f5b      	lsrs	r3, r3, #29
10000602:	432b      	orrs	r3, r5
10000604:	9e01      	ldr	r6, [sp, #4]
10000606:	9d02      	ldr	r5, [sp, #8]
10000608:	9f03      	ldr	r7, [sp, #12]
1000060a:	0d64      	lsrs	r4, r4, #21
1000060c:	00c0      	lsls	r0, r0, #3
1000060e:	00d2      	lsls	r2, r2, #3
10000610:	1b65      	subs	r5, r4, r5
10000612:	42be      	cmp	r6, r7
10000614:	d000      	beq.n	10000618 <__aeabi_dadd+0x44>
10000616:	e12c      	b.n	10000872 <__aeabi_dadd+0x29e>
10000618:	4ebb      	ldr	r6, [pc, #748]	; (10000908 <__aeabi_dadd+0x334>)
1000061a:	46b4      	mov	ip, r6
1000061c:	2d00      	cmp	r5, #0
1000061e:	dc00      	bgt.n	10000622 <__aeabi_dadd+0x4e>
10000620:	e070      	b.n	10000704 <__aeabi_dadd+0x130>
10000622:	9e02      	ldr	r6, [sp, #8]
10000624:	2e00      	cmp	r6, #0
10000626:	d11e      	bne.n	10000666 <__aeabi_dadd+0x92>
10000628:	001e      	movs	r6, r3
1000062a:	4316      	orrs	r6, r2
1000062c:	d100      	bne.n	10000630 <__aeabi_dadd+0x5c>
1000062e:	e29b      	b.n	10000b68 <__aeabi_dadd+0x594>
10000630:	1e6e      	subs	r6, r5, #1
10000632:	2d01      	cmp	r5, #1
10000634:	d113      	bne.n	1000065e <__aeabi_dadd+0x8a>
10000636:	1882      	adds	r2, r0, r2
10000638:	4282      	cmp	r2, r0
1000063a:	4180      	sbcs	r0, r0
1000063c:	18c9      	adds	r1, r1, r3
1000063e:	4240      	negs	r0, r0
10000640:	1809      	adds	r1, r1, r0
10000642:	2401      	movs	r4, #1
10000644:	0010      	movs	r0, r2
10000646:	020b      	lsls	r3, r1, #8
10000648:	d400      	bmi.n	1000064c <__aeabi_dadd+0x78>
1000064a:	e072      	b.n	10000732 <__aeabi_dadd+0x15e>
1000064c:	2402      	movs	r4, #2
1000064e:	4baf      	ldr	r3, [pc, #700]	; (1000090c <__aeabi_dadd+0x338>)
10000650:	0842      	lsrs	r2, r0, #1
10000652:	400b      	ands	r3, r1
10000654:	2101      	movs	r1, #1
10000656:	4001      	ands	r1, r0
10000658:	430a      	orrs	r2, r1
1000065a:	07d8      	lsls	r0, r3, #31
1000065c:	e106      	b.n	1000086c <__aeabi_dadd+0x298>
1000065e:	4565      	cmp	r5, ip
10000660:	d11c      	bne.n	1000069c <__aeabi_dadd+0xc8>
10000662:	4ca9      	ldr	r4, [pc, #676]	; (10000908 <__aeabi_dadd+0x334>)
10000664:	e065      	b.n	10000732 <__aeabi_dadd+0x15e>
10000666:	4564      	cmp	r4, ip
10000668:	d063      	beq.n	10000732 <__aeabi_dadd+0x15e>
1000066a:	2d38      	cmp	r5, #56	; 0x38
1000066c:	dc47      	bgt.n	100006fe <__aeabi_dadd+0x12a>
1000066e:	2680      	movs	r6, #128	; 0x80
10000670:	0436      	lsls	r6, r6, #16
10000672:	4333      	orrs	r3, r6
10000674:	002e      	movs	r6, r5
10000676:	2e1f      	cmp	r6, #31
10000678:	dc2f      	bgt.n	100006da <__aeabi_dadd+0x106>
1000067a:	2520      	movs	r5, #32
1000067c:	001f      	movs	r7, r3
1000067e:	1bad      	subs	r5, r5, r6
10000680:	40af      	lsls	r7, r5
10000682:	9502      	str	r5, [sp, #8]
10000684:	003d      	movs	r5, r7
10000686:	0017      	movs	r7, r2
10000688:	40f7      	lsrs	r7, r6
1000068a:	432f      	orrs	r7, r5
1000068c:	9d02      	ldr	r5, [sp, #8]
1000068e:	40f3      	lsrs	r3, r6
10000690:	40aa      	lsls	r2, r5
10000692:	1e55      	subs	r5, r2, #1
10000694:	41aa      	sbcs	r2, r5
10000696:	001d      	movs	r5, r3
10000698:	4317      	orrs	r7, r2
1000069a:	e003      	b.n	100006a4 <__aeabi_dadd+0xd0>
1000069c:	2701      	movs	r7, #1
1000069e:	9d02      	ldr	r5, [sp, #8]
100006a0:	2e38      	cmp	r6, #56	; 0x38
100006a2:	dde8      	ble.n	10000676 <__aeabi_dadd+0xa2>
100006a4:	183f      	adds	r7, r7, r0
100006a6:	4287      	cmp	r7, r0
100006a8:	4180      	sbcs	r0, r0
100006aa:	1869      	adds	r1, r5, r1
100006ac:	4240      	negs	r0, r0
100006ae:	1809      	adds	r1, r1, r0
100006b0:	0038      	movs	r0, r7
100006b2:	020b      	lsls	r3, r1, #8
100006b4:	d53d      	bpl.n	10000732 <__aeabi_dadd+0x15e>
100006b6:	2500      	movs	r5, #0
100006b8:	3401      	adds	r4, #1
100006ba:	002f      	movs	r7, r5
100006bc:	4564      	cmp	r4, ip
100006be:	d1c6      	bne.n	1000064e <__aeabi_dadd+0x7a>
100006c0:	4b93      	ldr	r3, [pc, #588]	; (10000910 <__aeabi_dadd+0x33c>)
100006c2:	0524      	lsls	r4, r4, #20
100006c4:	401c      	ands	r4, r3
100006c6:	033b      	lsls	r3, r7, #12
100006c8:	0b1b      	lsrs	r3, r3, #12
100006ca:	431c      	orrs	r4, r3
100006cc:	9b01      	ldr	r3, [sp, #4]
100006ce:	0028      	movs	r0, r5
100006d0:	07db      	lsls	r3, r3, #31
100006d2:	431c      	orrs	r4, r3
100006d4:	0021      	movs	r1, r4
100006d6:	b007      	add	sp, #28
100006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100006da:	0035      	movs	r5, r6
100006dc:	001f      	movs	r7, r3
100006de:	3d20      	subs	r5, #32
100006e0:	40ef      	lsrs	r7, r5
100006e2:	003d      	movs	r5, r7
100006e4:	2700      	movs	r7, #0
100006e6:	2e20      	cmp	r6, #32
100006e8:	d003      	beq.n	100006f2 <__aeabi_dadd+0x11e>
100006ea:	3740      	adds	r7, #64	; 0x40
100006ec:	1bbf      	subs	r7, r7, r6
100006ee:	40bb      	lsls	r3, r7
100006f0:	001f      	movs	r7, r3
100006f2:	4317      	orrs	r7, r2
100006f4:	1e7b      	subs	r3, r7, #1
100006f6:	419f      	sbcs	r7, r3
100006f8:	432f      	orrs	r7, r5
100006fa:	2500      	movs	r5, #0
100006fc:	e7d2      	b.n	100006a4 <__aeabi_dadd+0xd0>
100006fe:	2500      	movs	r5, #0
10000700:	2701      	movs	r7, #1
10000702:	e7cf      	b.n	100006a4 <__aeabi_dadd+0xd0>
10000704:	2d00      	cmp	r5, #0
10000706:	d06f      	beq.n	100007e8 <__aeabi_dadd+0x214>
10000708:	9d02      	ldr	r5, [sp, #8]
1000070a:	1b2e      	subs	r6, r5, r4
1000070c:	2c00      	cmp	r4, #0
1000070e:	d130      	bne.n	10000772 <__aeabi_dadd+0x19e>
10000710:	000d      	movs	r5, r1
10000712:	4305      	orrs	r5, r0
10000714:	d100      	bne.n	10000718 <__aeabi_dadd+0x144>
10000716:	e221      	b.n	10000b5c <__aeabi_dadd+0x588>
10000718:	1e75      	subs	r5, r6, #1
1000071a:	2e01      	cmp	r6, #1
1000071c:	d124      	bne.n	10000768 <__aeabi_dadd+0x194>
1000071e:	1880      	adds	r0, r0, r2
10000720:	4290      	cmp	r0, r2
10000722:	4192      	sbcs	r2, r2
10000724:	18c9      	adds	r1, r1, r3
10000726:	4252      	negs	r2, r2
10000728:	1889      	adds	r1, r1, r2
1000072a:	3401      	adds	r4, #1
1000072c:	020b      	lsls	r3, r1, #8
1000072e:	d500      	bpl.n	10000732 <__aeabi_dadd+0x15e>
10000730:	e78c      	b.n	1000064c <__aeabi_dadd+0x78>
10000732:	0743      	lsls	r3, r0, #29
10000734:	d009      	beq.n	1000074a <__aeabi_dadd+0x176>
10000736:	230f      	movs	r3, #15
10000738:	4003      	ands	r3, r0
1000073a:	2b04      	cmp	r3, #4
1000073c:	d005      	beq.n	1000074a <__aeabi_dadd+0x176>
1000073e:	1d03      	adds	r3, r0, #4
10000740:	4283      	cmp	r3, r0
10000742:	4180      	sbcs	r0, r0
10000744:	4240      	negs	r0, r0
10000746:	1809      	adds	r1, r1, r0
10000748:	0018      	movs	r0, r3
1000074a:	4b6f      	ldr	r3, [pc, #444]	; (10000908 <__aeabi_dadd+0x334>)
1000074c:	020a      	lsls	r2, r1, #8
1000074e:	d400      	bmi.n	10000752 <__aeabi_dadd+0x17e>
10000750:	e210      	b.n	10000b74 <__aeabi_dadd+0x5a0>
10000752:	2500      	movs	r5, #0
10000754:	3401      	adds	r4, #1
10000756:	002f      	movs	r7, r5
10000758:	429c      	cmp	r4, r3
1000075a:	d0b1      	beq.n	100006c0 <__aeabi_dadd+0xec>
1000075c:	4b6b      	ldr	r3, [pc, #428]	; (1000090c <__aeabi_dadd+0x338>)
1000075e:	08c0      	lsrs	r0, r0, #3
10000760:	400b      	ands	r3, r1
10000762:	075d      	lsls	r5, r3, #29
10000764:	4305      	orrs	r5, r0
10000766:	e1f2      	b.n	10000b4e <__aeabi_dadd+0x57a>
10000768:	4566      	cmp	r6, ip
1000076a:	d11d      	bne.n	100007a8 <__aeabi_dadd+0x1d4>
1000076c:	0019      	movs	r1, r3
1000076e:	0010      	movs	r0, r2
10000770:	e777      	b.n	10000662 <__aeabi_dadd+0x8e>
10000772:	9c02      	ldr	r4, [sp, #8]
10000774:	4564      	cmp	r4, ip
10000776:	d0f9      	beq.n	1000076c <__aeabi_dadd+0x198>
10000778:	2e38      	cmp	r6, #56	; 0x38
1000077a:	dc32      	bgt.n	100007e2 <__aeabi_dadd+0x20e>
1000077c:	2480      	movs	r4, #128	; 0x80
1000077e:	0035      	movs	r5, r6
10000780:	0424      	lsls	r4, r4, #16
10000782:	4321      	orrs	r1, r4
10000784:	2d1f      	cmp	r5, #31
10000786:	dc1a      	bgt.n	100007be <__aeabi_dadd+0x1ea>
10000788:	2420      	movs	r4, #32
1000078a:	000e      	movs	r6, r1
1000078c:	1b67      	subs	r7, r4, r5
1000078e:	40be      	lsls	r6, r7
10000790:	0034      	movs	r4, r6
10000792:	0006      	movs	r6, r0
10000794:	40b8      	lsls	r0, r7
10000796:	40ee      	lsrs	r6, r5
10000798:	4334      	orrs	r4, r6
1000079a:	0006      	movs	r6, r0
1000079c:	40e9      	lsrs	r1, r5
1000079e:	1e70      	subs	r0, r6, #1
100007a0:	4186      	sbcs	r6, r0
100007a2:	4326      	orrs	r6, r4
100007a4:	000c      	movs	r4, r1
100007a6:	e002      	b.n	100007ae <__aeabi_dadd+0x1da>
100007a8:	2601      	movs	r6, #1
100007aa:	2d38      	cmp	r5, #56	; 0x38
100007ac:	ddea      	ble.n	10000784 <__aeabi_dadd+0x1b0>
100007ae:	18b0      	adds	r0, r6, r2
100007b0:	4290      	cmp	r0, r2
100007b2:	4192      	sbcs	r2, r2
100007b4:	18e4      	adds	r4, r4, r3
100007b6:	4252      	negs	r2, r2
100007b8:	18a1      	adds	r1, r4, r2
100007ba:	9c02      	ldr	r4, [sp, #8]
100007bc:	e779      	b.n	100006b2 <__aeabi_dadd+0xde>
100007be:	002c      	movs	r4, r5
100007c0:	000e      	movs	r6, r1
100007c2:	3c20      	subs	r4, #32
100007c4:	40e6      	lsrs	r6, r4
100007c6:	0034      	movs	r4, r6
100007c8:	2600      	movs	r6, #0
100007ca:	2d20      	cmp	r5, #32
100007cc:	d003      	beq.n	100007d6 <__aeabi_dadd+0x202>
100007ce:	3640      	adds	r6, #64	; 0x40
100007d0:	1b76      	subs	r6, r6, r5
100007d2:	40b1      	lsls	r1, r6
100007d4:	000e      	movs	r6, r1
100007d6:	4306      	orrs	r6, r0
100007d8:	1e71      	subs	r1, r6, #1
100007da:	418e      	sbcs	r6, r1
100007dc:	4326      	orrs	r6, r4
100007de:	2400      	movs	r4, #0
100007e0:	e7e5      	b.n	100007ae <__aeabi_dadd+0x1da>
100007e2:	2400      	movs	r4, #0
100007e4:	2601      	movs	r6, #1
100007e6:	e7e2      	b.n	100007ae <__aeabi_dadd+0x1da>
100007e8:	4f4a      	ldr	r7, [pc, #296]	; (10000914 <__aeabi_dadd+0x340>)
100007ea:	1c66      	adds	r6, r4, #1
100007ec:	423e      	tst	r6, r7
100007ee:	d130      	bne.n	10000852 <__aeabi_dadd+0x27e>
100007f0:	000d      	movs	r5, r1
100007f2:	4305      	orrs	r5, r0
100007f4:	2c00      	cmp	r4, #0
100007f6:	d112      	bne.n	1000081e <__aeabi_dadd+0x24a>
100007f8:	2d00      	cmp	r5, #0
100007fa:	d100      	bne.n	100007fe <__aeabi_dadd+0x22a>
100007fc:	e1b1      	b.n	10000b62 <__aeabi_dadd+0x58e>
100007fe:	001d      	movs	r5, r3
10000800:	4315      	orrs	r5, r2
10000802:	d096      	beq.n	10000732 <__aeabi_dadd+0x15e>
10000804:	1882      	adds	r2, r0, r2
10000806:	4282      	cmp	r2, r0
10000808:	4180      	sbcs	r0, r0
1000080a:	18c9      	adds	r1, r1, r3
1000080c:	4240      	negs	r0, r0
1000080e:	1809      	adds	r1, r1, r0
10000810:	0010      	movs	r0, r2
10000812:	020b      	lsls	r3, r1, #8
10000814:	d58d      	bpl.n	10000732 <__aeabi_dadd+0x15e>
10000816:	4b3d      	ldr	r3, [pc, #244]	; (1000090c <__aeabi_dadd+0x338>)
10000818:	4019      	ands	r1, r3
1000081a:	0034      	movs	r4, r6
1000081c:	e789      	b.n	10000732 <__aeabi_dadd+0x15e>
1000081e:	2d00      	cmp	r5, #0
10000820:	d0a4      	beq.n	1000076c <__aeabi_dadd+0x198>
10000822:	001d      	movs	r5, r3
10000824:	4664      	mov	r4, ip
10000826:	4315      	orrs	r5, r2
10000828:	d083      	beq.n	10000732 <__aeabi_dadd+0x15e>
1000082a:	2580      	movs	r5, #128	; 0x80
1000082c:	074c      	lsls	r4, r1, #29
1000082e:	08c0      	lsrs	r0, r0, #3
10000830:	08c9      	lsrs	r1, r1, #3
10000832:	032d      	lsls	r5, r5, #12
10000834:	4320      	orrs	r0, r4
10000836:	4229      	tst	r1, r5
10000838:	d006      	beq.n	10000848 <__aeabi_dadd+0x274>
1000083a:	08dc      	lsrs	r4, r3, #3
1000083c:	422c      	tst	r4, r5
1000083e:	d103      	bne.n	10000848 <__aeabi_dadd+0x274>
10000840:	0021      	movs	r1, r4
10000842:	08d0      	lsrs	r0, r2, #3
10000844:	075b      	lsls	r3, r3, #29
10000846:	4318      	orrs	r0, r3
10000848:	00cb      	lsls	r3, r1, #3
1000084a:	0f41      	lsrs	r1, r0, #29
1000084c:	4319      	orrs	r1, r3
1000084e:	00c0      	lsls	r0, r0, #3
10000850:	e707      	b.n	10000662 <__aeabi_dadd+0x8e>
10000852:	0034      	movs	r4, r6
10000854:	002f      	movs	r7, r5
10000856:	4566      	cmp	r6, ip
10000858:	d100      	bne.n	1000085c <__aeabi_dadd+0x288>
1000085a:	e731      	b.n	100006c0 <__aeabi_dadd+0xec>
1000085c:	1882      	adds	r2, r0, r2
1000085e:	4282      	cmp	r2, r0
10000860:	4180      	sbcs	r0, r0
10000862:	18cb      	adds	r3, r1, r3
10000864:	4240      	negs	r0, r0
10000866:	181b      	adds	r3, r3, r0
10000868:	07d8      	lsls	r0, r3, #31
1000086a:	0852      	lsrs	r2, r2, #1
1000086c:	4310      	orrs	r0, r2
1000086e:	0859      	lsrs	r1, r3, #1
10000870:	e75f      	b.n	10000732 <__aeabi_dadd+0x15e>
10000872:	2d00      	cmp	r5, #0
10000874:	dd65      	ble.n	10000942 <__aeabi_dadd+0x36e>
10000876:	9e02      	ldr	r6, [sp, #8]
10000878:	2e00      	cmp	r6, #0
1000087a:	d125      	bne.n	100008c8 <__aeabi_dadd+0x2f4>
1000087c:	001e      	movs	r6, r3
1000087e:	4316      	orrs	r6, r2
10000880:	d100      	bne.n	10000884 <__aeabi_dadd+0x2b0>
10000882:	e171      	b.n	10000b68 <__aeabi_dadd+0x594>
10000884:	1e6e      	subs	r6, r5, #1
10000886:	2d01      	cmp	r5, #1
10000888:	d10e      	bne.n	100008a8 <__aeabi_dadd+0x2d4>
1000088a:	1a82      	subs	r2, r0, r2
1000088c:	4290      	cmp	r0, r2
1000088e:	4180      	sbcs	r0, r0
10000890:	1ac9      	subs	r1, r1, r3
10000892:	4240      	negs	r0, r0
10000894:	1a09      	subs	r1, r1, r0
10000896:	2401      	movs	r4, #1
10000898:	0010      	movs	r0, r2
1000089a:	020b      	lsls	r3, r1, #8
1000089c:	d400      	bmi.n	100008a0 <__aeabi_dadd+0x2cc>
1000089e:	e748      	b.n	10000732 <__aeabi_dadd+0x15e>
100008a0:	0249      	lsls	r1, r1, #9
100008a2:	0006      	movs	r6, r0
100008a4:	0a4d      	lsrs	r5, r1, #9
100008a6:	e107      	b.n	10000ab8 <__aeabi_dadd+0x4e4>
100008a8:	4f17      	ldr	r7, [pc, #92]	; (10000908 <__aeabi_dadd+0x334>)
100008aa:	42bd      	cmp	r5, r7
100008ac:	d100      	bne.n	100008b0 <__aeabi_dadd+0x2dc>
100008ae:	e6d8      	b.n	10000662 <__aeabi_dadd+0x8e>
100008b0:	2501      	movs	r5, #1
100008b2:	9f02      	ldr	r7, [sp, #8]
100008b4:	2e38      	cmp	r6, #56	; 0x38
100008b6:	dd11      	ble.n	100008dc <__aeabi_dadd+0x308>
100008b8:	1b45      	subs	r5, r0, r5
100008ba:	42a8      	cmp	r0, r5
100008bc:	4180      	sbcs	r0, r0
100008be:	1bc9      	subs	r1, r1, r7
100008c0:	4240      	negs	r0, r0
100008c2:	1a09      	subs	r1, r1, r0
100008c4:	0028      	movs	r0, r5
100008c6:	e7e8      	b.n	1000089a <__aeabi_dadd+0x2c6>
100008c8:	4e0f      	ldr	r6, [pc, #60]	; (10000908 <__aeabi_dadd+0x334>)
100008ca:	42b4      	cmp	r4, r6
100008cc:	d100      	bne.n	100008d0 <__aeabi_dadd+0x2fc>
100008ce:	e730      	b.n	10000732 <__aeabi_dadd+0x15e>
100008d0:	2d38      	cmp	r5, #56	; 0x38
100008d2:	dc33      	bgt.n	1000093c <__aeabi_dadd+0x368>
100008d4:	2680      	movs	r6, #128	; 0x80
100008d6:	0436      	lsls	r6, r6, #16
100008d8:	4333      	orrs	r3, r6
100008da:	002e      	movs	r6, r5
100008dc:	2e1f      	cmp	r6, #31
100008de:	dc1b      	bgt.n	10000918 <__aeabi_dadd+0x344>
100008e0:	2720      	movs	r7, #32
100008e2:	1bbd      	subs	r5, r7, r6
100008e4:	9502      	str	r5, [sp, #8]
100008e6:	001d      	movs	r5, r3
100008e8:	9f02      	ldr	r7, [sp, #8]
100008ea:	40f3      	lsrs	r3, r6
100008ec:	40bd      	lsls	r5, r7
100008ee:	46ac      	mov	ip, r5
100008f0:	0015      	movs	r5, r2
100008f2:	4667      	mov	r7, ip
100008f4:	40f5      	lsrs	r5, r6
100008f6:	433d      	orrs	r5, r7
100008f8:	9f02      	ldr	r7, [sp, #8]
100008fa:	40ba      	lsls	r2, r7
100008fc:	1e57      	subs	r7, r2, #1
100008fe:	41ba      	sbcs	r2, r7
10000900:	001f      	movs	r7, r3
10000902:	4315      	orrs	r5, r2
10000904:	e7d8      	b.n	100008b8 <__aeabi_dadd+0x2e4>
10000906:	46c0      	nop			; (mov r8, r8)
10000908:	000007ff 	.word	0x000007ff
1000090c:	ff7fffff 	.word	0xff7fffff
10000910:	7ff00000 	.word	0x7ff00000
10000914:	000007fe 	.word	0x000007fe
10000918:	0035      	movs	r5, r6
1000091a:	001f      	movs	r7, r3
1000091c:	3d20      	subs	r5, #32
1000091e:	40ef      	lsrs	r7, r5
10000920:	003d      	movs	r5, r7
10000922:	2700      	movs	r7, #0
10000924:	2e20      	cmp	r6, #32
10000926:	d003      	beq.n	10000930 <__aeabi_dadd+0x35c>
10000928:	3740      	adds	r7, #64	; 0x40
1000092a:	1bbe      	subs	r6, r7, r6
1000092c:	40b3      	lsls	r3, r6
1000092e:	001f      	movs	r7, r3
10000930:	4317      	orrs	r7, r2
10000932:	1e7b      	subs	r3, r7, #1
10000934:	419f      	sbcs	r7, r3
10000936:	433d      	orrs	r5, r7
10000938:	2700      	movs	r7, #0
1000093a:	e7bd      	b.n	100008b8 <__aeabi_dadd+0x2e4>
1000093c:	2700      	movs	r7, #0
1000093e:	2501      	movs	r5, #1
10000940:	e7ba      	b.n	100008b8 <__aeabi_dadd+0x2e4>
10000942:	2d00      	cmp	r5, #0
10000944:	d059      	beq.n	100009fa <__aeabi_dadd+0x426>
10000946:	9d02      	ldr	r5, [sp, #8]
10000948:	1b2e      	subs	r6, r5, r4
1000094a:	2c00      	cmp	r4, #0
1000094c:	d116      	bne.n	1000097c <__aeabi_dadd+0x3a8>
1000094e:	000d      	movs	r5, r1
10000950:	4305      	orrs	r5, r0
10000952:	d00f      	beq.n	10000974 <__aeabi_dadd+0x3a0>
10000954:	1e75      	subs	r5, r6, #1
10000956:	2e01      	cmp	r6, #1
10000958:	d109      	bne.n	1000096e <__aeabi_dadd+0x39a>
1000095a:	1a10      	subs	r0, r2, r0
1000095c:	4282      	cmp	r2, r0
1000095e:	4192      	sbcs	r2, r2
10000960:	1a59      	subs	r1, r3, r1
10000962:	9b03      	ldr	r3, [sp, #12]
10000964:	4252      	negs	r2, r2
10000966:	1a89      	subs	r1, r1, r2
10000968:	9301      	str	r3, [sp, #4]
1000096a:	3401      	adds	r4, #1
1000096c:	e795      	b.n	1000089a <__aeabi_dadd+0x2c6>
1000096e:	4f8e      	ldr	r7, [pc, #568]	; (10000ba8 <__aeabi_dadd+0x5d4>)
10000970:	42be      	cmp	r6, r7
10000972:	d121      	bne.n	100009b8 <__aeabi_dadd+0x3e4>
10000974:	0019      	movs	r1, r3
10000976:	0010      	movs	r0, r2
10000978:	0034      	movs	r4, r6
1000097a:	e050      	b.n	10000a1e <__aeabi_dadd+0x44a>
1000097c:	4c8a      	ldr	r4, [pc, #552]	; (10000ba8 <__aeabi_dadd+0x5d4>)
1000097e:	9d02      	ldr	r5, [sp, #8]
10000980:	42a5      	cmp	r5, r4
10000982:	d100      	bne.n	10000986 <__aeabi_dadd+0x3b2>
10000984:	e0f2      	b.n	10000b6c <__aeabi_dadd+0x598>
10000986:	2e38      	cmp	r6, #56	; 0x38
10000988:	dc34      	bgt.n	100009f4 <__aeabi_dadd+0x420>
1000098a:	2480      	movs	r4, #128	; 0x80
1000098c:	0035      	movs	r5, r6
1000098e:	0424      	lsls	r4, r4, #16
10000990:	4321      	orrs	r1, r4
10000992:	2d1f      	cmp	r5, #31
10000994:	dc1d      	bgt.n	100009d2 <__aeabi_dadd+0x3fe>
10000996:	2620      	movs	r6, #32
10000998:	000c      	movs	r4, r1
1000099a:	1b76      	subs	r6, r6, r5
1000099c:	40b4      	lsls	r4, r6
1000099e:	46a4      	mov	ip, r4
100009a0:	0004      	movs	r4, r0
100009a2:	40b0      	lsls	r0, r6
100009a4:	40ec      	lsrs	r4, r5
100009a6:	4667      	mov	r7, ip
100009a8:	1e46      	subs	r6, r0, #1
100009aa:	41b0      	sbcs	r0, r6
100009ac:	40e9      	lsrs	r1, r5
100009ae:	433c      	orrs	r4, r7
100009b0:	4304      	orrs	r4, r0
100009b2:	0026      	movs	r6, r4
100009b4:	000c      	movs	r4, r1
100009b6:	e002      	b.n	100009be <__aeabi_dadd+0x3ea>
100009b8:	2601      	movs	r6, #1
100009ba:	2d38      	cmp	r5, #56	; 0x38
100009bc:	dde9      	ble.n	10000992 <__aeabi_dadd+0x3be>
100009be:	1b90      	subs	r0, r2, r6
100009c0:	4282      	cmp	r2, r0
100009c2:	4192      	sbcs	r2, r2
100009c4:	1b1c      	subs	r4, r3, r4
100009c6:	9b03      	ldr	r3, [sp, #12]
100009c8:	4252      	negs	r2, r2
100009ca:	1aa1      	subs	r1, r4, r2
100009cc:	9301      	str	r3, [sp, #4]
100009ce:	9c02      	ldr	r4, [sp, #8]
100009d0:	e763      	b.n	1000089a <__aeabi_dadd+0x2c6>
100009d2:	002c      	movs	r4, r5
100009d4:	000e      	movs	r6, r1
100009d6:	3c20      	subs	r4, #32
100009d8:	40e6      	lsrs	r6, r4
100009da:	2400      	movs	r4, #0
100009dc:	2d20      	cmp	r5, #32
100009de:	d003      	beq.n	100009e8 <__aeabi_dadd+0x414>
100009e0:	3440      	adds	r4, #64	; 0x40
100009e2:	1b64      	subs	r4, r4, r5
100009e4:	40a1      	lsls	r1, r4
100009e6:	000c      	movs	r4, r1
100009e8:	4304      	orrs	r4, r0
100009ea:	1e61      	subs	r1, r4, #1
100009ec:	418c      	sbcs	r4, r1
100009ee:	4326      	orrs	r6, r4
100009f0:	2400      	movs	r4, #0
100009f2:	e7e4      	b.n	100009be <__aeabi_dadd+0x3ea>
100009f4:	2400      	movs	r4, #0
100009f6:	2601      	movs	r6, #1
100009f8:	e7e1      	b.n	100009be <__aeabi_dadd+0x3ea>
100009fa:	4e6c      	ldr	r6, [pc, #432]	; (10000bac <__aeabi_dadd+0x5d8>)
100009fc:	1c65      	adds	r5, r4, #1
100009fe:	4235      	tst	r5, r6
10000a00:	d14a      	bne.n	10000a98 <__aeabi_dadd+0x4c4>
10000a02:	000d      	movs	r5, r1
10000a04:	001f      	movs	r7, r3
10000a06:	4305      	orrs	r5, r0
10000a08:	4317      	orrs	r7, r2
10000a0a:	2c00      	cmp	r4, #0
10000a0c:	d123      	bne.n	10000a56 <__aeabi_dadd+0x482>
10000a0e:	2d00      	cmp	r5, #0
10000a10:	d108      	bne.n	10000a24 <__aeabi_dadd+0x450>
10000a12:	1e3d      	subs	r5, r7, #0
10000a14:	9701      	str	r7, [sp, #4]
10000a16:	d100      	bne.n	10000a1a <__aeabi_dadd+0x446>
10000a18:	e652      	b.n	100006c0 <__aeabi_dadd+0xec>
10000a1a:	0019      	movs	r1, r3
10000a1c:	0010      	movs	r0, r2
10000a1e:	9b03      	ldr	r3, [sp, #12]
10000a20:	9301      	str	r3, [sp, #4]
10000a22:	e686      	b.n	10000732 <__aeabi_dadd+0x15e>
10000a24:	2f00      	cmp	r7, #0
10000a26:	d100      	bne.n	10000a2a <__aeabi_dadd+0x456>
10000a28:	e683      	b.n	10000732 <__aeabi_dadd+0x15e>
10000a2a:	1a86      	subs	r6, r0, r2
10000a2c:	42b0      	cmp	r0, r6
10000a2e:	41bf      	sbcs	r7, r7
10000a30:	1acd      	subs	r5, r1, r3
10000a32:	427f      	negs	r7, r7
10000a34:	1bed      	subs	r5, r5, r7
10000a36:	022f      	lsls	r7, r5, #8
10000a38:	d506      	bpl.n	10000a48 <__aeabi_dadd+0x474>
10000a3a:	1a10      	subs	r0, r2, r0
10000a3c:	4282      	cmp	r2, r0
10000a3e:	4192      	sbcs	r2, r2
10000a40:	1a59      	subs	r1, r3, r1
10000a42:	4252      	negs	r2, r2
10000a44:	1a89      	subs	r1, r1, r2
10000a46:	e7ea      	b.n	10000a1e <__aeabi_dadd+0x44a>
10000a48:	0037      	movs	r7, r6
10000a4a:	432f      	orrs	r7, r5
10000a4c:	d100      	bne.n	10000a50 <__aeabi_dadd+0x47c>
10000a4e:	e0a5      	b.n	10000b9c <__aeabi_dadd+0x5c8>
10000a50:	0029      	movs	r1, r5
10000a52:	0030      	movs	r0, r6
10000a54:	e66d      	b.n	10000732 <__aeabi_dadd+0x15e>
10000a56:	2d00      	cmp	r5, #0
10000a58:	d107      	bne.n	10000a6a <__aeabi_dadd+0x496>
10000a5a:	2f00      	cmp	r7, #0
10000a5c:	d100      	bne.n	10000a60 <__aeabi_dadd+0x48c>
10000a5e:	e094      	b.n	10000b8a <__aeabi_dadd+0x5b6>
10000a60:	0019      	movs	r1, r3
10000a62:	9b03      	ldr	r3, [sp, #12]
10000a64:	0010      	movs	r0, r2
10000a66:	9301      	str	r3, [sp, #4]
10000a68:	e5fb      	b.n	10000662 <__aeabi_dadd+0x8e>
10000a6a:	2f00      	cmp	r7, #0
10000a6c:	d100      	bne.n	10000a70 <__aeabi_dadd+0x49c>
10000a6e:	e5f8      	b.n	10000662 <__aeabi_dadd+0x8e>
10000a70:	2580      	movs	r5, #128	; 0x80
10000a72:	074c      	lsls	r4, r1, #29
10000a74:	08c0      	lsrs	r0, r0, #3
10000a76:	08c9      	lsrs	r1, r1, #3
10000a78:	032d      	lsls	r5, r5, #12
10000a7a:	4320      	orrs	r0, r4
10000a7c:	4229      	tst	r1, r5
10000a7e:	d100      	bne.n	10000a82 <__aeabi_dadd+0x4ae>
10000a80:	e6e2      	b.n	10000848 <__aeabi_dadd+0x274>
10000a82:	08dc      	lsrs	r4, r3, #3
10000a84:	422c      	tst	r4, r5
10000a86:	d000      	beq.n	10000a8a <__aeabi_dadd+0x4b6>
10000a88:	e6de      	b.n	10000848 <__aeabi_dadd+0x274>
10000a8a:	075b      	lsls	r3, r3, #29
10000a8c:	08d0      	lsrs	r0, r2, #3
10000a8e:	4318      	orrs	r0, r3
10000a90:	9b03      	ldr	r3, [sp, #12]
10000a92:	0021      	movs	r1, r4
10000a94:	9301      	str	r3, [sp, #4]
10000a96:	e6d7      	b.n	10000848 <__aeabi_dadd+0x274>
10000a98:	1a86      	subs	r6, r0, r2
10000a9a:	42b0      	cmp	r0, r6
10000a9c:	41bf      	sbcs	r7, r7
10000a9e:	1acd      	subs	r5, r1, r3
10000aa0:	427f      	negs	r7, r7
10000aa2:	1bed      	subs	r5, r5, r7
10000aa4:	022f      	lsls	r7, r5, #8
10000aa6:	d528      	bpl.n	10000afa <__aeabi_dadd+0x526>
10000aa8:	1a16      	subs	r6, r2, r0
10000aaa:	42b2      	cmp	r2, r6
10000aac:	4192      	sbcs	r2, r2
10000aae:	1a5b      	subs	r3, r3, r1
10000ab0:	4252      	negs	r2, r2
10000ab2:	1a9d      	subs	r5, r3, r2
10000ab4:	9b03      	ldr	r3, [sp, #12]
10000ab6:	9301      	str	r3, [sp, #4]
10000ab8:	2d00      	cmp	r5, #0
10000aba:	d025      	beq.n	10000b08 <__aeabi_dadd+0x534>
10000abc:	0028      	movs	r0, r5
10000abe:	f7ff fc0d 	bl	100002dc <__clzsi2>
10000ac2:	0003      	movs	r3, r0
10000ac4:	3b08      	subs	r3, #8
10000ac6:	2220      	movs	r2, #32
10000ac8:	0031      	movs	r1, r6
10000aca:	1ad2      	subs	r2, r2, r3
10000acc:	409d      	lsls	r5, r3
10000ace:	40d1      	lsrs	r1, r2
10000ad0:	4329      	orrs	r1, r5
10000ad2:	0035      	movs	r5, r6
10000ad4:	409d      	lsls	r5, r3
10000ad6:	429c      	cmp	r4, r3
10000ad8:	dc3b      	bgt.n	10000b52 <__aeabi_dadd+0x57e>
10000ada:	1b1a      	subs	r2, r3, r4
10000adc:	3201      	adds	r2, #1
10000ade:	2320      	movs	r3, #32
10000ae0:	0008      	movs	r0, r1
10000ae2:	1a9b      	subs	r3, r3, r2
10000ae4:	002c      	movs	r4, r5
10000ae6:	409d      	lsls	r5, r3
10000ae8:	4098      	lsls	r0, r3
10000aea:	40d4      	lsrs	r4, r2
10000aec:	1e6b      	subs	r3, r5, #1
10000aee:	419d      	sbcs	r5, r3
10000af0:	40d1      	lsrs	r1, r2
10000af2:	4320      	orrs	r0, r4
10000af4:	4328      	orrs	r0, r5
10000af6:	2400      	movs	r4, #0
10000af8:	e61b      	b.n	10000732 <__aeabi_dadd+0x15e>
10000afa:	0037      	movs	r7, r6
10000afc:	432f      	orrs	r7, r5
10000afe:	d1db      	bne.n	10000ab8 <__aeabi_dadd+0x4e4>
10000b00:	003d      	movs	r5, r7
10000b02:	003c      	movs	r4, r7
10000b04:	9701      	str	r7, [sp, #4]
10000b06:	e5db      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b08:	0030      	movs	r0, r6
10000b0a:	f7ff fbe7 	bl	100002dc <__clzsi2>
10000b0e:	0003      	movs	r3, r0
10000b10:	3318      	adds	r3, #24
10000b12:	2b1f      	cmp	r3, #31
10000b14:	ddd7      	ble.n	10000ac6 <__aeabi_dadd+0x4f2>
10000b16:	0031      	movs	r1, r6
10000b18:	3808      	subs	r0, #8
10000b1a:	4081      	lsls	r1, r0
10000b1c:	429c      	cmp	r4, r3
10000b1e:	dc12      	bgt.n	10000b46 <__aeabi_dadd+0x572>
10000b20:	1b1b      	subs	r3, r3, r4
10000b22:	1c5a      	adds	r2, r3, #1
10000b24:	2a1f      	cmp	r2, #31
10000b26:	ddda      	ble.n	10000ade <__aeabi_dadd+0x50a>
10000b28:	000c      	movs	r4, r1
10000b2a:	3b1f      	subs	r3, #31
10000b2c:	40dc      	lsrs	r4, r3
10000b2e:	0028      	movs	r0, r5
10000b30:	2a20      	cmp	r2, #32
10000b32:	d003      	beq.n	10000b3c <__aeabi_dadd+0x568>
10000b34:	2340      	movs	r3, #64	; 0x40
10000b36:	1a9b      	subs	r3, r3, r2
10000b38:	4099      	lsls	r1, r3
10000b3a:	0008      	movs	r0, r1
10000b3c:	1e43      	subs	r3, r0, #1
10000b3e:	4198      	sbcs	r0, r3
10000b40:	2100      	movs	r1, #0
10000b42:	4320      	orrs	r0, r4
10000b44:	e7d7      	b.n	10000af6 <__aeabi_dadd+0x522>
10000b46:	1ae4      	subs	r4, r4, r3
10000b48:	4b19      	ldr	r3, [pc, #100]	; (10000bb0 <__aeabi_dadd+0x5dc>)
10000b4a:	400b      	ands	r3, r1
10000b4c:	075d      	lsls	r5, r3, #29
10000b4e:	08df      	lsrs	r7, r3, #3
10000b50:	e5b6      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b52:	1ae4      	subs	r4, r4, r3
10000b54:	4b16      	ldr	r3, [pc, #88]	; (10000bb0 <__aeabi_dadd+0x5dc>)
10000b56:	0028      	movs	r0, r5
10000b58:	4019      	ands	r1, r3
10000b5a:	e5ea      	b.n	10000732 <__aeabi_dadd+0x15e>
10000b5c:	0019      	movs	r1, r3
10000b5e:	0010      	movs	r0, r2
10000b60:	e65b      	b.n	1000081a <__aeabi_dadd+0x246>
10000b62:	0019      	movs	r1, r3
10000b64:	0010      	movs	r0, r2
10000b66:	e5e4      	b.n	10000732 <__aeabi_dadd+0x15e>
10000b68:	002c      	movs	r4, r5
10000b6a:	e5e2      	b.n	10000732 <__aeabi_dadd+0x15e>
10000b6c:	0019      	movs	r1, r3
10000b6e:	0010      	movs	r0, r2
10000b70:	9c02      	ldr	r4, [sp, #8]
10000b72:	e754      	b.n	10000a1e <__aeabi_dadd+0x44a>
10000b74:	074a      	lsls	r2, r1, #29
10000b76:	08c7      	lsrs	r7, r0, #3
10000b78:	4317      	orrs	r7, r2
10000b7a:	003d      	movs	r5, r7
10000b7c:	08c9      	lsrs	r1, r1, #3
10000b7e:	429c      	cmp	r4, r3
10000b80:	d10f      	bne.n	10000ba2 <__aeabi_dadd+0x5ce>
10000b82:	430d      	orrs	r5, r1
10000b84:	d104      	bne.n	10000b90 <__aeabi_dadd+0x5bc>
10000b86:	002f      	movs	r7, r5
10000b88:	e59a      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b8a:	2180      	movs	r1, #128	; 0x80
10000b8c:	9701      	str	r7, [sp, #4]
10000b8e:	0309      	lsls	r1, r1, #12
10000b90:	003d      	movs	r5, r7
10000b92:	2780      	movs	r7, #128	; 0x80
10000b94:	033f      	lsls	r7, r7, #12
10000b96:	4c04      	ldr	r4, [pc, #16]	; (10000ba8 <__aeabi_dadd+0x5d4>)
10000b98:	430f      	orrs	r7, r1
10000b9a:	e591      	b.n	100006c0 <__aeabi_dadd+0xec>
10000b9c:	003d      	movs	r5, r7
10000b9e:	9701      	str	r7, [sp, #4]
10000ba0:	e58e      	b.n	100006c0 <__aeabi_dadd+0xec>
10000ba2:	000f      	movs	r7, r1
10000ba4:	e58c      	b.n	100006c0 <__aeabi_dadd+0xec>
10000ba6:	46c0      	nop			; (mov r8, r8)
10000ba8:	000007ff 	.word	0x000007ff
10000bac:	000007fe 	.word	0x000007fe
10000bb0:	ff7fffff 	.word	0xff7fffff

10000bb4 <__eqdf2>:
10000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10000bb6:	000d      	movs	r5, r1
10000bb8:	b087      	sub	sp, #28
10000bba:	9200      	str	r2, [sp, #0]
10000bbc:	9301      	str	r3, [sp, #4]
10000bbe:	0004      	movs	r4, r0
10000bc0:	9004      	str	r0, [sp, #16]
10000bc2:	9801      	ldr	r0, [sp, #4]
10000bc4:	0feb      	lsrs	r3, r5, #31
10000bc6:	0046      	lsls	r6, r0, #1
10000bc8:	0fc7      	lsrs	r7, r0, #31
10000bca:	481a      	ldr	r0, [pc, #104]	; (10000c34 <__eqdf2+0x80>)
10000bcc:	9303      	str	r3, [sp, #12]
10000bce:	4684      	mov	ip, r0
10000bd0:	9b00      	ldr	r3, [sp, #0]
10000bd2:	0309      	lsls	r1, r1, #12
10000bd4:	9305      	str	r3, [sp, #20]
10000bd6:	9b01      	ldr	r3, [sp, #4]
10000bd8:	006a      	lsls	r2, r5, #1
10000bda:	031b      	lsls	r3, r3, #12
10000bdc:	2001      	movs	r0, #1
10000bde:	0b09      	lsrs	r1, r1, #12
10000be0:	0d52      	lsrs	r2, r2, #21
10000be2:	0b1b      	lsrs	r3, r3, #12
10000be4:	0d76      	lsrs	r6, r6, #21
10000be6:	4562      	cmp	r2, ip
10000be8:	d003      	beq.n	10000bf2 <__eqdf2+0x3e>
10000bea:	4566      	cmp	r6, ip
10000bec:	d10d      	bne.n	10000c0a <__eqdf2+0x56>
10000bee:	b007      	add	sp, #28
10000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000bf2:	4296      	cmp	r6, r2
10000bf4:	d1fb      	bne.n	10000bee <__eqdf2+0x3a>
10000bf6:	9a00      	ldr	r2, [sp, #0]
10000bf8:	430b      	orrs	r3, r1
10000bfa:	4313      	orrs	r3, r2
10000bfc:	4323      	orrs	r3, r4
10000bfe:	d1f6      	bne.n	10000bee <__eqdf2+0x3a>
10000c00:	9b03      	ldr	r3, [sp, #12]
10000c02:	1bd8      	subs	r0, r3, r7
10000c04:	1e43      	subs	r3, r0, #1
10000c06:	4198      	sbcs	r0, r3
10000c08:	e7f1      	b.n	10000bee <__eqdf2+0x3a>
10000c0a:	2001      	movs	r0, #1
10000c0c:	42b2      	cmp	r2, r6
10000c0e:	d1ee      	bne.n	10000bee <__eqdf2+0x3a>
10000c10:	4299      	cmp	r1, r3
10000c12:	d1ec      	bne.n	10000bee <__eqdf2+0x3a>
10000c14:	9b04      	ldr	r3, [sp, #16]
10000c16:	9e05      	ldr	r6, [sp, #20]
10000c18:	42b3      	cmp	r3, r6
10000c1a:	d1e8      	bne.n	10000bee <__eqdf2+0x3a>
10000c1c:	9b03      	ldr	r3, [sp, #12]
10000c1e:	42bb      	cmp	r3, r7
10000c20:	d006      	beq.n	10000c30 <__eqdf2+0x7c>
10000c22:	2a00      	cmp	r2, #0
10000c24:	d1e3      	bne.n	10000bee <__eqdf2+0x3a>
10000c26:	4321      	orrs	r1, r4
10000c28:	1e4b      	subs	r3, r1, #1
10000c2a:	4199      	sbcs	r1, r3
10000c2c:	0008      	movs	r0, r1
10000c2e:	e7de      	b.n	10000bee <__eqdf2+0x3a>
10000c30:	2000      	movs	r0, #0
10000c32:	e7dc      	b.n	10000bee <__eqdf2+0x3a>
10000c34:	000007ff 	.word	0x000007ff

10000c38 <__gedf2>:
10000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c3a:	b087      	sub	sp, #28
10000c3c:	9000      	str	r0, [sp, #0]
10000c3e:	9101      	str	r1, [sp, #4]
10000c40:	001d      	movs	r5, r3
10000c42:	9b00      	ldr	r3, [sp, #0]
10000c44:	0014      	movs	r4, r2
10000c46:	9304      	str	r3, [sp, #16]
10000c48:	9b01      	ldr	r3, [sp, #4]
10000c4a:	0329      	lsls	r1, r5, #12
10000c4c:	031a      	lsls	r2, r3, #12
10000c4e:	0b13      	lsrs	r3, r2, #12
10000c50:	4a33      	ldr	r2, [pc, #204]	; (10000d20 <__gedf2+0xe8>)
10000c52:	9303      	str	r3, [sp, #12]
10000c54:	4694      	mov	ip, r2
10000c56:	9b01      	ldr	r3, [sp, #4]
10000c58:	0068      	lsls	r0, r5, #1
10000c5a:	005f      	lsls	r7, r3, #1
10000c5c:	0d7b      	lsrs	r3, r7, #21
10000c5e:	9302      	str	r3, [sp, #8]
10000c60:	9a02      	ldr	r2, [sp, #8]
10000c62:	9b01      	ldr	r3, [sp, #4]
10000c64:	9405      	str	r4, [sp, #20]
10000c66:	0fdb      	lsrs	r3, r3, #31
10000c68:	0b09      	lsrs	r1, r1, #12
10000c6a:	0d40      	lsrs	r0, r0, #21
10000c6c:	0fee      	lsrs	r6, r5, #31
10000c6e:	4562      	cmp	r2, ip
10000c70:	d112      	bne.n	10000c98 <__gedf2+0x60>
10000c72:	9a00      	ldr	r2, [sp, #0]
10000c74:	9f03      	ldr	r7, [sp, #12]
10000c76:	4317      	orrs	r7, r2
10000c78:	d14f      	bne.n	10000d1a <__gedf2+0xe2>
10000c7a:	9a02      	ldr	r2, [sp, #8]
10000c7c:	4290      	cmp	r0, r2
10000c7e:	d004      	beq.n	10000c8a <__gedf2+0x52>
10000c80:	2001      	movs	r0, #1
10000c82:	2b00      	cmp	r3, #0
10000c84:	d006      	beq.n	10000c94 <__gedf2+0x5c>
10000c86:	3802      	subs	r0, #2
10000c88:	e004      	b.n	10000c94 <__gedf2+0x5c>
10000c8a:	4321      	orrs	r1, r4
10000c8c:	1e08      	subs	r0, r1, #0
10000c8e:	d144      	bne.n	10000d1a <__gedf2+0xe2>
10000c90:	42b3      	cmp	r3, r6
10000c92:	d1f5      	bne.n	10000c80 <__gedf2+0x48>
10000c94:	b007      	add	sp, #28
10000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000c98:	4560      	cmp	r0, ip
10000c9a:	d111      	bne.n	10000cc0 <__gedf2+0x88>
10000c9c:	4321      	orrs	r1, r4
10000c9e:	d13c      	bne.n	10000d1a <__gedf2+0xe2>
10000ca0:	9a02      	ldr	r2, [sp, #8]
10000ca2:	2a00      	cmp	r2, #0
10000ca4:	d004      	beq.n	10000cb0 <__gedf2+0x78>
10000ca6:	42b3      	cmp	r3, r6
10000ca8:	d1ea      	bne.n	10000c80 <__gedf2+0x48>
10000caa:	1e18      	subs	r0, r3, #0
10000cac:	d1f2      	bne.n	10000c94 <__gedf2+0x5c>
10000cae:	e005      	b.n	10000cbc <__gedf2+0x84>
10000cb0:	9a00      	ldr	r2, [sp, #0]
10000cb2:	9903      	ldr	r1, [sp, #12]
10000cb4:	4311      	orrs	r1, r2
10000cb6:	d1f6      	bne.n	10000ca6 <__gedf2+0x6e>
10000cb8:	1e30      	subs	r0, r6, #0
10000cba:	d1eb      	bne.n	10000c94 <__gedf2+0x5c>
10000cbc:	2001      	movs	r0, #1
10000cbe:	e02d      	b.n	10000d1c <__gedf2+0xe4>
10000cc0:	9a02      	ldr	r2, [sp, #8]
10000cc2:	2a00      	cmp	r2, #0
10000cc4:	d017      	beq.n	10000cf6 <__gedf2+0xbe>
10000cc6:	2800      	cmp	r0, #0
10000cc8:	d0da      	beq.n	10000c80 <__gedf2+0x48>
10000cca:	42b3      	cmp	r3, r6
10000ccc:	d1d8      	bne.n	10000c80 <__gedf2+0x48>
10000cce:	9a02      	ldr	r2, [sp, #8]
10000cd0:	4282      	cmp	r2, r0
10000cd2:	dcd5      	bgt.n	10000c80 <__gedf2+0x48>
10000cd4:	9a02      	ldr	r2, [sp, #8]
10000cd6:	4282      	cmp	r2, r0
10000cd8:	dbe7      	blt.n	10000caa <__gedf2+0x72>
10000cda:	9a03      	ldr	r2, [sp, #12]
10000cdc:	428a      	cmp	r2, r1
10000cde:	d8cf      	bhi.n	10000c80 <__gedf2+0x48>
10000ce0:	d1e3      	bne.n	10000caa <__gedf2+0x72>
10000ce2:	9a04      	ldr	r2, [sp, #16]
10000ce4:	9905      	ldr	r1, [sp, #20]
10000ce6:	428a      	cmp	r2, r1
10000ce8:	d8ca      	bhi.n	10000c80 <__gedf2+0x48>
10000cea:	9a04      	ldr	r2, [sp, #16]
10000cec:	9905      	ldr	r1, [sp, #20]
10000cee:	2000      	movs	r0, #0
10000cf0:	428a      	cmp	r2, r1
10000cf2:	d2cf      	bcs.n	10000c94 <__gedf2+0x5c>
10000cf4:	e7d9      	b.n	10000caa <__gedf2+0x72>
10000cf6:	9f00      	ldr	r7, [sp, #0]
10000cf8:	9a03      	ldr	r2, [sp, #12]
10000cfa:	4317      	orrs	r7, r2
10000cfc:	2800      	cmp	r0, #0
10000cfe:	d002      	beq.n	10000d06 <__gedf2+0xce>
10000d00:	2f00      	cmp	r7, #0
10000d02:	d0d9      	beq.n	10000cb8 <__gedf2+0x80>
10000d04:	e7cf      	b.n	10000ca6 <__gedf2+0x6e>
10000d06:	430c      	orrs	r4, r1
10000d08:	d004      	beq.n	10000d14 <__gedf2+0xdc>
10000d0a:	2f00      	cmp	r7, #0
10000d0c:	d0d4      	beq.n	10000cb8 <__gedf2+0x80>
10000d0e:	42b3      	cmp	r3, r6
10000d10:	d0e3      	beq.n	10000cda <__gedf2+0xa2>
10000d12:	e7b5      	b.n	10000c80 <__gedf2+0x48>
10000d14:	2f00      	cmp	r7, #0
10000d16:	d0bd      	beq.n	10000c94 <__gedf2+0x5c>
10000d18:	e7b2      	b.n	10000c80 <__gedf2+0x48>
10000d1a:	2002      	movs	r0, #2
10000d1c:	4240      	negs	r0, r0
10000d1e:	e7b9      	b.n	10000c94 <__gedf2+0x5c>
10000d20:	000007ff 	.word	0x000007ff

10000d24 <__ledf2>:
10000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d26:	b087      	sub	sp, #28
10000d28:	9000      	str	r0, [sp, #0]
10000d2a:	9101      	str	r1, [sp, #4]
10000d2c:	001d      	movs	r5, r3
10000d2e:	9b00      	ldr	r3, [sp, #0]
10000d30:	0014      	movs	r4, r2
10000d32:	9304      	str	r3, [sp, #16]
10000d34:	9b01      	ldr	r3, [sp, #4]
10000d36:	0068      	lsls	r0, r5, #1
10000d38:	031a      	lsls	r2, r3, #12
10000d3a:	0b13      	lsrs	r3, r2, #12
10000d3c:	4a34      	ldr	r2, [pc, #208]	; (10000e10 <__ledf2+0xec>)
10000d3e:	9303      	str	r3, [sp, #12]
10000d40:	4694      	mov	ip, r2
10000d42:	9b01      	ldr	r3, [sp, #4]
10000d44:	9405      	str	r4, [sp, #20]
10000d46:	005f      	lsls	r7, r3, #1
10000d48:	0d7b      	lsrs	r3, r7, #21
10000d4a:	9302      	str	r3, [sp, #8]
10000d4c:	9b01      	ldr	r3, [sp, #4]
10000d4e:	9a02      	ldr	r2, [sp, #8]
10000d50:	0fd9      	lsrs	r1, r3, #31
10000d52:	032b      	lsls	r3, r5, #12
10000d54:	0b1b      	lsrs	r3, r3, #12
10000d56:	0d40      	lsrs	r0, r0, #21
10000d58:	0fee      	lsrs	r6, r5, #31
10000d5a:	4562      	cmp	r2, ip
10000d5c:	d113      	bne.n	10000d86 <__ledf2+0x62>
10000d5e:	9a00      	ldr	r2, [sp, #0]
10000d60:	9f03      	ldr	r7, [sp, #12]
10000d62:	4317      	orrs	r7, r2
10000d64:	d152      	bne.n	10000e0c <__ledf2+0xe8>
10000d66:	9a02      	ldr	r2, [sp, #8]
10000d68:	4290      	cmp	r0, r2
10000d6a:	d004      	beq.n	10000d76 <__ledf2+0x52>
10000d6c:	2001      	movs	r0, #1
10000d6e:	2900      	cmp	r1, #0
10000d70:	d007      	beq.n	10000d82 <__ledf2+0x5e>
10000d72:	3802      	subs	r0, #2
10000d74:	e005      	b.n	10000d82 <__ledf2+0x5e>
10000d76:	2002      	movs	r0, #2
10000d78:	4323      	orrs	r3, r4
10000d7a:	d102      	bne.n	10000d82 <__ledf2+0x5e>
10000d7c:	0018      	movs	r0, r3
10000d7e:	42b1      	cmp	r1, r6
10000d80:	d1f4      	bne.n	10000d6c <__ledf2+0x48>
10000d82:	b007      	add	sp, #28
10000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000d86:	4560      	cmp	r0, ip
10000d88:	d113      	bne.n	10000db2 <__ledf2+0x8e>
10000d8a:	2002      	movs	r0, #2
10000d8c:	4323      	orrs	r3, r4
10000d8e:	d1f8      	bne.n	10000d82 <__ledf2+0x5e>
10000d90:	9b02      	ldr	r3, [sp, #8]
10000d92:	2b00      	cmp	r3, #0
10000d94:	d004      	beq.n	10000da0 <__ledf2+0x7c>
10000d96:	42b1      	cmp	r1, r6
10000d98:	d1e8      	bne.n	10000d6c <__ledf2+0x48>
10000d9a:	1e08      	subs	r0, r1, #0
10000d9c:	d1f1      	bne.n	10000d82 <__ledf2+0x5e>
10000d9e:	e005      	b.n	10000dac <__ledf2+0x88>
10000da0:	9b00      	ldr	r3, [sp, #0]
10000da2:	9a03      	ldr	r2, [sp, #12]
10000da4:	431a      	orrs	r2, r3
10000da6:	d1f6      	bne.n	10000d96 <__ledf2+0x72>
10000da8:	1e30      	subs	r0, r6, #0
10000daa:	d1ea      	bne.n	10000d82 <__ledf2+0x5e>
10000dac:	2001      	movs	r0, #1
10000dae:	4240      	negs	r0, r0
10000db0:	e7e7      	b.n	10000d82 <__ledf2+0x5e>
10000db2:	9a02      	ldr	r2, [sp, #8]
10000db4:	2a00      	cmp	r2, #0
10000db6:	d017      	beq.n	10000de8 <__ledf2+0xc4>
10000db8:	2800      	cmp	r0, #0
10000dba:	d0d7      	beq.n	10000d6c <__ledf2+0x48>
10000dbc:	42b1      	cmp	r1, r6
10000dbe:	d1d5      	bne.n	10000d6c <__ledf2+0x48>
10000dc0:	9a02      	ldr	r2, [sp, #8]
10000dc2:	4282      	cmp	r2, r0
10000dc4:	dcd2      	bgt.n	10000d6c <__ledf2+0x48>
10000dc6:	9a02      	ldr	r2, [sp, #8]
10000dc8:	4282      	cmp	r2, r0
10000dca:	dbe6      	blt.n	10000d9a <__ledf2+0x76>
10000dcc:	9a03      	ldr	r2, [sp, #12]
10000dce:	429a      	cmp	r2, r3
10000dd0:	d8cc      	bhi.n	10000d6c <__ledf2+0x48>
10000dd2:	d1e2      	bne.n	10000d9a <__ledf2+0x76>
10000dd4:	9b04      	ldr	r3, [sp, #16]
10000dd6:	9a05      	ldr	r2, [sp, #20]
10000dd8:	4293      	cmp	r3, r2
10000dda:	d8c7      	bhi.n	10000d6c <__ledf2+0x48>
10000ddc:	9b04      	ldr	r3, [sp, #16]
10000dde:	9a05      	ldr	r2, [sp, #20]
10000de0:	2000      	movs	r0, #0
10000de2:	4293      	cmp	r3, r2
10000de4:	d2cd      	bcs.n	10000d82 <__ledf2+0x5e>
10000de6:	e7d8      	b.n	10000d9a <__ledf2+0x76>
10000de8:	9f00      	ldr	r7, [sp, #0]
10000dea:	9a03      	ldr	r2, [sp, #12]
10000dec:	4317      	orrs	r7, r2
10000dee:	2800      	cmp	r0, #0
10000df0:	d002      	beq.n	10000df8 <__ledf2+0xd4>
10000df2:	2f00      	cmp	r7, #0
10000df4:	d0d8      	beq.n	10000da8 <__ledf2+0x84>
10000df6:	e7ce      	b.n	10000d96 <__ledf2+0x72>
10000df8:	431c      	orrs	r4, r3
10000dfa:	d004      	beq.n	10000e06 <__ledf2+0xe2>
10000dfc:	2f00      	cmp	r7, #0
10000dfe:	d0d3      	beq.n	10000da8 <__ledf2+0x84>
10000e00:	42b1      	cmp	r1, r6
10000e02:	d0e3      	beq.n	10000dcc <__ledf2+0xa8>
10000e04:	e7b2      	b.n	10000d6c <__ledf2+0x48>
10000e06:	2f00      	cmp	r7, #0
10000e08:	d0bb      	beq.n	10000d82 <__ledf2+0x5e>
10000e0a:	e7af      	b.n	10000d6c <__ledf2+0x48>
10000e0c:	2002      	movs	r0, #2
10000e0e:	e7b8      	b.n	10000d82 <__ledf2+0x5e>
10000e10:	000007ff 	.word	0x000007ff

10000e14 <__aeabi_dmul>:
10000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e16:	b08b      	sub	sp, #44	; 0x2c
10000e18:	9200      	str	r2, [sp, #0]
10000e1a:	9301      	str	r3, [sp, #4]
10000e1c:	030d      	lsls	r5, r1, #12
10000e1e:	004b      	lsls	r3, r1, #1
10000e20:	0fca      	lsrs	r2, r1, #31
10000e22:	0006      	movs	r6, r0
10000e24:	0b2d      	lsrs	r5, r5, #12
10000e26:	0d5b      	lsrs	r3, r3, #21
10000e28:	9205      	str	r2, [sp, #20]
10000e2a:	d100      	bne.n	10000e2e <__aeabi_dmul+0x1a>
10000e2c:	e114      	b.n	10001058 <__aeabi_dmul+0x244>
10000e2e:	4acf      	ldr	r2, [pc, #828]	; (1000116c <__aeabi_dmul+0x358>)
10000e30:	4293      	cmp	r3, r2
10000e32:	d100      	bne.n	10000e36 <__aeabi_dmul+0x22>
10000e34:	e138      	b.n	100010a8 <__aeabi_dmul+0x294>
10000e36:	00ed      	lsls	r5, r5, #3
10000e38:	0f42      	lsrs	r2, r0, #29
10000e3a:	432a      	orrs	r2, r5
10000e3c:	2580      	movs	r5, #128	; 0x80
10000e3e:	042d      	lsls	r5, r5, #16
10000e40:	4315      	orrs	r5, r2
10000e42:	4acb      	ldr	r2, [pc, #812]	; (10001170 <__aeabi_dmul+0x35c>)
10000e44:	00c4      	lsls	r4, r0, #3
10000e46:	189b      	adds	r3, r3, r2
10000e48:	9303      	str	r3, [sp, #12]
10000e4a:	2300      	movs	r3, #0
10000e4c:	9302      	str	r3, [sp, #8]
10000e4e:	9b01      	ldr	r3, [sp, #4]
10000e50:	9800      	ldr	r0, [sp, #0]
10000e52:	031e      	lsls	r6, r3, #12
10000e54:	005a      	lsls	r2, r3, #1
10000e56:	0fdb      	lsrs	r3, r3, #31
10000e58:	0b36      	lsrs	r6, r6, #12
10000e5a:	0d52      	lsrs	r2, r2, #21
10000e5c:	9304      	str	r3, [sp, #16]
10000e5e:	d100      	bne.n	10000e62 <__aeabi_dmul+0x4e>
10000e60:	e131      	b.n	100010c6 <__aeabi_dmul+0x2b2>
10000e62:	4bc2      	ldr	r3, [pc, #776]	; (1000116c <__aeabi_dmul+0x358>)
10000e64:	429a      	cmp	r2, r3
10000e66:	d100      	bne.n	10000e6a <__aeabi_dmul+0x56>
10000e68:	e153      	b.n	10001112 <__aeabi_dmul+0x2fe>
10000e6a:	0f43      	lsrs	r3, r0, #29
10000e6c:	00f6      	lsls	r6, r6, #3
10000e6e:	4333      	orrs	r3, r6
10000e70:	2680      	movs	r6, #128	; 0x80
10000e72:	49bf      	ldr	r1, [pc, #764]	; (10001170 <__aeabi_dmul+0x35c>)
10000e74:	0436      	lsls	r6, r6, #16
10000e76:	431e      	orrs	r6, r3
10000e78:	00c3      	lsls	r3, r0, #3
10000e7a:	1850      	adds	r0, r2, r1
10000e7c:	2200      	movs	r2, #0
10000e7e:	9905      	ldr	r1, [sp, #20]
10000e80:	9f04      	ldr	r7, [sp, #16]
10000e82:	4079      	eors	r1, r7
10000e84:	9100      	str	r1, [sp, #0]
10000e86:	9903      	ldr	r1, [sp, #12]
10000e88:	1841      	adds	r1, r0, r1
10000e8a:	9106      	str	r1, [sp, #24]
10000e8c:	3101      	adds	r1, #1
10000e8e:	9103      	str	r1, [sp, #12]
10000e90:	9902      	ldr	r1, [sp, #8]
10000e92:	0088      	lsls	r0, r1, #2
10000e94:	4310      	orrs	r0, r2
10000e96:	280a      	cmp	r0, #10
10000e98:	dd00      	ble.n	10000e9c <__aeabi_dmul+0x88>
10000e9a:	e173      	b.n	10001184 <__aeabi_dmul+0x370>
10000e9c:	2802      	cmp	r0, #2
10000e9e:	dd00      	ble.n	10000ea2 <__aeabi_dmul+0x8e>
10000ea0:	e146      	b.n	10001130 <__aeabi_dmul+0x31c>
10000ea2:	3801      	subs	r0, #1
10000ea4:	2801      	cmp	r0, #1
10000ea6:	d800      	bhi.n	10000eaa <__aeabi_dmul+0x96>
10000ea8:	e155      	b.n	10001156 <__aeabi_dmul+0x342>
10000eaa:	0c19      	lsrs	r1, r3, #16
10000eac:	b29b      	uxth	r3, r3
10000eae:	9102      	str	r1, [sp, #8]
10000eb0:	0019      	movs	r1, r3
10000eb2:	0c22      	lsrs	r2, r4, #16
10000eb4:	b2a4      	uxth	r4, r4
10000eb6:	4351      	muls	r1, r2
10000eb8:	0020      	movs	r0, r4
10000eba:	468c      	mov	ip, r1
10000ebc:	9f02      	ldr	r7, [sp, #8]
10000ebe:	9902      	ldr	r1, [sp, #8]
10000ec0:	4358      	muls	r0, r3
10000ec2:	4351      	muls	r1, r2
10000ec4:	4367      	muls	r7, r4
10000ec6:	9105      	str	r1, [sp, #20]
10000ec8:	4467      	add	r7, ip
10000eca:	0c01      	lsrs	r1, r0, #16
10000ecc:	19c9      	adds	r1, r1, r7
10000ece:	9004      	str	r0, [sp, #16]
10000ed0:	458c      	cmp	ip, r1
10000ed2:	d905      	bls.n	10000ee0 <__aeabi_dmul+0xcc>
10000ed4:	2080      	movs	r0, #128	; 0x80
10000ed6:	0240      	lsls	r0, r0, #9
10000ed8:	4684      	mov	ip, r0
10000eda:	9f05      	ldr	r7, [sp, #20]
10000edc:	4467      	add	r7, ip
10000ede:	9705      	str	r7, [sp, #20]
10000ee0:	0c08      	lsrs	r0, r1, #16
10000ee2:	4684      	mov	ip, r0
10000ee4:	4668      	mov	r0, sp
10000ee6:	8a00      	ldrh	r0, [r0, #16]
10000ee8:	0409      	lsls	r1, r1, #16
10000eea:	1809      	adds	r1, r1, r0
10000eec:	9109      	str	r1, [sp, #36]	; 0x24
10000eee:	0c31      	lsrs	r1, r6, #16
10000ef0:	b2b6      	uxth	r6, r6
10000ef2:	9104      	str	r1, [sp, #16]
10000ef4:	0030      	movs	r0, r6
10000ef6:	0021      	movs	r1, r4
10000ef8:	9f04      	ldr	r7, [sp, #16]
10000efa:	4350      	muls	r0, r2
10000efc:	437c      	muls	r4, r7
10000efe:	4371      	muls	r1, r6
10000f00:	437a      	muls	r2, r7
10000f02:	1824      	adds	r4, r4, r0
10000f04:	0c0f      	lsrs	r7, r1, #16
10000f06:	193c      	adds	r4, r7, r4
10000f08:	42a0      	cmp	r0, r4
10000f0a:	d902      	bls.n	10000f12 <__aeabi_dmul+0xfe>
10000f0c:	2080      	movs	r0, #128	; 0x80
10000f0e:	0240      	lsls	r0, r0, #9
10000f10:	1812      	adds	r2, r2, r0
10000f12:	0c20      	lsrs	r0, r4, #16
10000f14:	1882      	adds	r2, r0, r2
10000f16:	0424      	lsls	r4, r4, #16
10000f18:	b289      	uxth	r1, r1
10000f1a:	9207      	str	r2, [sp, #28]
10000f1c:	1862      	adds	r2, r4, r1
10000f1e:	9208      	str	r2, [sp, #32]
10000f20:	9908      	ldr	r1, [sp, #32]
10000f22:	4662      	mov	r2, ip
10000f24:	468c      	mov	ip, r1
10000f26:	0c29      	lsrs	r1, r5, #16
10000f28:	b2ad      	uxth	r5, r5
10000f2a:	0028      	movs	r0, r5
10000f2c:	9f02      	ldr	r7, [sp, #8]
10000f2e:	4358      	muls	r0, r3
10000f30:	436f      	muls	r7, r5
10000f32:	434b      	muls	r3, r1
10000f34:	4462      	add	r2, ip
10000f36:	4694      	mov	ip, r2
10000f38:	9c02      	ldr	r4, [sp, #8]
10000f3a:	18ff      	adds	r7, r7, r3
10000f3c:	0c02      	lsrs	r2, r0, #16
10000f3e:	19d2      	adds	r2, r2, r7
10000f40:	434c      	muls	r4, r1
10000f42:	4293      	cmp	r3, r2
10000f44:	d902      	bls.n	10000f4c <__aeabi_dmul+0x138>
10000f46:	2380      	movs	r3, #128	; 0x80
10000f48:	025b      	lsls	r3, r3, #9
10000f4a:	18e4      	adds	r4, r4, r3
10000f4c:	0c13      	lsrs	r3, r2, #16
10000f4e:	191b      	adds	r3, r3, r4
10000f50:	9302      	str	r3, [sp, #8]
10000f52:	002b      	movs	r3, r5
10000f54:	b280      	uxth	r0, r0
10000f56:	0412      	lsls	r2, r2, #16
10000f58:	1812      	adds	r2, r2, r0
10000f5a:	9804      	ldr	r0, [sp, #16]
10000f5c:	4373      	muls	r3, r6
10000f5e:	4345      	muls	r5, r0
10000f60:	434e      	muls	r6, r1
10000f62:	4341      	muls	r1, r0
10000f64:	19a8      	adds	r0, r5, r6
10000f66:	0c1d      	lsrs	r5, r3, #16
10000f68:	182d      	adds	r5, r5, r0
10000f6a:	42ae      	cmp	r6, r5
10000f6c:	d902      	bls.n	10000f74 <__aeabi_dmul+0x160>
10000f6e:	2080      	movs	r0, #128	; 0x80
10000f70:	0240      	lsls	r0, r0, #9
10000f72:	1809      	adds	r1, r1, r0
10000f74:	9c05      	ldr	r4, [sp, #20]
10000f76:	4660      	mov	r0, ip
10000f78:	46a4      	mov	ip, r4
10000f7a:	9c08      	ldr	r4, [sp, #32]
10000f7c:	4460      	add	r0, ip
10000f7e:	42a0      	cmp	r0, r4
10000f80:	41bf      	sbcs	r7, r7
10000f82:	1880      	adds	r0, r0, r2
10000f84:	4290      	cmp	r0, r2
10000f86:	4192      	sbcs	r2, r2
10000f88:	042e      	lsls	r6, r5, #16
10000f8a:	b29b      	uxth	r3, r3
10000f8c:	18f6      	adds	r6, r6, r3
10000f8e:	9b07      	ldr	r3, [sp, #28]
10000f90:	427f      	negs	r7, r7
10000f92:	18f6      	adds	r6, r6, r3
10000f94:	4253      	negs	r3, r2
10000f96:	9304      	str	r3, [sp, #16]
10000f98:	9b02      	ldr	r3, [sp, #8]
10000f9a:	19f4      	adds	r4, r6, r7
10000f9c:	469c      	mov	ip, r3
10000f9e:	44a4      	add	ip, r4
10000fa0:	4663      	mov	r3, ip
10000fa2:	9a04      	ldr	r2, [sp, #16]
10000fa4:	42bc      	cmp	r4, r7
10000fa6:	41a4      	sbcs	r4, r4
10000fa8:	189b      	adds	r3, r3, r2
10000faa:	9a07      	ldr	r2, [sp, #28]
10000fac:	4264      	negs	r4, r4
10000fae:	4296      	cmp	r6, r2
10000fb0:	41b6      	sbcs	r6, r6
10000fb2:	9a02      	ldr	r2, [sp, #8]
10000fb4:	4276      	negs	r6, r6
10000fb6:	4334      	orrs	r4, r6
10000fb8:	0c2d      	lsrs	r5, r5, #16
10000fba:	1964      	adds	r4, r4, r5
10000fbc:	4594      	cmp	ip, r2
10000fbe:	41ad      	sbcs	r5, r5
10000fc0:	9a04      	ldr	r2, [sp, #16]
10000fc2:	426d      	negs	r5, r5
10000fc4:	4293      	cmp	r3, r2
10000fc6:	4192      	sbcs	r2, r2
10000fc8:	4252      	negs	r2, r2
10000fca:	4315      	orrs	r5, r2
10000fcc:	1964      	adds	r4, r4, r5
10000fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
10000fd0:	1864      	adds	r4, r4, r1
10000fd2:	0241      	lsls	r1, r0, #9
10000fd4:	4311      	orrs	r1, r2
10000fd6:	1e4a      	subs	r2, r1, #1
10000fd8:	4191      	sbcs	r1, r2
10000fda:	0dc0      	lsrs	r0, r0, #23
10000fdc:	0dde      	lsrs	r6, r3, #23
10000fde:	0264      	lsls	r4, r4, #9
10000fe0:	4301      	orrs	r1, r0
10000fe2:	025b      	lsls	r3, r3, #9
10000fe4:	4326      	orrs	r6, r4
10000fe6:	430b      	orrs	r3, r1
10000fe8:	01e4      	lsls	r4, r4, #7
10000fea:	d400      	bmi.n	10000fee <__aeabi_dmul+0x1da>
10000fec:	e0df      	b.n	100011ae <__aeabi_dmul+0x39a>
10000fee:	2101      	movs	r1, #1
10000ff0:	085a      	lsrs	r2, r3, #1
10000ff2:	400b      	ands	r3, r1
10000ff4:	431a      	orrs	r2, r3
10000ff6:	07f3      	lsls	r3, r6, #31
10000ff8:	40ce      	lsrs	r6, r1
10000ffa:	4313      	orrs	r3, r2
10000ffc:	9a03      	ldr	r2, [sp, #12]
10000ffe:	495d      	ldr	r1, [pc, #372]	; (10001174 <__aeabi_dmul+0x360>)
10001000:	1852      	adds	r2, r2, r1
10001002:	2a00      	cmp	r2, #0
10001004:	dc00      	bgt.n	10001008 <__aeabi_dmul+0x1f4>
10001006:	e0d5      	b.n	100011b4 <__aeabi_dmul+0x3a0>
10001008:	0759      	lsls	r1, r3, #29
1000100a:	d009      	beq.n	10001020 <__aeabi_dmul+0x20c>
1000100c:	210f      	movs	r1, #15
1000100e:	4019      	ands	r1, r3
10001010:	2904      	cmp	r1, #4
10001012:	d005      	beq.n	10001020 <__aeabi_dmul+0x20c>
10001014:	1d19      	adds	r1, r3, #4
10001016:	4299      	cmp	r1, r3
10001018:	419b      	sbcs	r3, r3
1000101a:	425b      	negs	r3, r3
1000101c:	18f6      	adds	r6, r6, r3
1000101e:	000b      	movs	r3, r1
10001020:	01f1      	lsls	r1, r6, #7
10001022:	d506      	bpl.n	10001032 <__aeabi_dmul+0x21e>
10001024:	2180      	movs	r1, #128	; 0x80
10001026:	00c9      	lsls	r1, r1, #3
10001028:	468c      	mov	ip, r1
1000102a:	4a53      	ldr	r2, [pc, #332]	; (10001178 <__aeabi_dmul+0x364>)
1000102c:	4016      	ands	r6, r2
1000102e:	9a03      	ldr	r2, [sp, #12]
10001030:	4462      	add	r2, ip
10001032:	4952      	ldr	r1, [pc, #328]	; (1000117c <__aeabi_dmul+0x368>)
10001034:	428a      	cmp	r2, r1
10001036:	dd00      	ble.n	1000103a <__aeabi_dmul+0x226>
10001038:	e109      	b.n	1000124e <__aeabi_dmul+0x43a>
1000103a:	0774      	lsls	r4, r6, #29
1000103c:	08db      	lsrs	r3, r3, #3
1000103e:	431c      	orrs	r4, r3
10001040:	08f6      	lsrs	r6, r6, #3
10001042:	0513      	lsls	r3, r2, #20
10001044:	0336      	lsls	r6, r6, #12
10001046:	9a00      	ldr	r2, [sp, #0]
10001048:	0b36      	lsrs	r6, r6, #12
1000104a:	4333      	orrs	r3, r6
1000104c:	07d2      	lsls	r2, r2, #31
1000104e:	4313      	orrs	r3, r2
10001050:	0020      	movs	r0, r4
10001052:	0019      	movs	r1, r3
10001054:	b00b      	add	sp, #44	; 0x2c
10001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001058:	002c      	movs	r4, r5
1000105a:	4304      	orrs	r4, r0
1000105c:	d02b      	beq.n	100010b6 <__aeabi_dmul+0x2a2>
1000105e:	2d00      	cmp	r5, #0
10001060:	d016      	beq.n	10001090 <__aeabi_dmul+0x27c>
10001062:	0028      	movs	r0, r5
10001064:	f7ff f93a 	bl	100002dc <__clzsi2>
10001068:	0004      	movs	r4, r0
1000106a:	0002      	movs	r2, r0
1000106c:	3c0b      	subs	r4, #11
1000106e:	231d      	movs	r3, #29
10001070:	0030      	movs	r0, r6
10001072:	1b1b      	subs	r3, r3, r4
10001074:	0011      	movs	r1, r2
10001076:	40d8      	lsrs	r0, r3
10001078:	3908      	subs	r1, #8
1000107a:	408d      	lsls	r5, r1
1000107c:	0003      	movs	r3, r0
1000107e:	432b      	orrs	r3, r5
10001080:	0035      	movs	r5, r6
10001082:	408d      	lsls	r5, r1
10001084:	493e      	ldr	r1, [pc, #248]	; (10001180 <__aeabi_dmul+0x36c>)
10001086:	002c      	movs	r4, r5
10001088:	1a8a      	subs	r2, r1, r2
1000108a:	001d      	movs	r5, r3
1000108c:	9203      	str	r2, [sp, #12]
1000108e:	e6dc      	b.n	10000e4a <__aeabi_dmul+0x36>
10001090:	f7ff f924 	bl	100002dc <__clzsi2>
10001094:	0004      	movs	r4, r0
10001096:	0002      	movs	r2, r0
10001098:	3415      	adds	r4, #21
1000109a:	3220      	adds	r2, #32
1000109c:	2c1c      	cmp	r4, #28
1000109e:	dde6      	ble.n	1000106e <__aeabi_dmul+0x25a>
100010a0:	0033      	movs	r3, r6
100010a2:	3808      	subs	r0, #8
100010a4:	4083      	lsls	r3, r0
100010a6:	e7ed      	b.n	10001084 <__aeabi_dmul+0x270>
100010a8:	0004      	movs	r4, r0
100010aa:	432c      	orrs	r4, r5
100010ac:	d007      	beq.n	100010be <__aeabi_dmul+0x2aa>
100010ae:	9303      	str	r3, [sp, #12]
100010b0:	0004      	movs	r4, r0
100010b2:	2303      	movs	r3, #3
100010b4:	e6ca      	b.n	10000e4c <__aeabi_dmul+0x38>
100010b6:	0025      	movs	r5, r4
100010b8:	2301      	movs	r3, #1
100010ba:	9403      	str	r4, [sp, #12]
100010bc:	e6c6      	b.n	10000e4c <__aeabi_dmul+0x38>
100010be:	9303      	str	r3, [sp, #12]
100010c0:	0025      	movs	r5, r4
100010c2:	2302      	movs	r3, #2
100010c4:	e6c2      	b.n	10000e4c <__aeabi_dmul+0x38>
100010c6:	9b00      	ldr	r3, [sp, #0]
100010c8:	4333      	orrs	r3, r6
100010ca:	d029      	beq.n	10001120 <__aeabi_dmul+0x30c>
100010cc:	2e00      	cmp	r6, #0
100010ce:	d014      	beq.n	100010fa <__aeabi_dmul+0x2e6>
100010d0:	0030      	movs	r0, r6
100010d2:	f7ff f903 	bl	100002dc <__clzsi2>
100010d6:	0001      	movs	r1, r0
100010d8:	0003      	movs	r3, r0
100010da:	390b      	subs	r1, #11
100010dc:	221d      	movs	r2, #29
100010de:	0018      	movs	r0, r3
100010e0:	1a52      	subs	r2, r2, r1
100010e2:	9900      	ldr	r1, [sp, #0]
100010e4:	3808      	subs	r0, #8
100010e6:	4086      	lsls	r6, r0
100010e8:	40d1      	lsrs	r1, r2
100010ea:	4331      	orrs	r1, r6
100010ec:	9e00      	ldr	r6, [sp, #0]
100010ee:	4086      	lsls	r6, r0
100010f0:	4823      	ldr	r0, [pc, #140]	; (10001180 <__aeabi_dmul+0x36c>)
100010f2:	1ac0      	subs	r0, r0, r3
100010f4:	0033      	movs	r3, r6
100010f6:	000e      	movs	r6, r1
100010f8:	e6c0      	b.n	10000e7c <__aeabi_dmul+0x68>
100010fa:	f7ff f8ef 	bl	100002dc <__clzsi2>
100010fe:	0001      	movs	r1, r0
10001100:	0003      	movs	r3, r0
10001102:	3115      	adds	r1, #21
10001104:	3320      	adds	r3, #32
10001106:	291c      	cmp	r1, #28
10001108:	dde8      	ble.n	100010dc <__aeabi_dmul+0x2c8>
1000110a:	9900      	ldr	r1, [sp, #0]
1000110c:	3808      	subs	r0, #8
1000110e:	4081      	lsls	r1, r0
10001110:	e7ee      	b.n	100010f0 <__aeabi_dmul+0x2dc>
10001112:	9b00      	ldr	r3, [sp, #0]
10001114:	4333      	orrs	r3, r6
10001116:	d007      	beq.n	10001128 <__aeabi_dmul+0x314>
10001118:	0003      	movs	r3, r0
1000111a:	0010      	movs	r0, r2
1000111c:	2203      	movs	r2, #3
1000111e:	e6ae      	b.n	10000e7e <__aeabi_dmul+0x6a>
10001120:	001e      	movs	r6, r3
10001122:	0018      	movs	r0, r3
10001124:	2201      	movs	r2, #1
10001126:	e6aa      	b.n	10000e7e <__aeabi_dmul+0x6a>
10001128:	0010      	movs	r0, r2
1000112a:	001e      	movs	r6, r3
1000112c:	2202      	movs	r2, #2
1000112e:	e6a6      	b.n	10000e7e <__aeabi_dmul+0x6a>
10001130:	2101      	movs	r1, #1
10001132:	4081      	lsls	r1, r0
10001134:	20a6      	movs	r0, #166	; 0xa6
10001136:	000f      	movs	r7, r1
10001138:	00c0      	lsls	r0, r0, #3
1000113a:	4007      	ands	r7, r0
1000113c:	4201      	tst	r1, r0
1000113e:	d127      	bne.n	10001190 <__aeabi_dmul+0x37c>
10001140:	2090      	movs	r0, #144	; 0x90
10001142:	0080      	lsls	r0, r0, #2
10001144:	4201      	tst	r1, r0
10001146:	d177      	bne.n	10001238 <__aeabi_dmul+0x424>
10001148:	38b9      	subs	r0, #185	; 0xb9
1000114a:	38ff      	subs	r0, #255	; 0xff
1000114c:	4201      	tst	r1, r0
1000114e:	d100      	bne.n	10001152 <__aeabi_dmul+0x33e>
10001150:	e6ab      	b.n	10000eaa <__aeabi_dmul+0x96>
10001152:	9904      	ldr	r1, [sp, #16]
10001154:	9100      	str	r1, [sp, #0]
10001156:	2a02      	cmp	r2, #2
10001158:	d079      	beq.n	1000124e <__aeabi_dmul+0x43a>
1000115a:	2a03      	cmp	r2, #3
1000115c:	d075      	beq.n	1000124a <__aeabi_dmul+0x436>
1000115e:	2a01      	cmp	r2, #1
10001160:	d000      	beq.n	10001164 <__aeabi_dmul+0x350>
10001162:	e74b      	b.n	10000ffc <__aeabi_dmul+0x1e8>
10001164:	2600      	movs	r6, #0
10001166:	0034      	movs	r4, r6
10001168:	0032      	movs	r2, r6
1000116a:	e76a      	b.n	10001042 <__aeabi_dmul+0x22e>
1000116c:	000007ff 	.word	0x000007ff
10001170:	fffffc01 	.word	0xfffffc01
10001174:	000003ff 	.word	0x000003ff
10001178:	feffffff 	.word	0xfeffffff
1000117c:	000007fe 	.word	0x000007fe
10001180:	fffffc0d 	.word	0xfffffc0d
10001184:	9905      	ldr	r1, [sp, #20]
10001186:	9100      	str	r1, [sp, #0]
10001188:	280f      	cmp	r0, #15
1000118a:	d005      	beq.n	10001198 <__aeabi_dmul+0x384>
1000118c:	280b      	cmp	r0, #11
1000118e:	d0e0      	beq.n	10001152 <__aeabi_dmul+0x33e>
10001190:	002e      	movs	r6, r5
10001192:	0023      	movs	r3, r4
10001194:	9a02      	ldr	r2, [sp, #8]
10001196:	e7de      	b.n	10001156 <__aeabi_dmul+0x342>
10001198:	2280      	movs	r2, #128	; 0x80
1000119a:	0312      	lsls	r2, r2, #12
1000119c:	4215      	tst	r5, r2
1000119e:	d04f      	beq.n	10001240 <__aeabi_dmul+0x42c>
100011a0:	4216      	tst	r6, r2
100011a2:	d14d      	bne.n	10001240 <__aeabi_dmul+0x42c>
100011a4:	0035      	movs	r5, r6
100011a6:	9a04      	ldr	r2, [sp, #16]
100011a8:	9200      	str	r2, [sp, #0]
100011aa:	001c      	movs	r4, r3
100011ac:	e048      	b.n	10001240 <__aeabi_dmul+0x42c>
100011ae:	9a06      	ldr	r2, [sp, #24]
100011b0:	9203      	str	r2, [sp, #12]
100011b2:	e723      	b.n	10000ffc <__aeabi_dmul+0x1e8>
100011b4:	2001      	movs	r0, #1
100011b6:	1a80      	subs	r0, r0, r2
100011b8:	2838      	cmp	r0, #56	; 0x38
100011ba:	dcd3      	bgt.n	10001164 <__aeabi_dmul+0x350>
100011bc:	281f      	cmp	r0, #31
100011be:	dc27      	bgt.n	10001210 <__aeabi_dmul+0x3fc>
100011c0:	4926      	ldr	r1, [pc, #152]	; (1000125c <__aeabi_dmul+0x448>)
100011c2:	9a03      	ldr	r2, [sp, #12]
100011c4:	468c      	mov	ip, r1
100011c6:	001c      	movs	r4, r3
100011c8:	4462      	add	r2, ip
100011ca:	0031      	movs	r1, r6
100011cc:	4093      	lsls	r3, r2
100011ce:	4091      	lsls	r1, r2
100011d0:	40c4      	lsrs	r4, r0
100011d2:	001a      	movs	r2, r3
100011d4:	4321      	orrs	r1, r4
100011d6:	1e53      	subs	r3, r2, #1
100011d8:	419a      	sbcs	r2, r3
100011da:	000b      	movs	r3, r1
100011dc:	40c6      	lsrs	r6, r0
100011de:	4313      	orrs	r3, r2
100011e0:	075a      	lsls	r2, r3, #29
100011e2:	d009      	beq.n	100011f8 <__aeabi_dmul+0x3e4>
100011e4:	220f      	movs	r2, #15
100011e6:	401a      	ands	r2, r3
100011e8:	2a04      	cmp	r2, #4
100011ea:	d005      	beq.n	100011f8 <__aeabi_dmul+0x3e4>
100011ec:	1d1a      	adds	r2, r3, #4
100011ee:	429a      	cmp	r2, r3
100011f0:	419b      	sbcs	r3, r3
100011f2:	425b      	negs	r3, r3
100011f4:	18f6      	adds	r6, r6, r3
100011f6:	0013      	movs	r3, r2
100011f8:	2180      	movs	r1, #128	; 0x80
100011fa:	0030      	movs	r0, r6
100011fc:	0409      	lsls	r1, r1, #16
100011fe:	4008      	ands	r0, r1
10001200:	420e      	tst	r6, r1
10001202:	d127      	bne.n	10001254 <__aeabi_dmul+0x440>
10001204:	0774      	lsls	r4, r6, #29
10001206:	08db      	lsrs	r3, r3, #3
10001208:	0002      	movs	r2, r0
1000120a:	431c      	orrs	r4, r3
1000120c:	08f6      	lsrs	r6, r6, #3
1000120e:	e718      	b.n	10001042 <__aeabi_dmul+0x22e>
10001210:	211f      	movs	r1, #31
10001212:	4249      	negs	r1, r1
10001214:	1a8a      	subs	r2, r1, r2
10001216:	0031      	movs	r1, r6
10001218:	40d1      	lsrs	r1, r2
1000121a:	2200      	movs	r2, #0
1000121c:	2820      	cmp	r0, #32
1000121e:	d005      	beq.n	1000122c <__aeabi_dmul+0x418>
10001220:	480f      	ldr	r0, [pc, #60]	; (10001260 <__aeabi_dmul+0x44c>)
10001222:	9a03      	ldr	r2, [sp, #12]
10001224:	4684      	mov	ip, r0
10001226:	4462      	add	r2, ip
10001228:	4096      	lsls	r6, r2
1000122a:	0032      	movs	r2, r6
1000122c:	4313      	orrs	r3, r2
1000122e:	1e5a      	subs	r2, r3, #1
10001230:	4193      	sbcs	r3, r2
10001232:	2600      	movs	r6, #0
10001234:	430b      	orrs	r3, r1
10001236:	e7d3      	b.n	100011e0 <__aeabi_dmul+0x3cc>
10001238:	2580      	movs	r5, #128	; 0x80
1000123a:	003c      	movs	r4, r7
1000123c:	032d      	lsls	r5, r5, #12
1000123e:	9700      	str	r7, [sp, #0]
10001240:	2680      	movs	r6, #128	; 0x80
10001242:	0336      	lsls	r6, r6, #12
10001244:	432e      	orrs	r6, r5
10001246:	4a07      	ldr	r2, [pc, #28]	; (10001264 <__aeabi_dmul+0x450>)
10001248:	e6fb      	b.n	10001042 <__aeabi_dmul+0x22e>
1000124a:	0035      	movs	r5, r6
1000124c:	e7ad      	b.n	100011aa <__aeabi_dmul+0x396>
1000124e:	2600      	movs	r6, #0
10001250:	0034      	movs	r4, r6
10001252:	e7f8      	b.n	10001246 <__aeabi_dmul+0x432>
10001254:	2600      	movs	r6, #0
10001256:	2201      	movs	r2, #1
10001258:	0034      	movs	r4, r6
1000125a:	e6f2      	b.n	10001042 <__aeabi_dmul+0x22e>
1000125c:	0000041e 	.word	0x0000041e
10001260:	0000043e 	.word	0x0000043e
10001264:	000007ff 	.word	0x000007ff

10001268 <__aeabi_dsub>:
10001268:	b5f0      	push	{r4, r5, r6, r7, lr}
1000126a:	b085      	sub	sp, #20
1000126c:	9200      	str	r2, [sp, #0]
1000126e:	9301      	str	r3, [sp, #4]
10001270:	0fcb      	lsrs	r3, r1, #31
10001272:	030d      	lsls	r5, r1, #12
10001274:	9302      	str	r3, [sp, #8]
10001276:	9b01      	ldr	r3, [sp, #4]
10001278:	004c      	lsls	r4, r1, #1
1000127a:	0a6d      	lsrs	r5, r5, #9
1000127c:	0f41      	lsrs	r1, r0, #29
1000127e:	4329      	orrs	r1, r5
10001280:	005d      	lsls	r5, r3, #1
10001282:	031e      	lsls	r6, r3, #12
10001284:	0d6b      	lsrs	r3, r5, #21
10001286:	469c      	mov	ip, r3
10001288:	9b01      	ldr	r3, [sp, #4]
1000128a:	0a76      	lsrs	r6, r6, #9
1000128c:	0fdd      	lsrs	r5, r3, #31
1000128e:	9b00      	ldr	r3, [sp, #0]
10001290:	9a00      	ldr	r2, [sp, #0]
10001292:	0f5b      	lsrs	r3, r3, #29
10001294:	4333      	orrs	r3, r6
10001296:	4ebe      	ldr	r6, [pc, #760]	; (10001590 <__aeabi_dsub+0x328>)
10001298:	0d64      	lsrs	r4, r4, #21
1000129a:	00c0      	lsls	r0, r0, #3
1000129c:	00d2      	lsls	r2, r2, #3
1000129e:	45b4      	cmp	ip, r6
100012a0:	d123      	bne.n	100012ea <__aeabi_dsub+0x82>
100012a2:	001e      	movs	r6, r3
100012a4:	4316      	orrs	r6, r2
100012a6:	9603      	str	r6, [sp, #12]
100012a8:	9f03      	ldr	r7, [sp, #12]
100012aa:	4eba      	ldr	r6, [pc, #744]	; (10001594 <__aeabi_dsub+0x32c>)
100012ac:	19a6      	adds	r6, r4, r6
100012ae:	2f00      	cmp	r7, #0
100012b0:	d00c      	beq.n	100012cc <__aeabi_dsub+0x64>
100012b2:	9f02      	ldr	r7, [sp, #8]
100012b4:	9500      	str	r5, [sp, #0]
100012b6:	42af      	cmp	r7, r5
100012b8:	d000      	beq.n	100012bc <__aeabi_dsub+0x54>
100012ba:	e1b5      	b.n	10001628 <__aeabi_dsub+0x3c0>
100012bc:	2e00      	cmp	r6, #0
100012be:	d100      	bne.n	100012c2 <__aeabi_dsub+0x5a>
100012c0:	e104      	b.n	100014cc <__aeabi_dsub+0x264>
100012c2:	2c00      	cmp	r4, #0
100012c4:	d000      	beq.n	100012c8 <__aeabi_dsub+0x60>
100012c6:	e2ba      	b.n	1000183e <__aeabi_dsub+0x5d6>
100012c8:	4664      	mov	r4, ip
100012ca:	e0b8      	b.n	1000143e <__aeabi_dsub+0x1d6>
100012cc:	2701      	movs	r7, #1
100012ce:	406f      	eors	r7, r5
100012d0:	9d02      	ldr	r5, [sp, #8]
100012d2:	9700      	str	r7, [sp, #0]
100012d4:	42bd      	cmp	r5, r7
100012d6:	d000      	beq.n	100012da <__aeabi_dsub+0x72>
100012d8:	e1af      	b.n	1000163a <__aeabi_dsub+0x3d2>
100012da:	2e00      	cmp	r6, #0
100012dc:	d100      	bne.n	100012e0 <__aeabi_dsub+0x78>
100012de:	e0f5      	b.n	100014cc <__aeabi_dsub+0x264>
100012e0:	2c00      	cmp	r4, #0
100012e2:	d0f1      	beq.n	100012c8 <__aeabi_dsub+0x60>
100012e4:	9903      	ldr	r1, [sp, #12]
100012e6:	0008      	movs	r0, r1
100012e8:	e02f      	b.n	1000134a <__aeabi_dsub+0xe2>
100012ea:	2601      	movs	r6, #1
100012ec:	4075      	eors	r5, r6
100012ee:	9500      	str	r5, [sp, #0]
100012f0:	4665      	mov	r5, ip
100012f2:	9f02      	ldr	r7, [sp, #8]
100012f4:	9e00      	ldr	r6, [sp, #0]
100012f6:	1b65      	subs	r5, r4, r5
100012f8:	42b7      	cmp	r7, r6
100012fa:	d000      	beq.n	100012fe <__aeabi_dsub+0x96>
100012fc:	e12e      	b.n	1000155c <__aeabi_dsub+0x2f4>
100012fe:	2d00      	cmp	r5, #0
10001300:	dc00      	bgt.n	10001304 <__aeabi_dsub+0x9c>
10001302:	e076      	b.n	100013f2 <__aeabi_dsub+0x18a>
10001304:	4667      	mov	r7, ip
10001306:	2f00      	cmp	r7, #0
10001308:	d121      	bne.n	1000134e <__aeabi_dsub+0xe6>
1000130a:	001f      	movs	r7, r3
1000130c:	4317      	orrs	r7, r2
1000130e:	d100      	bne.n	10001312 <__aeabi_dsub+0xaa>
10001310:	e122      	b.n	10001558 <__aeabi_dsub+0x2f0>
10001312:	1e6f      	subs	r7, r5, #1
10001314:	2d01      	cmp	r5, #1
10001316:	d115      	bne.n	10001344 <__aeabi_dsub+0xdc>
10001318:	1882      	adds	r2, r0, r2
1000131a:	4282      	cmp	r2, r0
1000131c:	4180      	sbcs	r0, r0
1000131e:	18c9      	adds	r1, r1, r3
10001320:	4240      	negs	r0, r0
10001322:	1809      	adds	r1, r1, r0
10001324:	2401      	movs	r4, #1
10001326:	0010      	movs	r0, r2
10001328:	020b      	lsls	r3, r1, #8
1000132a:	d400      	bmi.n	1000132e <__aeabi_dsub+0xc6>
1000132c:	e096      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000132e:	2402      	movs	r4, #2
10001330:	4b99      	ldr	r3, [pc, #612]	; (10001598 <__aeabi_dsub+0x330>)
10001332:	0842      	lsrs	r2, r0, #1
10001334:	400b      	ands	r3, r1
10001336:	2101      	movs	r1, #1
10001338:	4001      	ands	r1, r0
1000133a:	430a      	orrs	r2, r1
1000133c:	07d8      	lsls	r0, r3, #31
1000133e:	4310      	orrs	r0, r2
10001340:	0859      	lsrs	r1, r3, #1
10001342:	e08b      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001344:	4e92      	ldr	r6, [pc, #584]	; (10001590 <__aeabi_dsub+0x328>)
10001346:	42b5      	cmp	r5, r6
10001348:	d122      	bne.n	10001390 <__aeabi_dsub+0x128>
1000134a:	4c91      	ldr	r4, [pc, #580]	; (10001590 <__aeabi_dsub+0x328>)
1000134c:	e086      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000134e:	4e90      	ldr	r6, [pc, #576]	; (10001590 <__aeabi_dsub+0x328>)
10001350:	42b4      	cmp	r4, r6
10001352:	d100      	bne.n	10001356 <__aeabi_dsub+0xee>
10001354:	e082      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001356:	2600      	movs	r6, #0
10001358:	46b4      	mov	ip, r6
1000135a:	3601      	adds	r6, #1
1000135c:	2d38      	cmp	r5, #56	; 0x38
1000135e:	dc1a      	bgt.n	10001396 <__aeabi_dsub+0x12e>
10001360:	2680      	movs	r6, #128	; 0x80
10001362:	002f      	movs	r7, r5
10001364:	0436      	lsls	r6, r6, #16
10001366:	4333      	orrs	r3, r6
10001368:	2f1f      	cmp	r7, #31
1000136a:	dc31      	bgt.n	100013d0 <__aeabi_dsub+0x168>
1000136c:	2520      	movs	r5, #32
1000136e:	001e      	movs	r6, r3
10001370:	1bed      	subs	r5, r5, r7
10001372:	40ae      	lsls	r6, r5
10001374:	46b4      	mov	ip, r6
10001376:	0016      	movs	r6, r2
10001378:	9500      	str	r5, [sp, #0]
1000137a:	40fe      	lsrs	r6, r7
1000137c:	4665      	mov	r5, ip
1000137e:	432e      	orrs	r6, r5
10001380:	9d00      	ldr	r5, [sp, #0]
10001382:	40fb      	lsrs	r3, r7
10001384:	40aa      	lsls	r2, r5
10001386:	1e55      	subs	r5, r2, #1
10001388:	41aa      	sbcs	r2, r5
1000138a:	4316      	orrs	r6, r2
1000138c:	469c      	mov	ip, r3
1000138e:	e002      	b.n	10001396 <__aeabi_dsub+0x12e>
10001390:	2601      	movs	r6, #1
10001392:	2f38      	cmp	r7, #56	; 0x38
10001394:	dde8      	ble.n	10001368 <__aeabi_dsub+0x100>
10001396:	1836      	adds	r6, r6, r0
10001398:	4286      	cmp	r6, r0
1000139a:	4180      	sbcs	r0, r0
1000139c:	4461      	add	r1, ip
1000139e:	4240      	negs	r0, r0
100013a0:	1809      	adds	r1, r1, r0
100013a2:	0030      	movs	r0, r6
100013a4:	020b      	lsls	r3, r1, #8
100013a6:	d559      	bpl.n	1000145c <__aeabi_dsub+0x1f4>
100013a8:	2600      	movs	r6, #0
100013aa:	4b79      	ldr	r3, [pc, #484]	; (10001590 <__aeabi_dsub+0x328>)
100013ac:	3401      	adds	r4, #1
100013ae:	46b4      	mov	ip, r6
100013b0:	429c      	cmp	r4, r3
100013b2:	d1bd      	bne.n	10001330 <__aeabi_dsub+0xc8>
100013b4:	4b79      	ldr	r3, [pc, #484]	; (1000159c <__aeabi_dsub+0x334>)
100013b6:	0524      	lsls	r4, r4, #20
100013b8:	401c      	ands	r4, r3
100013ba:	4663      	mov	r3, ip
100013bc:	031b      	lsls	r3, r3, #12
100013be:	0b1b      	lsrs	r3, r3, #12
100013c0:	431c      	orrs	r4, r3
100013c2:	9b02      	ldr	r3, [sp, #8]
100013c4:	0030      	movs	r0, r6
100013c6:	07db      	lsls	r3, r3, #31
100013c8:	431c      	orrs	r4, r3
100013ca:	0021      	movs	r1, r4
100013cc:	b005      	add	sp, #20
100013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100013d0:	003d      	movs	r5, r7
100013d2:	001e      	movs	r6, r3
100013d4:	3d20      	subs	r5, #32
100013d6:	40ee      	lsrs	r6, r5
100013d8:	2500      	movs	r5, #0
100013da:	2f20      	cmp	r7, #32
100013dc:	d003      	beq.n	100013e6 <__aeabi_dsub+0x17e>
100013de:	3540      	adds	r5, #64	; 0x40
100013e0:	1bed      	subs	r5, r5, r7
100013e2:	40ab      	lsls	r3, r5
100013e4:	001d      	movs	r5, r3
100013e6:	4315      	orrs	r5, r2
100013e8:	1e6b      	subs	r3, r5, #1
100013ea:	419d      	sbcs	r5, r3
100013ec:	2300      	movs	r3, #0
100013ee:	432e      	orrs	r6, r5
100013f0:	e7cc      	b.n	1000138c <__aeabi_dsub+0x124>
100013f2:	2d00      	cmp	r5, #0
100013f4:	d06a      	beq.n	100014cc <__aeabi_dsub+0x264>
100013f6:	4665      	mov	r5, ip
100013f8:	1b2d      	subs	r5, r5, r4
100013fa:	2c00      	cmp	r4, #0
100013fc:	d01e      	beq.n	1000143c <__aeabi_dsub+0x1d4>
100013fe:	2400      	movs	r4, #0
10001400:	2601      	movs	r6, #1
10001402:	2d38      	cmp	r5, #56	; 0x38
10001404:	dc12      	bgt.n	1000142c <__aeabi_dsub+0x1c4>
10001406:	2480      	movs	r4, #128	; 0x80
10001408:	0424      	lsls	r4, r4, #16
1000140a:	4321      	orrs	r1, r4
1000140c:	2d1f      	cmp	r5, #31
1000140e:	dc4b      	bgt.n	100014a8 <__aeabi_dsub+0x240>
10001410:	2420      	movs	r4, #32
10001412:	000f      	movs	r7, r1
10001414:	0006      	movs	r6, r0
10001416:	1b64      	subs	r4, r4, r5
10001418:	40a0      	lsls	r0, r4
1000141a:	40a7      	lsls	r7, r4
1000141c:	40ee      	lsrs	r6, r5
1000141e:	4337      	orrs	r7, r6
10001420:	0006      	movs	r6, r0
10001422:	40e9      	lsrs	r1, r5
10001424:	1e70      	subs	r0, r6, #1
10001426:	4186      	sbcs	r6, r0
10001428:	000c      	movs	r4, r1
1000142a:	433e      	orrs	r6, r7
1000142c:	18b0      	adds	r0, r6, r2
1000142e:	4290      	cmp	r0, r2
10001430:	4192      	sbcs	r2, r2
10001432:	18e4      	adds	r4, r4, r3
10001434:	4252      	negs	r2, r2
10001436:	18a1      	adds	r1, r4, r2
10001438:	4664      	mov	r4, ip
1000143a:	e7b3      	b.n	100013a4 <__aeabi_dsub+0x13c>
1000143c:	002c      	movs	r4, r5
1000143e:	000d      	movs	r5, r1
10001440:	4305      	orrs	r5, r0
10001442:	d029      	beq.n	10001498 <__aeabi_dsub+0x230>
10001444:	1e65      	subs	r5, r4, #1
10001446:	2c01      	cmp	r4, #1
10001448:	d123      	bne.n	10001492 <__aeabi_dsub+0x22a>
1000144a:	1880      	adds	r0, r0, r2
1000144c:	4290      	cmp	r0, r2
1000144e:	4192      	sbcs	r2, r2
10001450:	18c9      	adds	r1, r1, r3
10001452:	4252      	negs	r2, r2
10001454:	1889      	adds	r1, r1, r2
10001456:	020b      	lsls	r3, r1, #8
10001458:	d500      	bpl.n	1000145c <__aeabi_dsub+0x1f4>
1000145a:	e768      	b.n	1000132e <__aeabi_dsub+0xc6>
1000145c:	0743      	lsls	r3, r0, #29
1000145e:	d009      	beq.n	10001474 <__aeabi_dsub+0x20c>
10001460:	230f      	movs	r3, #15
10001462:	4003      	ands	r3, r0
10001464:	2b04      	cmp	r3, #4
10001466:	d005      	beq.n	10001474 <__aeabi_dsub+0x20c>
10001468:	1d03      	adds	r3, r0, #4
1000146a:	4283      	cmp	r3, r0
1000146c:	4180      	sbcs	r0, r0
1000146e:	4240      	negs	r0, r0
10001470:	1809      	adds	r1, r1, r0
10001472:	0018      	movs	r0, r3
10001474:	020b      	lsls	r3, r1, #8
10001476:	d400      	bmi.n	1000147a <__aeabi_dsub+0x212>
10001478:	e1e4      	b.n	10001844 <__aeabi_dsub+0x5dc>
1000147a:	2600      	movs	r6, #0
1000147c:	4b44      	ldr	r3, [pc, #272]	; (10001590 <__aeabi_dsub+0x328>)
1000147e:	3401      	adds	r4, #1
10001480:	46b4      	mov	ip, r6
10001482:	429c      	cmp	r4, r3
10001484:	d096      	beq.n	100013b4 <__aeabi_dsub+0x14c>
10001486:	4b44      	ldr	r3, [pc, #272]	; (10001598 <__aeabi_dsub+0x330>)
10001488:	08c0      	lsrs	r0, r0, #3
1000148a:	400b      	ands	r3, r1
1000148c:	075e      	lsls	r6, r3, #29
1000148e:	4306      	orrs	r6, r0
10001490:	e1cd      	b.n	1000182e <__aeabi_dsub+0x5c6>
10001492:	4e3f      	ldr	r6, [pc, #252]	; (10001590 <__aeabi_dsub+0x328>)
10001494:	42b4      	cmp	r4, r6
10001496:	d102      	bne.n	1000149e <__aeabi_dsub+0x236>
10001498:	0019      	movs	r1, r3
1000149a:	0010      	movs	r0, r2
1000149c:	e7de      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000149e:	2d38      	cmp	r5, #56	; 0x38
100014a0:	ddb4      	ble.n	1000140c <__aeabi_dsub+0x1a4>
100014a2:	2400      	movs	r4, #0
100014a4:	2601      	movs	r6, #1
100014a6:	e7c1      	b.n	1000142c <__aeabi_dsub+0x1c4>
100014a8:	002c      	movs	r4, r5
100014aa:	000e      	movs	r6, r1
100014ac:	3c20      	subs	r4, #32
100014ae:	40e6      	lsrs	r6, r4
100014b0:	0034      	movs	r4, r6
100014b2:	2600      	movs	r6, #0
100014b4:	2d20      	cmp	r5, #32
100014b6:	d003      	beq.n	100014c0 <__aeabi_dsub+0x258>
100014b8:	3640      	adds	r6, #64	; 0x40
100014ba:	1b76      	subs	r6, r6, r5
100014bc:	40b1      	lsls	r1, r6
100014be:	000e      	movs	r6, r1
100014c0:	4306      	orrs	r6, r0
100014c2:	1e71      	subs	r1, r6, #1
100014c4:	418e      	sbcs	r6, r1
100014c6:	4326      	orrs	r6, r4
100014c8:	2400      	movs	r4, #0
100014ca:	e7af      	b.n	1000142c <__aeabi_dsub+0x1c4>
100014cc:	4e34      	ldr	r6, [pc, #208]	; (100015a0 <__aeabi_dsub+0x338>)
100014ce:	1c65      	adds	r5, r4, #1
100014d0:	4235      	tst	r5, r6
100014d2:	d133      	bne.n	1000153c <__aeabi_dsub+0x2d4>
100014d4:	000d      	movs	r5, r1
100014d6:	4305      	orrs	r5, r0
100014d8:	2c00      	cmp	r4, #0
100014da:	d111      	bne.n	10001500 <__aeabi_dsub+0x298>
100014dc:	2d00      	cmp	r5, #0
100014de:	d0db      	beq.n	10001498 <__aeabi_dsub+0x230>
100014e0:	001d      	movs	r5, r3
100014e2:	4315      	orrs	r5, r2
100014e4:	d0ba      	beq.n	1000145c <__aeabi_dsub+0x1f4>
100014e6:	1882      	adds	r2, r0, r2
100014e8:	4282      	cmp	r2, r0
100014ea:	4180      	sbcs	r0, r0
100014ec:	18c9      	adds	r1, r1, r3
100014ee:	4240      	negs	r0, r0
100014f0:	1809      	adds	r1, r1, r0
100014f2:	0010      	movs	r0, r2
100014f4:	020b      	lsls	r3, r1, #8
100014f6:	d5b1      	bpl.n	1000145c <__aeabi_dsub+0x1f4>
100014f8:	4b27      	ldr	r3, [pc, #156]	; (10001598 <__aeabi_dsub+0x330>)
100014fa:	3401      	adds	r4, #1
100014fc:	4019      	ands	r1, r3
100014fe:	e7ad      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001500:	2d00      	cmp	r5, #0
10001502:	d100      	bne.n	10001506 <__aeabi_dsub+0x29e>
10001504:	e19b      	b.n	1000183e <__aeabi_dsub+0x5d6>
10001506:	001c      	movs	r4, r3
10001508:	4314      	orrs	r4, r2
1000150a:	2c00      	cmp	r4, #0
1000150c:	d100      	bne.n	10001510 <__aeabi_dsub+0x2a8>
1000150e:	e71c      	b.n	1000134a <__aeabi_dsub+0xe2>
10001510:	074c      	lsls	r4, r1, #29
10001512:	08c0      	lsrs	r0, r0, #3
10001514:	4320      	orrs	r0, r4
10001516:	2480      	movs	r4, #128	; 0x80
10001518:	08c9      	lsrs	r1, r1, #3
1000151a:	0324      	lsls	r4, r4, #12
1000151c:	4221      	tst	r1, r4
1000151e:	d008      	beq.n	10001532 <__aeabi_dsub+0x2ca>
10001520:	08dd      	lsrs	r5, r3, #3
10001522:	4225      	tst	r5, r4
10001524:	d105      	bne.n	10001532 <__aeabi_dsub+0x2ca>
10001526:	0029      	movs	r1, r5
10001528:	075b      	lsls	r3, r3, #29
1000152a:	08d0      	lsrs	r0, r2, #3
1000152c:	4318      	orrs	r0, r3
1000152e:	9b00      	ldr	r3, [sp, #0]
10001530:	9302      	str	r3, [sp, #8]
10001532:	00cb      	lsls	r3, r1, #3
10001534:	0f41      	lsrs	r1, r0, #29
10001536:	4319      	orrs	r1, r3
10001538:	00c0      	lsls	r0, r0, #3
1000153a:	e706      	b.n	1000134a <__aeabi_dsub+0xe2>
1000153c:	4c14      	ldr	r4, [pc, #80]	; (10001590 <__aeabi_dsub+0x328>)
1000153e:	42a5      	cmp	r5, r4
10001540:	d100      	bne.n	10001544 <__aeabi_dsub+0x2dc>
10001542:	e196      	b.n	10001872 <__aeabi_dsub+0x60a>
10001544:	1882      	adds	r2, r0, r2
10001546:	4282      	cmp	r2, r0
10001548:	4180      	sbcs	r0, r0
1000154a:	18cb      	adds	r3, r1, r3
1000154c:	4240      	negs	r0, r0
1000154e:	181b      	adds	r3, r3, r0
10001550:	07d8      	lsls	r0, r3, #31
10001552:	0852      	lsrs	r2, r2, #1
10001554:	4310      	orrs	r0, r2
10001556:	0859      	lsrs	r1, r3, #1
10001558:	002c      	movs	r4, r5
1000155a:	e77f      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000155c:	2d00      	cmp	r5, #0
1000155e:	dd76      	ble.n	1000164e <__aeabi_dsub+0x3e6>
10001560:	4666      	mov	r6, ip
10001562:	2e00      	cmp	r6, #0
10001564:	d12e      	bne.n	100015c4 <__aeabi_dsub+0x35c>
10001566:	001f      	movs	r7, r3
10001568:	4317      	orrs	r7, r2
1000156a:	d0f5      	beq.n	10001558 <__aeabi_dsub+0x2f0>
1000156c:	1e6f      	subs	r7, r5, #1
1000156e:	2d01      	cmp	r5, #1
10001570:	d118      	bne.n	100015a4 <__aeabi_dsub+0x33c>
10001572:	1a82      	subs	r2, r0, r2
10001574:	4290      	cmp	r0, r2
10001576:	4180      	sbcs	r0, r0
10001578:	1ac9      	subs	r1, r1, r3
1000157a:	4240      	negs	r0, r0
1000157c:	1a09      	subs	r1, r1, r0
1000157e:	2401      	movs	r4, #1
10001580:	0010      	movs	r0, r2
10001582:	020b      	lsls	r3, r1, #8
10001584:	d400      	bmi.n	10001588 <__aeabi_dsub+0x320>
10001586:	e769      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001588:	0249      	lsls	r1, r1, #9
1000158a:	0006      	movs	r6, r0
1000158c:	0a4d      	lsrs	r5, r1, #9
1000158e:	e102      	b.n	10001796 <__aeabi_dsub+0x52e>
10001590:	000007ff 	.word	0x000007ff
10001594:	fffff801 	.word	0xfffff801
10001598:	ff7fffff 	.word	0xff7fffff
1000159c:	7ff00000 	.word	0x7ff00000
100015a0:	000007fe 	.word	0x000007fe
100015a4:	4eb7      	ldr	r6, [pc, #732]	; (10001884 <__aeabi_dsub+0x61c>)
100015a6:	42b5      	cmp	r5, r6
100015a8:	d100      	bne.n	100015ac <__aeabi_dsub+0x344>
100015aa:	e6ce      	b.n	1000134a <__aeabi_dsub+0xe2>
100015ac:	2601      	movs	r6, #1
100015ae:	2f38      	cmp	r7, #56	; 0x38
100015b0:	dd15      	ble.n	100015de <__aeabi_dsub+0x376>
100015b2:	1b86      	subs	r6, r0, r6
100015b4:	4663      	mov	r3, ip
100015b6:	42b0      	cmp	r0, r6
100015b8:	4180      	sbcs	r0, r0
100015ba:	1ac9      	subs	r1, r1, r3
100015bc:	4240      	negs	r0, r0
100015be:	1a09      	subs	r1, r1, r0
100015c0:	0030      	movs	r0, r6
100015c2:	e7de      	b.n	10001582 <__aeabi_dsub+0x31a>
100015c4:	4eaf      	ldr	r6, [pc, #700]	; (10001884 <__aeabi_dsub+0x61c>)
100015c6:	42b4      	cmp	r4, r6
100015c8:	d100      	bne.n	100015cc <__aeabi_dsub+0x364>
100015ca:	e747      	b.n	1000145c <__aeabi_dsub+0x1f4>
100015cc:	2600      	movs	r6, #0
100015ce:	46b4      	mov	ip, r6
100015d0:	3601      	adds	r6, #1
100015d2:	2d38      	cmp	r5, #56	; 0x38
100015d4:	dced      	bgt.n	100015b2 <__aeabi_dsub+0x34a>
100015d6:	2680      	movs	r6, #128	; 0x80
100015d8:	002f      	movs	r7, r5
100015da:	0436      	lsls	r6, r6, #16
100015dc:	4333      	orrs	r3, r6
100015de:	2f1f      	cmp	r7, #31
100015e0:	dc11      	bgt.n	10001606 <__aeabi_dsub+0x39e>
100015e2:	2520      	movs	r5, #32
100015e4:	001e      	movs	r6, r3
100015e6:	1bed      	subs	r5, r5, r7
100015e8:	40ae      	lsls	r6, r5
100015ea:	46b4      	mov	ip, r6
100015ec:	0016      	movs	r6, r2
100015ee:	9500      	str	r5, [sp, #0]
100015f0:	40fe      	lsrs	r6, r7
100015f2:	4665      	mov	r5, ip
100015f4:	432e      	orrs	r6, r5
100015f6:	9d00      	ldr	r5, [sp, #0]
100015f8:	40fb      	lsrs	r3, r7
100015fa:	40aa      	lsls	r2, r5
100015fc:	1e55      	subs	r5, r2, #1
100015fe:	41aa      	sbcs	r2, r5
10001600:	4316      	orrs	r6, r2
10001602:	469c      	mov	ip, r3
10001604:	e7d5      	b.n	100015b2 <__aeabi_dsub+0x34a>
10001606:	003d      	movs	r5, r7
10001608:	001e      	movs	r6, r3
1000160a:	3d20      	subs	r5, #32
1000160c:	40ee      	lsrs	r6, r5
1000160e:	2500      	movs	r5, #0
10001610:	2f20      	cmp	r7, #32
10001612:	d003      	beq.n	1000161c <__aeabi_dsub+0x3b4>
10001614:	3540      	adds	r5, #64	; 0x40
10001616:	1bed      	subs	r5, r5, r7
10001618:	40ab      	lsls	r3, r5
1000161a:	001d      	movs	r5, r3
1000161c:	4315      	orrs	r5, r2
1000161e:	1e6b      	subs	r3, r5, #1
10001620:	419d      	sbcs	r5, r3
10001622:	2300      	movs	r3, #0
10001624:	432e      	orrs	r6, r5
10001626:	e7ec      	b.n	10001602 <__aeabi_dsub+0x39a>
10001628:	2e00      	cmp	r6, #0
1000162a:	d067      	beq.n	100016fc <__aeabi_dsub+0x494>
1000162c:	2c00      	cmp	r4, #0
1000162e:	d025      	beq.n	1000167c <__aeabi_dsub+0x414>
10001630:	0019      	movs	r1, r3
10001632:	0010      	movs	r0, r2
10001634:	4c93      	ldr	r4, [pc, #588]	; (10001884 <__aeabi_dsub+0x61c>)
10001636:	9502      	str	r5, [sp, #8]
10001638:	e710      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000163a:	2e00      	cmp	r6, #0
1000163c:	d05e      	beq.n	100016fc <__aeabi_dsub+0x494>
1000163e:	2c00      	cmp	r4, #0
10001640:	d01f      	beq.n	10001682 <__aeabi_dsub+0x41a>
10001642:	9903      	ldr	r1, [sp, #12]
10001644:	4c8f      	ldr	r4, [pc, #572]	; (10001884 <__aeabi_dsub+0x61c>)
10001646:	0008      	movs	r0, r1
10001648:	9b00      	ldr	r3, [sp, #0]
1000164a:	9302      	str	r3, [sp, #8]
1000164c:	e706      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000164e:	2d00      	cmp	r5, #0
10001650:	d054      	beq.n	100016fc <__aeabi_dsub+0x494>
10001652:	4665      	mov	r5, ip
10001654:	1b2d      	subs	r5, r5, r4
10001656:	2c00      	cmp	r4, #0
10001658:	d11f      	bne.n	1000169a <__aeabi_dsub+0x432>
1000165a:	9c00      	ldr	r4, [sp, #0]
1000165c:	9402      	str	r4, [sp, #8]
1000165e:	002c      	movs	r4, r5
10001660:	000d      	movs	r5, r1
10001662:	4305      	orrs	r5, r0
10001664:	d100      	bne.n	10001668 <__aeabi_dsub+0x400>
10001666:	e717      	b.n	10001498 <__aeabi_dsub+0x230>
10001668:	1e65      	subs	r5, r4, #1
1000166a:	2c01      	cmp	r4, #1
1000166c:	d10c      	bne.n	10001688 <__aeabi_dsub+0x420>
1000166e:	1a10      	subs	r0, r2, r0
10001670:	4282      	cmp	r2, r0
10001672:	4192      	sbcs	r2, r2
10001674:	1a59      	subs	r1, r3, r1
10001676:	4252      	negs	r2, r2
10001678:	1a89      	subs	r1, r1, r2
1000167a:	e782      	b.n	10001582 <__aeabi_dsub+0x31a>
1000167c:	9502      	str	r5, [sp, #8]
1000167e:	4664      	mov	r4, ip
10001680:	e7ee      	b.n	10001660 <__aeabi_dsub+0x3f8>
10001682:	9c00      	ldr	r4, [sp, #0]
10001684:	9402      	str	r4, [sp, #8]
10001686:	e7fa      	b.n	1000167e <__aeabi_dsub+0x416>
10001688:	4e7e      	ldr	r6, [pc, #504]	; (10001884 <__aeabi_dsub+0x61c>)
1000168a:	42b4      	cmp	r4, r6
1000168c:	d100      	bne.n	10001690 <__aeabi_dsub+0x428>
1000168e:	e703      	b.n	10001498 <__aeabi_dsub+0x230>
10001690:	2d38      	cmp	r5, #56	; 0x38
10001692:	dd09      	ble.n	100016a8 <__aeabi_dsub+0x440>
10001694:	2100      	movs	r1, #0
10001696:	2601      	movs	r6, #1
10001698:	e014      	b.n	100016c4 <__aeabi_dsub+0x45c>
1000169a:	2d38      	cmp	r5, #56	; 0x38
1000169c:	dc2b      	bgt.n	100016f6 <__aeabi_dsub+0x48e>
1000169e:	2480      	movs	r4, #128	; 0x80
100016a0:	0424      	lsls	r4, r4, #16
100016a2:	4321      	orrs	r1, r4
100016a4:	9c00      	ldr	r4, [sp, #0]
100016a6:	9402      	str	r4, [sp, #8]
100016a8:	2d1f      	cmp	r5, #31
100016aa:	dc13      	bgt.n	100016d4 <__aeabi_dsub+0x46c>
100016ac:	2420      	movs	r4, #32
100016ae:	000f      	movs	r7, r1
100016b0:	1b64      	subs	r4, r4, r5
100016b2:	0006      	movs	r6, r0
100016b4:	40a0      	lsls	r0, r4
100016b6:	40a7      	lsls	r7, r4
100016b8:	40ee      	lsrs	r6, r5
100016ba:	1e44      	subs	r4, r0, #1
100016bc:	41a0      	sbcs	r0, r4
100016be:	40e9      	lsrs	r1, r5
100016c0:	433e      	orrs	r6, r7
100016c2:	4306      	orrs	r6, r0
100016c4:	1b90      	subs	r0, r2, r6
100016c6:	4282      	cmp	r2, r0
100016c8:	4192      	sbcs	r2, r2
100016ca:	1a59      	subs	r1, r3, r1
100016cc:	4252      	negs	r2, r2
100016ce:	4664      	mov	r4, ip
100016d0:	1a89      	subs	r1, r1, r2
100016d2:	e756      	b.n	10001582 <__aeabi_dsub+0x31a>
100016d4:	002c      	movs	r4, r5
100016d6:	000e      	movs	r6, r1
100016d8:	3c20      	subs	r4, #32
100016da:	40e6      	lsrs	r6, r4
100016dc:	2400      	movs	r4, #0
100016de:	2d20      	cmp	r5, #32
100016e0:	d003      	beq.n	100016ea <__aeabi_dsub+0x482>
100016e2:	3440      	adds	r4, #64	; 0x40
100016e4:	1b64      	subs	r4, r4, r5
100016e6:	40a1      	lsls	r1, r4
100016e8:	000c      	movs	r4, r1
100016ea:	4304      	orrs	r4, r0
100016ec:	1e61      	subs	r1, r4, #1
100016ee:	418c      	sbcs	r4, r1
100016f0:	2100      	movs	r1, #0
100016f2:	4326      	orrs	r6, r4
100016f4:	e7e6      	b.n	100016c4 <__aeabi_dsub+0x45c>
100016f6:	9900      	ldr	r1, [sp, #0]
100016f8:	9102      	str	r1, [sp, #8]
100016fa:	e7cb      	b.n	10001694 <__aeabi_dsub+0x42c>
100016fc:	4e62      	ldr	r6, [pc, #392]	; (10001888 <__aeabi_dsub+0x620>)
100016fe:	1c65      	adds	r5, r4, #1
10001700:	4235      	tst	r5, r6
10001702:	d138      	bne.n	10001776 <__aeabi_dsub+0x50e>
10001704:	001d      	movs	r5, r3
10001706:	4315      	orrs	r5, r2
10001708:	46ac      	mov	ip, r5
1000170a:	000d      	movs	r5, r1
1000170c:	4305      	orrs	r5, r0
1000170e:	2c00      	cmp	r4, #0
10001710:	d125      	bne.n	1000175e <__aeabi_dsub+0x4f6>
10001712:	2d00      	cmp	r5, #0
10001714:	d108      	bne.n	10001728 <__aeabi_dsub+0x4c0>
10001716:	4661      	mov	r1, ip
10001718:	0026      	movs	r6, r4
1000171a:	9402      	str	r4, [sp, #8]
1000171c:	2900      	cmp	r1, #0
1000171e:	d100      	bne.n	10001722 <__aeabi_dsub+0x4ba>
10001720:	e648      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001722:	0019      	movs	r1, r3
10001724:	0010      	movs	r0, r2
10001726:	e78f      	b.n	10001648 <__aeabi_dsub+0x3e0>
10001728:	4665      	mov	r5, ip
1000172a:	2d00      	cmp	r5, #0
1000172c:	d100      	bne.n	10001730 <__aeabi_dsub+0x4c8>
1000172e:	e695      	b.n	1000145c <__aeabi_dsub+0x1f4>
10001730:	1a86      	subs	r6, r0, r2
10001732:	42b0      	cmp	r0, r6
10001734:	41bf      	sbcs	r7, r7
10001736:	1acd      	subs	r5, r1, r3
10001738:	427f      	negs	r7, r7
1000173a:	1bed      	subs	r5, r5, r7
1000173c:	022f      	lsls	r7, r5, #8
1000173e:	d506      	bpl.n	1000174e <__aeabi_dsub+0x4e6>
10001740:	1a10      	subs	r0, r2, r0
10001742:	4282      	cmp	r2, r0
10001744:	4192      	sbcs	r2, r2
10001746:	1a59      	subs	r1, r3, r1
10001748:	4252      	negs	r2, r2
1000174a:	1a89      	subs	r1, r1, r2
1000174c:	e77c      	b.n	10001648 <__aeabi_dsub+0x3e0>
1000174e:	0033      	movs	r3, r6
10001750:	432b      	orrs	r3, r5
10001752:	469c      	mov	ip, r3
10001754:	d100      	bne.n	10001758 <__aeabi_dsub+0x4f0>
10001756:	e08f      	b.n	10001878 <__aeabi_dsub+0x610>
10001758:	0029      	movs	r1, r5
1000175a:	0030      	movs	r0, r6
1000175c:	e67e      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000175e:	2d00      	cmp	r5, #0
10001760:	d107      	bne.n	10001772 <__aeabi_dsub+0x50a>
10001762:	4661      	mov	r1, ip
10001764:	2900      	cmp	r1, #0
10001766:	d07a      	beq.n	1000185e <__aeabi_dsub+0x5f6>
10001768:	0019      	movs	r1, r3
1000176a:	9b00      	ldr	r3, [sp, #0]
1000176c:	0010      	movs	r0, r2
1000176e:	9302      	str	r3, [sp, #8]
10001770:	e5eb      	b.n	1000134a <__aeabi_dsub+0xe2>
10001772:	4664      	mov	r4, ip
10001774:	e6c9      	b.n	1000150a <__aeabi_dsub+0x2a2>
10001776:	1a86      	subs	r6, r0, r2
10001778:	42b0      	cmp	r0, r6
1000177a:	41bf      	sbcs	r7, r7
1000177c:	1acd      	subs	r5, r1, r3
1000177e:	427f      	negs	r7, r7
10001780:	1bed      	subs	r5, r5, r7
10001782:	022f      	lsls	r7, r5, #8
10001784:	d528      	bpl.n	100017d8 <__aeabi_dsub+0x570>
10001786:	1a16      	subs	r6, r2, r0
10001788:	42b2      	cmp	r2, r6
1000178a:	4192      	sbcs	r2, r2
1000178c:	1a5b      	subs	r3, r3, r1
1000178e:	4252      	negs	r2, r2
10001790:	1a9d      	subs	r5, r3, r2
10001792:	9b00      	ldr	r3, [sp, #0]
10001794:	9302      	str	r3, [sp, #8]
10001796:	2d00      	cmp	r5, #0
10001798:	d026      	beq.n	100017e8 <__aeabi_dsub+0x580>
1000179a:	0028      	movs	r0, r5
1000179c:	f7fe fd9e 	bl	100002dc <__clzsi2>
100017a0:	0003      	movs	r3, r0
100017a2:	3b08      	subs	r3, #8
100017a4:	2220      	movs	r2, #32
100017a6:	0031      	movs	r1, r6
100017a8:	1ad2      	subs	r2, r2, r3
100017aa:	409d      	lsls	r5, r3
100017ac:	40d1      	lsrs	r1, r2
100017ae:	4329      	orrs	r1, r5
100017b0:	0035      	movs	r5, r6
100017b2:	409d      	lsls	r5, r3
100017b4:	429c      	cmp	r4, r3
100017b6:	dc3d      	bgt.n	10001834 <__aeabi_dsub+0x5cc>
100017b8:	1b1a      	subs	r2, r3, r4
100017ba:	3201      	adds	r2, #1
100017bc:	2320      	movs	r3, #32
100017be:	0008      	movs	r0, r1
100017c0:	1a9b      	subs	r3, r3, r2
100017c2:	002c      	movs	r4, r5
100017c4:	409d      	lsls	r5, r3
100017c6:	4098      	lsls	r0, r3
100017c8:	40d4      	lsrs	r4, r2
100017ca:	1e6b      	subs	r3, r5, #1
100017cc:	419d      	sbcs	r5, r3
100017ce:	40d1      	lsrs	r1, r2
100017d0:	4320      	orrs	r0, r4
100017d2:	4328      	orrs	r0, r5
100017d4:	2400      	movs	r4, #0
100017d6:	e641      	b.n	1000145c <__aeabi_dsub+0x1f4>
100017d8:	0033      	movs	r3, r6
100017da:	432b      	orrs	r3, r5
100017dc:	469c      	mov	ip, r3
100017de:	d1da      	bne.n	10001796 <__aeabi_dsub+0x52e>
100017e0:	001e      	movs	r6, r3
100017e2:	001c      	movs	r4, r3
100017e4:	9302      	str	r3, [sp, #8]
100017e6:	e5e5      	b.n	100013b4 <__aeabi_dsub+0x14c>
100017e8:	0030      	movs	r0, r6
100017ea:	f7fe fd77 	bl	100002dc <__clzsi2>
100017ee:	0003      	movs	r3, r0
100017f0:	3318      	adds	r3, #24
100017f2:	2b1f      	cmp	r3, #31
100017f4:	ddd6      	ble.n	100017a4 <__aeabi_dsub+0x53c>
100017f6:	0031      	movs	r1, r6
100017f8:	3808      	subs	r0, #8
100017fa:	4081      	lsls	r1, r0
100017fc:	429c      	cmp	r4, r3
100017fe:	dc12      	bgt.n	10001826 <__aeabi_dsub+0x5be>
10001800:	1b1b      	subs	r3, r3, r4
10001802:	1c5a      	adds	r2, r3, #1
10001804:	2a1f      	cmp	r2, #31
10001806:	ddd9      	ble.n	100017bc <__aeabi_dsub+0x554>
10001808:	000c      	movs	r4, r1
1000180a:	3b1f      	subs	r3, #31
1000180c:	40dc      	lsrs	r4, r3
1000180e:	0028      	movs	r0, r5
10001810:	2a20      	cmp	r2, #32
10001812:	d003      	beq.n	1000181c <__aeabi_dsub+0x5b4>
10001814:	2340      	movs	r3, #64	; 0x40
10001816:	1a9b      	subs	r3, r3, r2
10001818:	4099      	lsls	r1, r3
1000181a:	0008      	movs	r0, r1
1000181c:	1e43      	subs	r3, r0, #1
1000181e:	4198      	sbcs	r0, r3
10001820:	2100      	movs	r1, #0
10001822:	4320      	orrs	r0, r4
10001824:	e7d6      	b.n	100017d4 <__aeabi_dsub+0x56c>
10001826:	1ae4      	subs	r4, r4, r3
10001828:	4b18      	ldr	r3, [pc, #96]	; (1000188c <__aeabi_dsub+0x624>)
1000182a:	400b      	ands	r3, r1
1000182c:	075e      	lsls	r6, r3, #29
1000182e:	08db      	lsrs	r3, r3, #3
10001830:	469c      	mov	ip, r3
10001832:	e5bf      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001834:	1ae4      	subs	r4, r4, r3
10001836:	4b15      	ldr	r3, [pc, #84]	; (1000188c <__aeabi_dsub+0x624>)
10001838:	0028      	movs	r0, r5
1000183a:	4019      	ands	r1, r3
1000183c:	e60e      	b.n	1000145c <__aeabi_dsub+0x1f4>
1000183e:	0019      	movs	r1, r3
10001840:	0010      	movs	r0, r2
10001842:	e582      	b.n	1000134a <__aeabi_dsub+0xe2>
10001844:	074b      	lsls	r3, r1, #29
10001846:	08c0      	lsrs	r0, r0, #3
10001848:	4303      	orrs	r3, r0
1000184a:	469c      	mov	ip, r3
1000184c:	4b0d      	ldr	r3, [pc, #52]	; (10001884 <__aeabi_dsub+0x61c>)
1000184e:	4666      	mov	r6, ip
10001850:	08c9      	lsrs	r1, r1, #3
10001852:	429c      	cmp	r4, r3
10001854:	d113      	bne.n	1000187e <__aeabi_dsub+0x616>
10001856:	430e      	orrs	r6, r1
10001858:	d104      	bne.n	10001864 <__aeabi_dsub+0x5fc>
1000185a:	46b4      	mov	ip, r6
1000185c:	e5aa      	b.n	100013b4 <__aeabi_dsub+0x14c>
1000185e:	9102      	str	r1, [sp, #8]
10001860:	2180      	movs	r1, #128	; 0x80
10001862:	0309      	lsls	r1, r1, #12
10001864:	2380      	movs	r3, #128	; 0x80
10001866:	031b      	lsls	r3, r3, #12
10001868:	430b      	orrs	r3, r1
1000186a:	4666      	mov	r6, ip
1000186c:	4c05      	ldr	r4, [pc, #20]	; (10001884 <__aeabi_dsub+0x61c>)
1000186e:	469c      	mov	ip, r3
10001870:	e5a0      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001872:	2600      	movs	r6, #0
10001874:	4c03      	ldr	r4, [pc, #12]	; (10001884 <__aeabi_dsub+0x61c>)
10001876:	e7f0      	b.n	1000185a <__aeabi_dsub+0x5f2>
10001878:	0026      	movs	r6, r4
1000187a:	9402      	str	r4, [sp, #8]
1000187c:	e59a      	b.n	100013b4 <__aeabi_dsub+0x14c>
1000187e:	468c      	mov	ip, r1
10001880:	e598      	b.n	100013b4 <__aeabi_dsub+0x14c>
10001882:	46c0      	nop			; (mov r8, r8)
10001884:	000007ff 	.word	0x000007ff
10001888:	000007fe 	.word	0x000007fe
1000188c:	ff7fffff 	.word	0xff7fffff

10001890 <__aeabi_ui2d>:
10001890:	b510      	push	{r4, lr}
10001892:	0003      	movs	r3, r0
10001894:	0004      	movs	r4, r0
10001896:	1e02      	subs	r2, r0, #0
10001898:	d00c      	beq.n	100018b4 <__aeabi_ui2d+0x24>
1000189a:	f7fe fd1f 	bl	100002dc <__clzsi2>
1000189e:	4a0b      	ldr	r2, [pc, #44]	; (100018cc <__aeabi_ui2d+0x3c>)
100018a0:	1a12      	subs	r2, r2, r0
100018a2:	280a      	cmp	r0, #10
100018a4:	dc0d      	bgt.n	100018c2 <__aeabi_ui2d+0x32>
100018a6:	230b      	movs	r3, #11
100018a8:	0021      	movs	r1, r4
100018aa:	1a1b      	subs	r3, r3, r0
100018ac:	40d9      	lsrs	r1, r3
100018ae:	3015      	adds	r0, #21
100018b0:	000b      	movs	r3, r1
100018b2:	4084      	lsls	r4, r0
100018b4:	031b      	lsls	r3, r3, #12
100018b6:	0b1b      	lsrs	r3, r3, #12
100018b8:	0512      	lsls	r2, r2, #20
100018ba:	431a      	orrs	r2, r3
100018bc:	0020      	movs	r0, r4
100018be:	0011      	movs	r1, r2
100018c0:	bd10      	pop	{r4, pc}
100018c2:	0023      	movs	r3, r4
100018c4:	380b      	subs	r0, #11
100018c6:	4083      	lsls	r3, r0
100018c8:	2400      	movs	r4, #0
100018ca:	e7f3      	b.n	100018b4 <__aeabi_ui2d+0x24>
100018cc:	0000041e 	.word	0x0000041e

100018d0 <__aeabi_f2d>:
100018d0:	22fe      	movs	r2, #254	; 0xfe
100018d2:	b570      	push	{r4, r5, r6, lr}
100018d4:	0044      	lsls	r4, r0, #1
100018d6:	0e24      	lsrs	r4, r4, #24
100018d8:	0243      	lsls	r3, r0, #9
100018da:	1c61      	adds	r1, r4, #1
100018dc:	0a5d      	lsrs	r5, r3, #9
100018de:	0fc6      	lsrs	r6, r0, #31
100018e0:	4211      	tst	r1, r2
100018e2:	d00d      	beq.n	10001900 <__aeabi_f2d+0x30>
100018e4:	22e0      	movs	r2, #224	; 0xe0
100018e6:	0092      	lsls	r2, r2, #2
100018e8:	18a4      	adds	r4, r4, r2
100018ea:	0b1b      	lsrs	r3, r3, #12
100018ec:	076d      	lsls	r5, r5, #29
100018ee:	031b      	lsls	r3, r3, #12
100018f0:	0b1b      	lsrs	r3, r3, #12
100018f2:	0524      	lsls	r4, r4, #20
100018f4:	07f6      	lsls	r6, r6, #31
100018f6:	431c      	orrs	r4, r3
100018f8:	4334      	orrs	r4, r6
100018fa:	0028      	movs	r0, r5
100018fc:	0021      	movs	r1, r4
100018fe:	bd70      	pop	{r4, r5, r6, pc}
10001900:	2c00      	cmp	r4, #0
10001902:	d118      	bne.n	10001936 <__aeabi_f2d+0x66>
10001904:	0023      	movs	r3, r4
10001906:	2d00      	cmp	r5, #0
10001908:	d0f1      	beq.n	100018ee <__aeabi_f2d+0x1e>
1000190a:	0028      	movs	r0, r5
1000190c:	f7fe fce6 	bl	100002dc <__clzsi2>
10001910:	280a      	cmp	r0, #10
10001912:	dc0a      	bgt.n	1000192a <__aeabi_f2d+0x5a>
10001914:	230b      	movs	r3, #11
10001916:	002a      	movs	r2, r5
10001918:	1a1b      	subs	r3, r3, r0
1000191a:	40da      	lsrs	r2, r3
1000191c:	0013      	movs	r3, r2
1000191e:	0002      	movs	r2, r0
10001920:	3215      	adds	r2, #21
10001922:	4095      	lsls	r5, r2
10001924:	4c09      	ldr	r4, [pc, #36]	; (1000194c <__aeabi_f2d+0x7c>)
10001926:	1a24      	subs	r4, r4, r0
10001928:	e7e1      	b.n	100018ee <__aeabi_f2d+0x1e>
1000192a:	0003      	movs	r3, r0
1000192c:	3b0b      	subs	r3, #11
1000192e:	409d      	lsls	r5, r3
10001930:	002b      	movs	r3, r5
10001932:	0025      	movs	r5, r4
10001934:	e7f6      	b.n	10001924 <__aeabi_f2d+0x54>
10001936:	2d00      	cmp	r5, #0
10001938:	d006      	beq.n	10001948 <__aeabi_f2d+0x78>
1000193a:	0b1a      	lsrs	r2, r3, #12
1000193c:	2380      	movs	r3, #128	; 0x80
1000193e:	031b      	lsls	r3, r3, #12
10001940:	076d      	lsls	r5, r5, #29
10001942:	4313      	orrs	r3, r2
10001944:	4c02      	ldr	r4, [pc, #8]	; (10001950 <__aeabi_f2d+0x80>)
10001946:	e7d2      	b.n	100018ee <__aeabi_f2d+0x1e>
10001948:	002b      	movs	r3, r5
1000194a:	e7fb      	b.n	10001944 <__aeabi_f2d+0x74>
1000194c:	00000389 	.word	0x00000389
10001950:	000007ff 	.word	0x000007ff

10001954 <__aeabi_d2f>:
10001954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001956:	030b      	lsls	r3, r1, #12
10001958:	004a      	lsls	r2, r1, #1
1000195a:	0a5b      	lsrs	r3, r3, #9
1000195c:	0f46      	lsrs	r6, r0, #29
1000195e:	0d52      	lsrs	r2, r2, #21
10001960:	431e      	orrs	r6, r3
10001962:	1c53      	adds	r3, r2, #1
10001964:	469c      	mov	ip, r3
10001966:	0004      	movs	r4, r0
10001968:	00c7      	lsls	r7, r0, #3
1000196a:	483c      	ldr	r0, [pc, #240]	; (10001a5c <__aeabi_d2f+0x108>)
1000196c:	0fc9      	lsrs	r1, r1, #31
1000196e:	4003      	ands	r3, r0
10001970:	9301      	str	r3, [sp, #4]
10001972:	4663      	mov	r3, ip
10001974:	4203      	tst	r3, r0
10001976:	d049      	beq.n	10001a0c <__aeabi_d2f+0xb8>
10001978:	4b39      	ldr	r3, [pc, #228]	; (10001a60 <__aeabi_d2f+0x10c>)
1000197a:	18d0      	adds	r0, r2, r3
1000197c:	28fe      	cmp	r0, #254	; 0xfe
1000197e:	dc68      	bgt.n	10001a52 <__aeabi_d2f+0xfe>
10001980:	2800      	cmp	r0, #0
10001982:	dc37      	bgt.n	100019f4 <__aeabi_d2f+0xa0>
10001984:	0003      	movs	r3, r0
10001986:	3317      	adds	r3, #23
10001988:	db65      	blt.n	10001a56 <__aeabi_d2f+0x102>
1000198a:	2480      	movs	r4, #128	; 0x80
1000198c:	251e      	movs	r5, #30
1000198e:	0424      	lsls	r4, r4, #16
10001990:	4334      	orrs	r4, r6
10001992:	1a2d      	subs	r5, r5, r0
10001994:	2d1f      	cmp	r5, #31
10001996:	dc10      	bgt.n	100019ba <__aeabi_d2f+0x66>
10001998:	4b32      	ldr	r3, [pc, #200]	; (10001a64 <__aeabi_d2f+0x110>)
1000199a:	18d2      	adds	r2, r2, r3
1000199c:	003b      	movs	r3, r7
1000199e:	4097      	lsls	r7, r2
100019a0:	4094      	lsls	r4, r2
100019a2:	1e78      	subs	r0, r7, #1
100019a4:	4187      	sbcs	r7, r0
100019a6:	40eb      	lsrs	r3, r5
100019a8:	4327      	orrs	r7, r4
100019aa:	433b      	orrs	r3, r7
100019ac:	2407      	movs	r4, #7
100019ae:	001a      	movs	r2, r3
100019b0:	4022      	ands	r2, r4
100019b2:	4223      	tst	r3, r4
100019b4:	d13b      	bne.n	10001a2e <__aeabi_d2f+0xda>
100019b6:	08db      	lsrs	r3, r3, #3
100019b8:	e032      	b.n	10001a20 <__aeabi_d2f+0xcc>
100019ba:	2302      	movs	r3, #2
100019bc:	425b      	negs	r3, r3
100019be:	1a1b      	subs	r3, r3, r0
100019c0:	0020      	movs	r0, r4
100019c2:	40d8      	lsrs	r0, r3
100019c4:	0003      	movs	r3, r0
100019c6:	2000      	movs	r0, #0
100019c8:	2d20      	cmp	r5, #32
100019ca:	d003      	beq.n	100019d4 <__aeabi_d2f+0x80>
100019cc:	4826      	ldr	r0, [pc, #152]	; (10001a68 <__aeabi_d2f+0x114>)
100019ce:	1812      	adds	r2, r2, r0
100019d0:	0020      	movs	r0, r4
100019d2:	4090      	lsls	r0, r2
100019d4:	4338      	orrs	r0, r7
100019d6:	1e42      	subs	r2, r0, #1
100019d8:	4190      	sbcs	r0, r2
100019da:	4303      	orrs	r3, r0
100019dc:	2407      	movs	r4, #7
100019de:	001a      	movs	r2, r3
100019e0:	4022      	ands	r2, r4
100019e2:	4223      	tst	r3, r4
100019e4:	d0e7      	beq.n	100019b6 <__aeabi_d2f+0x62>
100019e6:	220f      	movs	r2, #15
100019e8:	401a      	ands	r2, r3
100019ea:	2a04      	cmp	r2, #4
100019ec:	d024      	beq.n	10001a38 <__aeabi_d2f+0xe4>
100019ee:	2000      	movs	r0, #0
100019f0:	3304      	adds	r3, #4
100019f2:	e008      	b.n	10001a06 <__aeabi_d2f+0xb2>
100019f4:	01a4      	lsls	r4, r4, #6
100019f6:	1e62      	subs	r2, r4, #1
100019f8:	4194      	sbcs	r4, r2
100019fa:	00f6      	lsls	r6, r6, #3
100019fc:	0f7b      	lsrs	r3, r7, #29
100019fe:	4334      	orrs	r4, r6
10001a00:	4323      	orrs	r3, r4
10001a02:	075a      	lsls	r2, r3, #29
10001a04:	d11b      	bne.n	10001a3e <__aeabi_d2f+0xea>
10001a06:	0002      	movs	r2, r0
10001a08:	08db      	lsrs	r3, r3, #3
10001a0a:	e009      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a0c:	9b01      	ldr	r3, [sp, #4]
10001a0e:	2a00      	cmp	r2, #0
10001a10:	d006      	beq.n	10001a20 <__aeabi_d2f+0xcc>
10001a12:	003b      	movs	r3, r7
10001a14:	22ff      	movs	r2, #255	; 0xff
10001a16:	4333      	orrs	r3, r6
10001a18:	d002      	beq.n	10001a20 <__aeabi_d2f+0xcc>
10001a1a:	2380      	movs	r3, #128	; 0x80
10001a1c:	03db      	lsls	r3, r3, #15
10001a1e:	4333      	orrs	r3, r6
10001a20:	025b      	lsls	r3, r3, #9
10001a22:	05d0      	lsls	r0, r2, #23
10001a24:	0a5b      	lsrs	r3, r3, #9
10001a26:	4318      	orrs	r0, r3
10001a28:	07c9      	lsls	r1, r1, #31
10001a2a:	4308      	orrs	r0, r1
10001a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001a2e:	220f      	movs	r2, #15
10001a30:	2000      	movs	r0, #0
10001a32:	401a      	ands	r2, r3
10001a34:	2a04      	cmp	r2, #4
10001a36:	d106      	bne.n	10001a46 <__aeabi_d2f+0xf2>
10001a38:	2200      	movs	r2, #0
10001a3a:	08db      	lsrs	r3, r3, #3
10001a3c:	e7f0      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a3e:	220f      	movs	r2, #15
10001a40:	401a      	ands	r2, r3
10001a42:	2a04      	cmp	r2, #4
10001a44:	d0df      	beq.n	10001a06 <__aeabi_d2f+0xb2>
10001a46:	3304      	adds	r3, #4
10001a48:	015a      	lsls	r2, r3, #5
10001a4a:	d5dc      	bpl.n	10001a06 <__aeabi_d2f+0xb2>
10001a4c:	1c42      	adds	r2, r0, #1
10001a4e:	2300      	movs	r3, #0
10001a50:	e7e6      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a52:	22ff      	movs	r2, #255	; 0xff
10001a54:	e7fb      	b.n	10001a4e <__aeabi_d2f+0xfa>
10001a56:	2200      	movs	r2, #0
10001a58:	0013      	movs	r3, r2
10001a5a:	e7e1      	b.n	10001a20 <__aeabi_d2f+0xcc>
10001a5c:	000007fe 	.word	0x000007fe
10001a60:	fffffc80 	.word	0xfffffc80
10001a64:	fffffc82 	.word	0xfffffc82
10001a68:	fffffca2 	.word	0xfffffca2

10001a6c <__aeabi_llsr>:
10001a6c:	40d0      	lsrs	r0, r2
10001a6e:	000b      	movs	r3, r1
10001a70:	40d1      	lsrs	r1, r2
10001a72:	469c      	mov	ip, r3
10001a74:	3a20      	subs	r2, #32
10001a76:	40d3      	lsrs	r3, r2
10001a78:	4318      	orrs	r0, r3
10001a7a:	4252      	negs	r2, r2
10001a7c:	4663      	mov	r3, ip
10001a7e:	4093      	lsls	r3, r2
10001a80:	4318      	orrs	r0, r3
10001a82:	4770      	bx	lr

10001a84 <__aeabi_llsl>:
10001a84:	4091      	lsls	r1, r2
10001a86:	0003      	movs	r3, r0
10001a88:	4090      	lsls	r0, r2
10001a8a:	469c      	mov	ip, r3
10001a8c:	3a20      	subs	r2, #32
10001a8e:	4093      	lsls	r3, r2
10001a90:	4319      	orrs	r1, r3
10001a92:	4252      	negs	r2, r2
10001a94:	4663      	mov	r3, ip
10001a96:	40d3      	lsrs	r3, r2
10001a98:	4319      	orrs	r1, r3
10001a9a:	4770      	bx	lr

10001a9c <__clzdi2>:
10001a9c:	b510      	push	{r4, lr}
10001a9e:	2900      	cmp	r1, #0
10001aa0:	d103      	bne.n	10001aaa <__clzdi2+0xe>
10001aa2:	f7fe fc1b 	bl	100002dc <__clzsi2>
10001aa6:	3020      	adds	r0, #32
10001aa8:	e002      	b.n	10001ab0 <__clzdi2+0x14>
10001aaa:	0008      	movs	r0, r1
10001aac:	f7fe fc16 	bl	100002dc <__clzsi2>
10001ab0:	bd10      	pop	{r4, pc}
10001ab2:	46c0      	nop			; (mov r8, r8)

10001ab4 <__aeabi_d2uiz>:
10001ab4:	b570      	push	{r4, r5, r6, lr}
10001ab6:	2200      	movs	r2, #0
10001ab8:	4b0b      	ldr	r3, [pc, #44]	; (10001ae8 <__aeabi_d2uiz+0x34>)
10001aba:	0004      	movs	r4, r0
10001abc:	000d      	movs	r5, r1
10001abe:	f7fe fc03 	bl	100002c8 <__aeabi_dcmpge>
10001ac2:	2800      	cmp	r0, #0
10001ac4:	d00b      	beq.n	10001ade <__aeabi_d2uiz+0x2a>
10001ac6:	4b08      	ldr	r3, [pc, #32]	; (10001ae8 <__aeabi_d2uiz+0x34>)
10001ac8:	2200      	movs	r2, #0
10001aca:	0020      	movs	r0, r4
10001acc:	0029      	movs	r1, r5
10001ace:	f7ff fbcb 	bl	10001268 <__aeabi_dsub>
10001ad2:	f000 f80b 	bl	10001aec <__aeabi_d2iz>
10001ad6:	2380      	movs	r3, #128	; 0x80
10001ad8:	061b      	lsls	r3, r3, #24
10001ada:	18c0      	adds	r0, r0, r3
10001adc:	bd70      	pop	{r4, r5, r6, pc}
10001ade:	0020      	movs	r0, r4
10001ae0:	0029      	movs	r1, r5
10001ae2:	f000 f803 	bl	10001aec <__aeabi_d2iz>
10001ae6:	e7f9      	b.n	10001adc <__aeabi_d2uiz+0x28>
10001ae8:	41e00000 	.word	0x41e00000

10001aec <__aeabi_d2iz>:
10001aec:	000b      	movs	r3, r1
10001aee:	b570      	push	{r4, r5, r6, lr}
10001af0:	4e11      	ldr	r6, [pc, #68]	; (10001b38 <__aeabi_d2iz+0x4c>)
10001af2:	030c      	lsls	r4, r1, #12
10001af4:	0049      	lsls	r1, r1, #1
10001af6:	0002      	movs	r2, r0
10001af8:	0b24      	lsrs	r4, r4, #12
10001afa:	2000      	movs	r0, #0
10001afc:	0d49      	lsrs	r1, r1, #21
10001afe:	0fdd      	lsrs	r5, r3, #31
10001b00:	42b1      	cmp	r1, r6
10001b02:	dd04      	ble.n	10001b0e <__aeabi_d2iz+0x22>
10001b04:	480d      	ldr	r0, [pc, #52]	; (10001b3c <__aeabi_d2iz+0x50>)
10001b06:	4281      	cmp	r1, r0
10001b08:	dd02      	ble.n	10001b10 <__aeabi_d2iz+0x24>
10001b0a:	4b0d      	ldr	r3, [pc, #52]	; (10001b40 <__aeabi_d2iz+0x54>)
10001b0c:	18e8      	adds	r0, r5, r3
10001b0e:	bd70      	pop	{r4, r5, r6, pc}
10001b10:	2080      	movs	r0, #128	; 0x80
10001b12:	0340      	lsls	r0, r0, #13
10001b14:	4320      	orrs	r0, r4
10001b16:	4c0b      	ldr	r4, [pc, #44]	; (10001b44 <__aeabi_d2iz+0x58>)
10001b18:	1a64      	subs	r4, r4, r1
10001b1a:	2c1f      	cmp	r4, #31
10001b1c:	dc08      	bgt.n	10001b30 <__aeabi_d2iz+0x44>
10001b1e:	4e0a      	ldr	r6, [pc, #40]	; (10001b48 <__aeabi_d2iz+0x5c>)
10001b20:	40e2      	lsrs	r2, r4
10001b22:	1989      	adds	r1, r1, r6
10001b24:	4088      	lsls	r0, r1
10001b26:	4310      	orrs	r0, r2
10001b28:	2d00      	cmp	r5, #0
10001b2a:	d0f0      	beq.n	10001b0e <__aeabi_d2iz+0x22>
10001b2c:	4240      	negs	r0, r0
10001b2e:	e7ee      	b.n	10001b0e <__aeabi_d2iz+0x22>
10001b30:	4b06      	ldr	r3, [pc, #24]	; (10001b4c <__aeabi_d2iz+0x60>)
10001b32:	1a5b      	subs	r3, r3, r1
10001b34:	40d8      	lsrs	r0, r3
10001b36:	e7f7      	b.n	10001b28 <__aeabi_d2iz+0x3c>
10001b38:	000003fe 	.word	0x000003fe
10001b3c:	0000041d 	.word	0x0000041d
10001b40:	7fffffff 	.word	0x7fffffff
10001b44:	00000433 	.word	0x00000433
10001b48:	fffffbed 	.word	0xfffffbed
10001b4c:	00000413 	.word	0x00000413

10001b50 <__aeabi_lmul>:
10001b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001b52:	0c04      	lsrs	r4, r0, #16
10001b54:	000d      	movs	r5, r1
10001b56:	b291      	uxth	r1, r2
10001b58:	000f      	movs	r7, r1
10001b5a:	4361      	muls	r1, r4
10001b5c:	468c      	mov	ip, r1
10001b5e:	0006      	movs	r6, r0
10001b60:	9301      	str	r3, [sp, #4]
10001b62:	b283      	uxth	r3, r0
10001b64:	0c10      	lsrs	r0, r2, #16
10001b66:	435f      	muls	r7, r3
10001b68:	4344      	muls	r4, r0
10001b6a:	4358      	muls	r0, r3
10001b6c:	0c3b      	lsrs	r3, r7, #16
10001b6e:	4460      	add	r0, ip
10001b70:	181b      	adds	r3, r3, r0
10001b72:	4299      	cmp	r1, r3
10001b74:	d902      	bls.n	10001b7c <__aeabi_lmul+0x2c>
10001b76:	2180      	movs	r1, #128	; 0x80
10001b78:	0249      	lsls	r1, r1, #9
10001b7a:	1864      	adds	r4, r4, r1
10001b7c:	9901      	ldr	r1, [sp, #4]
10001b7e:	4355      	muls	r5, r2
10001b80:	4371      	muls	r1, r6
10001b82:	0c18      	lsrs	r0, r3, #16
10001b84:	1904      	adds	r4, r0, r4
10001b86:	041b      	lsls	r3, r3, #16
10001b88:	b2bf      	uxth	r7, r7
10001b8a:	1949      	adds	r1, r1, r5
10001b8c:	19d8      	adds	r0, r3, r7
10001b8e:	1909      	adds	r1, r1, r4
10001b90:	b003      	add	sp, #12
10001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001b94 <__udivmoddi4>:
10001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b96:	0006      	movs	r6, r0
10001b98:	000f      	movs	r7, r1
10001b9a:	0015      	movs	r5, r2
10001b9c:	001c      	movs	r4, r3
10001b9e:	b085      	sub	sp, #20
10001ba0:	428b      	cmp	r3, r1
10001ba2:	d863      	bhi.n	10001c6c <__udivmoddi4+0xd8>
10001ba4:	d101      	bne.n	10001baa <__udivmoddi4+0x16>
10001ba6:	4282      	cmp	r2, r0
10001ba8:	d860      	bhi.n	10001c6c <__udivmoddi4+0xd8>
10001baa:	0021      	movs	r1, r4
10001bac:	0028      	movs	r0, r5
10001bae:	f7ff ff75 	bl	10001a9c <__clzdi2>
10001bb2:	0039      	movs	r1, r7
10001bb4:	9000      	str	r0, [sp, #0]
10001bb6:	0030      	movs	r0, r6
10001bb8:	f7ff ff70 	bl	10001a9c <__clzdi2>
10001bbc:	9b00      	ldr	r3, [sp, #0]
10001bbe:	0021      	movs	r1, r4
10001bc0:	1a1b      	subs	r3, r3, r0
10001bc2:	001a      	movs	r2, r3
10001bc4:	0028      	movs	r0, r5
10001bc6:	9303      	str	r3, [sp, #12]
10001bc8:	f7ff ff5c 	bl	10001a84 <__aeabi_llsl>
10001bcc:	9000      	str	r0, [sp, #0]
10001bce:	9101      	str	r1, [sp, #4]
10001bd0:	42b9      	cmp	r1, r7
10001bd2:	d845      	bhi.n	10001c60 <__udivmoddi4+0xcc>
10001bd4:	d101      	bne.n	10001bda <__udivmoddi4+0x46>
10001bd6:	42b0      	cmp	r0, r6
10001bd8:	d842      	bhi.n	10001c60 <__udivmoddi4+0xcc>
10001bda:	9b00      	ldr	r3, [sp, #0]
10001bdc:	9c01      	ldr	r4, [sp, #4]
10001bde:	2001      	movs	r0, #1
10001be0:	2100      	movs	r1, #0
10001be2:	9a03      	ldr	r2, [sp, #12]
10001be4:	1af6      	subs	r6, r6, r3
10001be6:	41a7      	sbcs	r7, r4
10001be8:	f7ff ff4c 	bl	10001a84 <__aeabi_llsl>
10001bec:	0004      	movs	r4, r0
10001bee:	000d      	movs	r5, r1
10001bf0:	9b03      	ldr	r3, [sp, #12]
10001bf2:	2b00      	cmp	r3, #0
10001bf4:	d02b      	beq.n	10001c4e <__udivmoddi4+0xba>
10001bf6:	9b01      	ldr	r3, [sp, #4]
10001bf8:	9a00      	ldr	r2, [sp, #0]
10001bfa:	07db      	lsls	r3, r3, #31
10001bfc:	0850      	lsrs	r0, r2, #1
10001bfe:	4318      	orrs	r0, r3
10001c00:	9b01      	ldr	r3, [sp, #4]
10001c02:	0859      	lsrs	r1, r3, #1
10001c04:	9b03      	ldr	r3, [sp, #12]
10001c06:	469c      	mov	ip, r3
10001c08:	42b9      	cmp	r1, r7
10001c0a:	d82c      	bhi.n	10001c66 <__udivmoddi4+0xd2>
10001c0c:	d101      	bne.n	10001c12 <__udivmoddi4+0x7e>
10001c0e:	42b0      	cmp	r0, r6
10001c10:	d829      	bhi.n	10001c66 <__udivmoddi4+0xd2>
10001c12:	0032      	movs	r2, r6
10001c14:	003b      	movs	r3, r7
10001c16:	1a12      	subs	r2, r2, r0
10001c18:	418b      	sbcs	r3, r1
10001c1a:	2601      	movs	r6, #1
10001c1c:	1892      	adds	r2, r2, r2
10001c1e:	415b      	adcs	r3, r3
10001c20:	2700      	movs	r7, #0
10001c22:	18b6      	adds	r6, r6, r2
10001c24:	415f      	adcs	r7, r3
10001c26:	2301      	movs	r3, #1
10001c28:	425b      	negs	r3, r3
10001c2a:	449c      	add	ip, r3
10001c2c:	4663      	mov	r3, ip
10001c2e:	2b00      	cmp	r3, #0
10001c30:	d1ea      	bne.n	10001c08 <__udivmoddi4+0x74>
10001c32:	0030      	movs	r0, r6
10001c34:	0039      	movs	r1, r7
10001c36:	9a03      	ldr	r2, [sp, #12]
10001c38:	f7ff ff18 	bl	10001a6c <__aeabi_llsr>
10001c3c:	9a03      	ldr	r2, [sp, #12]
10001c3e:	19a4      	adds	r4, r4, r6
10001c40:	417d      	adcs	r5, r7
10001c42:	0006      	movs	r6, r0
10001c44:	000f      	movs	r7, r1
10001c46:	f7ff ff1d 	bl	10001a84 <__aeabi_llsl>
10001c4a:	1a24      	subs	r4, r4, r0
10001c4c:	418d      	sbcs	r5, r1
10001c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001c50:	2b00      	cmp	r3, #0
10001c52:	d001      	beq.n	10001c58 <__udivmoddi4+0xc4>
10001c54:	601e      	str	r6, [r3, #0]
10001c56:	605f      	str	r7, [r3, #4]
10001c58:	0020      	movs	r0, r4
10001c5a:	0029      	movs	r1, r5
10001c5c:	b005      	add	sp, #20
10001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001c60:	2400      	movs	r4, #0
10001c62:	2500      	movs	r5, #0
10001c64:	e7c4      	b.n	10001bf0 <__udivmoddi4+0x5c>
10001c66:	19b6      	adds	r6, r6, r6
10001c68:	417f      	adcs	r7, r7
10001c6a:	e7dc      	b.n	10001c26 <__udivmoddi4+0x92>
10001c6c:	2400      	movs	r4, #0
10001c6e:	2500      	movs	r5, #0
10001c70:	e7ed      	b.n	10001c4e <__udivmoddi4+0xba>
	...

10001c74 <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
10001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
10001c76:	6843      	ldr	r3, [r0, #4]
{
10001c78:	b08b      	sub	sp, #44	; 0x2c
10001c7a:	9105      	str	r1, [sp, #20]
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
10001c7c:	9303      	str	r3, [sp, #12]
		       spec->flags);
10001c7e:	8983      	ldrh	r3, [r0, #12]
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
10001c80:	6804      	ldr	r4, [r0, #0]
10001c82:	6885      	ldr	r5, [r0, #8]
		       spec->flags);
10001c84:	9304      	str	r3, [sp, #16]
	return api->get_cycles_per_sec(dev, channel, cycles);
10001c86:	68a3      	ldr	r3, [r4, #8]
10001c88:	0020      	movs	r0, r4
10001c8a:	685b      	ldr	r3, [r3, #4]
10001c8c:	9903      	ldr	r1, [sp, #12]
10001c8e:	aa08      	add	r2, sp, #32
10001c90:	4798      	blx	r3
	if (err < 0) {
10001c92:	2800      	cmp	r0, #0
10001c94:	db2b      	blt.n	10001cee <pwm_set_pulse_dt+0x7a>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001c96:	9e08      	ldr	r6, [sp, #32]
10001c98:	9f09      	ldr	r7, [sp, #36]	; 0x24
10001c9a:	0028      	movs	r0, r5
10001c9c:	0032      	movs	r2, r6
10001c9e:	003b      	movs	r3, r7
10001ca0:	2100      	movs	r1, #0
10001ca2:	f7ff ff55 	bl	10001b50 <__aeabi_lmul>
10001ca6:	2300      	movs	r3, #0
10001ca8:	4a14      	ldr	r2, [pc, #80]	; (10001cfc <pwm_set_pulse_dt+0x88>)
10001caa:	9106      	str	r1, [sp, #24]
10001cac:	f7fe fb34 	bl	10000318 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10001cb0:	9906      	ldr	r1, [sp, #24]
10001cb2:	4b13      	ldr	r3, [pc, #76]	; (10001d00 <pwm_set_pulse_dt+0x8c>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001cb4:	0005      	movs	r5, r0
10001cb6:	9007      	str	r0, [sp, #28]
	if (period_cycles > UINT32_MAX) {
10001cb8:	4299      	cmp	r1, r3
10001cba:	d81a      	bhi.n	10001cf2 <pwm_set_pulse_dt+0x7e>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001cbc:	0032      	movs	r2, r6
10001cbe:	003b      	movs	r3, r7
10001cc0:	2100      	movs	r1, #0
10001cc2:	9805      	ldr	r0, [sp, #20]
10001cc4:	f7ff ff44 	bl	10001b50 <__aeabi_lmul>
10001cc8:	2300      	movs	r3, #0
10001cca:	4a0c      	ldr	r2, [pc, #48]	; (10001cfc <pwm_set_pulse_dt+0x88>)
10001ccc:	000e      	movs	r6, r1
10001cce:	f7fe fb23 	bl	10000318 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10001cd2:	4a0b      	ldr	r2, [pc, #44]	; (10001d00 <pwm_set_pulse_dt+0x8c>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001cd4:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
10001cd6:	4296      	cmp	r6, r2
10001cd8:	d80b      	bhi.n	10001cf2 <pwm_set_pulse_dt+0x7e>
	const struct pwm_driver_api *api =
10001cda:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10001cdc:	4285      	cmp	r5, r0
10001cde:	d30b      	bcc.n	10001cf8 <pwm_set_pulse_dt+0x84>
	return api->set_cycles(dev, channel, period, pulse, flags);
10001ce0:	9904      	ldr	r1, [sp, #16]
10001ce2:	0020      	movs	r0, r4
10001ce4:	9100      	str	r1, [sp, #0]
10001ce6:	6816      	ldr	r6, [r2, #0]
10001ce8:	9903      	ldr	r1, [sp, #12]
10001cea:	002a      	movs	r2, r5
10001cec:	47b0      	blx	r6
}
10001cee:	b00b      	add	sp, #44	; 0x2c
10001cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
10001cf2:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
10001cf4:	4240      	negs	r0, r0
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
10001cf6:	e7fa      	b.n	10001cee <pwm_set_pulse_dt+0x7a>
		return -EINVAL;
10001cf8:	2016      	movs	r0, #22
10001cfa:	e7fb      	b.n	10001cf4 <pwm_set_pulse_dt+0x80>
10001cfc:	3b9aca00 	.word	0x3b9aca00
10001d00:	3b9ac9ff 	.word	0x3b9ac9ff

10001d04 <servo_tapa>:
 * @brief Funcion para que funciona para los servos de la tapa escoger la direccion del movimiento
 * 
 * @param dir UP DOWN para servo lamina, LEFT RIGH para servo barra
 * @param servo escoger servo0, servo1, servo2
 */
void servo_tapa(enum direction dir,struct pwm_dt_spec servo){
10001d04:	b084      	sub	sp, #16
10001d06:	b510      	push	{r4, lr}
10001d08:	9103      	str	r1, [sp, #12]
10001d0a:	9204      	str	r2, [sp, #16]
10001d0c:	9305      	str	r3, [sp, #20]
		int ret=-1;
		int minpulse, maxpulse;

		min_max_pulse(servo, &minpulse, &maxpulse);
	
		switch (dir)
10001d0e:	2802      	cmp	r0, #2
10001d10:	d80e      	bhi.n	10001d30 <servo_tapa+0x2c>
10001d12:	2800      	cmp	r0, #0
10001d14:	d014      	beq.n	10001d40 <servo_tapa+0x3c>
		{
		case LEFT:
			ret = pwm_set_pulse_dt(&servo, minpulse);
10001d16:	490b      	ldr	r1, [pc, #44]	; (10001d44 <servo_tapa+0x40>)
			break;
		case RIGTH:
			ret = pwm_set_pulse_dt(&servo, maxpulse);
10001d18:	a803      	add	r0, sp, #12
10001d1a:	f7ff ffab 	bl	10001c74 <pwm_set_pulse_dt>
10001d1e:	1e01      	subs	r1, r0, #0
			printk("Error: direction invalid");
			break;
		}
	
		
		if (ret < 0) {
10001d20:	da02      	bge.n	10001d28 <servo_tapa+0x24>
		printk("Error %d: failed to set pulse width\n", ret);
10001d22:	4809      	ldr	r0, [pc, #36]	; (10001d48 <servo_tapa+0x44>)
10001d24:	f001 ff13 	bl	10003b4e <printk>
			return;
		}
	
	
	
}
10001d28:	bc10      	pop	{r4}
10001d2a:	bc08      	pop	{r3}
10001d2c:	b004      	add	sp, #16
10001d2e:	4718      	bx	r3
		switch (dir)
10001d30:	2803      	cmp	r0, #3
10001d32:	d005      	beq.n	10001d40 <servo_tapa+0x3c>
			printk("Error: direction invalid");
10001d34:	4805      	ldr	r0, [pc, #20]	; (10001d4c <servo_tapa+0x48>)
10001d36:	f001 ff0a 	bl	10003b4e <printk>
		int ret=-1;
10001d3a:	2101      	movs	r1, #1
10001d3c:	4249      	negs	r1, r1
10001d3e:	e7f0      	b.n	10001d22 <servo_tapa+0x1e>
			ret = pwm_set_pulse_dt(&servo, maxpulse);
10001d40:	4903      	ldr	r1, [pc, #12]	; (10001d50 <servo_tapa+0x4c>)
10001d42:	e7e9      	b.n	10001d18 <servo_tapa+0x14>
10001d44:	000aae60 	.word	0x000aae60
10001d48:	100045f1 	.word	0x100045f1
10001d4c:	10004616 	.word	0x10004616
10001d50:	002625a0 	.word	0x002625a0

10001d54 <main>:




void main(void)
{
10001d54:	b507      	push	{r0, r1, r2, lr}
	servo_tapa(RIGTH,servo2);
	servo_tapa(LEFT,servo0);
	servo_tapa(RIGTH,servo1);
	servo_tapa(LEFT,servo3);*/
	
	printk("prueba");
10001d56:	480f      	ldr	r0, [pc, #60]	; (10001d94 <main+0x40>)
10001d58:	f001 fef9 	bl	10003b4e <printk>
	int ret;
	
	ret = pwm_set_pulse_dt(&servo2, PWM_USEC(700));
10001d5c:	490e      	ldr	r1, [pc, #56]	; (10001d98 <main+0x44>)
10001d5e:	480f      	ldr	r0, [pc, #60]	; (10001d9c <main+0x48>)
10001d60:	f7ff ff88 	bl	10001c74 <pwm_set_pulse_dt>
10001d64:	1e01      	subs	r1, r0, #0
	
	if (ret < 0) {
10001d66:	da03      	bge.n	10001d70 <main+0x1c>
		printk("Error %d: failed to set pulse width\n", ret);
10001d68:	480d      	ldr	r0, [pc, #52]	; (10001da0 <main+0x4c>)
10001d6a:	f001 fef0 	bl	10003b4e <printk>
	
	

	
	
}
10001d6e:	bd07      	pop	{r0, r1, r2, pc}
		printk("ok");
10001d70:	480c      	ldr	r0, [pc, #48]	; (10001da4 <main+0x50>)
10001d72:	f001 feec 	bl	10003b4e <printk>
	servo_tapa(LEFT,servo0);
10001d76:	4b0c      	ldr	r3, [pc, #48]	; (10001da8 <main+0x54>)
10001d78:	2002      	movs	r0, #2
10001d7a:	68da      	ldr	r2, [r3, #12]
10001d7c:	9200      	str	r2, [sp, #0]
10001d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
10001d80:	f7ff ffc0 	bl	10001d04 <servo_tapa>
	servo_tapa(RIGTH,servo1);
10001d84:	4b09      	ldr	r3, [pc, #36]	; (10001dac <main+0x58>)
10001d86:	2000      	movs	r0, #0
10001d88:	68da      	ldr	r2, [r3, #12]
10001d8a:	9200      	str	r2, [sp, #0]
10001d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
10001d8e:	f7ff ffb9 	bl	10001d04 <servo_tapa>
10001d92:	e7ec      	b.n	10001d6e <main+0x1a>
10001d94:	1000462f 	.word	0x1000462f
10001d98:	000aae60 	.word	0x000aae60
10001d9c:	10004488 	.word	0x10004488
10001da0:	100045f1 	.word	0x100045f1
10001da4:	10004636 	.word	0x10004636
10001da8:	100044a8 	.word	0x100044a8
10001dac:	10004498 	.word	0x10004498

10001db0 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
10001db0:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
10001db2:	4b02      	ldr	r3, [pc, #8]	; (10001dbc <char_out+0xc>)
10001db4:	681b      	ldr	r3, [r3, #0]
10001db6:	4798      	blx	r3
}
10001db8:	bd10      	pop	{r4, pc}
10001dba:	46c0      	nop			; (mov r8, r8)
10001dbc:	20000000 	.word	0x20000000

10001dc0 <__printk_hook_install>:
	_char_out = fn;
10001dc0:	4b01      	ldr	r3, [pc, #4]	; (10001dc8 <__printk_hook_install+0x8>)
10001dc2:	6018      	str	r0, [r3, #0]
}
10001dc4:	4770      	bx	lr
10001dc6:	46c0      	nop			; (mov r8, r8)
10001dc8:	20000000 	.word	0x20000000

10001dcc <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
10001dcc:	b513      	push	{r0, r1, r4, lr}
10001dce:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10001dd0:	2100      	movs	r1, #0
10001dd2:	4c03      	ldr	r4, [pc, #12]	; (10001de0 <vprintk+0x14>)
10001dd4:	0002      	movs	r2, r0
10001dd6:	9100      	str	r1, [sp, #0]
10001dd8:	0020      	movs	r0, r4
10001dda:	f000 f803 	bl	10001de4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
10001dde:	bd13      	pop	{r0, r1, r4, pc}
10001de0:	10001db1 	.word	0x10001db1

10001de4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
10001de6:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10001de8:	2700      	movs	r7, #0
{
10001dea:	b099      	sub	sp, #100	; 0x64
10001dec:	9004      	str	r0, [sp, #16]
10001dee:	9105      	str	r1, [sp, #20]
10001df0:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10001df2:	9b08      	ldr	r3, [sp, #32]
10001df4:	7818      	ldrb	r0, [r3, #0]
10001df6:	2800      	cmp	r0, #0
10001df8:	d101      	bne.n	10001dfe <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10001dfa:	0038      	movs	r0, r7
10001dfc:	e327      	b.n	1000244e <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
10001dfe:	9b08      	ldr	r3, [sp, #32]
10001e00:	3301      	adds	r3, #1
10001e02:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10001e04:	2825      	cmp	r0, #37	; 0x25
10001e06:	d007      	beq.n	10001e18 <z_cbvprintf_impl+0x34>
			OUTC('%');
10001e08:	9905      	ldr	r1, [sp, #20]
10001e0a:	9b04      	ldr	r3, [sp, #16]
10001e0c:	4798      	blx	r3
10001e0e:	2800      	cmp	r0, #0
10001e10:	da00      	bge.n	10001e14 <z_cbvprintf_impl+0x30>
10001e12:	e31c      	b.n	1000244e <z_cbvprintf_impl+0x66a>
10001e14:	3701      	adds	r7, #1
		if (bps == NULL) {
10001e16:	e1e3      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
		} state = {
10001e18:	ad12      	add	r5, sp, #72	; 0x48
10001e1a:	2218      	movs	r2, #24
10001e1c:	2100      	movs	r1, #0
10001e1e:	0028      	movs	r0, r5
10001e20:	f001 ff40 	bl	10003ca4 <memset>
	if (*sp == '%') {
10001e24:	9b08      	ldr	r3, [sp, #32]
10001e26:	785b      	ldrb	r3, [r3, #1]
10001e28:	2b25      	cmp	r3, #37	; 0x25
10001e2a:	d114      	bne.n	10001e56 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10001e2c:	9a08      	ldr	r2, [sp, #32]
10001e2e:	72eb      	strb	r3, [r5, #11]
10001e30:	3202      	adds	r2, #2
10001e32:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10001e34:	ab12      	add	r3, sp, #72	; 0x48
10001e36:	7a5a      	ldrb	r2, [r3, #9]
10001e38:	07d1      	lsls	r1, r2, #31
10001e3a:	d400      	bmi.n	10001e3e <z_cbvprintf_impl+0x5a>
10001e3c:	e17f      	b.n	1000213e <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10001e3e:	cc02      	ldmia	r4!, {r1}
10001e40:	9103      	str	r1, [sp, #12]
			if (width < 0) {
10001e42:	2900      	cmp	r1, #0
10001e44:	db00      	blt.n	10001e48 <z_cbvprintf_impl+0x64>
10001e46:	e17f      	b.n	10002148 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10001e48:	2104      	movs	r1, #4
10001e4a:	7a18      	ldrb	r0, [r3, #8]
10001e4c:	4301      	orrs	r1, r0
10001e4e:	7219      	strb	r1, [r3, #8]
				width = -width;
10001e50:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10001e52:	425b      	negs	r3, r3
10001e54:	e177      	b.n	10002146 <z_cbvprintf_impl+0x362>
10001e56:	2200      	movs	r2, #0
		switch (*sp) {
10001e58:	2601      	movs	r6, #1
10001e5a:	0015      	movs	r5, r2
10001e5c:	0010      	movs	r0, r2
10001e5e:	4694      	mov	ip, r2
10001e60:	9203      	str	r2, [sp, #12]
10001e62:	9b07      	ldr	r3, [sp, #28]
10001e64:	781b      	ldrb	r3, [r3, #0]
10001e66:	2b2b      	cmp	r3, #43	; 0x2b
10001e68:	d06f      	beq.n	10001f4a <z_cbvprintf_impl+0x166>
10001e6a:	d868      	bhi.n	10001f3e <z_cbvprintf_impl+0x15a>
10001e6c:	2b20      	cmp	r3, #32
10001e6e:	d071      	beq.n	10001f54 <z_cbvprintf_impl+0x170>
10001e70:	2b23      	cmp	r3, #35	; 0x23
10001e72:	d071      	beq.n	10001f58 <z_cbvprintf_impl+0x174>
10001e74:	2a00      	cmp	r2, #0
10001e76:	d005      	beq.n	10001e84 <z_cbvprintf_impl+0xa0>
10001e78:	ae12      	add	r6, sp, #72	; 0x48
10001e7a:	7a32      	ldrb	r2, [r6, #8]
10001e7c:	0011      	movs	r1, r2
10001e7e:	2240      	movs	r2, #64	; 0x40
10001e80:	430a      	orrs	r2, r1
10001e82:	7232      	strb	r2, [r6, #8]
10001e84:	2d00      	cmp	r5, #0
10001e86:	d004      	beq.n	10001e92 <z_cbvprintf_impl+0xae>
10001e88:	2220      	movs	r2, #32
10001e8a:	ad12      	add	r5, sp, #72	; 0x48
10001e8c:	7a2e      	ldrb	r6, [r5, #8]
10001e8e:	4332      	orrs	r2, r6
10001e90:	722a      	strb	r2, [r5, #8]
10001e92:	2800      	cmp	r0, #0
10001e94:	d004      	beq.n	10001ea0 <z_cbvprintf_impl+0xbc>
10001e96:	2210      	movs	r2, #16
10001e98:	a812      	add	r0, sp, #72	; 0x48
10001e9a:	7a05      	ldrb	r5, [r0, #8]
10001e9c:	432a      	orrs	r2, r5
10001e9e:	7202      	strb	r2, [r0, #8]
10001ea0:	9a03      	ldr	r2, [sp, #12]
10001ea2:	2a00      	cmp	r2, #0
10001ea4:	d004      	beq.n	10001eb0 <z_cbvprintf_impl+0xcc>
10001ea6:	2208      	movs	r2, #8
10001ea8:	a912      	add	r1, sp, #72	; 0x48
10001eaa:	7a08      	ldrb	r0, [r1, #8]
10001eac:	4302      	orrs	r2, r0
10001eae:	720a      	strb	r2, [r1, #8]
10001eb0:	4662      	mov	r2, ip
10001eb2:	2a00      	cmp	r2, #0
10001eb4:	d004      	beq.n	10001ec0 <z_cbvprintf_impl+0xdc>
10001eb6:	2204      	movs	r2, #4
10001eb8:	a912      	add	r1, sp, #72	; 0x48
10001eba:	7a08      	ldrb	r0, [r1, #8]
10001ebc:	4302      	orrs	r2, r0
10001ebe:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10001ec0:	2144      	movs	r1, #68	; 0x44
10001ec2:	a812      	add	r0, sp, #72	; 0x48
10001ec4:	7a02      	ldrb	r2, [r0, #8]
10001ec6:	4011      	ands	r1, r2
10001ec8:	2944      	cmp	r1, #68	; 0x44
10001eca:	d102      	bne.n	10001ed2 <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
10001ecc:	2140      	movs	r1, #64	; 0x40
10001ece:	438a      	bics	r2, r1
10001ed0:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10001ed2:	2280      	movs	r2, #128	; 0x80
10001ed4:	7a01      	ldrb	r1, [r0, #8]
10001ed6:	4252      	negs	r2, r2
10001ed8:	430a      	orrs	r2, r1
10001eda:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10001edc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10001ede:	250a      	movs	r5, #10
10001ee0:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10001ee2:	2b2a      	cmp	r3, #42	; 0x2a
10001ee4:	d140      	bne.n	10001f68 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
10001ee6:	7a41      	ldrb	r1, [r0, #9]
10001ee8:	3b29      	subs	r3, #41	; 0x29
10001eea:	430b      	orrs	r3, r1
		return ++sp;
10001eec:	3201      	adds	r2, #1
		conv->width_star = true;
10001eee:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10001ef0:	7815      	ldrb	r5, [r2, #0]
10001ef2:	2602      	movs	r6, #2
10001ef4:	0029      	movs	r1, r5
10001ef6:	392e      	subs	r1, #46	; 0x2e
10001ef8:	424b      	negs	r3, r1
10001efa:	4159      	adcs	r1, r3
10001efc:	a812      	add	r0, sp, #72	; 0x48
10001efe:	7a43      	ldrb	r3, [r0, #9]
10001f00:	0049      	lsls	r1, r1, #1
10001f02:	43b3      	bics	r3, r6
10001f04:	430b      	orrs	r3, r1
10001f06:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10001f08:	2d2e      	cmp	r5, #46	; 0x2e
10001f0a:	d145      	bne.n	10001f98 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10001f0c:	7853      	ldrb	r3, [r2, #1]
10001f0e:	2b2a      	cmp	r3, #42	; 0x2a
10001f10:	d03d      	beq.n	10001f8e <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
10001f12:	2300      	movs	r3, #0
	++sp;
10001f14:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10001f16:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10001f18:	7811      	ldrb	r1, [r2, #0]
10001f1a:	1c55      	adds	r5, r2, #1
10001f1c:	0008      	movs	r0, r1
10001f1e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10001f20:	2809      	cmp	r0, #9
10001f22:	d963      	bls.n	10001fec <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10001f24:	a912      	add	r1, sp, #72	; 0x48
10001f26:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10001f28:	7a0d      	ldrb	r5, [r1, #8]
10001f2a:	07a8      	lsls	r0, r5, #30
10001f2c:	4318      	orrs	r0, r3
10001f2e:	2302      	movs	r3, #2
10001f30:	439d      	bics	r5, r3
10001f32:	002b      	movs	r3, r5
10001f34:	0fc0      	lsrs	r0, r0, #31
10001f36:	0040      	lsls	r0, r0, #1
10001f38:	4303      	orrs	r3, r0
10001f3a:	720b      	strb	r3, [r1, #8]
	return sp;
10001f3c:	e02c      	b.n	10001f98 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10001f3e:	2b2d      	cmp	r3, #45	; 0x2d
10001f40:	d00c      	beq.n	10001f5c <z_cbvprintf_impl+0x178>
10001f42:	2b30      	cmp	r3, #48	; 0x30
10001f44:	d196      	bne.n	10001e74 <z_cbvprintf_impl+0x90>
10001f46:	0032      	movs	r2, r6
10001f48:	e000      	b.n	10001f4c <z_cbvprintf_impl+0x168>
10001f4a:	9603      	str	r6, [sp, #12]
			++sp;
10001f4c:	9b07      	ldr	r3, [sp, #28]
10001f4e:	3301      	adds	r3, #1
10001f50:	9307      	str	r3, [sp, #28]
	} while (loop);
10001f52:	e786      	b.n	10001e62 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10001f54:	0030      	movs	r0, r6
10001f56:	e7f9      	b.n	10001f4c <z_cbvprintf_impl+0x168>
10001f58:	0035      	movs	r5, r6
10001f5a:	e7f7      	b.n	10001f4c <z_cbvprintf_impl+0x168>
10001f5c:	46b4      	mov	ip, r6
10001f5e:	e7f5      	b.n	10001f4c <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10001f60:	0032      	movs	r2, r6
10001f62:	4369      	muls	r1, r5
10001f64:	3930      	subs	r1, #48	; 0x30
10001f66:	1859      	adds	r1, r3, r1
10001f68:	7813      	ldrb	r3, [r2, #0]
10001f6a:	1c56      	adds	r6, r2, #1
10001f6c:	0018      	movs	r0, r3
10001f6e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10001f70:	2809      	cmp	r0, #9
10001f72:	d9f5      	bls.n	10001f60 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10001f74:	9b07      	ldr	r3, [sp, #28]
10001f76:	4293      	cmp	r3, r2
10001f78:	d0ba      	beq.n	10001ef0 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10001f7a:	2502      	movs	r5, #2
		conv->width_value = width;
10001f7c:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10001f7e:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10001f80:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10001f82:	0fc9      	lsrs	r1, r1, #31
10001f84:	0049      	lsls	r1, r1, #1
10001f86:	43a8      	bics	r0, r5
10001f88:	4301      	orrs	r1, r0
10001f8a:	7219      	strb	r1, [r3, #8]
10001f8c:	e7b0      	b.n	10001ef0 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10001f8e:	2304      	movs	r3, #4
10001f90:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10001f92:	3202      	adds	r2, #2
		conv->prec_star = true;
10001f94:	430b      	orrs	r3, r1
10001f96:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10001f98:	7811      	ldrb	r1, [r2, #0]
10001f9a:	ab12      	add	r3, sp, #72	; 0x48
10001f9c:	296c      	cmp	r1, #108	; 0x6c
10001f9e:	d045      	beq.n	1000202c <z_cbvprintf_impl+0x248>
10001fa0:	d829      	bhi.n	10001ff6 <z_cbvprintf_impl+0x212>
10001fa2:	2968      	cmp	r1, #104	; 0x68
10001fa4:	d030      	beq.n	10002008 <z_cbvprintf_impl+0x224>
10001fa6:	296a      	cmp	r1, #106	; 0x6a
10001fa8:	d04c      	beq.n	10002044 <z_cbvprintf_impl+0x260>
10001faa:	294c      	cmp	r1, #76	; 0x4c
10001fac:	d054      	beq.n	10002058 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
10001fae:	7811      	ldrb	r1, [r2, #0]
10001fb0:	1c53      	adds	r3, r2, #1
10001fb2:	aa12      	add	r2, sp, #72	; 0x48
10001fb4:	9307      	str	r3, [sp, #28]
10001fb6:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10001fb8:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
10001fba:	2978      	cmp	r1, #120	; 0x78
10001fbc:	d900      	bls.n	10001fc0 <z_cbvprintf_impl+0x1dc>
10001fbe:	e0b9      	b.n	10002134 <z_cbvprintf_impl+0x350>
10001fc0:	296d      	cmp	r1, #109	; 0x6d
10001fc2:	d850      	bhi.n	10002066 <z_cbvprintf_impl+0x282>
10001fc4:	2969      	cmp	r1, #105	; 0x69
10001fc6:	d900      	bls.n	10001fca <z_cbvprintf_impl+0x1e6>
10001fc8:	e0b4      	b.n	10002134 <z_cbvprintf_impl+0x350>
10001fca:	2957      	cmp	r1, #87	; 0x57
10001fcc:	d866      	bhi.n	1000209c <z_cbvprintf_impl+0x2b8>
10001fce:	2941      	cmp	r1, #65	; 0x41
10001fd0:	d003      	beq.n	10001fda <z_cbvprintf_impl+0x1f6>
10001fd2:	3945      	subs	r1, #69	; 0x45
10001fd4:	2902      	cmp	r1, #2
10001fd6:	d900      	bls.n	10001fda <z_cbvprintf_impl+0x1f6>
10001fd8:	e0ac      	b.n	10002134 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
10001fda:	2307      	movs	r3, #7
10001fdc:	a912      	add	r1, sp, #72	; 0x48
10001fde:	7a8a      	ldrb	r2, [r1, #10]
10001fe0:	439a      	bics	r2, r3
10001fe2:	3b03      	subs	r3, #3
10001fe4:	4313      	orrs	r3, r2
10001fe6:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10001fe8:	2301      	movs	r3, #1
			break;
10001fea:	e073      	b.n	100020d4 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
10001fec:	4373      	muls	r3, r6
10001fee:	3b30      	subs	r3, #48	; 0x30
10001ff0:	002a      	movs	r2, r5
10001ff2:	185b      	adds	r3, r3, r1
10001ff4:	e790      	b.n	10001f18 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10001ff6:	2974      	cmp	r1, #116	; 0x74
10001ff8:	d029      	beq.n	1000204e <z_cbvprintf_impl+0x26a>
10001ffa:	297a      	cmp	r1, #122	; 0x7a
10001ffc:	d1d7      	bne.n	10001fae <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
10001ffe:	2178      	movs	r1, #120	; 0x78
10002000:	7a58      	ldrb	r0, [r3, #9]
10002002:	4388      	bics	r0, r1
10002004:	3948      	subs	r1, #72	; 0x48
10002006:	e00d      	b.n	10002024 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10002008:	7850      	ldrb	r0, [r2, #1]
1000200a:	2178      	movs	r1, #120	; 0x78
1000200c:	2868      	cmp	r0, #104	; 0x68
1000200e:	d106      	bne.n	1000201e <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
10002010:	7a58      	ldrb	r0, [r3, #9]
10002012:	4388      	bics	r0, r1
10002014:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10002016:	4301      	orrs	r1, r0
10002018:	7259      	strb	r1, [r3, #9]
			++sp;
1000201a:	3202      	adds	r2, #2
1000201c:	e7c7      	b.n	10001fae <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
1000201e:	7a58      	ldrb	r0, [r3, #9]
10002020:	4388      	bics	r0, r1
10002022:	2110      	movs	r1, #16
10002024:	4301      	orrs	r1, r0
10002026:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10002028:	3201      	adds	r2, #1
1000202a:	e7c0      	b.n	10001fae <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
1000202c:	7850      	ldrb	r0, [r2, #1]
1000202e:	2178      	movs	r1, #120	; 0x78
10002030:	286c      	cmp	r0, #108	; 0x6c
10002032:	d103      	bne.n	1000203c <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10002034:	7a58      	ldrb	r0, [r3, #9]
10002036:	4388      	bics	r0, r1
10002038:	3958      	subs	r1, #88	; 0x58
1000203a:	e7ec      	b.n	10002016 <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
1000203c:	7a58      	ldrb	r0, [r3, #9]
1000203e:	4388      	bics	r0, r1
10002040:	2118      	movs	r1, #24
10002042:	e7ef      	b.n	10002024 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10002044:	2178      	movs	r1, #120	; 0x78
10002046:	7a58      	ldrb	r0, [r3, #9]
10002048:	4388      	bics	r0, r1
1000204a:	3950      	subs	r1, #80	; 0x50
1000204c:	e7ea      	b.n	10002024 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
1000204e:	2178      	movs	r1, #120	; 0x78
10002050:	7a58      	ldrb	r0, [r3, #9]
10002052:	4388      	bics	r0, r1
10002054:	3940      	subs	r1, #64	; 0x40
10002056:	e7e5      	b.n	10002024 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10002058:	8918      	ldrh	r0, [r3, #8]
1000205a:	49a5      	ldr	r1, [pc, #660]	; (100022f0 <z_cbvprintf_impl+0x50c>)
1000205c:	4008      	ands	r0, r1
1000205e:	49a5      	ldr	r1, [pc, #660]	; (100022f4 <z_cbvprintf_impl+0x510>)
10002060:	4301      	orrs	r1, r0
10002062:	8119      	strh	r1, [r3, #8]
		break;
10002064:	e7e0      	b.n	10002028 <z_cbvprintf_impl+0x244>
10002066:	2001      	movs	r0, #1
10002068:	0005      	movs	r5, r0
	switch (conv->specifier) {
1000206a:	396e      	subs	r1, #110	; 0x6e
1000206c:	b2c9      	uxtb	r1, r1
1000206e:	408d      	lsls	r5, r1
10002070:	0029      	movs	r1, r5
10002072:	4da1      	ldr	r5, [pc, #644]	; (100022f8 <z_cbvprintf_impl+0x514>)
10002074:	4229      	tst	r1, r5
10002076:	d138      	bne.n	100020ea <z_cbvprintf_impl+0x306>
10002078:	2524      	movs	r5, #36	; 0x24
1000207a:	4229      	tst	r1, r5
1000207c:	d151      	bne.n	10002122 <z_cbvprintf_impl+0x33e>
1000207e:	4201      	tst	r1, r0
10002080:	d058      	beq.n	10002134 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10002082:	2107      	movs	r1, #7
10002084:	7a90      	ldrb	r0, [r2, #10]
10002086:	4388      	bics	r0, r1
10002088:	3904      	subs	r1, #4
1000208a:	4301      	orrs	r1, r0
1000208c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000208e:	2278      	movs	r2, #120	; 0x78
10002090:	4013      	ands	r3, r2
10002092:	3b40      	subs	r3, #64	; 0x40
10002094:	425a      	negs	r2, r3
10002096:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10002098:	b2db      	uxtb	r3, r3
1000209a:	e01b      	b.n	100020d4 <z_cbvprintf_impl+0x2f0>
1000209c:	2001      	movs	r0, #1
	switch (conv->specifier) {
1000209e:	000d      	movs	r5, r1
100020a0:	0006      	movs	r6, r0
100020a2:	3d58      	subs	r5, #88	; 0x58
100020a4:	b2ed      	uxtb	r5, r5
100020a6:	40ae      	lsls	r6, r5
100020a8:	0035      	movs	r5, r6
100020aa:	26e2      	movs	r6, #226	; 0xe2
100020ac:	0236      	lsls	r6, r6, #8
100020ae:	4235      	tst	r5, r6
100020b0:	d193      	bne.n	10001fda <z_cbvprintf_impl+0x1f6>
100020b2:	4e92      	ldr	r6, [pc, #584]	; (100022fc <z_cbvprintf_impl+0x518>)
100020b4:	4235      	tst	r5, r6
100020b6:	d122      	bne.n	100020fe <z_cbvprintf_impl+0x31a>
100020b8:	2184      	movs	r1, #132	; 0x84
100020ba:	0289      	lsls	r1, r1, #10
100020bc:	420d      	tst	r5, r1
100020be:	d039      	beq.n	10002134 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
100020c0:	2507      	movs	r5, #7
100020c2:	7a91      	ldrb	r1, [r2, #10]
100020c4:	43a9      	bics	r1, r5
100020c6:	4301      	orrs	r1, r0
100020c8:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100020ca:	2178      	movs	r1, #120	; 0x78
100020cc:	400b      	ands	r3, r1
100020ce:	2b40      	cmp	r3, #64	; 0x40
100020d0:	d011      	beq.n	100020f6 <z_cbvprintf_impl+0x312>
	bool unsupported = false;
100020d2:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
100020d4:	aa12      	add	r2, sp, #72	; 0x48
100020d6:	7a11      	ldrb	r1, [r2, #8]
100020d8:	0788      	lsls	r0, r1, #30
100020da:	0fc0      	lsrs	r0, r0, #31
100020dc:	4303      	orrs	r3, r0
100020de:	2002      	movs	r0, #2
100020e0:	005b      	lsls	r3, r3, #1
100020e2:	4381      	bics	r1, r0
100020e4:	4319      	orrs	r1, r3
100020e6:	7211      	strb	r1, [r2, #8]
	return sp;
100020e8:	e6a4      	b.n	10001e34 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
100020ea:	2107      	movs	r1, #7
100020ec:	7a95      	ldrb	r5, [r2, #10]
100020ee:	438d      	bics	r5, r1
100020f0:	3905      	subs	r1, #5
100020f2:	4329      	orrs	r1, r5
100020f4:	e7e8      	b.n	100020c8 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
100020f6:	7a13      	ldrb	r3, [r2, #8]
100020f8:	4303      	orrs	r3, r0
		conv->invalid = true;
100020fa:	7213      	strb	r3, [r2, #8]
		break;
100020fc:	e7e9      	b.n	100020d2 <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
100020fe:	2507      	movs	r5, #7
10002100:	7a96      	ldrb	r6, [r2, #10]
10002102:	43ae      	bics	r6, r5
10002104:	3d05      	subs	r5, #5
10002106:	4335      	orrs	r5, r6
10002108:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000210a:	2578      	movs	r5, #120	; 0x78
1000210c:	402b      	ands	r3, r5
1000210e:	2b40      	cmp	r3, #64	; 0x40
10002110:	d102      	bne.n	10002118 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
10002112:	7a15      	ldrb	r5, [r2, #8]
10002114:	4328      	orrs	r0, r5
10002116:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10002118:	2963      	cmp	r1, #99	; 0x63
1000211a:	d1da      	bne.n	100020d2 <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
1000211c:	1e5a      	subs	r2, r3, #1
1000211e:	4193      	sbcs	r3, r2
10002120:	e7ba      	b.n	10002098 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
10002122:	2107      	movs	r1, #7
10002124:	7a90      	ldrb	r0, [r2, #10]
10002126:	4388      	bics	r0, r1
10002128:	3904      	subs	r1, #4
1000212a:	4301      	orrs	r1, r0
1000212c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
1000212e:	2278      	movs	r2, #120	; 0x78
10002130:	4013      	ands	r3, r2
10002132:	e7f3      	b.n	1000211c <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10002134:	2301      	movs	r3, #1
10002136:	aa12      	add	r2, sp, #72	; 0x48
10002138:	7a11      	ldrb	r1, [r2, #8]
1000213a:	430b      	orrs	r3, r1
1000213c:	e7dd      	b.n	100020fa <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
1000213e:	7a19      	ldrb	r1, [r3, #8]
10002140:	297f      	cmp	r1, #127	; 0x7f
10002142:	d90f      	bls.n	10002164 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10002144:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10002146:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10002148:	ab12      	add	r3, sp, #72	; 0x48
1000214a:	0751      	lsls	r1, r2, #29
1000214c:	d50c      	bpl.n	10002168 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
1000214e:	cc04      	ldmia	r4!, {r2}
10002150:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10002152:	2a00      	cmp	r2, #0
10002154:	da0c      	bge.n	10002170 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
10002156:	2102      	movs	r1, #2
10002158:	7a5a      	ldrb	r2, [r3, #9]
1000215a:	438a      	bics	r2, r1
1000215c:	725a      	strb	r2, [r3, #9]
		int precision = -1;
1000215e:	2301      	movs	r3, #1
10002160:	425b      	negs	r3, r3
10002162:	e004      	b.n	1000216e <z_cbvprintf_impl+0x38a>
		int width = -1;
10002164:	2301      	movs	r3, #1
10002166:	e674      	b.n	10001e52 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10002168:	0792      	lsls	r2, r2, #30
1000216a:	d5f8      	bpl.n	1000215e <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
1000216c:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
1000216e:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10002170:	2500      	movs	r5, #0
10002172:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10002174:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
10002176:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10002178:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000217a:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
1000217c:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000217e:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10002180:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10002182:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10002184:	2b01      	cmp	r3, #1
10002186:	d130      	bne.n	100021ea <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10002188:	1ed0      	subs	r0, r2, #3
1000218a:	2804      	cmp	r0, #4
1000218c:	d804      	bhi.n	10002198 <z_cbvprintf_impl+0x3b4>
1000218e:	f7fe f80b 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002192:	450e      	.short	0x450e
10002194:	0e45      	.short	0x0e45
10002196:	0e          	.byte	0x0e
10002197:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10002198:	6823      	ldr	r3, [r4, #0]
1000219a:	17d8      	asrs	r0, r3, #31
1000219c:	9312      	str	r3, [sp, #72]	; 0x48
1000219e:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
100021a0:	2a01      	cmp	r2, #1
100021a2:	d109      	bne.n	100021b8 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
100021a4:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
100021a6:	9312      	str	r3, [sp, #72]	; 0x48
100021a8:	17db      	asrs	r3, r3, #31
100021aa:	604b      	str	r3, [r1, #4]
100021ac:	e006      	b.n	100021bc <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
100021ae:	cc08      	ldmia	r4!, {r3}
100021b0:	9312      	str	r3, [sp, #72]	; 0x48
100021b2:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
100021b4:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
100021b6:	e002      	b.n	100021be <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
100021b8:	2a02      	cmp	r2, #2
100021ba:	d014      	beq.n	100021e6 <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
100021bc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100021be:	a912      	add	r1, sp, #72	; 0x48
100021c0:	7a0b      	ldrb	r3, [r1, #8]
100021c2:	2003      	movs	r0, #3
100021c4:	001d      	movs	r5, r3
100021c6:	4005      	ands	r5, r0
100021c8:	4203      	tst	r3, r0
100021ca:	d045      	beq.n	10002258 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100021cc:	9b07      	ldr	r3, [sp, #28]
100021ce:	9a08      	ldr	r2, [sp, #32]
100021d0:	9905      	ldr	r1, [sp, #20]
100021d2:	9804      	ldr	r0, [sp, #16]
100021d4:	f001 fd1d 	bl	10003c12 <outs>
100021d8:	2800      	cmp	r0, #0
100021da:	da00      	bge.n	100021de <z_cbvprintf_impl+0x3fa>
100021dc:	e137      	b.n	1000244e <z_cbvprintf_impl+0x66a>
100021de:	183f      	adds	r7, r7, r0
			continue;
100021e0:	9b07      	ldr	r3, [sp, #28]
100021e2:	9308      	str	r3, [sp, #32]
100021e4:	e605      	b.n	10001df2 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
100021e6:	b21b      	sxth	r3, r3
100021e8:	e7dd      	b.n	100021a6 <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
100021ea:	2b02      	cmp	r3, #2
100021ec:	d125      	bne.n	1000223a <z_cbvprintf_impl+0x456>
			switch (length_mod) {
100021ee:	1ed0      	subs	r0, r2, #3
100021f0:	2804      	cmp	r0, #4
100021f2:	d804      	bhi.n	100021fe <z_cbvprintf_impl+0x41a>
100021f4:	f7fd ffd8 	bl	100001a8 <__gnu_thumb1_case_uqi>
100021f8:	1912120d 	.word	0x1912120d
100021fc:	19          	.byte	0x19
100021fd:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
100021fe:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
10002200:	2a01      	cmp	r2, #1
10002202:	d016      	beq.n	10002232 <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10002204:	9312      	str	r3, [sp, #72]	; 0x48
10002206:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10002208:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
1000220a:	2a02      	cmp	r2, #2
1000220c:	d1d7      	bne.n	100021be <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
1000220e:	9312      	str	r3, [sp, #72]	; 0x48
10002210:	e7d5      	b.n	100021be <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
10002212:	cc08      	ldmia	r4!, {r3}
10002214:	9312      	str	r3, [sp, #72]	; 0x48
10002216:	2300      	movs	r3, #0
10002218:	9313      	str	r3, [sp, #76]	; 0x4c
1000221a:	e7d0      	b.n	100021be <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
1000221c:	2307      	movs	r3, #7
1000221e:	3407      	adds	r4, #7
10002220:	439c      	bics	r4, r3
				value->uint =
10002222:	cc03      	ldmia	r4!, {r0, r1}
10002224:	9012      	str	r0, [sp, #72]	; 0x48
10002226:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10002228:	e7c9      	b.n	100021be <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
1000222a:	cc08      	ldmia	r4!, {r3}
1000222c:	9312      	str	r3, [sp, #72]	; 0x48
1000222e:	2300      	movs	r3, #0
10002230:	e7c0      	b.n	100021b4 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
10002232:	b2db      	uxtb	r3, r3
10002234:	9312      	str	r3, [sp, #72]	; 0x48
10002236:	604d      	str	r5, [r1, #4]
10002238:	e7c1      	b.n	100021be <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
1000223a:	2b04      	cmp	r3, #4
1000223c:	d108      	bne.n	10002250 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
1000223e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10002240:	3303      	adds	r3, #3
10002242:	439c      	bics	r4, r3
10002244:	6820      	ldr	r0, [r4, #0]
10002246:	6861      	ldr	r1, [r4, #4]
10002248:	3408      	adds	r4, #8
1000224a:	9012      	str	r0, [sp, #72]	; 0x48
1000224c:	9113      	str	r1, [sp, #76]	; 0x4c
1000224e:	e7b6      	b.n	100021be <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10002250:	2b03      	cmp	r3, #3
10002252:	d1b4      	bne.n	100021be <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10002254:	cc08      	ldmia	r4!, {r3}
10002256:	e7da      	b.n	1000220e <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10002258:	7ac8      	ldrb	r0, [r1, #11]
1000225a:	2878      	cmp	r0, #120	; 0x78
1000225c:	d8c0      	bhi.n	100021e0 <z_cbvprintf_impl+0x3fc>
1000225e:	2862      	cmp	r0, #98	; 0x62
10002260:	d82b      	bhi.n	100022ba <z_cbvprintf_impl+0x4d6>
10002262:	2825      	cmp	r0, #37	; 0x25
10002264:	d100      	bne.n	10002268 <z_cbvprintf_impl+0x484>
10002266:	e5cf      	b.n	10001e08 <z_cbvprintf_impl+0x24>
10002268:	2858      	cmp	r0, #88	; 0x58
1000226a:	d1b9      	bne.n	100021e0 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
1000226c:	9812      	ldr	r0, [sp, #72]	; 0x48
1000226e:	9913      	ldr	r1, [sp, #76]	; 0x4c
10002270:	231e      	movs	r3, #30
10002272:	aa0a      	add	r2, sp, #40	; 0x28
10002274:	189b      	adds	r3, r3, r2
10002276:	9300      	str	r3, [sp, #0]
10002278:	aa14      	add	r2, sp, #80	; 0x50
1000227a:	ab0c      	add	r3, sp, #48	; 0x30
1000227c:	f001 fc7c 	bl	10003b78 <encode_uint>
			if (precision >= 0) {
10002280:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10002282:	0006      	movs	r6, r0
			if (precision >= 0) {
10002284:	2b00      	cmp	r3, #0
10002286:	db0d      	blt.n	100022a4 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10002288:	231e      	movs	r3, #30
				conv->flag_zero = false;
1000228a:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
1000228c:	aa0a      	add	r2, sp, #40	; 0x28
1000228e:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10002290:	aa12      	add	r2, sp, #72	; 0x48
10002292:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10002294:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10002296:	4381      	bics	r1, r0
10002298:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
1000229a:	9906      	ldr	r1, [sp, #24]
1000229c:	4299      	cmp	r1, r3
1000229e:	d901      	bls.n	100022a4 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
100022a0:	1acb      	subs	r3, r1, r3
100022a2:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
100022a4:	2e00      	cmp	r6, #0
100022a6:	d09b      	beq.n	100021e0 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100022a8:	231e      	movs	r3, #30
100022aa:	aa0a      	add	r2, sp, #40	; 0x28
100022ac:	189b      	adds	r3, r3, r2
100022ae:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
100022b0:	9306      	str	r3, [sp, #24]
100022b2:	2d00      	cmp	r5, #0
100022b4:	d032      	beq.n	1000231c <z_cbvprintf_impl+0x538>
			nj_len += 1U;
100022b6:	3001      	adds	r0, #1
100022b8:	e030      	b.n	1000231c <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
100022ba:	3863      	subs	r0, #99	; 0x63
100022bc:	2815      	cmp	r0, #21
100022be:	d88f      	bhi.n	100021e0 <z_cbvprintf_impl+0x3fc>
100022c0:	f7fd ff7c 	bl	100001bc <__gnu_thumb1_case_shi>
100022c4:	0068005e 	.word	0x0068005e
100022c8:	ff8eff8e 	.word	0xff8eff8e
100022cc:	ff8eff8e 	.word	0xff8eff8e
100022d0:	ff8e0068 	.word	0xff8e0068
100022d4:	ff8eff8e 	.word	0xff8eff8e
100022d8:	00a0ff8e 	.word	0x00a0ff8e
100022dc:	007c007a 	.word	0x007c007a
100022e0:	ff8eff8e 	.word	0xff8eff8e
100022e4:	ff8e001e 	.word	0xff8e001e
100022e8:	ff8e007a 	.word	0xff8e007a
100022ec:	007aff8e 	.word	0x007aff8e
100022f0:	ffff87fd 	.word	0xffff87fd
100022f4:	00004002 	.word	0x00004002
100022f8:	00000482 	.word	0x00000482
100022fc:	00000801 	.word	0x00000801
			if (precision >= 0) {
10002300:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10002302:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10002304:	2b00      	cmp	r3, #0
10002306:	db37      	blt.n	10002378 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10002308:	0019      	movs	r1, r3
1000230a:	0030      	movs	r0, r6
1000230c:	f001 fcb7 	bl	10003c7e <strnlen>
			bpe = bps + len;
10002310:	1833      	adds	r3, r6, r0
		char sign = 0;
10002312:	2500      	movs	r5, #0
			bpe = bps + len;
10002314:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10002316:	2e00      	cmp	r6, #0
10002318:	d100      	bne.n	1000231c <z_cbvprintf_impl+0x538>
1000231a:	e761      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
1000231c:	ab12      	add	r3, sp, #72	; 0x48
1000231e:	7a9b      	ldrb	r3, [r3, #10]
10002320:	2210      	movs	r2, #16
10002322:	0019      	movs	r1, r3
10002324:	4011      	ands	r1, r2
10002326:	910b      	str	r1, [sp, #44]	; 0x2c
10002328:	4213      	tst	r3, r2
1000232a:	d100      	bne.n	1000232e <z_cbvprintf_impl+0x54a>
1000232c:	e085      	b.n	1000243a <z_cbvprintf_impl+0x656>
			nj_len += 2U;
1000232e:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10002330:	9a15      	ldr	r2, [sp, #84]	; 0x54
10002332:	920a      	str	r2, [sp, #40]	; 0x28
10002334:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
10002336:	065b      	lsls	r3, r3, #25
10002338:	d501      	bpl.n	1000233e <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
1000233a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000233c:	18c0      	adds	r0, r0, r3
		if (width > 0) {
1000233e:	9b03      	ldr	r3, [sp, #12]
10002340:	2b00      	cmp	r3, #0
10002342:	dc00      	bgt.n	10002346 <z_cbvprintf_impl+0x562>
10002344:	e094      	b.n	10002470 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
10002346:	1a1b      	subs	r3, r3, r0
10002348:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
1000234a:	ab12      	add	r3, sp, #72	; 0x48
1000234c:	7a1b      	ldrb	r3, [r3, #8]
1000234e:	075a      	lsls	r2, r3, #29
10002350:	0fd1      	lsrs	r1, r2, #31
10002352:	9108      	str	r1, [sp, #32]
10002354:	2a00      	cmp	r2, #0
10002356:	da00      	bge.n	1000235a <z_cbvprintf_impl+0x576>
10002358:	e08a      	b.n	10002470 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
1000235a:	065b      	lsls	r3, r3, #25
1000235c:	d400      	bmi.n	10002360 <z_cbvprintf_impl+0x57c>
1000235e:	e078      	b.n	10002452 <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10002360:	2d00      	cmp	r5, #0
10002362:	d007      	beq.n	10002374 <z_cbvprintf_impl+0x590>
						OUTC(sign);
10002364:	0028      	movs	r0, r5
10002366:	9905      	ldr	r1, [sp, #20]
10002368:	9b04      	ldr	r3, [sp, #16]
1000236a:	4798      	blx	r3
1000236c:	2800      	cmp	r0, #0
1000236e:	db6e      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
10002370:	9d08      	ldr	r5, [sp, #32]
10002372:	3701      	adds	r7, #1
					pad = '0';
10002374:	2330      	movs	r3, #48	; 0x30
10002376:	e06d      	b.n	10002454 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10002378:	0030      	movs	r0, r6
1000237a:	f001 fc78 	bl	10003c6e <strlen>
1000237e:	e7c7      	b.n	10002310 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10002380:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10002382:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002384:	ae0c      	add	r6, sp, #48	; 0x30
10002386:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10002388:	aa0a      	add	r2, sp, #40	; 0x28
1000238a:	189b      	adds	r3, r3, r2
		char sign = 0;
1000238c:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
1000238e:	2001      	movs	r0, #1
			bpe = buf + 1;
10002390:	9306      	str	r3, [sp, #24]
10002392:	e7c3      	b.n	1000231c <z_cbvprintf_impl+0x538>
				sign = '+';
10002394:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10002396:	071a      	lsls	r2, r3, #28
10002398:	d402      	bmi.n	100023a0 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
1000239a:	06db      	lsls	r3, r3, #27
1000239c:	0fdb      	lsrs	r3, r3, #31
1000239e:	015d      	lsls	r5, r3, #5
			sint = value->sint;
100023a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100023a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
100023a4:	2b00      	cmp	r3, #0
100023a6:	db00      	blt.n	100023aa <z_cbvprintf_impl+0x5c6>
100023a8:	e760      	b.n	1000226c <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
100023aa:	2100      	movs	r1, #0
100023ac:	4250      	negs	r0, r2
100023ae:	4199      	sbcs	r1, r3
				sign = '-';
100023b0:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
100023b2:	9012      	str	r0, [sp, #72]	; 0x48
100023b4:	9113      	str	r1, [sp, #76]	; 0x4c
100023b6:	e759      	b.n	1000226c <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
100023b8:	2500      	movs	r5, #0
100023ba:	e757      	b.n	1000226c <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
100023bc:	9812      	ldr	r0, [sp, #72]	; 0x48
100023be:	ad12      	add	r5, sp, #72	; 0x48
100023c0:	2800      	cmp	r0, #0
100023c2:	d034      	beq.n	1000242e <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
100023c4:	231e      	movs	r3, #30
100023c6:	aa0a      	add	r2, sp, #40	; 0x28
100023c8:	189b      	adds	r3, r3, r2
100023ca:	9300      	str	r3, [sp, #0]
100023cc:	aa14      	add	r2, sp, #80	; 0x50
100023ce:	ab0c      	add	r3, sp, #48	; 0x30
100023d0:	2100      	movs	r1, #0
100023d2:	f001 fbd1 	bl	10003b78 <encode_uint>
				conv->altform_0c = true;
100023d6:	23ef      	movs	r3, #239	; 0xef
100023d8:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
100023da:	0006      	movs	r6, r0
				conv->altform_0c = true;
100023dc:	401a      	ands	r2, r3
100023de:	4b48      	ldr	r3, [pc, #288]	; (10002500 <z_cbvprintf_impl+0x71c>)
100023e0:	4313      	orrs	r3, r2
100023e2:	816b      	strh	r3, [r5, #10]
		char sign = 0;
100023e4:	2500      	movs	r5, #0
			if (precision >= 0) {
100023e6:	9b06      	ldr	r3, [sp, #24]
100023e8:	42ab      	cmp	r3, r5
100023ea:	db00      	blt.n	100023ee <z_cbvprintf_impl+0x60a>
100023ec:	e74c      	b.n	10002288 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
100023ee:	42a8      	cmp	r0, r5
100023f0:	d100      	bne.n	100023f4 <z_cbvprintf_impl+0x610>
100023f2:	e6f5      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100023f4:	231e      	movs	r3, #30
100023f6:	aa0a      	add	r2, sp, #40	; 0x28
100023f8:	189b      	adds	r3, r3, r2
100023fa:	1a18      	subs	r0, r3, r0
100023fc:	231e      	movs	r3, #30
100023fe:	189b      	adds	r3, r3, r2
10002400:	9306      	str	r3, [sp, #24]
10002402:	e78b      	b.n	1000231c <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10002404:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10002406:	2a07      	cmp	r2, #7
10002408:	d900      	bls.n	1000240c <z_cbvprintf_impl+0x628>
1000240a:	e6e9      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
1000240c:	0010      	movs	r0, r2
1000240e:	f7fd fecb 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002412:	040c      	.short	0x040c
10002414:	08080c06 	.word	0x08080c06
10002418:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
1000241a:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
1000241c:	e6e0      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
1000241e:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10002420:	e6de      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10002422:	17fa      	asrs	r2, r7, #31
10002424:	601f      	str	r7, [r3, #0]
10002426:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10002428:	e6da      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
1000242a:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
1000242c:	e6d8      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
1000242e:	4b35      	ldr	r3, [pc, #212]	; (10002504 <z_cbvprintf_impl+0x720>)
		char sign = 0;
10002430:	0005      	movs	r5, r0
10002432:	4e35      	ldr	r6, [pc, #212]	; (10002508 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10002434:	2005      	movs	r0, #5
			bpe = bps + 5;
10002436:	9306      	str	r3, [sp, #24]
10002438:	e770      	b.n	1000231c <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
1000243a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
1000243c:	0fd2      	lsrs	r2, r2, #31
1000243e:	1880      	adds	r0, r0, r2
10002440:	e776      	b.n	10002330 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10002442:	9905      	ldr	r1, [sp, #20]
10002444:	9809      	ldr	r0, [sp, #36]	; 0x24
10002446:	9b04      	ldr	r3, [sp, #16]
10002448:	4798      	blx	r3
1000244a:	2800      	cmp	r0, #0
1000244c:	da05      	bge.n	1000245a <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
1000244e:	b019      	add	sp, #100	; 0x64
10002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10002452:	2320      	movs	r3, #32
					pad = '0';
10002454:	9309      	str	r3, [sp, #36]	; 0x24
10002456:	9b03      	ldr	r3, [sp, #12]
10002458:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
1000245a:	9b08      	ldr	r3, [sp, #32]
1000245c:	001a      	movs	r2, r3
1000245e:	3a01      	subs	r2, #1
10002460:	9208      	str	r2, [sp, #32]
10002462:	2b00      	cmp	r3, #0
10002464:	dced      	bgt.n	10002442 <z_cbvprintf_impl+0x65e>
10002466:	9a03      	ldr	r2, [sp, #12]
10002468:	19d7      	adds	r7, r2, r7
1000246a:	1aff      	subs	r7, r7, r3
1000246c:	9b08      	ldr	r3, [sp, #32]
1000246e:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10002470:	2d00      	cmp	r5, #0
10002472:	d006      	beq.n	10002482 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10002474:	0028      	movs	r0, r5
10002476:	9905      	ldr	r1, [sp, #20]
10002478:	9b04      	ldr	r3, [sp, #16]
1000247a:	4798      	blx	r3
1000247c:	2800      	cmp	r0, #0
1000247e:	dbe6      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
10002480:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10002482:	ab12      	add	r3, sp, #72	; 0x48
10002484:	7a9b      	ldrb	r3, [r3, #10]
10002486:	06da      	lsls	r2, r3, #27
10002488:	d401      	bmi.n	1000248e <z_cbvprintf_impl+0x6aa>
1000248a:	071b      	lsls	r3, r3, #28
1000248c:	d506      	bpl.n	1000249c <z_cbvprintf_impl+0x6b8>
				OUTC('0');
1000248e:	2030      	movs	r0, #48	; 0x30
10002490:	9905      	ldr	r1, [sp, #20]
10002492:	9b04      	ldr	r3, [sp, #16]
10002494:	4798      	blx	r3
10002496:	2800      	cmp	r0, #0
10002498:	dbd9      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
1000249a:	3701      	adds	r7, #1
			if (conv->altform_0c) {
1000249c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000249e:	2b00      	cmp	r3, #0
100024a0:	d007      	beq.n	100024b2 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
100024a2:	ab12      	add	r3, sp, #72	; 0x48
100024a4:	7ad8      	ldrb	r0, [r3, #11]
100024a6:	9905      	ldr	r1, [sp, #20]
100024a8:	9b04      	ldr	r3, [sp, #16]
100024aa:	4798      	blx	r3
100024ac:	2800      	cmp	r0, #0
100024ae:	dbce      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
100024b0:	3701      	adds	r7, #1
				while (width-- > 0) {
100024b2:	003d      	movs	r5, r7
100024b4:	e006      	b.n	100024c4 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
100024b6:	2030      	movs	r0, #48	; 0x30
100024b8:	9905      	ldr	r1, [sp, #20]
100024ba:	9b04      	ldr	r3, [sp, #16]
100024bc:	4798      	blx	r3
100024be:	2800      	cmp	r0, #0
100024c0:	dbc5      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
100024c2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
100024c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100024c6:	19db      	adds	r3, r3, r7
100024c8:	1b5b      	subs	r3, r3, r5
100024ca:	2b00      	cmp	r3, #0
100024cc:	dcf3      	bgt.n	100024b6 <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
100024ce:	0032      	movs	r2, r6
100024d0:	9b06      	ldr	r3, [sp, #24]
100024d2:	9905      	ldr	r1, [sp, #20]
100024d4:	9804      	ldr	r0, [sp, #16]
100024d6:	f001 fb9c 	bl	10003c12 <outs>
100024da:	2800      	cmp	r0, #0
100024dc:	dbb7      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
100024de:	1947      	adds	r7, r0, r5
100024e0:	003d      	movs	r5, r7
		while (width > 0) {
100024e2:	9b03      	ldr	r3, [sp, #12]
100024e4:	195b      	adds	r3, r3, r5
100024e6:	1bdb      	subs	r3, r3, r7
100024e8:	2b00      	cmp	r3, #0
100024ea:	dc00      	bgt.n	100024ee <z_cbvprintf_impl+0x70a>
100024ec:	e678      	b.n	100021e0 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
100024ee:	2020      	movs	r0, #32
100024f0:	9905      	ldr	r1, [sp, #20]
100024f2:	9b04      	ldr	r3, [sp, #16]
100024f4:	4798      	blx	r3
100024f6:	2800      	cmp	r0, #0
100024f8:	dba9      	blt.n	1000244e <z_cbvprintf_impl+0x66a>
100024fa:	3701      	adds	r7, #1
			--width;
100024fc:	e7f1      	b.n	100024e2 <z_cbvprintf_impl+0x6fe>
100024fe:	46c0      	nop			; (mov r8, r8)
10002500:	00007810 	.word	0x00007810
10002504:	1000463e 	.word	0x1000463e
10002508:	10004639 	.word	0x10004639

1000250c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
1000250c:	4901      	ldr	r1, [pc, #4]	; (10002514 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
1000250e:	2210      	movs	r2, #16
	str	r2, [r1]
10002510:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10002512:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10002514:	e000ed10 	.word	0xe000ed10

10002518 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10002518:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
1000251c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
1000251e:	b662      	cpsie	i
	isb
10002520:	f3bf 8f6f 	isb	sy

	bx	lr
10002524:	4770      	bx	lr
10002526:	46c0      	nop			; (mov r8, r8)

10002528 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10002528:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1000252a:	0600      	lsls	r0, r0, #24
1000252c:	d405      	bmi.n	1000253a <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000252e:	221f      	movs	r2, #31
10002530:	401a      	ands	r2, r3
10002532:	2301      	movs	r3, #1
10002534:	4093      	lsls	r3, r2
10002536:	4a01      	ldr	r2, [pc, #4]	; (1000253c <arch_irq_enable+0x14>)
10002538:	6013      	str	r3, [r2, #0]
}
1000253a:	4770      	bx	lr
1000253c:	e000e100 	.word	0xe000e100

10002540 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10002540:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002542:	25ff      	movs	r5, #255	; 0xff
10002544:	2203      	movs	r2, #3
10002546:	000b      	movs	r3, r1
10002548:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
1000254a:	b240      	sxtb	r0, r0
1000254c:	4002      	ands	r2, r0
1000254e:	00d2      	lsls	r2, r2, #3
10002550:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002552:	015b      	lsls	r3, r3, #5
10002554:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002556:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002558:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
1000255a:	2800      	cmp	r0, #0
1000255c:	db0a      	blt.n	10002574 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000255e:	24c0      	movs	r4, #192	; 0xc0
10002560:	4a0a      	ldr	r2, [pc, #40]	; (1000258c <z_arm_irq_priority_set+0x4c>)
10002562:	0880      	lsrs	r0, r0, #2
10002564:	0080      	lsls	r0, r0, #2
10002566:	1880      	adds	r0, r0, r2
10002568:	00a4      	lsls	r4, r4, #2
1000256a:	5902      	ldr	r2, [r0, r4]
1000256c:	400a      	ands	r2, r1
1000256e:	4313      	orrs	r3, r2
10002570:	5103      	str	r3, [r0, r4]
}
10002572:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002574:	220f      	movs	r2, #15
10002576:	4010      	ands	r0, r2
10002578:	3808      	subs	r0, #8
1000257a:	4a05      	ldr	r2, [pc, #20]	; (10002590 <z_arm_irq_priority_set+0x50>)
1000257c:	0880      	lsrs	r0, r0, #2
1000257e:	0080      	lsls	r0, r0, #2
10002580:	1880      	adds	r0, r0, r2
10002582:	69c2      	ldr	r2, [r0, #28]
10002584:	4011      	ands	r1, r2
10002586:	4319      	orrs	r1, r3
10002588:	61c1      	str	r1, [r0, #28]
1000258a:	e7f2      	b.n	10002572 <z_arm_irq_priority_set+0x32>
1000258c:	e000e100 	.word	0xe000e100
10002590:	e000ed00 	.word	0xe000ed00

10002594 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10002594:	bf30      	wfi
    b z_SysNmiOnReset
10002596:	e7fd      	b.n	10002594 <z_SysNmiOnReset>

10002598 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10002598:	22ff      	movs	r2, #255	; 0xff
1000259a:	4b08      	ldr	r3, [pc, #32]	; (100025bc <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
1000259c:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
1000259e:	4393      	bics	r3, r2
100025a0:	4a07      	ldr	r2, [pc, #28]	; (100025c0 <z_arm_prep_c+0x28>)
100025a2:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
100025a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
100025a8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
100025ac:	f000 fe9e 	bl	100032ec <z_bss_zero>
	z_data_copy();
100025b0:	f001 f974 	bl	1000389c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
100025b4:	f000 f8f2 	bl	1000279c <z_arm_interrupt_init>
	z_cstart();
100025b8:	f000 fed8 	bl	1000336c <z_cstart>
100025bc:	10000100 	.word	0x10000100
100025c0:	e000ed00 	.word	0xe000ed00

100025c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
100025c4:	4a08      	ldr	r2, [pc, #32]	; (100025e8 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
100025c6:	4909      	ldr	r1, [pc, #36]	; (100025ec <arch_swap+0x28>)
	_current->arch.basepri = key;
100025c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
100025ca:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
100025cc:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
100025ce:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
100025d0:	2380      	movs	r3, #128	; 0x80
100025d2:	4907      	ldr	r1, [pc, #28]	; (100025f0 <arch_swap+0x2c>)
100025d4:	055b      	lsls	r3, r3, #21
100025d6:	6848      	ldr	r0, [r1, #4]
100025d8:	4303      	orrs	r3, r0
100025da:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
100025dc:	b662      	cpsie	i
100025de:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
100025e2:	6893      	ldr	r3, [r2, #8]
100025e4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
100025e6:	4770      	bx	lr
100025e8:	20000160 	.word	0x20000160
100025ec:	100045c4 	.word	0x100045c4
100025f0:	e000ed00 	.word	0xe000ed00

100025f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
100025f4:	4913      	ldr	r1, [pc, #76]	; (10002644 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
100025f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
100025f8:	4813      	ldr	r0, [pc, #76]	; (10002648 <_thread_irq_disabled+0x22>)
    add r0, r2
100025fa:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
100025fc:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10002600:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10002602:	4643      	mov	r3, r8
    mov r4, r9
10002604:	464c      	mov	r4, r9
    mov r5, r10
10002606:	4655      	mov	r5, sl
    mov r6, r11
10002608:	465e      	mov	r6, fp
    mov r7, ip
1000260a:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
1000260c:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
1000260e:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10002610:	4f0e      	ldr	r7, [pc, #56]	; (1000264c <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10002612:	4e0f      	ldr	r6, [pc, #60]	; (10002650 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10002614:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
10002616:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10002618:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
1000261a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
1000261c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
1000261e:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10002620:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10002622:	d100      	bne.n	10002626 <_thread_irq_disabled>
    cpsie i
10002624:	b662      	cpsie	i

10002626 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10002626:	4c08      	ldr	r4, [pc, #32]	; (10002648 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10002628:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
1000262a:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
1000262c:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
1000262e:	4698      	mov	r8, r3
    mov r9, r4
10002630:	46a1      	mov	r9, r4
    mov r10, r5
10002632:	46aa      	mov	sl, r5
    mov r11, r6
10002634:	46b3      	mov	fp, r6
    mov ip, r7
10002636:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10002638:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
1000263a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
1000263c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10002640:	4770      	bx	lr
10002642:	0000      	.short	0x0000
    ldr r1, =_kernel
10002644:	20000160 	.word	0x20000160
    ldr r0, =_thread_offset_to_callee_saved
10002648:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
1000264c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10002650:	08000000 	.word	0x08000000

10002654 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10002654:	2004      	movs	r0, #4
  mov r1, lr
10002656:	4671      	mov	r1, lr
  tst r1, r0
10002658:	4201      	tst	r1, r0
  beq _stack_frame_msp
1000265a:	d002      	beq.n	10002662 <_stack_frame_msp>
  mrs r0, PSP
1000265c:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10002660:	d101      	bne.n	10002666 <_stack_frame_endif>

10002662 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10002662:	f3ef 8008 	mrs	r0, MSP

10002666 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10002666:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10002668:	3902      	subs	r1, #2
    ldrb r1, [r1]
1000266a:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
1000266c:	2902      	cmp	r1, #2
    beq _oops
1000266e:	d0ff      	beq.n	10002670 <_oops>

10002670 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10002670:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10002672:	f001 fae9 	bl	10003c48 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10002676:	bd01      	pop	{r0, pc}

10002678 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10002678:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
1000267a:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
1000267c:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
1000267e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10002680:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10002682:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10002684:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10002686:	4906      	ldr	r1, [pc, #24]	; (100026a0 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10002688:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
1000268a:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
1000268c:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
1000268e:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10002690:	2380      	movs	r3, #128	; 0x80
10002692:	045b      	lsls	r3, r3, #17
10002694:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10002696:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10002698:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
1000269a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
1000269c:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
1000269e:	bd10      	pop	{r4, pc}
100026a0:	10003b65 	.word	0x10003b65

100026a4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
100026a4:	4b06      	ldr	r3, [pc, #24]	; (100026c0 <arch_switch_to_main_thread+0x1c>)
100026a6:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
100026a8:	1c10      	adds	r0, r2, #0
100026aa:	f381 8809 	msr	PSP, r1
100026ae:	2100      	movs	r1, #0
100026b0:	b662      	cpsie	i
100026b2:	f3bf 8f6f 	isb	sy
100026b6:	2200      	movs	r2, #0
100026b8:	2300      	movs	r3, #0
100026ba:	f001 fa53 	bl	10003b64 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
100026be:	46c0      	nop			; (mov r8, r8)
100026c0:	20000160 	.word	0x20000160

100026c4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
100026c4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
100026c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
100026ca:	4905      	ldr	r1, [pc, #20]	; (100026e0 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
100026cc:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
100026ce:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
100026d0:	4904      	ldr	r1, [pc, #16]	; (100026e4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
100026d2:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
100026d4:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
100026d6:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
100026d8:	bc09      	pop	{r0, r3}
	mov lr, r3
100026da:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
100026dc:	4902      	ldr	r1, [pc, #8]	; (100026e8 <_isr_wrapper+0x24>)
	bx r1
100026de:	4708      	bx	r1
	ldr r1, =16
100026e0:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
100026e4:	10004398 	.word	0x10004398
	ldr r1, =z_arm_int_exit
100026e8:	100026ed 	.word	0x100026ed

100026ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
100026ec:	4b04      	ldr	r3, [pc, #16]	; (10002700 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
100026ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
100026f0:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
100026f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
100026f4:	d002      	beq.n	100026fc <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
100026f6:	4903      	ldr	r1, [pc, #12]	; (10002704 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
100026f8:	4a03      	ldr	r2, [pc, #12]	; (10002708 <_EXIT_EXC+0xc>)
	str r2, [r1]
100026fa:	600a      	str	r2, [r1, #0]

100026fc <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
100026fc:	4770      	bx	lr
100026fe:	0000      	.short	0x0000
	ldr r3, =_kernel
10002700:	20000160 	.word	0x20000160
	ldr r1, =_SCS_ICSR
10002704:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10002708:	10000000 	.word	0x10000000

1000270c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
1000270c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000270e:	4b1b      	ldr	r3, [pc, #108]	; (1000277c <z_arm_fault+0x70>)
{
10002710:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10002712:	685b      	ldr	r3, [r3, #4]
{
10002714:	b088      	sub	sp, #32
10002716:	05db      	lsls	r3, r3, #23
10002718:	0ddb      	lsrs	r3, r3, #23
1000271a:	b662      	cpsie	i
1000271c:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10002720:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002722:	0e16      	lsrs	r6, r2, #24
		return NULL;
10002724:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002726:	2eff      	cmp	r6, #255	; 0xff
10002728:	d109      	bne.n	1000273e <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
1000272a:	3ef3      	subs	r6, #243	; 0xf3
1000272c:	4016      	ands	r6, r2
1000272e:	2e08      	cmp	r6, #8
10002730:	d005      	beq.n	1000273e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10002732:	0001      	movs	r1, r0
			*nested_exc = true;
10002734:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10002736:	0712      	lsls	r2, r2, #28
10002738:	d501      	bpl.n	1000273e <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
1000273a:	0021      	movs	r1, r4
	*nested_exc = false;
1000273c:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
1000273e:	2400      	movs	r4, #0
	switch (fault) {
10002740:	2b03      	cmp	r3, #3
10002742:	d106      	bne.n	10002752 <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10002744:	698b      	ldr	r3, [r1, #24]
10002746:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10002748:	881a      	ldrh	r2, [r3, #0]
1000274a:	4b0d      	ldr	r3, [pc, #52]	; (10002780 <z_arm_fault+0x74>)
1000274c:	429a      	cmp	r2, r3
1000274e:	d100      	bne.n	10002752 <z_arm_fault+0x46>
		reason = esf->basic.r0;
10002750:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10002752:	2220      	movs	r2, #32
10002754:	4668      	mov	r0, sp
10002756:	f001 fa9c 	bl	10003c92 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
1000275a:	9b07      	ldr	r3, [sp, #28]
1000275c:	2d00      	cmp	r5, #0
1000275e:	d00a      	beq.n	10002776 <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10002760:	05da      	lsls	r2, r3, #23
10002762:	d102      	bne.n	1000276a <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10002764:	4a07      	ldr	r2, [pc, #28]	; (10002784 <z_arm_fault+0x78>)
10002766:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10002768:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
1000276a:	4669      	mov	r1, sp
1000276c:	0020      	movs	r0, r4
1000276e:	f001 fa67 	bl	10003c40 <z_arm_fatal_error>
}
10002772:	b008      	add	sp, #32
10002774:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10002776:	0a5b      	lsrs	r3, r3, #9
10002778:	025b      	lsls	r3, r3, #9
1000277a:	e7f5      	b.n	10002768 <z_arm_fault+0x5c>
1000277c:	e000ed00 	.word	0xe000ed00
10002780:	0000df02 	.word	0x0000df02
10002784:	000001ff 	.word	0x000001ff

10002788 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10002788:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
1000278c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10002790:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10002792:	4672      	mov	r2, lr
	bl z_arm_fault
10002794:	f7ff ffba 	bl	1000270c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10002798:	bd01      	pop	{r0, pc}
1000279a:	46c0      	nop			; (mov r8, r8)

1000279c <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
1000279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000279e:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
100027a0:	2200      	movs	r2, #0
100027a2:	2603      	movs	r6, #3
100027a4:	25ff      	movs	r5, #255	; 0xff
100027a6:	00a4      	lsls	r4, r4, #2
100027a8:	0010      	movs	r0, r2
100027aa:	002f      	movs	r7, r5
100027ac:	4030      	ands	r0, r6
100027ae:	00c0      	lsls	r0, r0, #3
100027b0:	4087      	lsls	r7, r0
100027b2:	4905      	ldr	r1, [pc, #20]	; (100027c8 <z_arm_interrupt_init+0x2c>)
100027b4:	0893      	lsrs	r3, r2, #2
100027b6:	009b      	lsls	r3, r3, #2
100027b8:	185b      	adds	r3, r3, r1
100027ba:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
100027bc:	3201      	adds	r2, #1
100027be:	43b9      	bics	r1, r7
100027c0:	5119      	str	r1, [r3, r4]
100027c2:	2a1a      	cmp	r2, #26
100027c4:	d1f0      	bne.n	100027a8 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
100027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100027c8:	e000e100 	.word	0xe000e100

100027cc <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100027cc:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
100027ce:	4807      	ldr	r0, [pc, #28]	; (100027ec <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100027d0:	4907      	ldr	r1, [pc, #28]	; (100027f0 <__start+0x24>)
    adds r0, r0, r1
100027d2:	1840      	adds	r0, r0, r1
    msr PSP, r0
100027d4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
100027d8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
100027dc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
100027de:	4308      	orrs	r0, r1
    msr CONTROL, r0
100027e0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
100027e4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
100027e8:	f7ff fed6 	bl	10002598 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
100027ec:	200001a0 	.word	0x200001a0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100027f0:	00000800 	.word	0x00000800

100027f4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
100027f4:	b510      	push	{r4, lr}
	if (_current == thread) {
100027f6:	4b0a      	ldr	r3, [pc, #40]	; (10002820 <z_impl_k_thread_abort+0x2c>)
100027f8:	689b      	ldr	r3, [r3, #8]
100027fa:	4283      	cmp	r3, r0
100027fc:	d10d      	bne.n	1000281a <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100027fe:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10002802:	2b00      	cmp	r3, #0
10002804:	d009      	beq.n	1000281a <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002806:	2280      	movs	r2, #128	; 0x80
10002808:	4b06      	ldr	r3, [pc, #24]	; (10002824 <z_impl_k_thread_abort+0x30>)
1000280a:	0552      	lsls	r2, r2, #21
1000280c:	6859      	ldr	r1, [r3, #4]
1000280e:	430a      	orrs	r2, r1
10002810:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10002812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002814:	4904      	ldr	r1, [pc, #16]	; (10002828 <z_impl_k_thread_abort+0x34>)
10002816:	400a      	ands	r2, r1
10002818:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
1000281a:	f000 ffe3 	bl	100037e4 <z_thread_abort>
}
1000281e:	bd10      	pop	{r4, pc}
10002820:	20000160 	.word	0x20000160
10002824:	e000ed00 	.word	0xe000ed00
10002828:	ffff7fff 	.word	0xffff7fff

1000282c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
1000282c:	4b01      	ldr	r3, [pc, #4]	; (10002834 <__stdout_hook_install+0x8>)
1000282e:	6018      	str	r0, [r3, #0]
}
10002830:	4770      	bx	lr
10002832:	46c0      	nop			; (mov r8, r8)
10002834:	20000004 	.word	0x20000004

10002838 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002838:	4b0e      	ldr	r3, [pc, #56]	; (10002874 <rp2040_init+0x3c>)
1000283a:	4a0f      	ldr	r2, [pc, #60]	; (10002878 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
1000283c:	b570      	push	{r4, r5, r6, lr}
1000283e:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002840:	4d0e      	ldr	r5, [pc, #56]	; (1000287c <rp2040_init+0x44>)
10002842:	4b0f      	ldr	r3, [pc, #60]	; (10002880 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10002844:	4c0f      	ldr	r4, [pc, #60]	; (10002884 <rp2040_init+0x4c>)
10002846:	602b      	str	r3, [r5, #0]
10002848:	0019      	movs	r1, r3
1000284a:	68a2      	ldr	r2, [r4, #8]
1000284c:	4391      	bics	r1, r2
1000284e:	d1fb      	bne.n	10002848 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10002850:	f000 fb16 	bl	10002e80 <clocks_init>
10002854:	4b0c      	ldr	r3, [pc, #48]	; (10002888 <rp2040_init+0x50>)
10002856:	602b      	str	r3, [r5, #0]
10002858:	68a3      	ldr	r3, [r4, #8]
1000285a:	01db      	lsls	r3, r3, #7
1000285c:	3380      	adds	r3, #128	; 0x80
1000285e:	d1fb      	bne.n	10002858 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10002860:	f3ef 8310 	mrs	r3, PRIMASK
10002864:	b672      	cpsid	i
	if (key != 0U) {
10002866:	2b00      	cmp	r3, #0
10002868:	d102      	bne.n	10002870 <rp2040_init+0x38>
	__asm__ volatile(
1000286a:	b662      	cpsie	i
1000286c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10002870:	2000      	movs	r0, #0
10002872:	bd70      	pop	{r4, r5, r6, pc}
10002874:	4000e000 	.word	0x4000e000
10002878:	ffffcdbf 	.word	0xffffcdbf
1000287c:	4000f000 	.word	0x4000f000
10002880:	003c3ffe 	.word	0x003c3ffe
10002884:	4000c000 	.word	0x4000c000
10002888:	01ffffff 	.word	0x01ffffff

1000288c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
1000288c:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
1000288e:	4808      	ldr	r0, [pc, #32]	; (100028b0 <uart_console_init+0x24>)
10002890:	f001 fc7f 	bl	10004192 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
10002894:	2800      	cmp	r0, #0
10002896:	d008      	beq.n	100028aa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10002898:	4c06      	ldr	r4, [pc, #24]	; (100028b4 <uart_console_init+0x28>)
1000289a:	0020      	movs	r0, r4
1000289c:	f7ff ffc6 	bl	1000282c <__stdout_hook_install>
	__printk_hook_install(console_out);
100028a0:	0020      	movs	r0, r4
100028a2:	f7ff fa8d 	bl	10001dc0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100028a6:	2000      	movs	r0, #0
}
100028a8:	bd10      	pop	{r4, pc}
		return -ENODEV;
100028aa:	2013      	movs	r0, #19
100028ac:	4240      	negs	r0, r0
100028ae:	e7fb      	b.n	100028a8 <uart_console_init+0x1c>
100028b0:	10004350 	.word	0x10004350
100028b4:	100028b9 	.word	0x100028b9

100028b8 <console_out>:
{
100028b8:	b570      	push	{r4, r5, r6, lr}
100028ba:	0004      	movs	r4, r0
100028bc:	4d07      	ldr	r5, [pc, #28]	; (100028dc <console_out+0x24>)
	if ('\n' == c) {
100028be:	280a      	cmp	r0, #10
100028c0:	d104      	bne.n	100028cc <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100028c2:	68ab      	ldr	r3, [r5, #8]
100028c4:	210d      	movs	r1, #13
100028c6:	0028      	movs	r0, r5
100028c8:	685b      	ldr	r3, [r3, #4]
100028ca:	4798      	blx	r3
100028cc:	68ab      	ldr	r3, [r5, #8]
100028ce:	0028      	movs	r0, r5
100028d0:	685b      	ldr	r3, [r3, #4]
100028d2:	b2e1      	uxtb	r1, r4
100028d4:	4798      	blx	r3
}
100028d6:	0020      	movs	r0, r4
100028d8:	bd70      	pop	{r4, r5, r6, pc}
100028da:	46c0      	nop			; (mov r8, r8)
100028dc:	10004350 	.word	0x10004350

100028e0 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
100028e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100028e2:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100028e4:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
100028e6:	6903      	ldr	r3, [r0, #16]
100028e8:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
100028ea:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
100028ec:	4a14      	ldr	r2, [pc, #80]	; (10002940 <gpio_rpi_isr+0x60>)
100028ee:	3308      	adds	r3, #8
100028f0:	009b      	lsls	r3, r3, #2
100028f2:	589b      	ldr	r3, [r3, r2]
100028f4:	2207      	movs	r2, #7
100028f6:	4022      	ands	r2, r4
100028f8:	0092      	lsls	r2, r2, #2
100028fa:	40d3      	lsrs	r3, r2
		if (events) {
100028fc:	220f      	movs	r2, #15
100028fe:	4213      	tst	r3, r2
10002900:	d103      	bne.n	1000290a <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002902:	3401      	adds	r4, #1
10002904:	2c1e      	cmp	r4, #30
10002906:	d1f0      	bne.n	100028ea <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10002908:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
1000290a:	210f      	movs	r1, #15
1000290c:	0020      	movs	r0, r4
1000290e:	f000 fbf9 	bl	10003104 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10002912:	9b01      	ldr	r3, [sp, #4]
10002914:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002916:	2900      	cmp	r1, #0
10002918:	d0f3      	beq.n	10002902 <gpio_rpi_isr+0x22>
1000291a:	2701      	movs	r7, #1
1000291c:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
1000291e:	680d      	ldr	r5, [r1, #0]
10002920:	2900      	cmp	r1, #0
10002922:	d0ee      	beq.n	10002902 <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10002924:	688b      	ldr	r3, [r1, #8]
10002926:	001a      	movs	r2, r3
10002928:	403a      	ands	r2, r7
1000292a:	423b      	tst	r3, r7
1000292c:	d002      	beq.n	10002934 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
1000292e:	0030      	movs	r0, r6
10002930:	684b      	ldr	r3, [r1, #4]
10002932:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002934:	1e2b      	subs	r3, r5, #0
10002936:	d000      	beq.n	1000293a <gpio_rpi_isr+0x5a>
10002938:	682b      	ldr	r3, [r5, #0]
1000293a:	0029      	movs	r1, r5
1000293c:	001d      	movs	r5, r3
1000293e:	e7ef      	b.n	10002920 <gpio_rpi_isr+0x40>
10002940:	40014100 	.word	0x40014100

10002944 <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
10002944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
10002946:	6844      	ldr	r4, [r0, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10002948:	2100      	movs	r1, #0
1000294a:	69e0      	ldr	r0, [r4, #28]
1000294c:	aa01      	add	r2, sp, #4
1000294e:	f001 fb3a 	bl	10003fc6 <pinctrl_lookup_state>
	if (ret < 0) {
10002952:	2800      	cmp	r0, #0
10002954:	db32      	blt.n	100029bc <pwm_rpi_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10002956:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002958:	2200      	movs	r2, #0
1000295a:	7919      	ldrb	r1, [r3, #4]
1000295c:	6818      	ldr	r0, [r3, #0]
1000295e:	f001 fb45 	bl	10003fec <pinctrl_configure_pins>
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
10002962:	2800      	cmp	r0, #0
10002964:	d12a      	bne.n	100029bc <pwm_rpi_init+0x78>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
		return err;
	}

	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002966:	0001      	movs	r1, r0
10002968:	1d23      	adds	r3, r4, #4
	if (err) {
1000296a:	4c15      	ldr	r4, [pc, #84]	; (100029c0 <pwm_rpi_init+0x7c>)
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
1000296c:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000296e:	4f15      	ldr	r7, [pc, #84]	; (100029c4 <pwm_rpi_init+0x80>)
10002970:	434a      	muls	r2, r1
10002972:	46bc      	mov	ip, r7
10002974:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10002976:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002978:	4667      	mov	r7, ip
1000297a:	4d11      	ldr	r5, [pc, #68]	; (100029c0 <pwm_rpi_init+0x7c>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
1000297c:	3101      	adds	r1, #1
1000297e:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
10002980:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002982:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10002984:	4f10      	ldr	r7, [pc, #64]	; (100029c8 <pwm_rpi_init+0x84>)
10002986:	46bc      	mov	ip, r7
10002988:	4494      	add	ip, r2
1000298a:	4667      	mov	r7, ip
1000298c:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
1000298e:	4f0f      	ldr	r7, [pc, #60]	; (100029cc <pwm_rpi_init+0x88>)
10002990:	19d2      	adds	r2, r2, r7
10002992:	4f0f      	ldr	r7, [pc, #60]	; (100029d0 <pwm_rpi_init+0x8c>)
10002994:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10002996:	2210      	movs	r2, #16
10002998:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
1000299a:	602e      	str	r6, [r5, #0]
 * \param fract 4 bit fractional part of the clock divider
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
1000299c:	781a      	ldrb	r2, [r3, #0]
1000299e:	785e      	ldrb	r6, [r3, #1]
100029a0:	0112      	lsls	r2, r2, #4
100029a2:	4332      	orrs	r2, r6
100029a4:	606a      	str	r2, [r5, #4]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100029a6:	2501      	movs	r5, #1
100029a8:	6822      	ldr	r2, [r4, #0]
100029aa:	3303      	adds	r3, #3
100029ac:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100029ae:	2280      	movs	r2, #128	; 0x80
100029b0:	0152      	lsls	r2, r2, #5
100029b2:	4322      	orrs	r2, r4
100029b4:	6015      	str	r5, [r2, #0]
100029b6:	3414      	adds	r4, #20
100029b8:	2908      	cmp	r1, #8
100029ba:	d1d7      	bne.n	1000296c <pwm_rpi_init+0x28>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
100029bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100029be:	46c0      	nop			; (mov r8, r8)
100029c0:	40050000 	.word	0x40050000
100029c4:	40050008 	.word	0x40050008
100029c8:	4005000c 	.word	0x4005000c
100029cc:	40050010 	.word	0x40050010
100029d0:	0000ffff 	.word	0x0000ffff

100029d4 <pwm_rpi_set_cycles>:
{
100029d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100029d6:	ac08      	add	r4, sp, #32
100029d8:	8824      	ldrh	r4, [r4, #0]
100029da:	9200      	str	r2, [sp, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
100029dc:	290f      	cmp	r1, #15
100029de:	d83e      	bhi.n	10002a5e <pwm_rpi_set_cycles+0x8a>
	if (period_cycles > PWM_RPI_PICO_COUNTER_TOP_MAX ||
100029e0:	2680      	movs	r6, #128	; 0x80
100029e2:	0015      	movs	r5, r2
100029e4:	0276      	lsls	r6, r6, #9
100029e6:	431d      	orrs	r5, r3
100029e8:	42b5      	cmp	r5, r6
100029ea:	d238      	bcs.n	10002a5e <pwm_rpi_set_cycles+0x8a>
	return channel % 2;
100029ec:	2601      	movs	r6, #1
100029ee:	000d      	movs	r5, r1
100029f0:	4035      	ands	r5, r6
100029f2:	9501      	str	r5, [sp, #4]
100029f4:	2514      	movs	r5, #20
	return channel / 2;
100029f6:	084f      	lsrs	r7, r1, #1
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
100029f8:	437d      	muls	r5, r7
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
100029fa:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
100029fc:	4034      	ands	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
100029fe:	6800      	ldr	r0, [r0, #0]
10002a00:	1940      	adds	r0, r0, r5
10002a02:	6802      	ldr	r2, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10002a04:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
10002a06:	4231      	tst	r1, r6
10002a08:	d024      	beq.n	10002a54 <pwm_rpi_set_cycles+0x80>
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002a0a:	0891      	lsrs	r1, r2, #2
10002a0c:	4031      	ands	r1, r6
		pwm_polarity_b = inverted;
10002a0e:	0020      	movs	r0, r4
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002a10:	000c      	movs	r4, r1
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
10002a12:	00c0      	lsls	r0, r0, #3
10002a14:	00a4      	lsls	r4, r4, #2
10002a16:	4304      	orrs	r4, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002a18:	200c      	movs	r0, #12
10002a1a:	4912      	ldr	r1, [pc, #72]	; (10002a64 <pwm_rpi_set_cycles+0x90>)
10002a1c:	000a      	movs	r2, r1
10002a1e:	1869      	adds	r1, r5, r1
10002a20:	680e      	ldr	r6, [r1, #0]
10002a22:	4074      	eors	r4, r6
10002a24:	4004      	ands	r4, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002a26:	2080      	movs	r0, #128	; 0x80
10002a28:	0140      	lsls	r0, r0, #5
10002a2a:	4301      	orrs	r1, r0
10002a2c:	600c      	str	r4, [r1, #0]
    pwm_hw->slice[slice_num].top = wrap;
10002a2e:	2114      	movs	r1, #20
10002a30:	4379      	muls	r1, r7
10002a32:	1889      	adds	r1, r1, r2
10002a34:	9a00      	ldr	r2, [sp, #0]
10002a36:	610a      	str	r2, [r1, #16]
    hw_write_masked(
10002a38:	4a0b      	ldr	r2, [pc, #44]	; (10002a68 <pwm_rpi_set_cycles+0x94>)
10002a3a:	18ad      	adds	r5, r5, r2
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
10002a3c:	9a01      	ldr	r2, [sp, #4]
10002a3e:	2a00      	cmp	r2, #0
10002a40:	d00b      	beq.n	10002a5a <pwm_rpi_set_cycles+0x86>
    hw_write_masked(
10002a42:	4a0a      	ldr	r2, [pc, #40]	; (10002a6c <pwm_rpi_set_cycles+0x98>)
10002a44:	041b      	lsls	r3, r3, #16
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002a46:	6829      	ldr	r1, [r5, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002a48:	4305      	orrs	r5, r0
	return 0;
10002a4a:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002a4c:	404b      	eors	r3, r1
10002a4e:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002a50:	602a      	str	r2, [r5, #0]
};
10002a52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10002a54:	08c0      	lsrs	r0, r0, #3
10002a56:	4030      	ands	r0, r6
10002a58:	e7db      	b.n	10002a12 <pwm_rpi_set_cycles+0x3e>
10002a5a:	4a05      	ldr	r2, [pc, #20]	; (10002a70 <pwm_rpi_set_cycles+0x9c>)
10002a5c:	e7f3      	b.n	10002a46 <pwm_rpi_set_cycles+0x72>
		return -EINVAL;
10002a5e:	2016      	movs	r0, #22
10002a60:	4240      	negs	r0, r0
10002a62:	e7f6      	b.n	10002a52 <pwm_rpi_set_cycles+0x7e>
10002a64:	40050000 	.word	0x40050000
10002a68:	4005000c 	.word	0x4005000c
10002a6c:	ffff0000 	.word	0xffff0000
10002a70:	0000ffff 	.word	0x0000ffff

10002a74 <pwm_rpi_get_cycles_per_sec>:
{
10002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002a76:	0015      	movs	r5, r2
	return channel / 2;
10002a78:	084a      	lsrs	r2, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002a7a:	290f      	cmp	r1, #15
10002a7c:	d825      	bhi.n	10002aca <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
10002a7e:	2303      	movs	r3, #3
10002a80:	4353      	muls	r3, r2
10002a82:	6844      	ldr	r4, [r0, #4]
10002a84:	18e4      	adds	r4, r4, r3
		(float)cfg->slice_configs[slice].frac / 16.0;
10002a86:	7960      	ldrb	r0, [r4, #5]
10002a88:	f7fd fd68 	bl	1000055c <__aeabi_ui2f>
10002a8c:	f7fe ff20 	bl	100018d0 <__aeabi_f2d>
10002a90:	2200      	movs	r2, #0
10002a92:	4b0f      	ldr	r3, [pc, #60]	; (10002ad0 <pwm_rpi_get_cycles_per_sec+0x5c>)
10002a94:	f7fe f9be 	bl	10000e14 <__aeabi_dmul>
10002a98:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
10002a9a:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10002a9c:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
10002a9e:	f7fd fd5d 	bl	1000055c <__aeabi_ui2f>
10002aa2:	f7fe ff15 	bl	100018d0 <__aeabi_f2d>
10002aa6:	0002      	movs	r2, r0
10002aa8:	000b      	movs	r3, r1
10002aaa:	0030      	movs	r0, r6
10002aac:	0039      	movs	r1, r7
10002aae:	f7fd fd91 	bl	100005d4 <__aeabi_dadd>
10002ab2:	f7fe ff4f 	bl	10001954 <__aeabi_d2f>
10002ab6:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10002ab8:	4806      	ldr	r0, [pc, #24]	; (10002ad4 <pwm_rpi_get_cycles_per_sec+0x60>)
10002aba:	f7fd fc6d 	bl	10000398 <__aeabi_fdiv>
10002abe:	f7fd fc4b 	bl	10000358 <__aeabi_f2ulz>
10002ac2:	6028      	str	r0, [r5, #0]
10002ac4:	6069      	str	r1, [r5, #4]
	return 0;
10002ac6:	2000      	movs	r0, #0
}
10002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10002aca:	2016      	movs	r0, #22
10002acc:	4240      	negs	r0, r0
10002ace:	e7fb      	b.n	10002ac8 <pwm_rpi_get_cycles_per_sec+0x54>
10002ad0:	3fb00000 	.word	0x3fb00000
10002ad4:	4cee6b28 	.word	0x4cee6b28

10002ad8 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10002ad8:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002ada:	4903      	ldr	r1, [pc, #12]	; (10002ae8 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10002adc:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002ade:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002ae0:	400b      	ands	r3, r1
10002ae2:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002ae4:	4770      	bx	lr
10002ae6:	46c0      	nop			; (mov r8, r8)
10002ae8:	fffff83f 	.word	0xfffff83f

10002aec <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10002aec:	b510      	push	{r4, lr}
10002aee:	2b03      	cmp	r3, #3
10002af0:	d823      	bhi.n	10002b3a <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10002af2:	2a01      	cmp	r2, #1
10002af4:	d002      	beq.n	10002afc <uart_rpi_set_format.isra.0+0x10>
10002af6:	2a03      	cmp	r2, #3
10002af8:	d11f      	bne.n	10002b3a <uart_rpi_set_format.isra.0+0x4e>
10002afa:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10002afc:	2902      	cmp	r1, #2
10002afe:	d81c      	bhi.n	10002b3a <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10002b00:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002b02:	3a01      	subs	r2, #1
10002b04:	480e      	ldr	r0, [pc, #56]	; (10002b40 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002b06:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002b08:	00d2      	lsls	r2, r2, #3
10002b0a:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002b0c:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002b0e:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002b10:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002b12:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002b14:	4299      	cmp	r1, r3
10002b16:	d005      	beq.n	10002b24 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002b18:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002b1a:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002b1c:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002b1e:	424b      	negs	r3, r1
10002b20:	4159      	adcs	r1, r3
10002b22:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002b24:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002b26:	236e      	movs	r3, #110	; 0x6e
10002b28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10002b2a:	404a      	eors	r2, r1
10002b2c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002b2e:	2380      	movs	r3, #128	; 0x80
10002b30:	015b      	lsls	r3, r3, #5
10002b32:	4303      	orrs	r3, r0
	return 0;
10002b34:	2000      	movs	r0, #0
10002b36:	601a      	str	r2, [r3, #0]
}
10002b38:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002b3a:	2016      	movs	r0, #22
10002b3c:	4240      	negs	r0, r0
10002b3e:	e7fb      	b.n	10002b38 <uart_rpi_set_format.isra.0+0x4c>
10002b40:	1000465a 	.word	0x1000465a

10002b44 <uart_rpi_init>:
{
10002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10002b46:	6845      	ldr	r5, [r0, #4]
{
10002b48:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10002b4a:	682b      	ldr	r3, [r5, #0]
{
10002b4c:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10002b4e:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10002b50:	2100      	movs	r1, #0
10002b52:	68a8      	ldr	r0, [r5, #8]
10002b54:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10002b56:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10002b58:	9301      	str	r3, [sp, #4]
10002b5a:	f001 fa34 	bl	10003fc6 <pinctrl_lookup_state>
	if (ret < 0) {
10002b5e:	2800      	cmp	r0, #0
10002b60:	db23      	blt.n	10002baa <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10002b62:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002b64:	2200      	movs	r2, #0
10002b66:	7919      	ldrb	r1, [r3, #4]
10002b68:	6818      	ldr	r0, [r3, #0]
10002b6a:	f001 fa3f 	bl	10003fec <pinctrl_configure_pins>
	if (ret < 0) {
10002b6e:	2800      	cmp	r0, #0
10002b70:	db1b      	blt.n	10002baa <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10002b72:	6831      	ldr	r1, [r6, #0]
10002b74:	9801      	ldr	r0, [sp, #4]
10002b76:	f000 fb2f 	bl	100031d8 <uart_init>
	if (baudrate == 0) {
10002b7a:	2800      	cmp	r0, #0
10002b7c:	d017      	beq.n	10002bae <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10002b7e:	4b0d      	ldr	r3, [pc, #52]	; (10002bb4 <uart_rpi_init+0x70>)
10002b80:	6030      	str	r0, [r6, #0]
10002b82:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10002b84:	2201      	movs	r2, #1
10002b86:	2303      	movs	r3, #3
10002b88:	2100      	movs	r1, #0
10002b8a:	6860      	ldr	r0, [r4, #4]
10002b8c:	f7ff ffae 	bl	10002aec <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10002b90:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002b92:	23c0      	movs	r3, #192	; 0xc0
10002b94:	322c      	adds	r2, #44	; 0x2c
10002b96:	019b      	lsls	r3, r3, #6
10002b98:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10002b9a:	2600      	movs	r6, #0
10002b9c:	2210      	movs	r2, #16
10002b9e:	601a      	str	r2, [r3, #0]
10002ba0:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10002ba2:	0020      	movs	r0, r4
10002ba4:	696b      	ldr	r3, [r5, #20]
10002ba6:	4798      	blx	r3
	return 0;
10002ba8:	0030      	movs	r0, r6
}
10002baa:	b005      	add	sp, #20
10002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10002bae:	2016      	movs	r0, #22
10002bb0:	4240      	negs	r0, r0
10002bb2:	e7fa      	b.n	10002baa <uart_rpi_init+0x66>
10002bb4:	00030100 	.word	0x00030100

10002bb8 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10002bb8:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10002bba:	4b0a      	ldr	r3, [pc, #40]	; (10002be4 <elapsed+0x2c>)
10002bbc:	4a0a      	ldr	r2, [pc, #40]	; (10002be8 <elapsed+0x30>)
10002bbe:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10002bc0:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10002bc2:	4d0a      	ldr	r5, [pc, #40]	; (10002bec <elapsed+0x34>)
10002bc4:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10002bc6:	03c9      	lsls	r1, r1, #15
10002bc8:	d401      	bmi.n	10002bce <elapsed+0x16>
	    || (val1 < val2)) {
10002bca:	42a0      	cmp	r0, r4
10002bcc:	d204      	bcs.n	10002bd8 <elapsed+0x20>
		overflow_cyc += last_load;
10002bce:	6811      	ldr	r1, [r2, #0]
10002bd0:	6828      	ldr	r0, [r5, #0]
10002bd2:	1809      	adds	r1, r1, r0
10002bd4:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10002bd6:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10002bd8:	682b      	ldr	r3, [r5, #0]
10002bda:	6810      	ldr	r0, [r2, #0]
10002bdc:	18c0      	adds	r0, r0, r3
10002bde:	1b00      	subs	r0, r0, r4
}
10002be0:	bd30      	pop	{r4, r5, pc}
10002be2:	46c0      	nop			; (mov r8, r8)
10002be4:	e000e010 	.word	0xe000e010
10002be8:	20000128 	.word	0x20000128
10002bec:	20000134 	.word	0x20000134

10002bf0 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10002bf0:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002bf2:	4a09      	ldr	r2, [pc, #36]	; (10002c18 <sys_clock_driver_init+0x28>)
10002bf4:	6a13      	ldr	r3, [r2, #32]
10002bf6:	021b      	lsls	r3, r3, #8
10002bf8:	0a1b      	lsrs	r3, r3, #8
10002bfa:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10002bfc:	4b07      	ldr	r3, [pc, #28]	; (10002c1c <sys_clock_driver_init+0x2c>)
10002bfe:	4a08      	ldr	r2, [pc, #32]	; (10002c20 <sys_clock_driver_init+0x30>)
10002c00:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002c02:	4b08      	ldr	r3, [pc, #32]	; (10002c24 <sys_clock_driver_init+0x34>)
10002c04:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10002c06:	4b08      	ldr	r3, [pc, #32]	; (10002c28 <sys_clock_driver_init+0x38>)
10002c08:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002c0a:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10002c0c:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002c0e:	6819      	ldr	r1, [r3, #0]
10002c10:	430a      	orrs	r2, r1
10002c12:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10002c14:	4770      	bx	lr
10002c16:	46c0      	nop			; (mov r8, r8)
10002c18:	e000ed00 	.word	0xe000ed00
10002c1c:	20000134 	.word	0x20000134
10002c20:	000030d3 	.word	0x000030d3
10002c24:	20000128 	.word	0x20000128
10002c28:	e000e010 	.word	0xe000e010

10002c2c <sys_clock_isr>:
{
10002c2c:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10002c2e:	f7ff ffc3 	bl	10002bb8 <elapsed>
	cycle_count += overflow_cyc;
10002c32:	4b0b      	ldr	r3, [pc, #44]	; (10002c60 <sys_clock_isr+0x34>)
10002c34:	4a0b      	ldr	r2, [pc, #44]	; (10002c64 <sys_clock_isr+0x38>)
10002c36:	6818      	ldr	r0, [r3, #0]
10002c38:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002c3a:	4c0b      	ldr	r4, [pc, #44]	; (10002c68 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10002c3c:	1840      	adds	r0, r0, r1
10002c3e:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10002c40:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002c42:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002c44:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002c46:	4909      	ldr	r1, [pc, #36]	; (10002c6c <sys_clock_isr+0x40>)
10002c48:	1b40      	subs	r0, r0, r5
10002c4a:	f7fd fac1 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10002c4e:	4b07      	ldr	r3, [pc, #28]	; (10002c6c <sys_clock_isr+0x40>)
10002c50:	4343      	muls	r3, r0
10002c52:	195b      	adds	r3, r3, r5
10002c54:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10002c56:	f000 ff05 	bl	10003a64 <sys_clock_announce>
	z_arm_int_exit();
10002c5a:	f7ff fd47 	bl	100026ec <z_arm_exc_exit>
}
10002c5e:	bd70      	pop	{r4, r5, r6, pc}
10002c60:	20000128 	.word	0x20000128
10002c64:	20000130 	.word	0x20000130
10002c68:	2000012c 	.word	0x2000012c
10002c6c:	000030d4 	.word	0x000030d4

10002c70 <sys_clock_set_timeout>:
{
10002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
10002c72:	4d32      	ldr	r5, [pc, #200]	; (10002d3c <sys_clock_set_timeout+0xcc>)
10002c74:	4f32      	ldr	r7, [pc, #200]	; (10002d40 <sys_clock_set_timeout+0xd0>)
10002c76:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10002c78:	2900      	cmp	r1, #0
10002c7a:	d054      	beq.n	10002d26 <sys_clock_set_timeout+0xb6>
10002c7c:	1c43      	adds	r3, r0, #1
10002c7e:	d108      	bne.n	10002c92 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10002c80:	2201      	movs	r2, #1
10002c82:	682b      	ldr	r3, [r5, #0]
10002c84:	4393      	bics	r3, r2
10002c86:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10002c88:	23ff      	movs	r3, #255	; 0xff
10002c8a:	061b      	lsls	r3, r3, #24
10002c8c:	603b      	str	r3, [r7, #0]
}
10002c8e:	b005      	add	sp, #20
10002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10002c92:	683b      	ldr	r3, [r7, #0]
10002c94:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10002c96:	2600      	movs	r6, #0
10002c98:	2801      	cmp	r0, #1
10002c9a:	dd04      	ble.n	10002ca6 <sys_clock_set_timeout+0x36>
10002c9c:	4b29      	ldr	r3, [pc, #164]	; (10002d44 <sys_clock_set_timeout+0xd4>)
10002c9e:	001e      	movs	r6, r3
10002ca0:	4298      	cmp	r0, r3
10002ca2:	dc00      	bgt.n	10002ca6 <sys_clock_set_timeout+0x36>
10002ca4:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10002ca6:	f3ef 8310 	mrs	r3, PRIMASK
10002caa:	b672      	cpsid	i
10002cac:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10002cae:	f7ff ff83 	bl	10002bb8 <elapsed>
	overflow_cyc = 0U;
10002cb2:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10002cb4:	68ab      	ldr	r3, [r5, #8]
10002cb6:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10002cb8:	4b23      	ldr	r3, [pc, #140]	; (10002d48 <sys_clock_set_timeout+0xd8>)
10002cba:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10002cbc:	4b23      	ldr	r3, [pc, #140]	; (10002d4c <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10002cbe:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10002cc0:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10002cc2:	4b23      	ldr	r3, [pc, #140]	; (10002d50 <sys_clock_set_timeout+0xe0>)
10002cc4:	681b      	ldr	r3, [r3, #0]
10002cc6:	9300      	str	r3, [sp, #0]
10002cc8:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10002cca:	4290      	cmp	r0, r2
10002ccc:	db31      	blt.n	10002d32 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10002cce:	4b21      	ldr	r3, [pc, #132]	; (10002d54 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002cd0:	4a21      	ldr	r2, [pc, #132]	; (10002d58 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10002cd2:	435e      	muls	r6, r3
		delay += unannounced;
10002cd4:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002cd6:	0019      	movs	r1, r3
10002cd8:	1880      	adds	r0, r0, r2
10002cda:	f7fd fa79 	bl	100001d0 <__udivsi3>
		delay =
10002cde:	4b1d      	ldr	r3, [pc, #116]	; (10002d54 <sys_clock_set_timeout+0xe4>)
10002ce0:	4358      	muls	r0, r3
		delay -= unannounced;
10002ce2:	9b00      	ldr	r3, [sp, #0]
10002ce4:	1b1b      	subs	r3, r3, r4
10002ce6:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10002ce8:	2380      	movs	r3, #128	; 0x80
10002cea:	00db      	lsls	r3, r3, #3
10002cec:	4298      	cmp	r0, r3
10002cee:	d923      	bls.n	10002d38 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10002cf0:	4b1a      	ldr	r3, [pc, #104]	; (10002d5c <sys_clock_set_timeout+0xec>)
10002cf2:	4298      	cmp	r0, r3
10002cf4:	d820      	bhi.n	10002d38 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
10002cf6:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10002cf8:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10002cfa:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10002cfc:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10002cfe:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10002d00:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10002d02:	9b02      	ldr	r3, [sp, #8]
10002d04:	9802      	ldr	r0, [sp, #8]
10002d06:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10002d08:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10002d0a:	4288      	cmp	r0, r1
10002d0c:	d202      	bcs.n	10002d14 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10002d0e:	9a01      	ldr	r2, [sp, #4]
10002d10:	189b      	adds	r3, r3, r2
10002d12:	191a      	adds	r2, r3, r4
10002d14:	4b0c      	ldr	r3, [pc, #48]	; (10002d48 <sys_clock_set_timeout+0xd8>)
10002d16:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10002d18:	9b03      	ldr	r3, [sp, #12]
10002d1a:	2b00      	cmp	r3, #0
10002d1c:	d1b7      	bne.n	10002c8e <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10002d1e:	b662      	cpsie	i
10002d20:	f3bf 8f6f 	isb	sy
10002d24:	e7b3      	b.n	10002c8e <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10002d26:	683b      	ldr	r3, [r7, #0]
10002d28:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10002d2a:	1c43      	adds	r3, r0, #1
10002d2c:	d1b3      	bne.n	10002c96 <sys_clock_set_timeout+0x26>
10002d2e:	4805      	ldr	r0, [pc, #20]	; (10002d44 <sys_clock_set_timeout+0xd4>)
10002d30:	e7b8      	b.n	10002ca4 <sys_clock_set_timeout+0x34>
10002d32:	2080      	movs	r0, #128	; 0x80
10002d34:	00c0      	lsls	r0, r0, #3
10002d36:	e7de      	b.n	10002cf6 <sys_clock_set_timeout+0x86>
10002d38:	0018      	movs	r0, r3
10002d3a:	e7dc      	b.n	10002cf6 <sys_clock_set_timeout+0x86>
10002d3c:	e000e010 	.word	0xe000e010
10002d40:	20000134 	.word	0x20000134
10002d44:	0000053d 	.word	0x0000053d
10002d48:	20000130 	.word	0x20000130
10002d4c:	20000128 	.word	0x20000128
10002d50:	2000012c 	.word	0x2000012c
10002d54:	000030d4 	.word	0x000030d4
10002d58:	000030d3 	.word	0x000030d3
10002d5c:	00ffc684 	.word	0x00ffc684

10002d60 <sys_clock_elapsed>:
{
10002d60:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002d62:	f3ef 8410 	mrs	r4, PRIMASK
10002d66:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10002d68:	f7ff ff26 	bl	10002bb8 <elapsed>
10002d6c:	4b07      	ldr	r3, [pc, #28]	; (10002d8c <sys_clock_elapsed+0x2c>)
10002d6e:	4a08      	ldr	r2, [pc, #32]	; (10002d90 <sys_clock_elapsed+0x30>)
10002d70:	681b      	ldr	r3, [r3, #0]
10002d72:	6812      	ldr	r2, [r2, #0]
10002d74:	1a9b      	subs	r3, r3, r2
10002d76:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10002d78:	2c00      	cmp	r4, #0
10002d7a:	d102      	bne.n	10002d82 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10002d7c:	b662      	cpsie	i
10002d7e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10002d82:	4904      	ldr	r1, [pc, #16]	; (10002d94 <sys_clock_elapsed+0x34>)
10002d84:	f7fd fa24 	bl	100001d0 <__udivsi3>
}
10002d88:	bd10      	pop	{r4, pc}
10002d8a:	46c0      	nop			; (mov r8, r8)
10002d8c:	20000130 	.word	0x20000130
10002d90:	2000012c 	.word	0x2000012c
10002d94:	000030d4 	.word	0x000030d4

10002d98 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d9a:	b085      	sub	sp, #20
10002d9c:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10002d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10002da0:	0005      	movs	r5, r0
10002da2:	000f      	movs	r7, r1
        return false;
10002da4:	2000      	movs	r0, #0
    if (freq > src_freq)
10002da6:	429a      	cmp	r2, r3
10002da8:	d863      	bhi.n	10002e72 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002daa:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002dac:	0e1a      	lsrs	r2, r3, #24
10002dae:	021b      	lsls	r3, r3, #8
10002db0:	9203      	str	r2, [sp, #12]
10002db2:	9302      	str	r3, [sp, #8]
10002db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10002db6:	0003      	movs	r3, r0
10002db8:	9903      	ldr	r1, [sp, #12]
10002dba:	9802      	ldr	r0, [sp, #8]
10002dbc:	f7fd faac 	bl	10000318 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002dc0:	436c      	muls	r4, r5
10002dc2:	4b2d      	ldr	r3, [pc, #180]	; (10002e78 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002dc4:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002dc6:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10002dc8:	6863      	ldr	r3, [r4, #4]
10002dca:	4283      	cmp	r3, r0
10002dcc:	d200      	bcs.n	10002dd0 <clock_configure+0x38>
        clock->div = div;
10002dce:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10002dd0:	1f2b      	subs	r3, r5, #4
10002dd2:	b2db      	uxtb	r3, r3
10002dd4:	9300      	str	r3, [sp, #0]
10002dd6:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10002dd8:	9a00      	ldr	r2, [sp, #0]
10002dda:	019b      	lsls	r3, r3, #6
10002ddc:	4323      	orrs	r3, r4
10002dde:	2a01      	cmp	r2, #1
10002de0:	d81b      	bhi.n	10002e1a <clock_configure+0x82>
10002de2:	2f01      	cmp	r7, #1
10002de4:	d119      	bne.n	10002e1a <clock_configure+0x82>
10002de6:	2203      	movs	r2, #3
10002de8:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10002dea:	68a3      	ldr	r3, [r4, #8]
10002dec:	423b      	tst	r3, r7
10002dee:	d0fc      	beq.n	10002dea <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10002df0:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002df2:	6823      	ldr	r3, [r4, #0]
10002df4:	0152      	lsls	r2, r2, #5
10002df6:	405a      	eors	r2, r3
10002df8:	23e0      	movs	r3, #224	; 0xe0
10002dfa:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002dfc:	2380      	movs	r3, #128	; 0x80
10002dfe:	015b      	lsls	r3, r3, #5
10002e00:	4323      	orrs	r3, r4
10002e02:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e04:	2103      	movs	r1, #3
10002e06:	6822      	ldr	r2, [r4, #0]
10002e08:	407a      	eors	r2, r7
10002e0a:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e0c:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10002e0e:	2301      	movs	r3, #1
10002e10:	40bb      	lsls	r3, r7
10002e12:	68a2      	ldr	r2, [r4, #8]
10002e14:	4213      	tst	r3, r2
10002e16:	d0fc      	beq.n	10002e12 <clock_configure+0x7a>
10002e18:	e01a      	b.n	10002e50 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002e1a:	2280      	movs	r2, #128	; 0x80
10002e1c:	0112      	lsls	r2, r2, #4
10002e1e:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10002e20:	4b16      	ldr	r3, [pc, #88]	; (10002e7c <clock_configure+0xe4>)
10002e22:	00aa      	lsls	r2, r5, #2
10002e24:	58d1      	ldr	r1, [r2, r3]
10002e26:	2900      	cmp	r1, #0
10002e28:	d005      	beq.n	10002e36 <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10002e2a:	6958      	ldr	r0, [r3, #20]
10002e2c:	f7fd f9d0 	bl	100001d0 <__udivsi3>
10002e30:	3001      	adds	r0, #1
            asm volatile (
10002e32:	3801      	subs	r0, #1
10002e34:	d1fd      	bne.n	10002e32 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10002e36:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e38:	6823      	ldr	r3, [r4, #0]
10002e3a:	0152      	lsls	r2, r2, #5
10002e3c:	405a      	eors	r2, r3
10002e3e:	23e0      	movs	r3, #224	; 0xe0
10002e40:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e42:	2380      	movs	r3, #128	; 0x80
10002e44:	015b      	lsls	r3, r3, #5
10002e46:	4323      	orrs	r3, r4
10002e48:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10002e4a:	9a00      	ldr	r2, [sp, #0]
10002e4c:	2a01      	cmp	r2, #1
10002e4e:	d9d9      	bls.n	10002e04 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002e50:	2380      	movs	r3, #128	; 0x80
10002e52:	2280      	movs	r2, #128	; 0x80
10002e54:	019b      	lsls	r3, r3, #6
10002e56:	4323      	orrs	r3, r4
10002e58:	0112      	lsls	r2, r2, #4
10002e5a:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10002e5c:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10002e5e:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10002e60:	0032      	movs	r2, r6
10002e62:	2300      	movs	r3, #0
10002e64:	9903      	ldr	r1, [sp, #12]
10002e66:	f7fd fa57 	bl	10000318 <__aeabi_uldivmod>
10002e6a:	4c04      	ldr	r4, [pc, #16]	; (10002e7c <clock_configure+0xe4>)
10002e6c:	00ad      	lsls	r5, r5, #2
10002e6e:	5160      	str	r0, [r4, r5]
10002e70:	2001      	movs	r0, #1

    return true;
}
10002e72:	b005      	add	sp, #20
10002e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002e76:	46c0      	nop			; (mov r8, r8)
10002e78:	40008000 	.word	0x40008000
10002e7c:	20000138 	.word	0x20000138

10002e80 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10002e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10002e82:	200c      	movs	r0, #12
10002e84:	f000 f8da 	bl	1000303c <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10002e88:	f000 f8e0 	bl	1000304c <running_on_fpga>
10002e8c:	2800      	cmp	r0, #0
10002e8e:	d00a      	beq.n	10002ea6 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10002e90:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10002e92:	4a2b      	ldr	r2, [pc, #172]	; (10002f40 <clocks_init+0xc0>)
10002e94:	482b      	ldr	r0, [pc, #172]	; (10002f44 <clocks_init+0xc4>)
10002e96:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10002e98:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10002e9a:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
10002e9c:	2b0a      	cmp	r3, #10
10002e9e:	d1fa      	bne.n	10002e96 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10002ea0:	4b29      	ldr	r3, [pc, #164]	; (10002f48 <clocks_init+0xc8>)
10002ea2:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10002ea4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10002ea6:	4d29      	ldr	r5, [pc, #164]	; (10002f4c <clocks_init+0xcc>)
10002ea8:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10002eaa:	f000 f8b3 	bl	10003014 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002eae:	2201      	movs	r2, #1
10002eb0:	4b27      	ldr	r3, [pc, #156]	; (10002f50 <clocks_init+0xd0>)
10002eb2:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10002eb4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10002eb6:	2b01      	cmp	r3, #1
10002eb8:	d1fc      	bne.n	10002eb4 <clocks_init+0x34>
10002eba:	2203      	movs	r2, #3
10002ebc:	4b25      	ldr	r3, [pc, #148]	; (10002f54 <clocks_init+0xd4>)
10002ebe:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10002ec0:	6bac      	ldr	r4, [r5, #56]	; 0x38
10002ec2:	2c01      	cmp	r4, #1
10002ec4:	d1fc      	bne.n	10002ec0 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10002ec6:	2502      	movs	r5, #2
10002ec8:	0021      	movs	r1, r4
10002eca:	9500      	str	r5, [sp, #0]
10002ecc:	2306      	movs	r3, #6
10002ece:	4a22      	ldr	r2, [pc, #136]	; (10002f58 <clocks_init+0xd8>)
10002ed0:	4822      	ldr	r0, [pc, #136]	; (10002f5c <clocks_init+0xdc>)
10002ed2:	f000 f853 	bl	10002f7c <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
10002ed6:	0021      	movs	r1, r4
10002ed8:	9500      	str	r5, [sp, #0]
10002eda:	2305      	movs	r3, #5
10002edc:	4a20      	ldr	r2, [pc, #128]	; (10002f60 <clocks_init+0xe0>)
10002ede:	4821      	ldr	r0, [pc, #132]	; (10002f64 <clocks_init+0xe4>)
10002ee0:	f000 f84c 	bl	10002f7c <pll_init>
    clock_configure(clk_ref,
10002ee4:	4b20      	ldr	r3, [pc, #128]	; (10002f68 <clocks_init+0xe8>)
10002ee6:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10002ee8:	4d20      	ldr	r5, [pc, #128]	; (10002f6c <clocks_init+0xec>)
    clock_configure(clk_ref,
10002eea:	9300      	str	r3, [sp, #0]
10002eec:	2200      	movs	r2, #0
10002eee:	2004      	movs	r0, #4
10002ef0:	f7ff ff52 	bl	10002d98 <clock_configure>
    clock_configure(clk_sys,
10002ef4:	002b      	movs	r3, r5
10002ef6:	0021      	movs	r1, r4
10002ef8:	2200      	movs	r2, #0
10002efa:	9500      	str	r5, [sp, #0]
10002efc:	2005      	movs	r0, #5
10002efe:	f7ff ff4b 	bl	10002d98 <clock_configure>
    clock_configure(clk_usb,
10002f02:	2200      	movs	r2, #0
10002f04:	4c0f      	ldr	r4, [pc, #60]	; (10002f44 <clocks_init+0xc4>)
10002f06:	0011      	movs	r1, r2
10002f08:	0023      	movs	r3, r4
10002f0a:	9400      	str	r4, [sp, #0]
10002f0c:	2007      	movs	r0, #7
10002f0e:	f7ff ff43 	bl	10002d98 <clock_configure>
    clock_configure(clk_adc,
10002f12:	2200      	movs	r2, #0
10002f14:	0023      	movs	r3, r4
10002f16:	0011      	movs	r1, r2
10002f18:	9400      	str	r4, [sp, #0]
10002f1a:	2008      	movs	r0, #8
10002f1c:	f7ff ff3c 	bl	10002d98 <clock_configure>
    clock_configure(clk_rtc,
10002f20:	2200      	movs	r2, #0
10002f22:	4b09      	ldr	r3, [pc, #36]	; (10002f48 <clocks_init+0xc8>)
10002f24:	0011      	movs	r1, r2
10002f26:	9300      	str	r3, [sp, #0]
10002f28:	2009      	movs	r0, #9
10002f2a:	0023      	movs	r3, r4
10002f2c:	f7ff ff34 	bl	10002d98 <clock_configure>
    clock_configure(clk_peri,
10002f30:	2200      	movs	r2, #0
10002f32:	002b      	movs	r3, r5
10002f34:	0011      	movs	r1, r2
10002f36:	9500      	str	r5, [sp, #0]
10002f38:	2006      	movs	r0, #6
10002f3a:	f7ff ff2d 	bl	10002d98 <clock_configure>
10002f3e:	e7b1      	b.n	10002ea4 <clocks_init+0x24>
10002f40:	20000138 	.word	0x20000138
10002f44:	02dc6c00 	.word	0x02dc6c00
10002f48:	0000b71b 	.word	0x0000b71b
10002f4c:	40008000 	.word	0x40008000
10002f50:	4000b03c 	.word	0x4000b03c
10002f54:	4000b030 	.word	0x4000b030
10002f58:	59682f00 	.word	0x59682f00
10002f5c:	40028000 	.word	0x40028000
10002f60:	1c9c3800 	.word	0x1c9c3800
10002f64:	4002c000 	.word	0x4002c000
10002f68:	00b71b00 	.word	0x00b71b00
10002f6c:	07735940 	.word	0x07735940

10002f70 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10002f70:	4b01      	ldr	r3, [pc, #4]	; (10002f78 <clock_get_hz+0x8>)
10002f72:	0080      	lsls	r0, r0, #2
10002f74:	58c0      	ldr	r0, [r0, r3]
}
10002f76:	4770      	bx	lr
10002f78:	20000138 	.word	0x20000138

10002f7c <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002f7e:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002f80:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10002f82:	0017      	movs	r7, r2
10002f84:	001e      	movs	r6, r3
10002f86:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002f88:	f7fd f922 	bl	100001d0 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10002f8c:	491c      	ldr	r1, [pc, #112]	; (10003000 <pll_init+0x84>)
10002f8e:	4341      	muls	r1, r0
10002f90:	0038      	movs	r0, r7
10002f92:	f7fd f91d 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002f96:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002f98:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002f9a:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002f9c:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002f9e:	6822      	ldr	r2, [r4, #0]
10002fa0:	2a00      	cmp	r2, #0
10002fa2:	da0c      	bge.n	10002fbe <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002fa4:	213f      	movs	r1, #63	; 0x3f
10002fa6:	6822      	ldr	r2, [r4, #0]
10002fa8:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002faa:	42aa      	cmp	r2, r5
10002fac:	d107      	bne.n	10002fbe <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002fae:	68a2      	ldr	r2, [r4, #8]
10002fb0:	0512      	lsls	r2, r2, #20
10002fb2:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002fb4:	4282      	cmp	r2, r0
10002fb6:	d102      	bne.n	10002fbe <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10002fb8:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002fba:	2b00      	cmp	r3, #0
10002fbc:	d01b      	beq.n	10002ff6 <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10002fbe:	4a11      	ldr	r2, [pc, #68]	; (10003004 <pll_init+0x88>)
10002fc0:	4294      	cmp	r4, r2
10002fc2:	d019      	beq.n	10002ff8 <pll_init+0x7c>
10002fc4:	2280      	movs	r2, #128	; 0x80
10002fc6:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002fc8:	490f      	ldr	r1, [pc, #60]	; (10003008 <pll_init+0x8c>)
10002fca:	4e10      	ldr	r6, [pc, #64]	; (1000300c <pll_init+0x90>)
10002fcc:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002fce:	4910      	ldr	r1, [pc, #64]	; (10003010 <pll_init+0x94>)
10002fd0:	600a      	str	r2, [r1, #0]
10002fd2:	0017      	movs	r7, r2
10002fd4:	68b1      	ldr	r1, [r6, #8]
10002fd6:	438f      	bics	r7, r1
10002fd8:	d1fb      	bne.n	10002fd2 <pll_init+0x56>
10002fda:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002fdc:	1d21      	adds	r1, r4, #4
10002fde:	0192      	lsls	r2, r2, #6
10002fe0:	430a      	orrs	r2, r1
10002fe2:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10002fe4:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10002fe6:	60a0      	str	r0, [r4, #8]
10002fe8:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002fea:	6821      	ldr	r1, [r4, #0]
10002fec:	2900      	cmp	r1, #0
10002fee:	dafc      	bge.n	10002fea <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
10002ff0:	60e3      	str	r3, [r4, #12]
10002ff2:	2308      	movs	r3, #8
10002ff4:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10002ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10002ff8:	2280      	movs	r2, #128	; 0x80
10002ffa:	0192      	lsls	r2, r2, #6
10002ffc:	e7e4      	b.n	10002fc8 <pll_init+0x4c>
10002ffe:	46c0      	nop			; (mov r8, r8)
10003000:	000f4240 	.word	0x000f4240
10003004:	4002c000 	.word	0x4002c000
10003008:	4000e000 	.word	0x4000e000
1000300c:	4000c000 	.word	0x4000c000
10003010:	4000f000 	.word	0x4000f000

10003014 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10003014:	22aa      	movs	r2, #170	; 0xaa
10003016:	4b06      	ldr	r3, [pc, #24]	; (10003030 <xosc_init+0x1c>)
10003018:	0112      	lsls	r2, r2, #4
1000301a:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
1000301c:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000301e:	4905      	ldr	r1, [pc, #20]	; (10003034 <xosc_init+0x20>)
10003020:	60da      	str	r2, [r3, #12]
10003022:	4a05      	ldr	r2, [pc, #20]	; (10003038 <xosc_init+0x24>)
10003024:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10003026:	685a      	ldr	r2, [r3, #4]
10003028:	2a00      	cmp	r2, #0
1000302a:	dafc      	bge.n	10003026 <xosc_init+0x12>
}
1000302c:	4770      	bx	lr
1000302e:	46c0      	nop			; (mov r8, r8)
10003030:	40024000 	.word	0x40024000
10003034:	00fab000 	.word	0x00fab000
10003038:	40026000 	.word	0x40026000

1000303c <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
1000303c:	2380      	movs	r3, #128	; 0x80
1000303e:	4a02      	ldr	r2, [pc, #8]	; (10003048 <watchdog_start_tick+0xc>)
10003040:	009b      	lsls	r3, r3, #2
10003042:	4303      	orrs	r3, r0
10003044:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10003046:	4770      	bx	lr
10003048:	40058000 	.word	0x40058000

1000304c <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
1000304c:	4b02      	ldr	r3, [pc, #8]	; (10003058 <running_on_fpga+0xc>)
1000304e:	6818      	ldr	r0, [r3, #0]
10003050:	0780      	lsls	r0, r0, #30
10003052:	0fc0      	lsrs	r0, r0, #31
}
10003054:	4770      	bx	lr
10003056:	46c0      	nop			; (mov r8, r8)
10003058:	4006c000 	.word	0x4006c000

1000305c <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
1000305c:	4b08      	ldr	r3, [pc, #32]	; (10003080 <gpio_set_function+0x24>)
1000305e:	0082      	lsls	r2, r0, #2
10003060:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003062:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10003064:	b510      	push	{r4, lr}
10003066:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10003068:	00c0      	lsls	r0, r0, #3
1000306a:	4063      	eors	r3, r4
1000306c:	24c0      	movs	r4, #192	; 0xc0
1000306e:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003070:	2480      	movs	r4, #128	; 0x80
10003072:	0164      	lsls	r4, r4, #5
10003074:	4322      	orrs	r2, r4
10003076:	6013      	str	r3, [r2, #0]
10003078:	4b02      	ldr	r3, [pc, #8]	; (10003084 <gpio_set_function+0x28>)
1000307a:	18c0      	adds	r0, r0, r3
1000307c:	6041      	str	r1, [r0, #4]
}
1000307e:	bd10      	pop	{r4, pc}
10003080:	4001c004 	.word	0x4001c004
10003084:	40014000 	.word	0x40014000

10003088 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10003088:	4b07      	ldr	r3, [pc, #28]	; (100030a8 <gpio_set_pulls+0x20>)
1000308a:	0080      	lsls	r0, r0, #2
1000308c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000308e:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10003090:	00c9      	lsls	r1, r1, #3
10003092:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10003094:	430a      	orrs	r2, r1
10003096:	405a      	eors	r2, r3
10003098:	230c      	movs	r3, #12
1000309a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000309c:	2380      	movs	r3, #128	; 0x80
1000309e:	015b      	lsls	r3, r3, #5
100030a0:	4303      	orrs	r3, r0
100030a2:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100030a4:	4770      	bx	lr
100030a6:	46c0      	nop			; (mov r8, r8)
100030a8:	4001c004 	.word	0x4001c004

100030ac <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
100030ac:	4b05      	ldr	r3, [pc, #20]	; (100030c4 <gpio_set_input_hysteresis_enabled+0x18>)
100030ae:	0080      	lsls	r0, r0, #2
100030b0:	18c0      	adds	r0, r0, r3
100030b2:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100030b4:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100030b6:	2900      	cmp	r1, #0
100030b8:	d100      	bne.n	100030bc <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100030ba:	23c0      	movs	r3, #192	; 0xc0
100030bc:	019b      	lsls	r3, r3, #6
100030be:	4303      	orrs	r3, r0
100030c0:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
100030c2:	4770      	bx	lr
100030c4:	4001c004 	.word	0x4001c004

100030c8 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
100030c8:	4b05      	ldr	r3, [pc, #20]	; (100030e0 <gpio_set_slew_rate+0x18>)
100030ca:	0080      	lsls	r0, r0, #2
100030cc:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100030ce:	6803      	ldr	r3, [r0, #0]
100030d0:	4059      	eors	r1, r3
100030d2:	2301      	movs	r3, #1
100030d4:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100030d6:	2380      	movs	r3, #128	; 0x80
100030d8:	015b      	lsls	r3, r3, #5
100030da:	4303      	orrs	r3, r0
100030dc:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
100030de:	4770      	bx	lr
100030e0:	4001c004 	.word	0x4001c004

100030e4 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
100030e4:	4b06      	ldr	r3, [pc, #24]	; (10003100 <gpio_set_drive_strength+0x1c>)
100030e6:	0080      	lsls	r0, r0, #2
100030e8:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100030ea:	6803      	ldr	r3, [r0, #0]
100030ec:	0109      	lsls	r1, r1, #4
100030ee:	4059      	eors	r1, r3
100030f0:	2330      	movs	r3, #48	; 0x30
100030f2:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100030f4:	2380      	movs	r3, #128	; 0x80
100030f6:	015b      	lsls	r3, r3, #5
100030f8:	4303      	orrs	r3, r0
100030fa:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
100030fc:	4770      	bx	lr
100030fe:	46c0      	nop			; (mov r8, r8)
10003100:	4001c004 	.word	0x4001c004

10003104 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10003104:	2207      	movs	r2, #7
10003106:	08c3      	lsrs	r3, r0, #3
10003108:	4010      	ands	r0, r2
1000310a:	0080      	lsls	r0, r0, #2
1000310c:	4081      	lsls	r1, r0
1000310e:	4a02      	ldr	r2, [pc, #8]	; (10003118 <gpio_acknowledge_irq+0x14>)
10003110:	333c      	adds	r3, #60	; 0x3c
10003112:	009b      	lsls	r3, r3, #2
10003114:	5099      	str	r1, [r3, r2]
}
10003116:	4770      	bx	lr
10003118:	40014000 	.word	0x40014000

1000311c <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000311e:	23d0      	movs	r3, #208	; 0xd0
10003120:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003122:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003124:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003126:	4263      	negs	r3, r4
10003128:	415c      	adcs	r4, r3
1000312a:	232f      	movs	r3, #47	; 0x2f
1000312c:	4264      	negs	r4, r4
1000312e:	439c      	bics	r4, r3
10003130:	4b0a      	ldr	r3, [pc, #40]	; (1000315c <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003132:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003134:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003136:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10003138:	f7ff ffe4 	bl	10003104 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
1000313c:	2307      	movs	r3, #7
1000313e:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003140:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
10003142:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003144:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
10003146:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003148:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000314a:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000314c:	2e00      	cmp	r6, #0
1000314e:	d100      	bne.n	10003152 <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003150:	23c0      	movs	r3, #192	; 0xc0
10003152:	019b      	lsls	r3, r3, #6
10003154:	4323      	orrs	r3, r4
10003156:	601f      	str	r7, [r3, #0]
}
10003158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000315a:	46c0      	nop			; (mov r8, r8)
1000315c:	40014130 	.word	0x40014130

10003160 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10003160:	4b05      	ldr	r3, [pc, #20]	; (10003178 <gpio_set_input_enabled+0x18>)
10003162:	0080      	lsls	r0, r0, #2
10003164:	18c0      	adds	r0, r0, r3
10003166:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003168:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000316a:	2900      	cmp	r1, #0
1000316c:	d100      	bne.n	10003170 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000316e:	23c0      	movs	r3, #192	; 0xc0
10003170:	019b      	lsls	r3, r3, #6
10003172:	4303      	orrs	r3, r0
10003174:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10003176:	4770      	bx	lr
10003178:	4001c004 	.word	0x4001c004

1000317c <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
1000317c:	b570      	push	{r4, r5, r6, lr}
1000317e:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10003180:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10003182:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10003184:	f7ff fef4 	bl	10002f70 <clock_get_hz>
10003188:	0021      	movs	r1, r4
1000318a:	00c0      	lsls	r0, r0, #3
1000318c:	f7fd f820 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10003190:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10003192:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10003194:	d007      	beq.n	100031a6 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10003196:	4b0e      	ldr	r3, [pc, #56]	; (100031d0 <uart_set_baudrate+0x54>)
10003198:	429d      	cmp	r5, r3
1000319a:	d815      	bhi.n	100031c8 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
1000319c:	237f      	movs	r3, #127	; 0x7f
1000319e:	4018      	ands	r0, r3
100031a0:	1900      	adds	r0, r0, r4
100031a2:	002c      	movs	r4, r5
100031a4:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100031a6:	2380      	movs	r3, #128	; 0x80
100031a8:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
100031aa:	6274      	str	r4, [r6, #36]	; 0x24
100031ac:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
100031ae:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
100031b0:	362c      	adds	r6, #44	; 0x2c
100031b2:	4333      	orrs	r3, r6
100031b4:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
100031b6:	2006      	movs	r0, #6
100031b8:	f7ff feda 	bl	10002f70 <clock_get_hz>
100031bc:	01a1      	lsls	r1, r4, #6
100031be:	1949      	adds	r1, r1, r5
100031c0:	0080      	lsls	r0, r0, #2
100031c2:	f7fd f805 	bl	100001d0 <__udivsi3>
}
100031c6:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
100031c8:	2500      	movs	r5, #0
        baud_ibrd = 65535;
100031ca:	4c02      	ldr	r4, [pc, #8]	; (100031d4 <uart_set_baudrate+0x58>)
100031cc:	e7eb      	b.n	100031a6 <uart_set_baudrate+0x2a>
100031ce:	46c0      	nop			; (mov r8, r8)
100031d0:	0000fffe 	.word	0x0000fffe
100031d4:	0000ffff 	.word	0x0000ffff

100031d8 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
100031d8:	b570      	push	{r4, r5, r6, lr}
100031da:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
100031dc:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
100031de:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
100031e0:	f7ff fec6 	bl	10002f70 <clock_get_hz>
100031e4:	2800      	cmp	r0, #0
100031e6:	d02e      	beq.n	10003246 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100031e8:	4b19      	ldr	r3, [pc, #100]	; (10003250 <uart_init+0x78>)
100031ea:	429c      	cmp	r4, r3
100031ec:	d02c      	beq.n	10003248 <uart_init+0x70>
100031ee:	2380      	movs	r3, #128	; 0x80
100031f0:	03db      	lsls	r3, r3, #15
100031f2:	4a18      	ldr	r2, [pc, #96]	; (10003254 <uart_init+0x7c>)
100031f4:	4918      	ldr	r1, [pc, #96]	; (10003258 <uart_init+0x80>)
100031f6:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100031f8:	4a18      	ldr	r2, [pc, #96]	; (1000325c <uart_init+0x84>)
100031fa:	6013      	str	r3, [r2, #0]
100031fc:	0018      	movs	r0, r3
100031fe:	688a      	ldr	r2, [r1, #8]
10003200:	4390      	bics	r0, r2
10003202:	d1fb      	bne.n	100031fc <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10003204:	4b16      	ldr	r3, [pc, #88]	; (10003260 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10003206:	4a17      	ldr	r2, [pc, #92]	; (10003264 <uart_init+0x8c>)
10003208:	18e3      	adds	r3, r4, r3
1000320a:	4259      	negs	r1, r3
1000320c:	414b      	adcs	r3, r1
1000320e:	2180      	movs	r1, #128	; 0x80
10003210:	005b      	lsls	r3, r3, #1
10003212:	0049      	lsls	r1, r1, #1
10003214:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10003216:	0020      	movs	r0, r4
10003218:	0029      	movs	r1, r5
1000321a:	f7ff ffaf 	bl	1000317c <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000321e:	2360      	movs	r3, #96	; 0x60
10003220:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003222:	0021      	movs	r1, r4
10003224:	4053      	eors	r3, r2
10003226:	226e      	movs	r2, #110	; 0x6e
10003228:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000322a:	2280      	movs	r2, #128	; 0x80
1000322c:	312c      	adds	r1, #44	; 0x2c
1000322e:	0152      	lsls	r2, r2, #5
10003230:	430a      	orrs	r2, r1
10003232:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10003234:	4b0c      	ldr	r3, [pc, #48]	; (10003268 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003236:	2210      	movs	r2, #16
10003238:	6323      	str	r3, [r4, #48]	; 0x30
1000323a:	2380      	movs	r3, #128	; 0x80
1000323c:	019b      	lsls	r3, r3, #6
1000323e:	430b      	orrs	r3, r1
10003240:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10003242:	2303      	movs	r3, #3
10003244:	64a3      	str	r3, [r4, #72]	; 0x48
}
10003246:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003248:	2380      	movs	r3, #128	; 0x80
1000324a:	041b      	lsls	r3, r3, #16
1000324c:	e7d1      	b.n	100031f2 <uart_init+0x1a>
1000324e:	46c0      	nop			; (mov r8, r8)
10003250:	40038000 	.word	0x40038000
10003254:	4000e000 	.word	0x4000e000
10003258:	4000c000 	.word	0x4000c000
1000325c:	4000f000 	.word	0x4000f000
10003260:	bffc8000 	.word	0xbffc8000
10003264:	20000194 	.word	0x20000194
10003268:	00000301 	.word	0x00000301

1000326c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
1000326c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
1000326e:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003270:	4e10      	ldr	r6, [pc, #64]	; (100032b4 <z_sys_init_run_level+0x48>)
10003272:	0083      	lsls	r3, r0, #2
10003274:	3001      	adds	r0, #1
10003276:	599c      	ldr	r4, [r3, r6]
10003278:	0083      	lsls	r3, r0, #2
1000327a:	9301      	str	r3, [sp, #4]
1000327c:	9b01      	ldr	r3, [sp, #4]
1000327e:	58f3      	ldr	r3, [r6, r3]
10003280:	42a3      	cmp	r3, r4
10003282:	d800      	bhi.n	10003286 <z_sys_init_run_level+0x1a>
		}
	}
}
10003284:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10003286:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
10003288:	6823      	ldr	r3, [r4, #0]
1000328a:	0028      	movs	r0, r5
1000328c:	4798      	blx	r3
		if (dev != NULL) {
1000328e:	2d00      	cmp	r5, #0
10003290:	d00d      	beq.n	100032ae <z_sys_init_run_level+0x42>
			if (rc != 0) {
10003292:	2800      	cmp	r0, #0
10003294:	d007      	beq.n	100032a6 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
10003296:	17c2      	asrs	r2, r0, #31
10003298:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
1000329a:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
1000329c:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
1000329e:	28ff      	cmp	r0, #255	; 0xff
100032a0:	dd00      	ble.n	100032a4 <z_sys_init_run_level+0x38>
100032a2:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
100032a4:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
100032a6:	68ea      	ldr	r2, [r5, #12]
100032a8:	7853      	ldrb	r3, [r2, #1]
100032aa:	433b      	orrs	r3, r7
100032ac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100032ae:	3408      	adds	r4, #8
100032b0:	e7e4      	b.n	1000327c <z_sys_init_run_level+0x10>
100032b2:	46c0      	nop			; (mov r8, r8)
100032b4:	100045c8 	.word	0x100045c8

100032b8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
100032b8:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
100032ba:	2401      	movs	r4, #1
100032bc:	4b09      	ldr	r3, [pc, #36]	; (100032e4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
100032be:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
100032c0:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
100032c2:	f7ff ffd3 	bl	1000326c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
100032c6:	f000 fc37 	bl	10003b38 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
100032ca:	2004      	movs	r0, #4
100032cc:	f7ff ffce 	bl	1000326c <z_sys_init_run_level>

	z_init_static_threads();
100032d0:	f000 f8ce 	bl	10003470 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
100032d4:	f7fe fd3e 	bl	10001d54 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
100032d8:	4a03      	ldr	r2, [pc, #12]	; (100032e8 <bg_thread_main+0x30>)
100032da:	7b13      	ldrb	r3, [r2, #12]
100032dc:	43a3      	bics	r3, r4
100032de:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
100032e0:	bd10      	pop	{r4, pc}
100032e2:	46c0      	nop			; (mov r8, r8)
100032e4:	20000198 	.word	0x20000198
100032e8:	200000a0 	.word	0x200000a0

100032ec <z_bss_zero>:
{
100032ec:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
100032ee:	4a03      	ldr	r2, [pc, #12]	; (100032fc <z_bss_zero+0x10>)
100032f0:	4803      	ldr	r0, [pc, #12]	; (10003300 <z_bss_zero+0x14>)
100032f2:	2100      	movs	r1, #0
100032f4:	1a12      	subs	r2, r2, r0
100032f6:	f000 ff76 	bl	100041e6 <z_early_memset>
}
100032fa:	bd10      	pop	{r4, pc}
100032fc:	2000019c 	.word	0x2000019c
10003300:	20000030 	.word	0x20000030

10003304 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10003304:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10003306:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10003308:	2501      	movs	r5, #1
{
1000330a:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
1000330c:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
1000330e:	0201      	lsls	r1, r0, #8
10003310:	4811      	ldr	r0, [pc, #68]	; (10003358 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10003312:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10003314:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10003316:	2000      	movs	r0, #0
{
10003318:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
1000331a:	9504      	str	r5, [sp, #16]
1000331c:	350e      	adds	r5, #14
1000331e:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003320:	3509      	adds	r5, #9
10003322:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10003324:	4b0d      	ldr	r3, [pc, #52]	; (1000335c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10003326:	9005      	str	r0, [sp, #20]
10003328:	9002      	str	r0, [sp, #8]
1000332a:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000332c:	480c      	ldr	r0, [pc, #48]	; (10003360 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000332e:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003330:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10003332:	4b0c      	ldr	r3, [pc, #48]	; (10003364 <z_init_cpu+0x60>)
10003334:	0030      	movs	r0, r6
10003336:	9500      	str	r5, [sp, #0]
10003338:	0052      	lsls	r2, r2, #1
1000333a:	f000 f86f 	bl	1000341c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000333e:	2204      	movs	r2, #4
10003340:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10003342:	752c      	strb	r4, [r5, #20]
10003344:	4393      	bics	r3, r2
10003346:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10003348:	3401      	adds	r4, #1
1000334a:	4b07      	ldr	r3, [pc, #28]	; (10003368 <z_init_cpu+0x64>)
1000334c:	02e4      	lsls	r4, r4, #11
1000334e:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10003350:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10003352:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10003354:	b006      	add	sp, #24
10003356:	bd70      	pop	{r4, r5, r6, pc}
10003358:	200009a0 	.word	0x200009a0
1000335c:	20000030 	.word	0x20000030
10003360:	20000160 	.word	0x20000160
10003364:	100041f7 	.word	0x100041f7
10003368:	200001a0 	.word	0x200001a0

1000336c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
1000336c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
1000336e:	2000      	movs	r0, #0
{
10003370:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10003372:	f7ff ff7b 	bl	1000326c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10003376:	4b21      	ldr	r3, [pc, #132]	; (100033fc <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10003378:	f383 8808 	msr	MSP, r3
1000337c:	4920      	ldr	r1, [pc, #128]	; (10003400 <z_cstart+0x94>)
1000337e:	4b21      	ldr	r3, [pc, #132]	; (10003404 <z_cstart+0x98>)
10003380:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10003382:	2500      	movs	r5, #0
10003384:	401a      	ands	r2, r3
10003386:	23e0      	movs	r3, #224	; 0xe0
10003388:	041b      	lsls	r3, r3, #16
1000338a:	4313      	orrs	r3, r2
1000338c:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
1000338e:	f000 fc6d 	bl	10003c6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
10003392:	f7ff f8bb 	bl	1000250c <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10003396:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10003398:	4e1b      	ldr	r6, [pc, #108]	; (10003408 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
1000339a:	ab06      	add	r3, sp, #24
1000339c:	32ff      	adds	r2, #255	; 0xff
1000339e:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
100033a0:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
100033a2:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
100033a4:	f000 fef4 	bl	10004190 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
100033a8:	2001      	movs	r0, #1
100033aa:	f7ff ff5f 	bl	1000326c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
100033ae:	2002      	movs	r0, #2
100033b0:	f7ff ff5c 	bl	1000326c <z_sys_init_run_level>
	z_sched_init();
100033b4:	f000 fa02 	bl	100037bc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
100033b8:	4c14      	ldr	r4, [pc, #80]	; (1000340c <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
100033ba:	4b15      	ldr	r3, [pc, #84]	; (10003410 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
100033bc:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
100033be:	2280      	movs	r2, #128	; 0x80
100033c0:	9305      	str	r3, [sp, #20]
100033c2:	2301      	movs	r3, #1
100033c4:	4e13      	ldr	r6, [pc, #76]	; (10003414 <z_cstart+0xa8>)
100033c6:	4914      	ldr	r1, [pc, #80]	; (10003418 <z_cstart+0xac>)
100033c8:	9304      	str	r3, [sp, #16]
100033ca:	00d2      	lsls	r2, r2, #3
100033cc:	0033      	movs	r3, r6
100033ce:	0020      	movs	r0, r4
100033d0:	9503      	str	r5, [sp, #12]
100033d2:	9502      	str	r5, [sp, #8]
100033d4:	9501      	str	r5, [sp, #4]
100033d6:	9500      	str	r5, [sp, #0]
100033d8:	f000 f820 	bl	1000341c <z_setup_new_thread>
100033dc:	2204      	movs	r2, #4
100033de:	0007      	movs	r7, r0
100033e0:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
100033e2:	0020      	movs	r0, r4
100033e4:	4393      	bics	r3, r2
100033e6:	7363      	strb	r3, [r4, #13]
100033e8:	f000 ff3b 	bl	10004262 <z_ready_thread>
	z_init_cpu(0);
100033ec:	0028      	movs	r0, r5
100033ee:	f7ff ff89 	bl	10003304 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
100033f2:	0032      	movs	r2, r6
100033f4:	0039      	movs	r1, r7
100033f6:	0020      	movs	r0, r4
100033f8:	f7ff f954 	bl	100026a4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
100033fc:	200009a0 	.word	0x200009a0
10003400:	e000ed00 	.word	0xe000ed00
10003404:	ff00ffff 	.word	0xff00ffff
10003408:	20000160 	.word	0x20000160
1000340c:	200000a0 	.word	0x200000a0
10003410:	10004685 	.word	0x10004685
10003414:	100032b9 	.word	0x100032b9
10003418:	20000aa0 	.word	0x20000aa0

1000341c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
1000341c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1000341e:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10003420:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10003422:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10003424:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10003426:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10003428:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
1000342a:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
1000342c:	2004      	movs	r0, #4
1000342e:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10003430:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003432:	3207      	adds	r2, #7
	thread_base->prio = priority;
10003434:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003436:	2007      	movs	r0, #7
10003438:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
1000343a:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
1000343c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
1000343e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10003440:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10003442:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10003444:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003446:	9202      	str	r2, [sp, #8]
10003448:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000344a:	0020      	movs	r0, r4
1000344c:	9201      	str	r2, [sp, #4]
1000344e:	9a08      	ldr	r2, [sp, #32]
10003450:	9200      	str	r2, [sp, #0]
10003452:	002a      	movs	r2, r5
10003454:	f7ff f910 	bl	10002678 <arch_new_thread>
	if (!_current) {
10003458:	4b04      	ldr	r3, [pc, #16]	; (1000346c <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
1000345a:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
1000345c:	689b      	ldr	r3, [r3, #8]
1000345e:	42b3      	cmp	r3, r6
10003460:	d000      	beq.n	10003464 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10003462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10003464:	0028      	movs	r0, r5
10003466:	6663      	str	r3, [r4, #100]	; 0x64
10003468:	b004      	add	sp, #16
1000346a:	bd70      	pop	{r4, r5, r6, pc}
1000346c:	20000160 	.word	0x20000160

10003470 <z_init_static_threads>:
{
10003470:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10003472:	4c20      	ldr	r4, [pc, #128]	; (100034f4 <z_init_static_threads+0x84>)
{
10003474:	b086      	sub	sp, #24
10003476:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10003478:	4d1f      	ldr	r5, [pc, #124]	; (100034f8 <z_init_static_threads+0x88>)
1000347a:	42ac      	cmp	r4, r5
1000347c:	d308      	bcc.n	10003490 <z_init_static_threads+0x20>
	k_sched_lock();
1000347e:	f000 f977 	bl	10003770 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10003482:	0034      	movs	r4, r6
10003484:	42ac      	cmp	r4, r5
10003486:	d319      	bcc.n	100034bc <z_init_static_threads+0x4c>
	k_sched_unlock();
10003488:	f000 f982 	bl	10003790 <k_sched_unlock>
}
1000348c:	b006      	add	sp, #24
1000348e:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10003490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
10003492:	9305      	str	r3, [sp, #20]
10003494:	6a23      	ldr	r3, [r4, #32]
10003496:	9304      	str	r3, [sp, #16]
10003498:	69e3      	ldr	r3, [r4, #28]
1000349a:	9303      	str	r3, [sp, #12]
1000349c:	69a3      	ldr	r3, [r4, #24]
1000349e:	9302      	str	r3, [sp, #8]
100034a0:	6963      	ldr	r3, [r4, #20]
100034a2:	9301      	str	r3, [sp, #4]
100034a4:	6923      	ldr	r3, [r4, #16]
100034a6:	9300      	str	r3, [sp, #0]
100034a8:	68e3      	ldr	r3, [r4, #12]
100034aa:	68a2      	ldr	r2, [r4, #8]
100034ac:	6861      	ldr	r1, [r4, #4]
100034ae:	6820      	ldr	r0, [r4, #0]
100034b0:	f7ff ffb4 	bl	1000341c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
100034b4:	6823      	ldr	r3, [r4, #0]
100034b6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
100034b8:	3430      	adds	r4, #48	; 0x30
100034ba:	e7dd      	b.n	10003478 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
100034bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
100034be:	1c5a      	adds	r2, r3, #1
100034c0:	d00f      	beq.n	100034e2 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
100034c2:	43d8      	mvns	r0, r3
100034c4:	17c0      	asrs	r0, r0, #31
100034c6:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
100034c8:	220a      	movs	r2, #10
100034ca:	2300      	movs	r3, #0
100034cc:	17c1      	asrs	r1, r0, #31
100034ce:	f7fe fb3f 	bl	10001b50 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
100034d2:	6826      	ldr	r6, [r4, #0]
100034d4:	000b      	movs	r3, r1
100034d6:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
100034d8:	4301      	orrs	r1, r0
100034da:	d104      	bne.n	100034e6 <z_init_static_threads+0x76>
	z_sched_start(thread);
100034dc:	0030      	movs	r0, r6
100034de:	f000 f92d 	bl	1000373c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
100034e2:	3430      	adds	r4, #48	; 0x30
100034e4:	e7ce      	b.n	10003484 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100034e6:	0030      	movs	r0, r6
100034e8:	4904      	ldr	r1, [pc, #16]	; (100034fc <z_init_static_threads+0x8c>)
100034ea:	3018      	adds	r0, #24
100034ec:	f000 fa44 	bl	10003978 <z_add_timeout>
100034f0:	e7f7      	b.n	100034e2 <z_init_static_threads+0x72>
100034f2:	46c0      	nop			; (mov r8, r8)
100034f4:	10004468 	.word	0x10004468
100034f8:	10004468 	.word	0x10004468
100034fc:	1000422b 	.word	0x1000422b

10003500 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
10003500:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
10003502:	4d07      	ldr	r5, [pc, #28]	; (10003520 <z_reset_time_slice+0x20>)
10003504:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
10003506:	2c00      	cmp	r4, #0
10003508:	d008      	beq.n	1000351c <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
1000350a:	f7ff fc29 	bl	10002d60 <sys_clock_elapsed>
1000350e:	4b05      	ldr	r3, [pc, #20]	; (10003524 <z_reset_time_slice+0x24>)
10003510:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
10003512:	2100      	movs	r1, #0
10003514:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10003516:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
10003518:	f000 fed7 	bl	100042ca <z_set_timeout_expiry>
	}
}
1000351c:	bd70      	pop	{r4, r5, r6, pc}
1000351e:	46c0      	nop			; (mov r8, r8)
10003520:	2000018c 	.word	0x2000018c
10003524:	20000160 	.word	0x20000160

10003528 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10003528:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
1000352a:	4d0e      	ldr	r5, [pc, #56]	; (10003564 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000352c:	4b0e      	ldr	r3, [pc, #56]	; (10003568 <update_cache+0x40>)
	return list->head == list;
1000352e:	69ec      	ldr	r4, [r5, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003530:	429c      	cmp	r4, r3
10003532:	d001      	beq.n	10003538 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10003534:	2c00      	cmp	r4, #0
10003536:	d100      	bne.n	1000353a <update_cache+0x12>
10003538:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
1000353a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
1000353c:	2800      	cmp	r0, #0
1000353e:	d108      	bne.n	10003552 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10003540:	7b5a      	ldrb	r2, [r3, #13]
10003542:	06d2      	lsls	r2, r2, #27
10003544:	d105      	bne.n	10003552 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10003546:	69a2      	ldr	r2, [r4, #24]
10003548:	2a00      	cmp	r2, #0
1000354a:	d102      	bne.n	10003552 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
1000354c:	89da      	ldrh	r2, [r3, #14]
1000354e:	2a7f      	cmp	r2, #127	; 0x7f
10003550:	d805      	bhi.n	1000355e <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10003552:	429c      	cmp	r4, r3
10003554:	d002      	beq.n	1000355c <update_cache+0x34>
			z_reset_time_slice(thread);
10003556:	0020      	movs	r0, r4
10003558:	f7ff ffd2 	bl	10003500 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
1000355c:	0023      	movs	r3, r4
1000355e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10003560:	bd70      	pop	{r4, r5, r6, pc}
10003562:	46c0      	nop			; (mov r8, r8)
10003564:	20000160 	.word	0x20000160
10003568:	2000017c 	.word	0x2000017c

1000356c <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
1000356c:	220d      	movs	r2, #13
{
1000356e:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10003570:	5682      	ldrsb	r2, [r0, r2]
{
10003572:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003574:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003576:	2a00      	cmp	r2, #0
10003578:	da04      	bge.n	10003584 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000357a:	227f      	movs	r2, #127	; 0x7f
1000357c:	4013      	ands	r3, r2
1000357e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10003580:	f000 fe40 	bl	10004204 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003584:	2380      	movs	r3, #128	; 0x80
10003586:	7b62      	ldrb	r2, [r4, #13]
10003588:	425b      	negs	r3, r3
1000358a:	4313      	orrs	r3, r2
	return list->head == list;
1000358c:	4a13      	ldr	r2, [pc, #76]	; (100035dc <move_thread_to_end_of_prio_q+0x70>)
1000358e:	7363      	strb	r3, [r4, #13]
10003590:	69d3      	ldr	r3, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003592:	4813      	ldr	r0, [pc, #76]	; (100035e0 <move_thread_to_end_of_prio_q+0x74>)
10003594:	4283      	cmp	r3, r0
10003596:	d100      	bne.n	1000359a <move_thread_to_end_of_prio_q+0x2e>
10003598:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
1000359a:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000359c:	2b00      	cmp	r3, #0
1000359e:	d104      	bne.n	100035aa <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
100035a0:	6020      	str	r0, [r4, #0]
	node->prev = tail;
100035a2:	6061      	str	r1, [r4, #4]

	tail->next = node;
100035a4:	600c      	str	r4, [r1, #0]
	list->tail = node;
100035a6:	6214      	str	r4, [r2, #32]
}
100035a8:	e00c      	b.n	100035c4 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
100035aa:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
100035ac:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
100035ae:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
100035b0:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
100035b2:	42b5      	cmp	r5, r6
100035b4:	d00d      	beq.n	100035d2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
100035b6:	42ae      	cmp	r6, r5
100035b8:	dd0b      	ble.n	100035d2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
100035ba:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
100035bc:	6023      	str	r3, [r4, #0]
	node->prev = prev;
100035be:	6061      	str	r1, [r4, #4]
	prev->next = node;
100035c0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
100035c2:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
100035c4:	6890      	ldr	r0, [r2, #8]
100035c6:	1b00      	subs	r0, r0, r4
100035c8:	4243      	negs	r3, r0
100035ca:	4158      	adcs	r0, r3
100035cc:	f7ff ffac 	bl	10003528 <update_cache>
}
100035d0:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
100035d2:	4299      	cmp	r1, r3
100035d4:	d0e4      	beq.n	100035a0 <move_thread_to_end_of_prio_q+0x34>
100035d6:	681b      	ldr	r3, [r3, #0]
100035d8:	e7e0      	b.n	1000359c <move_thread_to_end_of_prio_q+0x30>
100035da:	46c0      	nop			; (mov r8, r8)
100035dc:	20000160 	.word	0x20000160
100035e0:	2000017c 	.word	0x2000017c

100035e4 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100035e4:	230d      	movs	r3, #13
{
100035e6:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100035e8:	56c3      	ldrsb	r3, [r0, r3]
100035ea:	7b41      	ldrb	r1, [r0, #13]
100035ec:	2b00      	cmp	r3, #0
100035ee:	db26      	blt.n	1000363e <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100035f0:	06cb      	lsls	r3, r1, #27
100035f2:	d124      	bne.n	1000363e <ready_thread+0x5a>
	return node->next != NULL;
100035f4:	6983      	ldr	r3, [r0, #24]
100035f6:	2b00      	cmp	r3, #0
100035f8:	d121      	bne.n	1000363e <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
100035fa:	2280      	movs	r2, #128	; 0x80
100035fc:	4252      	negs	r2, r2
100035fe:	430a      	orrs	r2, r1
10003600:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10003602:	4a11      	ldr	r2, [pc, #68]	; (10003648 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003604:	4c11      	ldr	r4, [pc, #68]	; (1000364c <ready_thread+0x68>)
	return list->head == list;
10003606:	69d1      	ldr	r1, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003608:	42a1      	cmp	r1, r4
1000360a:	d000      	beq.n	1000360e <ready_thread+0x2a>
1000360c:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
1000360e:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003610:	2b00      	cmp	r3, #0
10003612:	d104      	bne.n	1000361e <ready_thread+0x3a>
	node->next = list;
10003614:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10003616:	6041      	str	r1, [r0, #4]
	tail->next = node;
10003618:	6008      	str	r0, [r1, #0]
	list->tail = node;
1000361a:	6210      	str	r0, [r2, #32]
}
1000361c:	e00c      	b.n	10003638 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
1000361e:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10003620:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10003622:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10003624:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10003626:	42b5      	cmp	r5, r6
10003628:	d00a      	beq.n	10003640 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000362a:	42ae      	cmp	r6, r5
1000362c:	dd08      	ble.n	10003640 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
1000362e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003630:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10003632:	6042      	str	r2, [r0, #4]
	prev->next = node;
10003634:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10003636:	6058      	str	r0, [r3, #4]
		update_cache(0);
10003638:	2000      	movs	r0, #0
1000363a:	f7ff ff75 	bl	10003528 <update_cache>
}
1000363e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003640:	428b      	cmp	r3, r1
10003642:	d0e7      	beq.n	10003614 <ready_thread+0x30>
10003644:	681b      	ldr	r3, [r3, #0]
10003646:	e7e3      	b.n	10003610 <ready_thread+0x2c>
10003648:	20000160 	.word	0x20000160
1000364c:	2000017c 	.word	0x2000017c

10003650 <k_sched_time_slice_set>:
{
10003650:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003652:	f3ef 8410 	mrs	r4, PRIMASK
10003656:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10003658:	230a      	movs	r3, #10
1000365a:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
1000365c:	2800      	cmp	r0, #0
1000365e:	dd02      	ble.n	10003666 <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10003660:	2b02      	cmp	r3, #2
10003662:	da00      	bge.n	10003666 <k_sched_time_slice_set+0x16>
10003664:	2302      	movs	r3, #2
		_current_cpu->slice_ticks = 0;
10003666:	2000      	movs	r0, #0
10003668:	4a07      	ldr	r2, [pc, #28]	; (10003688 <k_sched_time_slice_set+0x38>)
1000366a:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
1000366c:	4807      	ldr	r0, [pc, #28]	; (1000368c <k_sched_time_slice_set+0x3c>)
1000366e:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
10003670:	4b07      	ldr	r3, [pc, #28]	; (10003690 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
10003672:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
10003674:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10003676:	f7ff ff43 	bl	10003500 <z_reset_time_slice>
	if (key != 0U) {
1000367a:	2c00      	cmp	r4, #0
1000367c:	d102      	bne.n	10003684 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
1000367e:	b662      	cpsie	i
10003680:	f3bf 8f6f 	isb	sy
}
10003684:	bd10      	pop	{r4, pc}
10003686:	46c0      	nop			; (mov r8, r8)
10003688:	20000160 	.word	0x20000160
1000368c:	2000018c 	.word	0x2000018c
10003690:	20000188 	.word	0x20000188

10003694 <z_time_slice>:
{
10003694:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003696:	f3ef 8510 	mrs	r5, PRIMASK
1000369a:	b672      	cpsid	i
	if (pending_current == _current) {
1000369c:	4b17      	ldr	r3, [pc, #92]	; (100036fc <z_time_slice+0x68>)
1000369e:	4a18      	ldr	r2, [pc, #96]	; (10003700 <z_time_slice+0x6c>)
100036a0:	689c      	ldr	r4, [r3, #8]
100036a2:	6811      	ldr	r1, [r2, #0]
100036a4:	428c      	cmp	r4, r1
100036a6:	d108      	bne.n	100036ba <z_time_slice+0x26>
	z_reset_time_slice(curr);
100036a8:	0020      	movs	r0, r4
100036aa:	f7ff ff29 	bl	10003500 <z_reset_time_slice>
	if (key != 0U) {
100036ae:	2d00      	cmp	r5, #0
100036b0:	d102      	bne.n	100036b8 <z_time_slice+0x24>
	__asm__ volatile(
100036b2:	b662      	cpsie	i
100036b4:	f3bf 8f6f 	isb	sy
}
100036b8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
100036ba:	2100      	movs	r1, #0
100036bc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
100036be:	4a11      	ldr	r2, [pc, #68]	; (10003704 <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
100036c0:	6812      	ldr	r2, [r2, #0]
100036c2:	428a      	cmp	r2, r1
100036c4:	d018      	beq.n	100036f8 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
100036c6:	89e2      	ldrh	r2, [r4, #14]
100036c8:	2a7f      	cmp	r2, #127	; 0x7f
100036ca:	d815      	bhi.n	100036f8 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
100036cc:	7b62      	ldrb	r2, [r4, #13]
100036ce:	06d2      	lsls	r2, r2, #27
100036d0:	d112      	bne.n	100036f8 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
100036d2:	210e      	movs	r1, #14
100036d4:	4a0c      	ldr	r2, [pc, #48]	; (10003708 <z_time_slice+0x74>)
100036d6:	5661      	ldrsb	r1, [r4, r1]
100036d8:	6812      	ldr	r2, [r2, #0]
100036da:	4291      	cmp	r1, r2
100036dc:	db0c      	blt.n	100036f8 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
100036de:	4a0b      	ldr	r2, [pc, #44]	; (1000370c <z_time_slice+0x78>)
100036e0:	4294      	cmp	r4, r2
100036e2:	d009      	beq.n	100036f8 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
100036e4:	691a      	ldr	r2, [r3, #16]
100036e6:	4282      	cmp	r2, r0
100036e8:	dc03      	bgt.n	100036f2 <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
100036ea:	0020      	movs	r0, r4
100036ec:	f7ff ff3e 	bl	1000356c <move_thread_to_end_of_prio_q>
100036f0:	e7da      	b.n	100036a8 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
100036f2:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
100036f4:	611a      	str	r2, [r3, #16]
100036f6:	e7da      	b.n	100036ae <z_time_slice+0x1a>
100036f8:	2200      	movs	r2, #0
100036fa:	e7fb      	b.n	100036f4 <z_time_slice+0x60>
100036fc:	20000160 	.word	0x20000160
10003700:	20000184 	.word	0x20000184
10003704:	2000018c 	.word	0x2000018c
10003708:	20000188 	.word	0x20000188
1000370c:	20000030 	.word	0x20000030

10003710 <z_reschedule>:
{
10003710:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003712:	2900      	cmp	r1, #0
10003714:	d10a      	bne.n	1000372c <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003716:	f3ef 8005 	mrs	r0, IPSR
1000371a:	2800      	cmp	r0, #0
1000371c:	d107      	bne.n	1000372e <z_reschedule+0x1e>
	return new_thread != _current;
1000371e:	4b06      	ldr	r3, [pc, #24]	; (10003738 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10003720:	689a      	ldr	r2, [r3, #8]
10003722:	699b      	ldr	r3, [r3, #24]
10003724:	429a      	cmp	r2, r3
10003726:	d002      	beq.n	1000372e <z_reschedule+0x1e>
	ret = arch_swap(key);
10003728:	f7fe ff4c 	bl	100025c4 <arch_swap>
}
1000372c:	bd10      	pop	{r4, pc}
1000372e:	b662      	cpsie	i
10003730:	f3bf 8f6f 	isb	sy
10003734:	e7fa      	b.n	1000372c <z_reschedule+0x1c>
10003736:	46c0      	nop			; (mov r8, r8)
10003738:	20000160 	.word	0x20000160

1000373c <z_sched_start>:
{
1000373c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000373e:	f3ef 8410 	mrs	r4, PRIMASK
10003742:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003744:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10003746:	7b43      	ldrb	r3, [r0, #13]
10003748:	4213      	tst	r3, r2
1000374a:	d105      	bne.n	10003758 <z_sched_start+0x1c>
	if (key != 0U) {
1000374c:	2c00      	cmp	r4, #0
1000374e:	d102      	bne.n	10003756 <z_sched_start+0x1a>
	__asm__ volatile(
10003750:	b662      	cpsie	i
10003752:	f3bf 8f6f 	isb	sy
}
10003756:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003758:	4393      	bics	r3, r2
1000375a:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
1000375c:	f7ff ff42 	bl	100035e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003760:	0021      	movs	r1, r4
10003762:	4802      	ldr	r0, [pc, #8]	; (1000376c <z_sched_start+0x30>)
10003764:	f7ff ffd4 	bl	10003710 <z_reschedule>
10003768:	e7f5      	b.n	10003756 <z_sched_start+0x1a>
1000376a:	46c0      	nop			; (mov r8, r8)
1000376c:	20000199 	.word	0x20000199

10003770 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003770:	f3ef 8110 	mrs	r1, PRIMASK
10003774:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10003776:	4b05      	ldr	r3, [pc, #20]	; (1000378c <k_sched_lock+0x1c>)
10003778:	689a      	ldr	r2, [r3, #8]
1000377a:	7bd3      	ldrb	r3, [r2, #15]
1000377c:	3b01      	subs	r3, #1
1000377e:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10003780:	2900      	cmp	r1, #0
10003782:	d102      	bne.n	1000378a <k_sched_lock+0x1a>
	__asm__ volatile(
10003784:	b662      	cpsie	i
10003786:	f3bf 8f6f 	isb	sy
}
1000378a:	4770      	bx	lr
1000378c:	20000160 	.word	0x20000160

10003790 <k_sched_unlock>:
{
10003790:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003792:	f3ef 8410 	mrs	r4, PRIMASK
10003796:	b672      	cpsid	i
		++_current->base.sched_locked;
10003798:	4b07      	ldr	r3, [pc, #28]	; (100037b8 <k_sched_unlock+0x28>)
		update_cache(0);
1000379a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
1000379c:	689a      	ldr	r2, [r3, #8]
1000379e:	7bd3      	ldrb	r3, [r2, #15]
100037a0:	3301      	adds	r3, #1
100037a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
100037a4:	f7ff fec0 	bl	10003528 <update_cache>
	if (key != 0U) {
100037a8:	2c00      	cmp	r4, #0
100037aa:	d102      	bne.n	100037b2 <k_sched_unlock+0x22>
	__asm__ volatile(
100037ac:	b662      	cpsie	i
100037ae:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
100037b2:	f000 fd70 	bl	10004296 <z_reschedule_unlocked>
}
100037b6:	bd10      	pop	{r4, pc}
100037b8:	20000160 	.word	0x20000160

100037bc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
100037bc:	2100      	movs	r1, #0
{
100037be:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
100037c0:	4b03      	ldr	r3, [pc, #12]	; (100037d0 <z_sched_init+0x14>)
100037c2:	4a04      	ldr	r2, [pc, #16]	; (100037d4 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
100037c4:	0008      	movs	r0, r1
100037c6:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
100037c8:	621a      	str	r2, [r3, #32]
100037ca:	f7ff ff41 	bl	10003650 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
100037ce:	bd10      	pop	{r4, pc}
100037d0:	20000160 	.word	0x20000160
100037d4:	2000017c 	.word	0x2000017c

100037d8 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
100037d8:	4b01      	ldr	r3, [pc, #4]	; (100037e0 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
100037da:	6898      	ldr	r0, [r3, #8]
}
100037dc:	4770      	bx	lr
100037de:	46c0      	nop			; (mov r8, r8)
100037e0:	20000160 	.word	0x20000160

100037e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
100037e4:	b570      	push	{r4, r5, r6, lr}
100037e6:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100037e8:	f3ef 8610 	mrs	r6, PRIMASK
100037ec:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
100037ee:	7b03      	ldrb	r3, [r0, #12]
100037f0:	07db      	lsls	r3, r3, #31
100037f2:	d508      	bpl.n	10003806 <z_thread_abort+0x22>
	if (key != 0U) {
100037f4:	2e00      	cmp	r6, #0
100037f6:	d102      	bne.n	100037fe <z_thread_abort+0x1a>
	__asm__ volatile(
100037f8:	b662      	cpsie	i
100037fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
100037fe:	2004      	movs	r0, #4
10003800:	b662      	cpsie	i
10003802:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10003804:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10003806:	2308      	movs	r3, #8
10003808:	7b42      	ldrb	r2, [r0, #13]
1000380a:	421a      	tst	r2, r3
1000380c:	d005      	beq.n	1000381a <z_thread_abort+0x36>
	if (key != 0U) {
1000380e:	2e00      	cmp	r6, #0
10003810:	d1f8      	bne.n	10003804 <z_thread_abort+0x20>
	__asm__ volatile(
10003812:	b662      	cpsie	i
10003814:	f3bf 8f6f 	isb	sy
10003818:	e7f4      	b.n	10003804 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000381a:	2120      	movs	r1, #32
1000381c:	0010      	movs	r0, r2
1000381e:	4388      	bics	r0, r1
10003820:	0001      	movs	r1, r0
10003822:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10003824:	b248      	sxtb	r0, r1
10003826:	2800      	cmp	r0, #0
10003828:	db20      	blt.n	1000386c <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000382a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
1000382c:	68a3      	ldr	r3, [r4, #8]
1000382e:	2b00      	cmp	r3, #0
10003830:	d002      	beq.n	10003838 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10003832:	0020      	movs	r0, r4
10003834:	f000 fcee 	bl	10004214 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10003838:	0020      	movs	r0, r4
1000383a:	3018      	adds	r0, #24
1000383c:	f000 fd32 	bl	100042a4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10003840:	0023      	movs	r3, r4
	return list->head == list;
10003842:	6da5      	ldr	r5, [r4, #88]	; 0x58
10003844:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003846:	429d      	cmp	r5, r3
10003848:	d001      	beq.n	1000384e <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
1000384a:	2d00      	cmp	r5, #0
1000384c:	d116      	bne.n	1000387c <z_thread_abort+0x98>
		update_cache(1);
1000384e:	2001      	movs	r0, #1
10003850:	f7ff fe6a 	bl	10003528 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10003854:	4b10      	ldr	r3, [pc, #64]	; (10003898 <z_thread_abort+0xb4>)
10003856:	689b      	ldr	r3, [r3, #8]
10003858:	42a3      	cmp	r3, r4
1000385a:	d1d8      	bne.n	1000380e <z_thread_abort+0x2a>
1000385c:	f3ef 8305 	mrs	r3, IPSR
10003860:	2b00      	cmp	r3, #0
10003862:	d1d4      	bne.n	1000380e <z_thread_abort+0x2a>
10003864:	0030      	movs	r0, r6
10003866:	f7fe fead 	bl	100025c4 <arch_swap>
	return ret;
1000386a:	e7d0      	b.n	1000380e <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000386c:	215f      	movs	r1, #95	; 0x5f
1000386e:	400a      	ands	r2, r1
10003870:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003872:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003874:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003876:	f000 fcc5 	bl	10004204 <sys_dlist_remove>
}
1000387a:	e7d7      	b.n	1000382c <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
1000387c:	0028      	movs	r0, r5
1000387e:	f000 fcc9 	bl	10004214 <unpend_thread_no_timeout>
10003882:	0028      	movs	r0, r5
10003884:	3018      	adds	r0, #24
10003886:	f000 fd0d 	bl	100042a4 <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
1000388a:	2300      	movs	r3, #0
		ready_thread(thread);
1000388c:	0028      	movs	r0, r5
1000388e:	66eb      	str	r3, [r5, #108]	; 0x6c
10003890:	f7ff fea8 	bl	100035e4 <ready_thread>
10003894:	e7d4      	b.n	10003840 <z_thread_abort+0x5c>
10003896:	46c0      	nop			; (mov r8, r8)
10003898:	20000160 	.word	0x20000160

1000389c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
1000389c:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
1000389e:	4806      	ldr	r0, [pc, #24]	; (100038b8 <z_data_copy+0x1c>)
100038a0:	4a06      	ldr	r2, [pc, #24]	; (100038bc <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100038a2:	4907      	ldr	r1, [pc, #28]	; (100038c0 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
100038a4:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100038a6:	f000 fca2 	bl	100041ee <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
100038aa:	4a06      	ldr	r2, [pc, #24]	; (100038c4 <z_data_copy+0x28>)
100038ac:	4906      	ldr	r1, [pc, #24]	; (100038c8 <z_data_copy+0x2c>)
100038ae:	4807      	ldr	r0, [pc, #28]	; (100038cc <z_data_copy+0x30>)
100038b0:	f000 fc9d 	bl	100041ee <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
100038b4:	bd10      	pop	{r4, pc}
100038b6:	46c0      	nop			; (mov r8, r8)
100038b8:	20000000 	.word	0x20000000
100038bc:	20000030 	.word	0x20000030
100038c0:	100046cc 	.word	0x100046cc
100038c4:	00000000 	.word	0x00000000
100038c8:	100046cc 	.word	0x100046cc
100038cc:	20000000 	.word	0x20000000

100038d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100038d0:	2000      	movs	r0, #0
{
100038d2:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100038d4:	4b03      	ldr	r3, [pc, #12]	; (100038e4 <elapsed+0x14>)
100038d6:	681b      	ldr	r3, [r3, #0]
100038d8:	4283      	cmp	r3, r0
100038da:	d101      	bne.n	100038e0 <elapsed+0x10>
100038dc:	f7ff fa40 	bl	10002d60 <sys_clock_elapsed>
}
100038e0:	bd10      	pop	{r4, pc}
100038e2:	46c0      	nop			; (mov r8, r8)
100038e4:	20000190 	.word	0x20000190

100038e8 <next_timeout>:

static int32_t next_timeout(void)
{
100038e8:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
100038ea:	4b12      	ldr	r3, [pc, #72]	; (10003934 <next_timeout+0x4c>)
100038ec:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100038ee:	429e      	cmp	r6, r3
100038f0:	d10a      	bne.n	10003908 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
100038f2:	f7ff ffed 	bl	100038d0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
100038f6:	4810      	ldr	r0, [pc, #64]	; (10003938 <next_timeout+0x50>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
100038f8:	4b10      	ldr	r3, [pc, #64]	; (1000393c <next_timeout+0x54>)
100038fa:	691b      	ldr	r3, [r3, #16]
100038fc:	2b00      	cmp	r3, #0
100038fe:	d002      	beq.n	10003906 <next_timeout+0x1e>
10003900:	4298      	cmp	r0, r3
10003902:	dd00      	ble.n	10003906 <next_timeout+0x1e>
10003904:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
10003906:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
10003908:	f7ff ffe2 	bl	100038d0 <elapsed>
	if ((to == NULL) ||
1000390c:	2e00      	cmp	r6, #0
1000390e:	d0f2      	beq.n	100038f6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10003910:	6932      	ldr	r2, [r6, #16]
10003912:	6973      	ldr	r3, [r6, #20]
10003914:	0004      	movs	r4, r0
10003916:	17c5      	asrs	r5, r0, #31
10003918:	1b12      	subs	r2, r2, r4
1000391a:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
1000391c:	2b00      	cmp	r3, #0
1000391e:	dcea      	bgt.n	100038f6 <next_timeout+0xe>
10003920:	d103      	bne.n	1000392a <next_timeout+0x42>
10003922:	2180      	movs	r1, #128	; 0x80
10003924:	0609      	lsls	r1, r1, #24
10003926:	428a      	cmp	r2, r1
10003928:	d2e5      	bcs.n	100038f6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
1000392a:	43d8      	mvns	r0, r3
1000392c:	17c0      	asrs	r0, r0, #31
1000392e:	4010      	ands	r0, r2
10003930:	e7e2      	b.n	100038f8 <next_timeout+0x10>
10003932:	46c0      	nop			; (mov r8, r8)
10003934:	20000020 	.word	0x20000020
10003938:	7fffffff 	.word	0x7fffffff
1000393c:	20000160 	.word	0x20000160

10003940 <remove_timeout>:
{
10003940:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10003942:	2800      	cmp	r0, #0
10003944:	d00e      	beq.n	10003964 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10003946:	4b0b      	ldr	r3, [pc, #44]	; (10003974 <remove_timeout+0x34>)
10003948:	685b      	ldr	r3, [r3, #4]
1000394a:	4298      	cmp	r0, r3
1000394c:	d00a      	beq.n	10003964 <remove_timeout+0x24>
1000394e:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10003950:	2900      	cmp	r1, #0
10003952:	d007      	beq.n	10003964 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10003954:	690a      	ldr	r2, [r1, #16]
10003956:	694b      	ldr	r3, [r1, #20]
10003958:	6904      	ldr	r4, [r0, #16]
1000395a:	6945      	ldr	r5, [r0, #20]
1000395c:	1912      	adds	r2, r2, r4
1000395e:	416b      	adcs	r3, r5
10003960:	610a      	str	r2, [r1, #16]
10003962:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10003964:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10003966:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10003968:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000396a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000396c:	2300      	movs	r3, #0
1000396e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10003970:	6043      	str	r3, [r0, #4]
}
10003972:	bd30      	pop	{r4, r5, pc}
10003974:	20000020 	.word	0x20000020

10003978 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10003978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000397a:	0004      	movs	r4, r0
1000397c:	0016      	movs	r6, r2
1000397e:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003980:	1c53      	adds	r3, r2, #1
10003982:	d101      	bne.n	10003988 <z_add_timeout+0x10>
10003984:	1c7b      	adds	r3, r7, #1
10003986:	d05d      	beq.n	10003a44 <z_add_timeout+0xcc>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10003988:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
1000398a:	f3ef 8310 	mrs	r3, PRIMASK
1000398e:	b672      	cpsid	i
10003990:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10003992:	2f00      	cmp	r7, #0
10003994:	da23      	bge.n	100039de <z_add_timeout+0x66>
10003996:	1c7b      	adds	r3, r7, #1
10003998:	d101      	bne.n	1000399e <z_add_timeout+0x26>
1000399a:	1cb3      	adds	r3, r6, #2
1000399c:	d81f      	bhi.n	100039de <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
1000399e:	4b2e      	ldr	r3, [pc, #184]	; (10003a58 <z_add_timeout+0xe0>)
100039a0:	6818      	ldr	r0, [r3, #0]
100039a2:	6859      	ldr	r1, [r3, #4]
100039a4:	2202      	movs	r2, #2
100039a6:	4252      	negs	r2, r2
100039a8:	17d3      	asrs	r3, r2, #31
100039aa:	1a12      	subs	r2, r2, r0
100039ac:	418b      	sbcs	r3, r1
100039ae:	1b92      	subs	r2, r2, r6
100039b0:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
100039b2:	2b00      	cmp	r3, #0
100039b4:	dc04      	bgt.n	100039c0 <z_add_timeout+0x48>
100039b6:	d101      	bne.n	100039bc <z_add_timeout+0x44>
100039b8:	2a00      	cmp	r2, #0
100039ba:	d101      	bne.n	100039c0 <z_add_timeout+0x48>
100039bc:	2201      	movs	r2, #1
100039be:	2300      	movs	r3, #0
	return list->head == list;
100039c0:	4f26      	ldr	r7, [pc, #152]	; (10003a5c <z_add_timeout+0xe4>)
100039c2:	6122      	str	r2, [r4, #16]
100039c4:	6163      	str	r3, [r4, #20]
100039c6:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100039c8:	42bd      	cmp	r5, r7
100039ca:	d100      	bne.n	100039ce <z_add_timeout+0x56>
100039cc:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
100039ce:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
100039d0:	2d00      	cmp	r5, #0
100039d2:	d10f      	bne.n	100039f4 <z_add_timeout+0x7c>
	node->next = list;
100039d4:	6027      	str	r7, [r4, #0]
	node->prev = tail;
100039d6:	6066      	str	r6, [r4, #4]
	tail->next = node;
100039d8:	6034      	str	r4, [r6, #0]
	list->tail = node;
100039da:	607c      	str	r4, [r7, #4]
}
100039dc:	e01c      	b.n	10003a18 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
100039de:	f7ff ff77 	bl	100038d0 <elapsed>
100039e2:	2201      	movs	r2, #1
100039e4:	2300      	movs	r3, #0
100039e6:	1992      	adds	r2, r2, r6
100039e8:	417b      	adcs	r3, r7
100039ea:	0006      	movs	r6, r0
100039ec:	17c7      	asrs	r7, r0, #31
100039ee:	1992      	adds	r2, r2, r6
100039f0:	417b      	adcs	r3, r7
100039f2:	e7e5      	b.n	100039c0 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
100039f4:	6928      	ldr	r0, [r5, #16]
100039f6:	6969      	ldr	r1, [r5, #20]
100039f8:	6922      	ldr	r2, [r4, #16]
100039fa:	6963      	ldr	r3, [r4, #20]
100039fc:	4299      	cmp	r1, r3
100039fe:	dc02      	bgt.n	10003a06 <z_add_timeout+0x8e>
10003a00:	d121      	bne.n	10003a46 <z_add_timeout+0xce>
10003a02:	4290      	cmp	r0, r2
10003a04:	d91f      	bls.n	10003a46 <z_add_timeout+0xce>
				t->dticks -= to->dticks;
10003a06:	1a80      	subs	r0, r0, r2
10003a08:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10003a0a:	686b      	ldr	r3, [r5, #4]
10003a0c:	6128      	str	r0, [r5, #16]
10003a0e:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10003a10:	6063      	str	r3, [r4, #4]
	node->next = successor;
10003a12:	6025      	str	r5, [r4, #0]
	prev->next = node;
10003a14:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10003a16:	606c      	str	r4, [r5, #4]
	return list->head == list;
10003a18:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003a1a:	42bb      	cmp	r3, r7
10003a1c:	d00c      	beq.n	10003a38 <z_add_timeout+0xc0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10003a1e:	429c      	cmp	r4, r3
10003a20:	d10a      	bne.n	10003a38 <z_add_timeout+0xc0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
10003a22:	f7ff ff61 	bl	100038e8 <next_timeout>

			if (next_time == 0 ||
10003a26:	2800      	cmp	r0, #0
10003a28:	d003      	beq.n	10003a32 <z_add_timeout+0xba>
			    _current_cpu->slice_ticks != next_time) {
10003a2a:	4b0d      	ldr	r3, [pc, #52]	; (10003a60 <z_add_timeout+0xe8>)
			if (next_time == 0 ||
10003a2c:	691b      	ldr	r3, [r3, #16]
10003a2e:	4283      	cmp	r3, r0
10003a30:	d002      	beq.n	10003a38 <z_add_timeout+0xc0>
				sys_clock_set_timeout(next_time, false);
10003a32:	2100      	movs	r1, #0
10003a34:	f7ff f91c 	bl	10002c70 <sys_clock_set_timeout>
	if (key != 0U) {
10003a38:	9b01      	ldr	r3, [sp, #4]
10003a3a:	2b00      	cmp	r3, #0
10003a3c:	d102      	bne.n	10003a44 <z_add_timeout+0xcc>
	__asm__ volatile(
10003a3e:	b662      	cpsie	i
10003a40:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10003a44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
10003a46:	1a12      	subs	r2, r2, r0
10003a48:	418b      	sbcs	r3, r1
10003a4a:	6122      	str	r2, [r4, #16]
10003a4c:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10003a4e:	42b5      	cmp	r5, r6
10003a50:	d0c0      	beq.n	100039d4 <z_add_timeout+0x5c>
10003a52:	682d      	ldr	r5, [r5, #0]
10003a54:	e7bc      	b.n	100039d0 <z_add_timeout+0x58>
10003a56:	46c0      	nop			; (mov r8, r8)
10003a58:	20000110 	.word	0x20000110
10003a5c:	20000020 	.word	0x20000020
10003a60:	20000160 	.word	0x20000160

10003a64 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a66:	b087      	sub	sp, #28
10003a68:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10003a6a:	f7ff fe13 	bl	10003694 <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10003a6e:	f3ef 8310 	mrs	r3, PRIMASK
10003a72:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10003a74:	9301      	str	r3, [sp, #4]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10003a76:	4b2d      	ldr	r3, [pc, #180]	; (10003b2c <sys_clock_announce+0xc8>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10003a78:	4f2d      	ldr	r7, [pc, #180]	; (10003b30 <sys_clock_announce+0xcc>)
	announce_remaining = ticks;
10003a7a:	601c      	str	r4, [r3, #0]
10003a7c:	469c      	mov	ip, r3
		curr_tick += dt;
10003a7e:	6839      	ldr	r1, [r7, #0]
10003a80:	687a      	ldr	r2, [r7, #4]
	return list->head == list;
10003a82:	4b2c      	ldr	r3, [pc, #176]	; (10003b34 <sys_clock_announce+0xd0>)
10003a84:	9102      	str	r1, [sp, #8]
10003a86:	9203      	str	r2, [sp, #12]
10003a88:	681d      	ldr	r5, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003a8a:	429d      	cmp	r5, r3
10003a8c:	d011      	beq.n	10003ab2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
10003a8e:	2d00      	cmp	r5, #0
10003a90:	d00f      	beq.n	10003ab2 <sys_clock_announce+0x4e>
10003a92:	696a      	ldr	r2, [r5, #20]
10003a94:	692e      	ldr	r6, [r5, #16]
10003a96:	17e3      	asrs	r3, r4, #31
10003a98:	429a      	cmp	r2, r3
10003a9a:	dc02      	bgt.n	10003aa2 <sys_clock_announce+0x3e>
10003a9c:	d121      	bne.n	10003ae2 <sys_clock_announce+0x7e>
10003a9e:	42a6      	cmp	r6, r4
10003aa0:	d91f      	bls.n	10003ae2 <sys_clock_announce+0x7e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
10003aa2:	0019      	movs	r1, r3
10003aa4:	692a      	ldr	r2, [r5, #16]
10003aa6:	696b      	ldr	r3, [r5, #20]
10003aa8:	0020      	movs	r0, r4
10003aaa:	1a12      	subs	r2, r2, r0
10003aac:	418b      	sbcs	r3, r1
10003aae:	612a      	str	r2, [r5, #16]
10003ab0:	616b      	str	r3, [r5, #20]
	}

	curr_tick += announce_remaining;
10003ab2:	9802      	ldr	r0, [sp, #8]
10003ab4:	9903      	ldr	r1, [sp, #12]
10003ab6:	0022      	movs	r2, r4
10003ab8:	17e3      	asrs	r3, r4, #31
10003aba:	1812      	adds	r2, r2, r0
10003abc:	414b      	adcs	r3, r1
	announce_remaining = 0;
10003abe:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
10003ac0:	603a      	str	r2, [r7, #0]
10003ac2:	607b      	str	r3, [r7, #4]
	announce_remaining = 0;
10003ac4:	4663      	mov	r3, ip
10003ac6:	601c      	str	r4, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
10003ac8:	f7ff ff0e 	bl	100038e8 <next_timeout>
10003acc:	0021      	movs	r1, r4
10003ace:	f7ff f8cf 	bl	10002c70 <sys_clock_set_timeout>
	if (key != 0U) {
10003ad2:	9b01      	ldr	r3, [sp, #4]
10003ad4:	42a3      	cmp	r3, r4
10003ad6:	d102      	bne.n	10003ade <sys_clock_announce+0x7a>
	__asm__ volatile(
10003ad8:	b662      	cpsie	i
10003ada:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10003ade:	b007      	add	sp, #28
10003ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
10003ae2:	17f3      	asrs	r3, r6, #31
10003ae4:	9604      	str	r6, [sp, #16]
10003ae6:	9305      	str	r3, [sp, #20]
10003ae8:	9b04      	ldr	r3, [sp, #16]
10003aea:	9c05      	ldr	r4, [sp, #20]
10003aec:	9802      	ldr	r0, [sp, #8]
10003aee:	9903      	ldr	r1, [sp, #12]
10003af0:	18c0      	adds	r0, r0, r3
10003af2:	4161      	adcs	r1, r4
		t->dticks = 0;
10003af4:	2300      	movs	r3, #0
10003af6:	2400      	movs	r4, #0
		curr_tick += dt;
10003af8:	4a0d      	ldr	r2, [pc, #52]	; (10003b30 <sys_clock_announce+0xcc>)
		t->dticks = 0;
10003afa:	612b      	str	r3, [r5, #16]
10003afc:	616c      	str	r4, [r5, #20]
		curr_tick += dt;
10003afe:	6010      	str	r0, [r2, #0]
10003b00:	6051      	str	r1, [r2, #4]
		remove_timeout(t);
10003b02:	0028      	movs	r0, r5
10003b04:	f7ff ff1c 	bl	10003940 <remove_timeout>
	if (key != 0U) {
10003b08:	9b01      	ldr	r3, [sp, #4]
10003b0a:	2b00      	cmp	r3, #0
10003b0c:	d102      	bne.n	10003b14 <sys_clock_announce+0xb0>
	__asm__ volatile(
10003b0e:	b662      	cpsie	i
10003b10:	f3bf 8f6f 	isb	sy
		t->fn(t);
10003b14:	0028      	movs	r0, r5
10003b16:	68ab      	ldr	r3, [r5, #8]
10003b18:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10003b1a:	f3ef 8310 	mrs	r3, PRIMASK
10003b1e:	b672      	cpsid	i
10003b20:	9301      	str	r3, [sp, #4]
		announce_remaining -= dt;
10003b22:	4b02      	ldr	r3, [pc, #8]	; (10003b2c <sys_clock_announce+0xc8>)
10003b24:	681c      	ldr	r4, [r3, #0]
10003b26:	1ba4      	subs	r4, r4, r6
10003b28:	e7a5      	b.n	10003a76 <sys_clock_announce+0x12>
10003b2a:	46c0      	nop			; (mov r8, r8)
10003b2c:	20000190 	.word	0x20000190
10003b30:	20000110 	.word	0x20000110
10003b34:	20000020 	.word	0x20000020

10003b38 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10003b38:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
10003b3a:	4802      	ldr	r0, [pc, #8]	; (10003b44 <boot_banner+0xc>)
10003b3c:	f000 f807 	bl	10003b4e <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10003b40:	bd10      	pop	{r4, pc}
10003b42:	46c0      	nop			; (mov r8, r8)
10003b44:	1000468a 	.word	0x1000468a

10003b48 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10003b48:	4770      	bx	lr

10003b4a <arch_printk_char_out>:
}
10003b4a:	2000      	movs	r0, #0
10003b4c:	4770      	bx	lr

10003b4e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
10003b4e:	b40f      	push	{r0, r1, r2, r3}
10003b50:	b507      	push	{r0, r1, r2, lr}
10003b52:	a904      	add	r1, sp, #16
10003b54:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10003b56:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10003b58:	f7fe f938 	bl	10001dcc <vprintk>

	va_end(ap);
}
10003b5c:	b003      	add	sp, #12
10003b5e:	bc08      	pop	{r3}
10003b60:	b004      	add	sp, #16
10003b62:	4718      	bx	r3

10003b64 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10003b64:	b510      	push	{r4, lr}
10003b66:	0004      	movs	r4, r0
10003b68:	0008      	movs	r0, r1
10003b6a:	0011      	movs	r1, r2
10003b6c:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
10003b6e:	47a0      	blx	r4
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
10003b70:	f7ff fe32 	bl	100037d8 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
10003b74:	f7fe fe3e 	bl	100027f4 <z_impl_k_thread_abort>

10003b78 <encode_uint>:
{
10003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b7a:	b085      	sub	sp, #20
10003b7c:	9001      	str	r0, [sp, #4]
10003b7e:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10003b80:	78d3      	ldrb	r3, [r2, #3]
{
10003b82:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10003b84:	001a      	movs	r2, r3
10003b86:	3a41      	subs	r2, #65	; 0x41
10003b88:	000f      	movs	r7, r1
	switch (specifier) {
10003b8a:	2408      	movs	r4, #8
10003b8c:	9202      	str	r2, [sp, #8]
10003b8e:	2b6f      	cmp	r3, #111	; 0x6f
10003b90:	d00a      	beq.n	10003ba8 <encode_uint+0x30>
10003b92:	d804      	bhi.n	10003b9e <encode_uint+0x26>
		return 16;
10003b94:	1924      	adds	r4, r4, r4
	switch (specifier) {
10003b96:	2b58      	cmp	r3, #88	; 0x58
10003b98:	d006      	beq.n	10003ba8 <encode_uint+0x30>
		return 10;
10003b9a:	3c06      	subs	r4, #6
10003b9c:	e004      	b.n	10003ba8 <encode_uint+0x30>
	switch (specifier) {
10003b9e:	2208      	movs	r2, #8
		return 16;
10003ba0:	2410      	movs	r4, #16
	switch (specifier) {
10003ba2:	4393      	bics	r3, r2
10003ba4:	2b70      	cmp	r3, #112	; 0x70
10003ba6:	d1f8      	bne.n	10003b9a <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10003ba8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10003baa:	0022      	movs	r2, r4
10003bac:	2300      	movs	r3, #0
10003bae:	0039      	movs	r1, r7
10003bb0:	9801      	ldr	r0, [sp, #4]
10003bb2:	f7fc fbb1 	bl	10000318 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10003bb6:	0013      	movs	r3, r2
10003bb8:	468c      	mov	ip, r1
10003bba:	b2d2      	uxtb	r2, r2
10003bbc:	2b09      	cmp	r3, #9
10003bbe:	d81a      	bhi.n	10003bf6 <encode_uint+0x7e>
10003bc0:	3230      	adds	r2, #48	; 0x30
10003bc2:	b2d3      	uxtb	r3, r2
10003bc4:	3e01      	subs	r6, #1
10003bc6:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10003bc8:	2300      	movs	r3, #0
10003bca:	42bb      	cmp	r3, r7
10003bcc:	d102      	bne.n	10003bd4 <encode_uint+0x5c>
10003bce:	9b01      	ldr	r3, [sp, #4]
10003bd0:	429c      	cmp	r4, r3
10003bd2:	d802      	bhi.n	10003bda <encode_uint+0x62>
10003bd4:	9b03      	ldr	r3, [sp, #12]
10003bd6:	429e      	cmp	r6, r3
10003bd8:	d80a      	bhi.n	10003bf0 <encode_uint+0x78>
	if (conv->flag_hash) {
10003bda:	782b      	ldrb	r3, [r5, #0]
10003bdc:	069b      	lsls	r3, r3, #26
10003bde:	d504      	bpl.n	10003bea <encode_uint+0x72>
		if (radix == 8) {
10003be0:	2c08      	cmp	r4, #8
10003be2:	d110      	bne.n	10003c06 <encode_uint+0x8e>
			conv->altform_0 = true;
10003be4:	78ab      	ldrb	r3, [r5, #2]
10003be6:	4323      	orrs	r3, r4
10003be8:	70ab      	strb	r3, [r5, #2]
}
10003bea:	0030      	movs	r0, r6
10003bec:	b005      	add	sp, #20
10003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10003bf0:	4667      	mov	r7, ip
10003bf2:	9001      	str	r0, [sp, #4]
10003bf4:	e7d9      	b.n	10003baa <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10003bf6:	0013      	movs	r3, r2
10003bf8:	9902      	ldr	r1, [sp, #8]
10003bfa:	3357      	adds	r3, #87	; 0x57
10003bfc:	b2db      	uxtb	r3, r3
10003bfe:	2919      	cmp	r1, #25
10003c00:	d8e0      	bhi.n	10003bc4 <encode_uint+0x4c>
10003c02:	3237      	adds	r2, #55	; 0x37
10003c04:	e7dd      	b.n	10003bc2 <encode_uint+0x4a>
		} else if (radix == 16) {
10003c06:	2c10      	cmp	r4, #16
10003c08:	d1ef      	bne.n	10003bea <encode_uint+0x72>
			conv->altform_0c = true;
10003c0a:	78ab      	ldrb	r3, [r5, #2]
10003c0c:	431c      	orrs	r4, r3
10003c0e:	70ac      	strb	r4, [r5, #2]
	return bp;
10003c10:	e7eb      	b.n	10003bea <encode_uint+0x72>

10003c12 <outs>:
{
10003c12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003c14:	0007      	movs	r7, r0
10003c16:	0015      	movs	r5, r2
10003c18:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10003c1a:	0014      	movs	r4, r2
{
10003c1c:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10003c1e:	42a6      	cmp	r6, r4
10003c20:	d806      	bhi.n	10003c30 <outs+0x1e>
10003c22:	2e00      	cmp	r6, #0
10003c24:	d001      	beq.n	10003c2a <outs+0x18>
	return (int)count;
10003c26:	1b60      	subs	r0, r4, r5
10003c28:	e008      	b.n	10003c3c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10003c2a:	7823      	ldrb	r3, [r4, #0]
10003c2c:	2b00      	cmp	r3, #0
10003c2e:	d0fa      	beq.n	10003c26 <outs+0x14>
		int rc = out((int)*sp++, ctx);
10003c30:	7820      	ldrb	r0, [r4, #0]
10003c32:	9901      	ldr	r1, [sp, #4]
10003c34:	47b8      	blx	r7
		if (rc < 0) {
10003c36:	3401      	adds	r4, #1
10003c38:	2800      	cmp	r0, #0
10003c3a:	daf0      	bge.n	10003c1e <outs+0xc>
}
10003c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10003c3e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10003c3e:	4770      	bx	lr

10003c40 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003c40:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10003c42:	f000 faba 	bl	100041ba <z_fatal_error>
}
10003c46:	bd10      	pop	{r4, pc}

10003c48 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10003c48:	b510      	push	{r4, lr}
10003c4a:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
10003c4c:	6800      	ldr	r0, [r0, #0]
10003c4e:	f000 fab4 	bl	100041ba <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10003c52:	bd10      	pop	{r4, pc}

10003c54 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10003c54:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10003c56:	2100      	movs	r1, #0
10003c58:	2001      	movs	r0, #1
10003c5a:	f7ff fff1 	bl	10003c40 <z_arm_fatal_error>
}
10003c5e:	bd10      	pop	{r4, pc}

10003c60 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10003c60:	b510      	push	{r4, lr}
	handler();
10003c62:	f7fe fc97 	bl	10002594 <z_SysNmiOnReset>
	z_arm_int_exit();
10003c66:	f7fe fd41 	bl	100026ec <z_arm_exc_exit>
}
10003c6a:	bd10      	pop	{r4, pc}

10003c6c <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10003c6c:	4770      	bx	lr

10003c6e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
10003c6e:	0003      	movs	r3, r0
	size_t n = 0;
10003c70:	2000      	movs	r0, #0

	while (*s != '\0') {
10003c72:	5c1a      	ldrb	r2, [r3, r0]
10003c74:	2a00      	cmp	r2, #0
10003c76:	d100      	bne.n	10003c7a <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10003c78:	4770      	bx	lr
		n++;
10003c7a:	3001      	adds	r0, #1
10003c7c:	e7f9      	b.n	10003c72 <strlen+0x4>

10003c7e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
10003c7e:	0003      	movs	r3, r0
	size_t n = 0;
10003c80:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10003c82:	5c1a      	ldrb	r2, [r3, r0]
10003c84:	2a00      	cmp	r2, #0
10003c86:	d001      	beq.n	10003c8c <strnlen+0xe>
10003c88:	4288      	cmp	r0, r1
10003c8a:	d100      	bne.n	10003c8e <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10003c8c:	4770      	bx	lr
		n++;
10003c8e:	3001      	adds	r0, #1
10003c90:	e7f7      	b.n	10003c82 <strnlen+0x4>

10003c92 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10003c92:	2300      	movs	r3, #0
{
10003c94:	b510      	push	{r4, lr}
	while (n > 0) {
10003c96:	429a      	cmp	r2, r3
10003c98:	d100      	bne.n	10003c9c <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10003c9a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10003c9c:	5ccc      	ldrb	r4, [r1, r3]
10003c9e:	54c4      	strb	r4, [r0, r3]
		n--;
10003ca0:	3301      	adds	r3, #1
10003ca2:	e7f8      	b.n	10003c96 <memcpy+0x4>

10003ca4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10003ca4:	0003      	movs	r3, r0
10003ca6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10003ca8:	1882      	adds	r2, r0, r2
10003caa:	4293      	cmp	r3, r2
10003cac:	d100      	bne.n	10003cb0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
10003cae:	4770      	bx	lr
		*(d_byte++) = c_byte;
10003cb0:	7019      	strb	r1, [r3, #0]
		n--;
10003cb2:	3301      	adds	r3, #1
10003cb4:	e7f9      	b.n	10003caa <memset+0x6>

10003cb6 <_stdout_hook_default>:
	return EOF;
10003cb6:	2001      	movs	r0, #1
}
10003cb8:	4240      	negs	r0, r0
10003cba:	4770      	bx	lr

10003cbc <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10003cbc:	23d0      	movs	r3, #208	; 0xd0
10003cbe:	061b      	lsls	r3, r3, #24
10003cc0:	685b      	ldr	r3, [r3, #4]
}
10003cc2:	2000      	movs	r0, #0
	*value = gpio_get_all();
10003cc4:	600b      	str	r3, [r1, #0]
}
10003cc6:	4770      	bx	lr

10003cc8 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10003cc8:	23d0      	movs	r3, #208	; 0xd0
10003cca:	061b      	lsls	r3, r3, #24
10003ccc:	6918      	ldr	r0, [r3, #16]
10003cce:	4042      	eors	r2, r0
10003cd0:	4011      	ands	r1, r2
}
10003cd2:	2000      	movs	r0, #0
10003cd4:	61d9      	str	r1, [r3, #28]
10003cd6:	4770      	bx	lr

10003cd8 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
10003cd8:	23d0      	movs	r3, #208	; 0xd0
10003cda:	061b      	lsls	r3, r3, #24
}
10003cdc:	2000      	movs	r0, #0
10003cde:	6159      	str	r1, [r3, #20]
10003ce0:	4770      	bx	lr

10003ce2 <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
10003ce2:	23d0      	movs	r3, #208	; 0xd0
10003ce4:	061b      	lsls	r3, r3, #24
}
10003ce6:	2000      	movs	r0, #0
10003ce8:	6199      	str	r1, [r3, #24]
10003cea:	4770      	bx	lr

10003cec <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
10003cec:	23d0      	movs	r3, #208	; 0xd0
10003cee:	061b      	lsls	r3, r3, #24
}
10003cf0:	2000      	movs	r0, #0
10003cf2:	61d9      	str	r1, [r3, #28]
10003cf4:	4770      	bx	lr

10003cf6 <gpio_rpi_manage_callback>:
{
10003cf6:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10003cf8:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10003cfa:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10003cfc:	2800      	cmp	r0, #0
10003cfe:	d021      	beq.n	10003d44 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10003d00:	4288      	cmp	r0, r1
10003d02:	d11b      	bne.n	10003d3c <gpio_rpi_manage_callback+0x46>
	return node->next;
10003d04:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
10003d06:	689c      	ldr	r4, [r3, #8]
	list->head = node;
10003d08:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10003d0a:	42a1      	cmp	r1, r4
10003d0c:	d100      	bne.n	10003d10 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10003d0e:	6098      	str	r0, [r3, #8]
	parent->next = child;
10003d10:	2000      	movs	r0, #0
10003d12:	6008      	str	r0, [r1, #0]
	if (set) {
10003d14:	4282      	cmp	r2, r0
10003d16:	d006      	beq.n	10003d26 <gpio_rpi_manage_callback+0x30>
	return list->head;
10003d18:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
10003d1a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10003d1c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
10003d1e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10003d20:	2a00      	cmp	r2, #0
10003d22:	d100      	bne.n	10003d26 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
10003d24:	6099      	str	r1, [r3, #8]
	return 0;
10003d26:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
10003d28:	e010      	b.n	10003d4c <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10003d2a:	4281      	cmp	r1, r0
10003d2c:	d106      	bne.n	10003d3c <gpio_rpi_manage_callback+0x46>
	return node->next;
10003d2e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
10003d30:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10003d32:	6898      	ldr	r0, [r3, #8]
10003d34:	4281      	cmp	r1, r0
10003d36:	d1eb      	bne.n	10003d10 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10003d38:	609c      	str	r4, [r3, #8]
}
10003d3a:	e7e9      	b.n	10003d10 <gpio_rpi_manage_callback+0x1a>
	return node->next;
10003d3c:	0004      	movs	r4, r0
10003d3e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10003d40:	2800      	cmp	r0, #0
10003d42:	d1f2      	bne.n	10003d2a <gpio_rpi_manage_callback+0x34>
			if (!set) {
10003d44:	2a00      	cmp	r2, #0
10003d46:	d1e7      	bne.n	10003d18 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
10003d48:	2016      	movs	r0, #22
10003d4a:	4240      	negs	r0, r0
}
10003d4c:	bd10      	pop	{r4, pc}

10003d4e <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10003d4e:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10003d50:	6843      	ldr	r3, [r0, #4]
10003d52:	685b      	ldr	r3, [r3, #4]
10003d54:	4798      	blx	r3
	return 0;
}
10003d56:	2000      	movs	r0, #0
10003d58:	bd10      	pop	{r4, pc}

10003d5a <gpio_rpi_pin_interrupt_configure>:
{
10003d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003d5c:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10003d5e:	6907      	ldr	r7, [r0, #16]
{
10003d60:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10003d62:	210f      	movs	r1, #15
10003d64:	2200      	movs	r2, #0
10003d66:	0028      	movs	r0, r5
{
10003d68:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10003d6a:	f7ff f9d7 	bl	1000311c <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10003d6e:	2201      	movs	r2, #1
10003d70:	0013      	movs	r3, r2
10003d72:	40ab      	lsls	r3, r5
10003d74:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10003d76:	2380      	movs	r3, #128	; 0x80
10003d78:	039b      	lsls	r3, r3, #14
10003d7a:	429e      	cmp	r6, r3
10003d7c:	d105      	bne.n	10003d8a <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10003d7e:	68fb      	ldr	r3, [r7, #12]
10003d80:	9a01      	ldr	r2, [sp, #4]
10003d82:	4393      	bics	r3, r2
}
10003d84:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10003d86:	60fb      	str	r3, [r7, #12]
}
10003d88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
10003d8a:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10003d8c:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10003d8e:	04db      	lsls	r3, r3, #19
10003d90:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
10003d92:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10003d94:	01f6      	lsls	r6, r6, #7
10003d96:	d50d      	bpl.n	10003db4 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10003d98:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
10003d9a:	2b00      	cmp	r3, #0
10003d9c:	d001      	beq.n	10003da2 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10003d9e:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10003da0:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10003da2:	2201      	movs	r2, #1
10003da4:	0028      	movs	r0, r5
10003da6:	f7ff f9b9 	bl	1000311c <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10003daa:	68fb      	ldr	r3, [r7, #12]
10003dac:	9a01      	ldr	r2, [sp, #4]
10003dae:	431a      	orrs	r2, r3
10003db0:	0013      	movs	r3, r2
10003db2:	e7e7      	b.n	10003d84 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
10003db4:	2b00      	cmp	r3, #0
10003db6:	d0f4      	beq.n	10003da2 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
10003db8:	2302      	movs	r3, #2
10003dba:	e7f1      	b.n	10003da0 <gpio_rpi_pin_interrupt_configure+0x46>

10003dbc <gpio_rpi_configure>:
{
10003dbc:	b570      	push	{r4, r5, r6, lr}
10003dbe:	000d      	movs	r5, r1
10003dc0:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
10003dc2:	0793      	lsls	r3, r2, #30
10003dc4:	d423      	bmi.n	10003e0e <gpio_rpi_configure+0x52>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10003dc6:	2105      	movs	r1, #5
10003dc8:	0028      	movs	r0, r5
10003dca:	f7ff f947 	bl	1000305c <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10003dce:	03a3      	lsls	r3, r4, #14
10003dd0:	d50d      	bpl.n	10003dee <gpio_rpi_configure+0x32>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
10003dd2:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
10003dd4:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10003dd6:	40ab      	lsls	r3, r5
    sio_hw->gpio_oe_set = mask;
10003dd8:	0612      	lsls	r2, r2, #24
10003dda:	6253      	str	r3, [r2, #36]	; 0x24
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
10003ddc:	0321      	lsls	r1, r4, #12
10003dde:	d502      	bpl.n	10003de6 <gpio_rpi_configure+0x2a>
    sio_hw->gpio_set = mask;
10003de0:	6153      	str	r3, [r2, #20]
	return 0;
10003de2:	2000      	movs	r0, #0
}
10003de4:	bd70      	pop	{r4, r5, r6, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10003de6:	0364      	lsls	r4, r4, #13
10003de8:	d5fb      	bpl.n	10003de2 <gpio_rpi_configure+0x26>
    sio_hw->gpio_clr = mask;
10003dea:	6193      	str	r3, [r2, #24]
}
10003dec:	e7f9      	b.n	10003de2 <gpio_rpi_configure+0x26>
	} else if (flags & GPIO_INPUT) {
10003dee:	03e3      	lsls	r3, r4, #15
10003df0:	d5f7      	bpl.n	10003de2 <gpio_rpi_configure+0x26>
    uint32_t mask = 1ul << gpio;
10003df2:	2301      	movs	r3, #1
10003df4:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
10003df6:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10003df8:	40a9      	lsls	r1, r5
    sio_hw->gpio_oe_clr = mask;
10003dfa:	0612      	lsls	r2, r2, #24
10003dfc:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
10003dfe:	0962      	lsrs	r2, r4, #5
10003e00:	0921      	lsrs	r1, r4, #4
10003e02:	0028      	movs	r0, r5
10003e04:	401a      	ands	r2, r3
10003e06:	4019      	ands	r1, r3
10003e08:	f7ff f93e 	bl	10003088 <gpio_set_pulls>
10003e0c:	e7e9      	b.n	10003de2 <gpio_rpi_configure+0x26>
		return -ENOTSUP;
10003e0e:	2086      	movs	r0, #134	; 0x86
10003e10:	4240      	negs	r0, r0
10003e12:	e7e7      	b.n	10003de4 <gpio_rpi_configure+0x28>

10003e14 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10003e14:	b510      	push	{r4, lr}
10003e16:	2200      	movs	r2, #0
10003e18:	2103      	movs	r1, #3
10003e1a:	200d      	movs	r0, #13
10003e1c:	f7fe fb90 	bl	10002540 <z_arm_irq_priority_set>
10003e20:	200d      	movs	r0, #13
10003e22:	f7fe fb81 	bl	10002528 <arch_irq_enable>
10003e26:	bd10      	pop	{r4, pc}

10003e28 <uart_rpi_poll_in>:
{
10003e28:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10003e2a:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10003e2c:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10003e2e:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10003e30:	699c      	ldr	r4, [r3, #24]
10003e32:	0020      	movs	r0, r4
10003e34:	4010      	ands	r0, r2
10003e36:	4214      	tst	r4, r2
10003e38:	d102      	bne.n	10003e40 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10003e3a:	681b      	ldr	r3, [r3, #0]
10003e3c:	700b      	strb	r3, [r1, #0]
}
10003e3e:	bd10      	pop	{r4, pc}
		return -1;
10003e40:	2001      	movs	r0, #1
10003e42:	4240      	negs	r0, r0
10003e44:	e7fb      	b.n	10003e3e <uart_rpi_poll_in+0x16>

10003e46 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10003e46:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003e48:	6843      	ldr	r3, [r0, #4]
10003e4a:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10003e4c:	6998      	ldr	r0, [r3, #24]
10003e4e:	4210      	tst	r0, r2
10003e50:	d1fc      	bne.n	10003e4c <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10003e52:	6019      	str	r1, [r3, #0]
}
10003e54:	4770      	bx	lr

10003e56 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003e56:	6843      	ldr	r3, [r0, #4]
10003e58:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10003e5a:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10003e5c:	0518      	lsls	r0, r3, #20
10003e5e:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10003e60:	055a      	lsls	r2, r3, #21
10003e62:	d501      	bpl.n	10003e68 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10003e64:	2208      	movs	r2, #8
10003e66:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10003e68:	059a      	lsls	r2, r3, #22
10003e6a:	d501      	bpl.n	10003e70 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10003e6c:	2202      	movs	r2, #2
10003e6e:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10003e70:	05db      	lsls	r3, r3, #23
10003e72:	d501      	bpl.n	10003e78 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10003e74:	2304      	movs	r3, #4
10003e76:	4318      	orrs	r0, r3
}
10003e78:	4770      	bx	lr

10003e7a <uart_rpi_fifo_fill>:
{
10003e7a:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10003e7c:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003e7e:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10003e80:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10003e82:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10003e84:	699c      	ldr	r4, [r3, #24]
10003e86:	422c      	tst	r4, r5
10003e88:	d102      	bne.n	10003e90 <uart_rpi_fifo_fill+0x16>
10003e8a:	1a14      	subs	r4, r2, r0
10003e8c:	2c00      	cmp	r4, #0
10003e8e:	dc00      	bgt.n	10003e92 <uart_rpi_fifo_fill+0x18>
}
10003e90:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10003e92:	5c0c      	ldrb	r4, [r1, r0]
10003e94:	3001      	adds	r0, #1
10003e96:	601c      	str	r4, [r3, #0]
10003e98:	e7f4      	b.n	10003e84 <uart_rpi_fifo_fill+0xa>

10003e9a <uart_rpi_fifo_read>:
{
10003e9a:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10003e9c:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10003e9e:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10003ea0:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10003ea2:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10003ea4:	699c      	ldr	r4, [r3, #24]
10003ea6:	422c      	tst	r4, r5
10003ea8:	d102      	bne.n	10003eb0 <uart_rpi_fifo_read+0x16>
10003eaa:	1a14      	subs	r4, r2, r0
10003eac:	2c00      	cmp	r4, #0
10003eae:	dc00      	bgt.n	10003eb2 <uart_rpi_fifo_read+0x18>
}
10003eb0:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10003eb2:	681c      	ldr	r4, [r3, #0]
10003eb4:	540c      	strb	r4, [r1, r0]
10003eb6:	3001      	adds	r0, #1
10003eb8:	e7f4      	b.n	10003ea4 <uart_rpi_fifo_read+0xa>

10003eba <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003eba:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003ebc:	6843      	ldr	r3, [r0, #4]
10003ebe:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003ec0:	6b99      	ldr	r1, [r3, #56]	; 0x38
10003ec2:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10003ec4:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003ec6:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10003ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003eca:	438a      	bics	r2, r1
10003ecc:	635a      	str	r2, [r3, #52]	; 0x34
}
10003ece:	4770      	bx	lr

10003ed0 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10003ed0:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003ed2:	6843      	ldr	r3, [r0, #4]
10003ed4:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10003ed6:	6b93      	ldr	r3, [r2, #56]	; 0x38
10003ed8:	438b      	bics	r3, r1
10003eda:	6393      	str	r3, [r2, #56]	; 0x38
}
10003edc:	4770      	bx	lr

10003ede <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003ede:	6843      	ldr	r3, [r0, #4]
10003ee0:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10003ee2:	6c18      	ldr	r0, [r3, #64]	; 0x40
10003ee4:	0680      	lsls	r0, r0, #26
10003ee6:	0fc0      	lsrs	r0, r0, #31
}
10003ee8:	4770      	bx	lr

10003eea <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10003eea:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10003eec:	6843      	ldr	r3, [r0, #4]
10003eee:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10003ef0:	6b99      	ldr	r1, [r3, #56]	; 0x38
10003ef2:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10003ef4:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10003ef6:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10003ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003efa:	438a      	bics	r2, r1
10003efc:	635a      	str	r2, [r3, #52]	; 0x34
}
10003efe:	4770      	bx	lr

10003f00 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10003f00:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10003f02:	6843      	ldr	r3, [r0, #4]
10003f04:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10003f06:	6b93      	ldr	r3, [r2, #56]	; 0x38
10003f08:	438b      	bics	r3, r1
10003f0a:	6393      	str	r3, [r2, #56]	; 0x38
}
10003f0c:	4770      	bx	lr

10003f0e <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003f0e:	6843      	ldr	r3, [r0, #4]
10003f10:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10003f12:	6998      	ldr	r0, [r3, #24]
10003f14:	0600      	lsls	r0, r0, #24
10003f16:	0fc0      	lsrs	r0, r0, #31
}
10003f18:	4770      	bx	lr

10003f1a <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003f1a:	6843      	ldr	r3, [r0, #4]
10003f1c:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10003f1e:	6c18      	ldr	r0, [r3, #64]	; 0x40
10003f20:	06c0      	lsls	r0, r0, #27
10003f22:	0fc0      	lsrs	r0, r0, #31
}
10003f24:	4770      	bx	lr

10003f26 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003f26:	6843      	ldr	r3, [r0, #4]
10003f28:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10003f2a:	23f8      	movs	r3, #248	; 0xf8
10003f2c:	6b91      	ldr	r1, [r2, #56]	; 0x38
10003f2e:	00db      	lsls	r3, r3, #3
10003f30:	430b      	orrs	r3, r1
10003f32:	6393      	str	r3, [r2, #56]	; 0x38
}
10003f34:	4770      	bx	lr

10003f36 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10003f36:	b510      	push	{r4, lr}
10003f38:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10003f3a:	f7ff ffee 	bl	10003f1a <uart_rpi_irq_rx_ready>
10003f3e:	0003      	movs	r3, r0
10003f40:	2001      	movs	r0, #1
10003f42:	2b00      	cmp	r3, #0
10003f44:	d104      	bne.n	10003f50 <uart_rpi_irq_is_pending+0x1a>
10003f46:	0020      	movs	r0, r4
10003f48:	f7ff ffc9 	bl	10003ede <uart_rpi_irq_tx_ready>
10003f4c:	1e43      	subs	r3, r0, #1
10003f4e:	4198      	sbcs	r0, r3
}
10003f50:	bd10      	pop	{r4, pc}

10003f52 <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10003f52:	2001      	movs	r0, #1
10003f54:	4770      	bx	lr

10003f56 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10003f56:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10003f58:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10003f5a:	60da      	str	r2, [r3, #12]
}
10003f5c:	4770      	bx	lr

10003f5e <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10003f5e:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10003f60:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
10003f62:	6893      	ldr	r3, [r2, #8]
10003f64:	2b00      	cmp	r3, #0
10003f66:	d001      	beq.n	10003f6c <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10003f68:	68d1      	ldr	r1, [r2, #12]
10003f6a:	4798      	blx	r3
	}
}
10003f6c:	bd10      	pop	{r4, pc}

10003f6e <uart_rpi_config_get>:
{
10003f6e:	0003      	movs	r3, r0
10003f70:	b510      	push	{r4, lr}
10003f72:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
10003f74:	2208      	movs	r2, #8
10003f76:	6919      	ldr	r1, [r3, #16]
10003f78:	f7ff fe8b 	bl	10003c92 <memcpy>
}
10003f7c:	2000      	movs	r0, #0
10003f7e:	bd10      	pop	{r4, pc}

10003f80 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10003f80:	b510      	push	{r4, lr}
10003f82:	2200      	movs	r2, #0
10003f84:	2103      	movs	r1, #3
10003f86:	2014      	movs	r0, #20
10003f88:	f7fe fada 	bl	10002540 <z_arm_irq_priority_set>
10003f8c:	2014      	movs	r0, #20
10003f8e:	f7fe facb 	bl	10002528 <arch_irq_enable>
10003f92:	bd10      	pop	{r4, pc}

10003f94 <uart_rpi_configure>:
{
10003f94:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10003f96:	6843      	ldr	r3, [r0, #4]
{
10003f98:	0006      	movs	r6, r0
10003f9a:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10003f9c:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10003f9e:	6809      	ldr	r1, [r1, #0]
10003fa0:	6818      	ldr	r0, [r3, #0]
10003fa2:	f7ff f8eb 	bl	1000317c <uart_set_baudrate>
	if (baudrate == 0) {
10003fa6:	2800      	cmp	r0, #0
10003fa8:	d102      	bne.n	10003fb0 <uart_rpi_configure+0x1c>
		return -EINVAL;
10003faa:	2016      	movs	r0, #22
10003fac:	4240      	negs	r0, r0
}
10003fae:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10003fb0:	79a3      	ldrb	r3, [r4, #6]
10003fb2:	7962      	ldrb	r2, [r4, #5]
10003fb4:	7921      	ldrb	r1, [r4, #4]
10003fb6:	6870      	ldr	r0, [r6, #4]
10003fb8:	f7fe fd98 	bl	10002aec <uart_rpi_set_format.isra.0>
10003fbc:	2800      	cmp	r0, #0
10003fbe:	d1f4      	bne.n	10003faa <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10003fc0:	cc06      	ldmia	r4!, {r1, r2}
10003fc2:	c506      	stmia	r5!, {r1, r2}
	return 0;
10003fc4:	e7f3      	b.n	10003fae <uart_rpi_configure+0x1a>

10003fc6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10003fc6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10003fc8:	6803      	ldr	r3, [r0, #0]
10003fca:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10003fcc:	7905      	ldrb	r5, [r0, #4]
10003fce:	6804      	ldr	r4, [r0, #0]
10003fd0:	00ed      	lsls	r5, r5, #3
10003fd2:	1964      	adds	r4, r4, r5
10003fd4:	42a3      	cmp	r3, r4
10003fd6:	d302      	bcc.n	10003fde <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10003fd8:	2002      	movs	r0, #2
10003fda:	4240      	negs	r0, r0
}
10003fdc:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10003fde:	795c      	ldrb	r4, [r3, #5]
10003fe0:	428c      	cmp	r4, r1
10003fe2:	d001      	beq.n	10003fe8 <pinctrl_lookup_state+0x22>
		(*state)++;
10003fe4:	3308      	adds	r3, #8
10003fe6:	e7f0      	b.n	10003fca <pinctrl_lookup_state+0x4>
			return 0;
10003fe8:	2000      	movs	r0, #0
10003fea:	e7f7      	b.n	10003fdc <pinctrl_lookup_state+0x16>

10003fec <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003fee:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10003ff0:	2601      	movs	r6, #1
10003ff2:	008d      	lsls	r5, r1, #2
10003ff4:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10003ff6:	42ac      	cmp	r4, r5
10003ff8:	d101      	bne.n	10003ffe <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10003ffa:	2000      	movs	r0, #0
10003ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10003ffe:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10004000:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
10004002:	06c0      	lsls	r0, r0, #27
10004004:	0ec0      	lsrs	r0, r0, #27
10004006:	f000 f8b8 	bl	1000417a <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
1000400a:	8821      	ldrh	r1, [r4, #0]
1000400c:	7820      	ldrb	r0, [r4, #0]
1000400e:	05c9      	lsls	r1, r1, #23
10004010:	06c0      	lsls	r0, r0, #27
10004012:	0f09      	lsrs	r1, r1, #28
10004014:	0ec0      	lsrs	r0, r0, #27
10004016:	f7ff f821 	bl	1000305c <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
1000401a:	7861      	ldrb	r1, [r4, #1]
1000401c:	7820      	ldrb	r0, [r4, #0]
1000401e:	09ca      	lsrs	r2, r1, #7
10004020:	06c0      	lsls	r0, r0, #27
10004022:	0649      	lsls	r1, r1, #25
10004024:	0fc9      	lsrs	r1, r1, #31
10004026:	0ec0      	lsrs	r0, r0, #27
10004028:	f7ff f82e 	bl	10003088 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
1000402c:	7861      	ldrb	r1, [r4, #1]
1000402e:	7820      	ldrb	r0, [r4, #0]
10004030:	06c9      	lsls	r1, r1, #27
10004032:	06c0      	lsls	r0, r0, #27
10004034:	0f09      	lsrs	r1, r1, #28
10004036:	0ec0      	lsrs	r0, r0, #27
10004038:	f7ff f854 	bl	100030e4 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000403c:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000403e:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004040:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10004042:	06c0      	lsls	r0, r0, #27
10004044:	4031      	ands	r1, r6
10004046:	0ec0      	lsrs	r0, r0, #27
10004048:	f7ff f83e 	bl	100030c8 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
1000404c:	78a1      	ldrb	r1, [r4, #2]
1000404e:	7820      	ldrb	r0, [r4, #0]
10004050:	0789      	lsls	r1, r1, #30
10004052:	06c0      	lsls	r0, r0, #27
10004054:	0fc9      	lsrs	r1, r1, #31
10004056:	0ec0      	lsrs	r0, r0, #27
10004058:	f7ff f828 	bl	100030ac <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
1000405c:	78a1      	ldrb	r1, [r4, #2]
1000405e:	7820      	ldrb	r0, [r4, #0]
10004060:	07c9      	lsls	r1, r1, #31
10004062:	06c0      	lsls	r0, r0, #27
10004064:	0fc9      	lsrs	r1, r1, #31
10004066:	0ec0      	lsrs	r0, r0, #27
10004068:	f7ff f87a 	bl	10003160 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
1000406c:	003c      	movs	r4, r7
1000406e:	e7c2      	b.n	10003ff6 <pinctrl_configure_pins+0xa>

10004070 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10004070:	2000      	movs	r0, #0
10004072:	4770      	bx	lr

10004074 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10004074:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10004076:	7900      	ldrb	r0, [r0, #4]
10004078:	2802      	cmp	r0, #2
1000407a:	d009      	beq.n	10004090 <reset_rpi_read_register.isra.0+0x1c>
1000407c:	2804      	cmp	r0, #4
1000407e:	d00b      	beq.n	10004098 <reset_rpi_read_register.isra.0+0x24>
10004080:	2801      	cmp	r0, #1
10004082:	d10c      	bne.n	1000409e <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
10004084:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
10004086:	780b      	ldrb	r3, [r1, #0]
10004088:	b2db      	uxtb	r3, r3
	return 0;
1000408a:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
1000408c:	6013      	str	r3, [r2, #0]
}
1000408e:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10004090:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
10004092:	880b      	ldrh	r3, [r1, #0]
10004094:	b29b      	uxth	r3, r3
		break;
10004096:	e7f8      	b.n	1000408a <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10004098:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
1000409a:	680b      	ldr	r3, [r1, #0]
		break;
1000409c:	e7f5      	b.n	1000408a <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
1000409e:	2016      	movs	r0, #22
100040a0:	4240      	negs	r0, r0
100040a2:	e7f4      	b.n	1000408e <reset_rpi_read_register.isra.0+0x1a>

100040a4 <reset_rpi_update>:
{
100040a4:	0003      	movs	r3, r0
100040a6:	b5f0      	push	{r4, r5, r6, r7, lr}
100040a8:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
100040aa:	685f      	ldr	r7, [r3, #4]
{
100040ac:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
100040ae:	793e      	ldrb	r6, [r7, #4]
{
100040b0:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100040b2:	00f1      	lsls	r1, r6, #3
100040b4:	f7fc f8c8 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100040b8:	aa03      	add	r2, sp, #12
100040ba:	0004      	movs	r4, r0
100040bc:	000d      	movs	r5, r1
100040be:	b281      	uxth	r1, r0
100040c0:	0038      	movs	r0, r7
100040c2:	f7ff ffd7 	bl	10004074 <reset_rpi_read_register.isra.0>
	if (ret) {
100040c6:	2800      	cmp	r0, #0
100040c8:	d117      	bne.n	100040fa <reset_rpi_update+0x56>
		value |= BIT(regbit);
100040ca:	2201      	movs	r2, #1
100040cc:	9903      	ldr	r1, [sp, #12]
100040ce:	b2ed      	uxtb	r5, r5
100040d0:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
100040d2:	000b      	movs	r3, r1
		value |= BIT(regbit);
100040d4:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
100040d6:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
100040d8:	797d      	ldrb	r5, [r7, #5]
100040da:	9a01      	ldr	r2, [sp, #4]
100040dc:	4295      	cmp	r5, r2
100040de:	d001      	beq.n	100040e4 <reset_rpi_update+0x40>
		value |= BIT(regbit);
100040e0:	4663      	mov	r3, ip
100040e2:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
100040e4:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
100040e6:	2e02      	cmp	r6, #2
100040e8:	d009      	beq.n	100040fe <reset_rpi_update+0x5a>
100040ea:	2e04      	cmp	r6, #4
100040ec:	d00c      	beq.n	10004108 <reset_rpi_update+0x64>
100040ee:	2e01      	cmp	r6, #1
100040f0:	d10e      	bne.n	10004110 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
100040f2:	b2a4      	uxth	r4, r4
100040f4:	b2db      	uxtb	r3, r3
100040f6:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
100040f8:	7023      	strb	r3, [r4, #0]
}
100040fa:	b005      	add	sp, #20
100040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
100040fe:	b2a4      	uxth	r4, r4
10004100:	b29b      	uxth	r3, r3
10004102:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10004104:	8023      	strh	r3, [r4, #0]
}
10004106:	e7f8      	b.n	100040fa <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
10004108:	b2a4      	uxth	r4, r4
1000410a:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
1000410c:	6023      	str	r3, [r4, #0]
}
1000410e:	e7f4      	b.n	100040fa <reset_rpi_update+0x56>
	switch (config->reg_width) {
10004110:	2016      	movs	r0, #22
10004112:	4240      	negs	r0, r0
10004114:	e7f1      	b.n	100040fa <reset_rpi_update+0x56>

10004116 <reset_rpi_line_assert>:
{
10004116:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10004118:	2201      	movs	r2, #1
1000411a:	f7ff ffc3 	bl	100040a4 <reset_rpi_update>
}
1000411e:	bd10      	pop	{r4, pc}

10004120 <reset_rpi_line_deassert>:
{
10004120:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10004122:	2200      	movs	r2, #0
10004124:	f7ff ffbe 	bl	100040a4 <reset_rpi_update>
}
10004128:	bd10      	pop	{r4, pc}

1000412a <reset_rpi_line_toggle>:
{
1000412a:	b570      	push	{r4, r5, r6, lr}
1000412c:	0004      	movs	r4, r0
1000412e:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10004130:	f7ff fff1 	bl	10004116 <reset_rpi_line_assert>
	if (ret) {
10004134:	2800      	cmp	r0, #0
10004136:	d103      	bne.n	10004140 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10004138:	0029      	movs	r1, r5
1000413a:	0020      	movs	r0, r4
1000413c:	f7ff fff0 	bl	10004120 <reset_rpi_line_deassert>
}
10004140:	bd70      	pop	{r4, r5, r6, pc}

10004142 <reset_rpi_status>:
{
10004142:	0003      	movs	r3, r0
10004144:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10004146:	685e      	ldr	r6, [r3, #4]
{
10004148:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000414a:	7931      	ldrb	r1, [r6, #4]
{
1000414c:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
1000414e:	00c9      	lsls	r1, r1, #3
10004150:	f7fc f87a 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10004154:	aa01      	add	r2, sp, #4
10004156:	000d      	movs	r5, r1
10004158:	b281      	uxth	r1, r0
1000415a:	0030      	movs	r0, r6
1000415c:	f7ff ff8a 	bl	10004074 <reset_rpi_read_register.isra.0>
	if (ret) {
10004160:	2800      	cmp	r0, #0
10004162:	d109      	bne.n	10004178 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10004164:	9b01      	ldr	r3, [sp, #4]
10004166:	b2ed      	uxtb	r5, r5
10004168:	40eb      	lsrs	r3, r5
1000416a:	2201      	movs	r2, #1
1000416c:	439a      	bics	r2, r3
1000416e:	7973      	ldrb	r3, [r6, #5]
10004170:	4259      	negs	r1, r3
10004172:	414b      	adcs	r3, r1
10004174:	4053      	eors	r3, r2
10004176:	7023      	strb	r3, [r4, #0]
}
10004178:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

1000417a <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000417a:	2301      	movs	r3, #1
1000417c:	22d0      	movs	r2, #208	; 0xd0
1000417e:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10004180:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10004182:	0612      	lsls	r2, r2, #24
10004184:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10004186:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10004188:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000418a:	f7fe ff67 	bl	1000305c <gpio_set_function>
}
1000418e:	bd10      	pop	{r4, pc}

10004190 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10004190:	4770      	bx	lr

10004192 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10004192:	2800      	cmp	r0, #0
10004194:	d009      	beq.n	100041aa <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10004196:	2301      	movs	r3, #1
10004198:	68c2      	ldr	r2, [r0, #12]
1000419a:	2000      	movs	r0, #0
1000419c:	7851      	ldrb	r1, [r2, #1]
1000419e:	4219      	tst	r1, r3
100041a0:	d002      	beq.n	100041a8 <z_device_is_ready+0x16>
100041a2:	7810      	ldrb	r0, [r2, #0]
100041a4:	4242      	negs	r2, r0
100041a6:	4150      	adcs	r0, r2
100041a8:	4018      	ands	r0, r3
}
100041aa:	4770      	bx	lr

100041ac <arch_system_halt>:
100041ac:	f3ef 8310 	mrs	r3, PRIMASK
100041b0:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
100041b2:	e7fe      	b.n	100041b2 <arch_system_halt+0x6>

100041b4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
100041b4:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
100041b6:	f7ff fff9 	bl	100041ac <arch_system_halt>

100041ba <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100041ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100041bc:	0005      	movs	r5, r0
100041be:	000e      	movs	r6, r1
100041c0:	f3ef 8710 	mrs	r7, PRIMASK
100041c4:	b672      	cpsid	i
	return z_impl_z_current_get();
100041c6:	f7ff fb07 	bl	100037d8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100041ca:	0031      	movs	r1, r6
100041cc:	0004      	movs	r4, r0
100041ce:	0028      	movs	r0, r5
100041d0:	f7ff fff0 	bl	100041b4 <k_sys_fatal_error_handler>
	if (key != 0U) {
100041d4:	2f00      	cmp	r7, #0
100041d6:	d102      	bne.n	100041de <z_fatal_error+0x24>
	__asm__ volatile(
100041d8:	b662      	cpsie	i
100041da:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
100041de:	0020      	movs	r0, r4
100041e0:	f7fe fb08 	bl	100027f4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100041e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100041e6 <z_early_memset>:
{
100041e6:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
100041e8:	f7ff fd5c 	bl	10003ca4 <memset>
}
100041ec:	bd10      	pop	{r4, pc}

100041ee <z_early_memcpy>:
{
100041ee:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
100041f0:	f7ff fd4f 	bl	10003c92 <memcpy>
}
100041f4:	bd10      	pop	{r4, pc}

100041f6 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
100041f6:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100041f8:	f3ef 8310 	mrs	r3, PRIMASK
100041fc:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
100041fe:	f7fe f98b 	bl	10002518 <arch_cpu_idle>
10004202:	e7f9      	b.n	100041f8 <idle+0x2>

10004204 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10004204:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10004206:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10004208:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000420a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000420c:	2300      	movs	r3, #0
1000420e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10004210:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10004212:	4770      	bx	lr

10004214 <unpend_thread_no_timeout>:
{
10004214:	b510      	push	{r4, lr}
10004216:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10004218:	f7ff fff4 	bl	10004204 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
1000421c:	2202      	movs	r2, #2
1000421e:	7b63      	ldrb	r3, [r4, #13]
10004220:	4393      	bics	r3, r2
10004222:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10004224:	2300      	movs	r3, #0
10004226:	60a3      	str	r3, [r4, #8]
}
10004228:	bd10      	pop	{r4, pc}

1000422a <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
1000422a:	3818      	subs	r0, #24
{
1000422c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
1000422e:	0004      	movs	r4, r0
10004230:	f3ef 8510 	mrs	r5, PRIMASK
10004234:	b672      	cpsid	i
		if (!killed) {
10004236:	2328      	movs	r3, #40	; 0x28
10004238:	7b42      	ldrb	r2, [r0, #13]
1000423a:	421a      	tst	r2, r3
1000423c:	d10b      	bne.n	10004256 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
1000423e:	6883      	ldr	r3, [r0, #8]
10004240:	2b00      	cmp	r3, #0
10004242:	d001      	beq.n	10004248 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
10004244:	f7ff ffe6 	bl	10004214 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10004248:	2214      	movs	r2, #20
1000424a:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
1000424c:	0020      	movs	r0, r4
1000424e:	4393      	bics	r3, r2
10004250:	7363      	strb	r3, [r4, #13]
10004252:	f7ff f9c7 	bl	100035e4 <ready_thread>
	if (key != 0U) {
10004256:	2d00      	cmp	r5, #0
10004258:	d102      	bne.n	10004260 <z_thread_timeout+0x36>
	__asm__ volatile(
1000425a:	b662      	cpsie	i
1000425c:	f3bf 8f6f 	isb	sy
}
10004260:	bd70      	pop	{r4, r5, r6, pc}

10004262 <z_ready_thread>:
{
10004262:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004264:	f3ef 8410 	mrs	r4, PRIMASK
10004268:	b672      	cpsid	i
			ready_thread(thread);
1000426a:	f7ff f9bb 	bl	100035e4 <ready_thread>
	if (key != 0U) {
1000426e:	2c00      	cmp	r4, #0
10004270:	d102      	bne.n	10004278 <z_ready_thread+0x16>
	__asm__ volatile(
10004272:	b662      	cpsie	i
10004274:	f3bf 8f6f 	isb	sy
}
10004278:	bd10      	pop	{r4, pc}

1000427a <z_reschedule_irqlock>:
{
1000427a:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
1000427c:	2800      	cmp	r0, #0
1000427e:	d105      	bne.n	1000428c <z_reschedule_irqlock+0x12>
10004280:	f3ef 8005 	mrs	r0, IPSR
10004284:	2800      	cmp	r0, #0
10004286:	d102      	bne.n	1000428e <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10004288:	f7fe f99c 	bl	100025c4 <arch_swap>
}
1000428c:	bd10      	pop	{r4, pc}
1000428e:	b662      	cpsie	i
10004290:	f3bf 8f6f 	isb	sy
10004294:	e7fa      	b.n	1000428c <z_reschedule_irqlock+0x12>

10004296 <z_reschedule_unlocked>:
{
10004296:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004298:	f3ef 8010 	mrs	r0, PRIMASK
1000429c:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
1000429e:	f7ff ffec 	bl	1000427a <z_reschedule_irqlock>
}
100042a2:	bd10      	pop	{r4, pc}

100042a4 <z_abort_timeout>:
{
100042a4:	b510      	push	{r4, lr}
100042a6:	f3ef 8410 	mrs	r4, PRIMASK
100042aa:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
100042ac:	6803      	ldr	r3, [r0, #0]
100042ae:	2b00      	cmp	r3, #0
100042b0:	d008      	beq.n	100042c4 <z_abort_timeout+0x20>
			remove_timeout(to);
100042b2:	f7ff fb45 	bl	10003940 <remove_timeout>
			ret = 0;
100042b6:	2000      	movs	r0, #0
	if (key != 0U) {
100042b8:	2c00      	cmp	r4, #0
100042ba:	d102      	bne.n	100042c2 <z_abort_timeout+0x1e>
	__asm__ volatile(
100042bc:	b662      	cpsie	i
100042be:	f3bf 8f6f 	isb	sy
}
100042c2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
100042c4:	2016      	movs	r0, #22
100042c6:	4240      	negs	r0, r0
100042c8:	e7f6      	b.n	100042b8 <z_abort_timeout+0x14>

100042ca <z_set_timeout_expiry>:
{
100042ca:	b570      	push	{r4, r5, r6, lr}
100042cc:	0004      	movs	r4, r0
100042ce:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
100042d0:	f3ef 8610 	mrs	r6, PRIMASK
100042d4:	b672      	cpsid	i
		int next_to = next_timeout();
100042d6:	f7ff fb07 	bl	100038e8 <next_timeout>
			      || (ticks <= next_to);
100042da:	2801      	cmp	r0, #1
100042dc:	dd06      	ble.n	100042ec <z_set_timeout_expiry+0x22>
100042de:	42a0      	cmp	r0, r4
100042e0:	db04      	blt.n	100042ec <z_set_timeout_expiry+0x22>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
100042e2:	dd00      	ble.n	100042e6 <z_set_timeout_expiry+0x1c>
100042e4:	0020      	movs	r0, r4
100042e6:	0029      	movs	r1, r5
100042e8:	f7fe fcc2 	bl	10002c70 <sys_clock_set_timeout>
	if (key != 0U) {
100042ec:	2e00      	cmp	r6, #0
100042ee:	d102      	bne.n	100042f6 <z_set_timeout_expiry+0x2c>
	__asm__ volatile(
100042f0:	b662      	cpsie	i
100042f2:	f3bf 8f6f 	isb	sy
}
100042f6:	bd70      	pop	{r4, r5, r6, pc}
