/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/tatiana/projects/zephyros-rp2040-example3/ControlServos/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   /home/tatiana/projects/zephyros-rp2040-example3/ControlServos/dts/bindings, $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /soc
 *   4   /soc/interrupt-controller@e000e100
 *   5   /soc/reset-controller@4000c000
 *   6   /soc/system-clk
 *   7   /soc/pin-controller@40014000
 *   8   /soc/pin-controller@40014000/pwm_ch1b_default
 *   9   /soc/pwm@40050000
 *   10  /servo0
 *   11  /servo1
 *   12  /cpus
 *   13  /cpus/cpu@0
 *   14  /cpus/cpu@1
 *   15  /leds
 *   16  /soc/gpio@40014000
 *   17  /leds/led_0
 *   18  /pwm_leds
 *   19  /pwm_leds/pwm_led_0
 *   20  /soc/pin-controller@40014000/adc_default
 *   21  /soc/adc@4004c000
 *   22  /soc/pin-controller@40014000/i2c0_default
 *   23  /soc/i2c@40044000
 *   24  /soc/pin-controller@40014000/i2c1_default
 *   25  /soc/i2c@40048000
 *   26  /soc/memory@20000000
 *   27  /soc/peripheral-clk
 *   28  /soc/pin-controller@40014000/spi0_default
 *   29  /soc/spi@4003c000
 *   30  /soc/spi@40040000
 *   31  /soc/timer@e000e010
 *   32  /soc/pin-controller@40014000/uart0_default
 *   33  /soc/uart@40034000
 *   34  /soc/uart@40038000
 *   35  /soc/usbd@50100000
 *   36  /xtal-clk
 *   37  /soc/watchdog@40058000
 *   38  /soc/flash-controller@10000000
 *   39  /soc/flash-controller@10000000/flash@0
 *   40  /soc/flash-controller@10000000/flash@0/partitions
 *   41  /soc/flash-controller@10000000/flash@0/partitions/partition@0
 *   42  /soc/flash-controller@10000000/flash@0/partitions/partition@100
 *   43  /soc/pin-controller@40014000/adc_default/group1
 *   44  /soc/pin-controller@40014000/i2c0_default/group1
 *   45  /soc/pin-controller@40014000/i2c1_default/group1
 *   46  /soc/pin-controller@40014000/pwm_ch1b_default/group1
 *   47  /soc/pin-controller@40014000/pwm_ch4b_default
 *   48  /soc/pin-controller@40014000/pwm_ch4b_default/group1
 *   49  /soc/pin-controller@40014000/spi0_default/group1
 *   50  /soc/pin-controller@40014000/spi0_default/group2
 *   51  /soc/pin-controller@40014000/uart0_default/group1
 *   52  /soc/pin-controller@40014000/uart0_default/group2
 *   53  /soc/pwm@40050000/channel0@0
 *   54  /soc/pwm@40050000/channel1@1
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_leds) fn(DT_N_S_xtal_clk) fn(DT_N_S_pwm_leds) fn(DT_N_S_servo1) fn(DT_N_S_servo0)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_xtal_clk) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pwm_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo0)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_xtal_clk, __VA_ARGS__) fn(DT_N_S_pwm_leds, __VA_ARGS__) fn(DT_N_S_servo1, __VA_ARGS__) fn(DT_N_S_servo0, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_xtal_clk, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pwm_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo0, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_leds) fn(DT_N_S_xtal_clk) fn(DT_N_S_pwm_leds) fn(DT_N_S_servo1) fn(DT_N_S_servo0)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_xtal_clk) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pwm_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo0)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_xtal_clk, __VA_ARGS__) fn(DT_N_S_pwm_leds, __VA_ARGS__) fn(DT_N_S_servo1, __VA_ARGS__) fn(DT_N_S_servo0, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_xtal_clk, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pwm_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_servo0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /soc */ \
	10, /* /servo0 */ \
	11, /* /servo1 */ \
	12, /* /cpus */ \
	15, /* /leds */ \
	18, /* /pwm_leds */ \
	36, /* /xtal-clk */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_flash_controller_10000000) fn(DT_N_S_soc_S_peripheral_clk) fn(DT_N_S_soc_S_system_clk) fn(DT_N_S_soc_S_reset_controller_4000c000) fn(DT_N_S_soc_S_pin_controller_40014000) fn(DT_N_S_soc_S_gpio_40014000) fn(DT_N_S_soc_S_uart_40034000) fn(DT_N_S_soc_S_uart_40038000) fn(DT_N_S_soc_S_spi_4003c000) fn(DT_N_S_soc_S_spi_40040000) fn(DT_N_S_soc_S_adc_4004c000) fn(DT_N_S_soc_S_i2c_40044000) fn(DT_N_S_soc_S_i2c_40048000) fn(DT_N_S_soc_S_watchdog_40058000) fn(DT_N_S_soc_S_usbd_50100000) fn(DT_N_S_soc_S_pwm_40050000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_peripheral_clk) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_system_clk) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_reset_controller_4000c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40014000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_40034000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_40038000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_4003c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_40040000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_4004c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40044000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40048000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_40058000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usbd_50100000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_10000000, __VA_ARGS__) fn(DT_N_S_soc_S_peripheral_clk, __VA_ARGS__) fn(DT_N_S_soc_S_system_clk, __VA_ARGS__) fn(DT_N_S_soc_S_reset_controller_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40014000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40034000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40038000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_4003c000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40040000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_4004c000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40044000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40048000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_40058000, __VA_ARGS__) fn(DT_N_S_soc_S_usbd_50100000, __VA_ARGS__) fn(DT_N_S_soc_S_pwm_40050000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_peripheral_clk, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_system_clk, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_reset_controller_4000c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40014000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_40034000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_40038000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_4003c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_40040000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_4004c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40044000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40048000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_40058000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usbd_50100000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_flash_controller_10000000) fn(DT_N_S_soc_S_peripheral_clk) fn(DT_N_S_soc_S_system_clk) fn(DT_N_S_soc_S_reset_controller_4000c000) fn(DT_N_S_soc_S_pin_controller_40014000) fn(DT_N_S_soc_S_gpio_40014000) fn(DT_N_S_soc_S_uart_40034000) fn(DT_N_S_soc_S_spi_4003c000) fn(DT_N_S_soc_S_adc_4004c000) fn(DT_N_S_soc_S_i2c_40044000) fn(DT_N_S_soc_S_i2c_40048000) fn(DT_N_S_soc_S_watchdog_40058000) fn(DT_N_S_soc_S_usbd_50100000) fn(DT_N_S_soc_S_pwm_40050000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_peripheral_clk) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_system_clk) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_reset_controller_4000c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40014000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_40034000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_4003c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_4004c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40044000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40048000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_40058000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usbd_50100000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_10000000, __VA_ARGS__) fn(DT_N_S_soc_S_peripheral_clk, __VA_ARGS__) fn(DT_N_S_soc_S_system_clk, __VA_ARGS__) fn(DT_N_S_soc_S_reset_controller_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40014000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40034000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_4003c000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_4004c000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40044000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40048000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_40058000, __VA_ARGS__) fn(DT_N_S_soc_S_usbd_50100000, __VA_ARGS__) fn(DT_N_S_soc_S_pwm_40050000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_peripheral_clk, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_system_clk, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_reset_controller_4000c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40014000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_40034000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_4003c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_4004c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40044000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40048000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_40058000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usbd_50100000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	6, /* /soc/system-clk */ \
	7, /* /soc/pin-controller@40014000 */ \
	9, /* /soc/pwm@40050000 */ \
	16, /* /soc/gpio@40014000 */ \
	21, /* /soc/adc@4004c000 */ \
	23, /* /soc/i2c@40044000 */ \
	25, /* /soc/i2c@40048000 */ \
	26, /* /soc/memory@20000000 */ \
	27, /* /soc/peripheral-clk */ \
	29, /* /soc/spi@4003c000 */ \
	30, /* /soc/spi@40040000 */ \
	31, /* /soc/timer@e000e010 */ \
	33, /* /soc/uart@40034000 */ \
	34, /* /soc/uart@40038000 */ \
	35, /* /soc/usbd@50100000 */ \
	37, /* /soc/watchdog@40058000 */ \
	38, /* /soc/flash-controller@10000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v6m-nvic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/arm,v6m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	9, /* /soc/pwm@40050000 */ \
	16, /* /soc/gpio@40014000 */ \
	21, /* /soc/adc@4004c000 */ \
	23, /* /soc/i2c@40044000 */ \
	25, /* /soc/i2c@40048000 */ \
	29, /* /soc/spi@4003c000 */ \
	30, /* /soc/spi@40040000 */ \
	33, /* /soc/uart@40034000 */ \
	34, /* /soc/uart@40038000 */ \
	35, /* /soc/usbd@50100000 */ \
	38, /* /soc/flash-controller@10000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v6m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v6m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0 "v6m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 3
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v6m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v6m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_TOKEN arm_v6m_nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_V6M_NVIC
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/reset-controller@4000c000
 *
 * Node identifier: DT_N_S_soc_S_reset_controller_4000c000
 *
 * Binding (compatible = raspberrypi,pico-reset):
 *   $ZEPHYR_BASE/dts/bindings/reset/raspberrypi,pico-reset.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_reset_controller_4000c000_PATH "/soc/reset-controller@4000c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_reset_controller_4000c000_FULL_NAME "reset-controller@4000c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_reset_controller_4000c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_reset_controller_4000c000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_reset_controller_4000c000_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_reset_controller_4000c000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_reset_controller_4000c000_SUPPORTS_ORDS \
	9, /* /soc/pwm@40050000 */ \
	21, /* /soc/adc@4004c000 */ \
	29, /* /soc/spi@4003c000 */ \
	30, /* /soc/spi@40040000 */ \
	33, /* /soc/uart@40034000 */ \
	34, /* /soc/uart@40038000 */ \
	35, /* /soc/usbd@50100000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_reset_controller_4000c000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_reset DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_NODELABEL_reset               DT_N_S_soc_S_reset_controller_4000c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_reset_controller_4000c000_REG_NUM 1
#define DT_N_S_soc_S_reset_controller_4000c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_REG_IDX_0_VAL_ADDRESS 1073790976 /* 0x4000c000 */
#define DT_N_S_soc_S_reset_controller_4000c000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_reset_controller_4000c000_RANGES_NUM 0
#define DT_N_S_soc_S_reset_controller_4000c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_reset_controller_4000c000_IRQ_NUM 0
#define DT_N_S_soc_S_reset_controller_4000c000_COMPAT_MATCHES_raspberrypi_pico_reset 1
#define DT_N_S_soc_S_reset_controller_4000c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_reset_controller_4000c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_COMPAT_MODEL_IDX_0 "pico-reset"
#define DT_N_S_soc_S_reset_controller_4000c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_reset_controller_4000c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg {1073790976 /* 0x4000c000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_IDX_0 1073790976
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 0) \
	fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 1)
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 1)
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_reset_controller_4000c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_width 4
#define DT_N_S_soc_S_reset_controller_4000c000_P_reg_width_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_active_low 0
#define DT_N_S_soc_S_reset_controller_4000c000_P_active_low_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible {"raspberrypi,pico-reset"}
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_IDX_0 "raspberrypi,pico-reset"
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_reset
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_RESET
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_reset_controller_4000c000, compatible, 0)
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_reset_controller_4000c000, compatible, 0)
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_reset_controller_4000c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_reset_controller_4000c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_LEN 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_reset_controller_4000c000_P_wakeup_source 0
#define DT_N_S_soc_S_reset_controller_4000c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/system-clk
 *
 * Node identifier: DT_N_S_soc_S_system_clk
 *
 * Binding (compatible = fixed-clock):
 *   $ZEPHYR_BASE/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_system_clk_PATH "/soc/system-clk"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_system_clk_FULL_NAME "system-clk"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_system_clk_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_system_clk_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_system_clk_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_system_clk_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_system_clk_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_system_clk_SUPPORTS_ORDS \
	9, /* /soc/pwm@40050000 */ \
	23, /* /soc/i2c@40044000 */ \
	25, /* /soc/i2c@40048000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_system_clk_EXISTS 1
#define DT_N_INST_1_fixed_clock   DT_N_S_soc_S_system_clk
#define DT_N_NODELABEL_system_clk DT_N_S_soc_S_system_clk

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_system_clk_REG_NUM 0
#define DT_N_S_soc_S_system_clk_RANGES_NUM 0
#define DT_N_S_soc_S_system_clk_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_system_clk_IRQ_NUM 0
#define DT_N_S_soc_S_system_clk_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_soc_S_system_clk_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_system_clk_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_system_clk_P_clock_frequency 125000000
#define DT_N_S_soc_S_system_clk_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000
 *
 * Binding (compatible = raspberrypi,pico-pinctrl):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/raspberrypi,pico-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_PATH "/soc/pin-controller@40014000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_FULL_NAME "pin-controller@40014000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_SUPPORTS_ORDS \
	8, /* /soc/pin-controller@40014000/pwm_ch1b_default */ \
	20, /* /soc/pin-controller@40014000/adc_default */ \
	22, /* /soc/pin-controller@40014000/i2c0_default */ \
	24, /* /soc/pin-controller@40014000/i2c1_default */ \
	28, /* /soc/pin-controller@40014000/spi0_default */ \
	32, /* /soc/pin-controller@40014000/uart0_default */ \
	47, /* /soc/pin-controller@40014000/pwm_ch4b_default */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_pinctrl DT_N_S_soc_S_pin_controller_40014000
#define DT_N_NODELABEL_pinctrl               DT_N_S_soc_S_pin_controller_40014000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_REG_NUM 1
#define DT_N_S_soc_S_pin_controller_40014000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_REG_IDX_0_VAL_ADDRESS 1073823744 /* 0x40014000 */
#define DT_N_S_soc_S_pin_controller_40014000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_pin_controller_40014000_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_COMPAT_MATCHES_raspberrypi_pico_pinctrl 1
#define DT_N_S_soc_S_pin_controller_40014000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_pin_controller_40014000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_COMPAT_MODEL_IDX_0 "pico-pinctrl"
#define DT_N_S_soc_S_pin_controller_40014000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_P_status "okay"
#define DT_N_S_soc_S_pin_controller_40014000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_pin_controller_40014000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_pin_controller_40014000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_pin_controller_40014000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_pin_controller_40014000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000, status, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 1) \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 2) \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 3)
#define DT_N_S_soc_S_pin_controller_40014000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 3)
#define DT_N_S_soc_S_pin_controller_40014000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_P_status_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible {"raspberrypi,pico-pinctrl"}
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_IDX_0 "raspberrypi,pico-pinctrl"
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_pinctrl
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_PINCTRL
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000, compatible, 0)
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000, compatible, 0)
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_LEN 1
#define DT_N_S_soc_S_pin_controller_40014000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_P_reg {1073823744 /* 0x40014000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_IDX_0 1073823744
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000, reg, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000, reg, 1)
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, reg, 1)
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_P_wakeup_source 0
#define DT_N_S_soc_S_pin_controller_40014000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/pwm_ch1b_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_PATH "/soc/pin-controller@40014000/pwm_ch1b_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FULL_NAME "pwm_ch1b_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_SUPPORTS_ORDS \
	9, /* /soc/pwm@40050000 */ \
	46, /* /soc/pin-controller@40014000/pwm_ch1b_default/group1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_EXISTS 1
#define DT_N_NODELABEL_pwm_ch1b_default DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/pwm@40050000
 *
 * Node identifier: DT_N_S_soc_S_pwm_40050000
 *
 * Binding (compatible = raspberrypi,pico-pwm):
 *   $ZEPHYR_BASE/dts/bindings/pwm/raspberrypi,pico-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pwm_40050000_PATH "/soc/pwm@40050000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pwm_40050000_FULL_NAME "pwm@40050000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pwm_40050000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pwm_40050000_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, __VA_ARGS__) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, __VA_ARGS__) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pwm_40050000_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pwm_40050000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	6, /* /soc/system-clk */ \
	8, /* /soc/pin-controller@40014000/pwm_ch1b_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pwm_40050000_SUPPORTS_ORDS \
	10, /* /servo0 */ \
	11, /* /servo1 */ \
	19, /* /pwm_leds/pwm_led_0 */ \
	53, /* /soc/pwm@40050000/channel0@0 */ \
	54, /* /soc/pwm@40050000/channel1@1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pwm_40050000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_pwm DT_N_S_soc_S_pwm_40050000
#define DT_N_NODELABEL_pwm               DT_N_S_soc_S_pwm_40050000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pwm_40050000_REG_NUM 1
#define DT_N_S_soc_S_pwm_40050000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_REG_IDX_0_VAL_ADDRESS 1074069504 /* 0x40050000 */
#define DT_N_S_soc_S_pwm_40050000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_pwm_40050000_RANGES_NUM 0
#define DT_N_S_soc_S_pwm_40050000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pwm_40050000_IRQ_NUM 1
#define DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_IRQ_NAME_pwm_irq_wrap_VAL_irq DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_pwm_40050000_IRQ_NAME_pwm_irq_wrap_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_IRQ_NAME_pwm_irq_wrap_VAL_priority DT_N_S_soc_S_pwm_40050000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_pwm_40050000_IRQ_NAME_pwm_irq_wrap_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_COMPAT_MATCHES_raspberrypi_pico_pwm 1
#define DT_N_S_soc_S_pwm_40050000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_pwm_40050000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_COMPAT_MODEL_IDX_0 "pico-pwm"
#define DT_N_S_soc_S_pwm_40050000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_NUM 1
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_pwm_40050000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default

/* Generic property macros: */
#define DT_N_S_soc_S_pwm_40050000_P_reg {1074069504 /* 0x40050000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_pwm_40050000_P_reg_IDX_0 1074069504
#define DT_N_S_soc_S_pwm_40050000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_pwm_40050000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, reg, 0) \
	fn(DT_N_S_soc_S_pwm_40050000, reg, 1)
#define DT_N_S_soc_S_pwm_40050000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, reg, 1)
#define DT_N_S_soc_S_pwm_40050000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_40050000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_interrupts {4 /* 0x4 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, interrupts, 0) \
	fn(DT_N_S_soc_S_pwm_40050000, interrupts, 1)
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, interrupts, 1)
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_40050000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_0 255
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_0 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_1 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_1_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_1 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_1_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_2 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_2_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_2 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_2_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_3 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_3_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_3 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_3_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_4 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_4_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_4 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_4_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_5 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_5_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_5 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_5_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_6 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_6_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_6 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_6_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_7 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_int_7_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_7 0
#define DT_N_S_soc_S_pwm_40050000_P_divider_frac_7_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_0, 0)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_0, 0)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_names, 0)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_names, 0)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_pwm_40050000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_pwm_40050000_P_resets_IDX_0_VAL_id 14
#define DT_N_S_soc_S_pwm_40050000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, resets, 0)
#define DT_N_S_soc_S_pwm_40050000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, resets, 0)
#define DT_N_S_soc_S_pwm_40050000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_resets_LEN 1
#define DT_N_S_soc_S_pwm_40050000_P_resets_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_status "okay"
#define DT_N_S_soc_S_pwm_40050000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_pwm_40050000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_pwm_40050000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_pwm_40050000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_pwm_40050000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_pwm_40050000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, status, 0) \
	fn(DT_N_S_soc_S_pwm_40050000, status, 1) \
	fn(DT_N_S_soc_S_pwm_40050000, status, 2) \
	fn(DT_N_S_soc_S_pwm_40050000, status, 3)
#define DT_N_S_soc_S_pwm_40050000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, status, 3)
#define DT_N_S_soc_S_pwm_40050000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_40050000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_40050000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_40050000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_40050000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_status_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_compatible {"raspberrypi,pico-pwm"}
#define DT_N_S_soc_S_pwm_40050000_P_compatible_IDX_0 "raspberrypi,pico-pwm"
#define DT_N_S_soc_S_pwm_40050000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_pwm
#define DT_N_S_soc_S_pwm_40050000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_PWM
#define DT_N_S_soc_S_pwm_40050000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, compatible, 0)
#define DT_N_S_soc_S_pwm_40050000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, compatible, 0)
#define DT_N_S_soc_S_pwm_40050000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_compatible_LEN 1
#define DT_N_S_soc_S_pwm_40050000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names {"PWM_IRQ_WRAP"}
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_IDX_0 "PWM_IRQ_WRAP"
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_IDX_0_STRING_TOKEN PWM_IRQ_WRAP
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN PWM_IRQ_WRAP
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, interrupt_names, 0)
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, interrupt_names, 0)
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_pwm_40050000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_clocks_IDX_0_PH DT_N_S_soc_S_system_clk
#define DT_N_S_soc_S_pwm_40050000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000, clocks, 0)
#define DT_N_S_soc_S_pwm_40050000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000, clocks, 0)
#define DT_N_S_soc_S_pwm_40050000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_P_clocks_LEN 1
#define DT_N_S_soc_S_pwm_40050000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_P_wakeup_source 0
#define DT_N_S_soc_S_pwm_40050000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /servo0
 *
 * Node identifier: DT_N_S_servo0
 *
 * Binding (compatible = pwm-servo):
 *   /home/tatiana/projects/zephyros-rp2040-example3/ControlServos/dts/bindings/pwm-servo.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_servo0_PATH "/servo0"

/* Node's name with unit-address: */
#define DT_N_S_servo0_FULL_NAME "servo0"

/* Node parent (/) identifier: */
#define DT_N_S_servo0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_servo0_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_servo0_FOREACH_CHILD(fn) 
#define DT_N_S_servo0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_servo0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_servo0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_servo0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_servo0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_servo0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_servo0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_servo0_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_servo0_REQUIRES_ORDS \
	0, /* / */ \
	9, /* /soc/pwm@40050000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_servo0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_servo0_EXISTS 1
#define DT_N_INST_1_pwm_servo DT_N_S_servo0
#define DT_N_NODELABEL_servo0 DT_N_S_servo0

/* Macros for properties that are special in the specification: */
#define DT_N_S_servo0_REG_NUM 0
#define DT_N_S_servo0_RANGES_NUM 0
#define DT_N_S_servo0_FOREACH_RANGE(fn) 
#define DT_N_S_servo0_IRQ_NUM 0
#define DT_N_S_servo0_COMPAT_MATCHES_pwm_servo 1
#define DT_N_S_servo0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_servo0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_servo0_P_pwms_IDX_0_EXISTS 1
#define DT_N_S_servo0_P_pwms_IDX_0_PH DT_N_S_soc_S_pwm_40050000
#define DT_N_S_servo0_P_pwms_IDX_0_VAL_channel 0
#define DT_N_S_servo0_P_pwms_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_servo0_P_pwms_IDX_0_VAL_period 20000000
#define DT_N_S_servo0_P_pwms_IDX_0_VAL_period_EXISTS 1
#define DT_N_S_servo0_P_pwms_IDX_0_VAL_flags 0
#define DT_N_S_servo0_P_pwms_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_servo0_P_pwms_FOREACH_PROP_ELEM(fn) fn(DT_N_S_servo0, pwms, 0)
#define DT_N_S_servo0_P_pwms_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_servo0, pwms, 0)
#define DT_N_S_servo0_P_pwms_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_servo0, pwms, 0, __VA_ARGS__)
#define DT_N_S_servo0_P_pwms_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_servo0, pwms, 0, __VA_ARGS__)
#define DT_N_S_servo0_P_pwms_LEN 1
#define DT_N_S_servo0_P_pwms_EXISTS 1
#define DT_N_S_servo0_P_min_pulse 700000
#define DT_N_S_servo0_P_min_pulse_EXISTS 1
#define DT_N_S_servo0_P_max_pulse 2500000
#define DT_N_S_servo0_P_max_pulse_EXISTS 1
#define DT_N_S_servo0_P_compatible {"pwm-servo"}
#define DT_N_S_servo0_P_compatible_IDX_0 "pwm-servo"
#define DT_N_S_servo0_P_compatible_IDX_0_STRING_TOKEN pwm_servo
#define DT_N_S_servo0_P_compatible_IDX_0_STRING_UPPER_TOKEN PWM_SERVO
#define DT_N_S_servo0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_servo0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_servo0, compatible, 0)
#define DT_N_S_servo0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_servo0, compatible, 0)
#define DT_N_S_servo0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_servo0, compatible, 0, __VA_ARGS__)
#define DT_N_S_servo0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_servo0, compatible, 0, __VA_ARGS__)
#define DT_N_S_servo0_P_compatible_LEN 1
#define DT_N_S_servo0_P_compatible_EXISTS 1
#define DT_N_S_servo0_P_wakeup_source 0
#define DT_N_S_servo0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /servo1
 *
 * Node identifier: DT_N_S_servo1
 *
 * Binding (compatible = pwm-servo):
 *   /home/tatiana/projects/zephyros-rp2040-example3/ControlServos/dts/bindings/pwm-servo.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_servo1_PATH "/servo1"

/* Node's name with unit-address: */
#define DT_N_S_servo1_FULL_NAME "servo1"

/* Node parent (/) identifier: */
#define DT_N_S_servo1_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_servo1_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_servo1_FOREACH_CHILD(fn) 
#define DT_N_S_servo1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_servo1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_servo1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_servo1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_servo1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_servo1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_servo1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_servo1_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_servo1_REQUIRES_ORDS \
	0, /* / */ \
	9, /* /soc/pwm@40050000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_servo1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_servo1_EXISTS 1
#define DT_N_INST_0_pwm_servo DT_N_S_servo1
#define DT_N_NODELABEL_servo1 DT_N_S_servo1

/* Macros for properties that are special in the specification: */
#define DT_N_S_servo1_REG_NUM 0
#define DT_N_S_servo1_RANGES_NUM 0
#define DT_N_S_servo1_FOREACH_RANGE(fn) 
#define DT_N_S_servo1_IRQ_NUM 0
#define DT_N_S_servo1_COMPAT_MATCHES_pwm_servo 1
#define DT_N_S_servo1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_servo1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_servo1_P_pwms_IDX_0_EXISTS 1
#define DT_N_S_servo1_P_pwms_IDX_0_PH DT_N_S_soc_S_pwm_40050000
#define DT_N_S_servo1_P_pwms_IDX_0_VAL_channel 1
#define DT_N_S_servo1_P_pwms_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_servo1_P_pwms_IDX_0_VAL_period 20000000
#define DT_N_S_servo1_P_pwms_IDX_0_VAL_period_EXISTS 1
#define DT_N_S_servo1_P_pwms_IDX_0_VAL_flags 0
#define DT_N_S_servo1_P_pwms_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_servo1_P_pwms_FOREACH_PROP_ELEM(fn) fn(DT_N_S_servo1, pwms, 0)
#define DT_N_S_servo1_P_pwms_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_servo1, pwms, 0)
#define DT_N_S_servo1_P_pwms_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_servo1, pwms, 0, __VA_ARGS__)
#define DT_N_S_servo1_P_pwms_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_servo1, pwms, 0, __VA_ARGS__)
#define DT_N_S_servo1_P_pwms_LEN 1
#define DT_N_S_servo1_P_pwms_EXISTS 1
#define DT_N_S_servo1_P_min_pulse 700000
#define DT_N_S_servo1_P_min_pulse_EXISTS 1
#define DT_N_S_servo1_P_max_pulse 2500000
#define DT_N_S_servo1_P_max_pulse_EXISTS 1
#define DT_N_S_servo1_P_compatible {"pwm-servo"}
#define DT_N_S_servo1_P_compatible_IDX_0 "pwm-servo"
#define DT_N_S_servo1_P_compatible_IDX_0_STRING_TOKEN pwm_servo
#define DT_N_S_servo1_P_compatible_IDX_0_STRING_UPPER_TOKEN PWM_SERVO
#define DT_N_S_servo1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_servo1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_servo1, compatible, 0)
#define DT_N_S_servo1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_servo1, compatible, 0)
#define DT_N_S_servo1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_servo1, compatible, 0, __VA_ARGS__)
#define DT_N_S_servo1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_servo1, compatible, 0, __VA_ARGS__)
#define DT_N_S_servo1_P_compatible_LEN 1
#define DT_N_S_servo1_P_compatible_EXISTS 1
#define DT_N_S_servo1_P_wakeup_source 0
#define DT_N_S_servo1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	13, /* /cpus/cpu@0 */ \
	14, /* /cpus/cpu@1 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m0+):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-m0+.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	12, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m0_ DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0        DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m0_ 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "cortex-m0+"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m0+"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m0+"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN arm_cortex_m0_
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_M0_
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 *
 * Binding (compatible = arm,cortex-m0+):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-m0+.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	12, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_1_arm_cortex_m0_ DT_N_S_cpus_S_cpu_1
#define DT_N_NODELABEL_cpu1        DT_N_S_cpus_S_cpu_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_1_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_arm_cortex_m0_ 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_MODEL_IDX_0 "cortex-m0+"
#define DT_N_S_cpus_S_cpu_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_compatible {"arm,cortex-m0+"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "arm,cortex-m0+"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_TOKEN arm_cortex_m0_
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_M0_
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	17, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40014000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40014000
 *
 * Binding (compatible = raspberrypi,pico-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/raspberrypi,pico-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40014000_PATH "/soc/gpio@40014000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40014000_FULL_NAME "gpio@40014000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40014000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40014000_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40014000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40014000_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40014000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40014000_SUPPORTS_ORDS \
	17, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40014000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_gpio DT_N_S_soc_S_gpio_40014000
#define DT_N_NODELABEL_gpio0              DT_N_S_soc_S_gpio_40014000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40014000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40014000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_REG_IDX_0_VAL_ADDRESS 1073823744 /* 0x40014000 */
#define DT_N_S_soc_S_gpio_40014000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40014000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40014000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40014000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40014000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_IRQ_IDX_0_VAL_irq 13
#define DT_N_S_soc_S_gpio_40014000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40014000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_COMPAT_MATCHES_raspberrypi_pico_gpio 1
#define DT_N_S_soc_S_gpio_40014000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_gpio_40014000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_COMPAT_MODEL_IDX_0 "pico-gpio"
#define DT_N_S_soc_S_gpio_40014000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40014000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40014000_P_reg {1073823744 /* 0x40014000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40014000_P_reg_IDX_0 1073823744
#define DT_N_S_soc_S_gpio_40014000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40014000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40014000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40014000, reg, 1)
#define DT_N_S_soc_S_gpio_40014000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40014000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, reg, 1)
#define DT_N_S_soc_S_gpio_40014000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40014000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40014000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40014000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40014000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_ngpios 30
#define DT_N_S_soc_S_gpio_40014000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_status "okay"
#define DT_N_S_soc_S_gpio_40014000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40014000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40014000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40014000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40014000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40014000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40014000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40014000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40014000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40014000, status, 3)
#define DT_N_S_soc_S_gpio_40014000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40014000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, status, 3)
#define DT_N_S_soc_S_gpio_40014000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40014000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40014000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40014000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40014000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40014000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_compatible {"raspberrypi,pico-gpio"}
#define DT_N_S_soc_S_gpio_40014000_P_compatible_IDX_0 "raspberrypi,pico-gpio"
#define DT_N_S_soc_S_gpio_40014000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_gpio
#define DT_N_S_soc_S_gpio_40014000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_GPIO
#define DT_N_S_soc_S_gpio_40014000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40014000, compatible, 0)
#define DT_N_S_soc_S_gpio_40014000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40014000, compatible, 0)
#define DT_N_S_soc_S_gpio_40014000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40014000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40014000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40014000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_interrupts {13 /* 0xd */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_IDX_0 13
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40014000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40014000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40014000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40014000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40014000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40014000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_40014000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40014000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40014000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40014000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	15, /* /leds */ \
	16, /* /soc/gpio@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0     DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_led0 DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_40014000
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 25
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label "LED"
#define DT_N_S_leds_S_led_0_P_label_STRING_TOKEN LED
#define DT_N_S_leds_S_led_0_P_label_STRING_UPPER_TOKEN LED
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, label, 0) \
	fn(DT_N_S_leds_S_led_0, label, 1) \
	fn(DT_N_S_leds_S_led_0, label, 2)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_leds_S_led_0, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_leds_S_led_0, label, 2)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 2, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_leds_S_led_0, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_leds_S_led_0, label, 2, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /pwm_leds
 *
 * Node identifier: DT_N_S_pwm_leds
 *
 * Binding (compatible = pwm-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/pwm-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pwm_leds_PATH "/pwm_leds"

/* Node's name with unit-address: */
#define DT_N_S_pwm_leds_FULL_NAME "pwm_leds"

/* Node parent (/) identifier: */
#define DT_N_S_pwm_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_pwm_leds_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_pwm_leds_FOREACH_CHILD(fn) fn(DT_N_S_pwm_leds_S_pwm_led_0)
#define DT_N_S_pwm_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pwm_leds_S_pwm_led_0)
#define DT_N_S_pwm_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pwm_leds_S_pwm_led_0, __VA_ARGS__)
#define DT_N_S_pwm_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pwm_leds_S_pwm_led_0, __VA_ARGS__)
#define DT_N_S_pwm_leds_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pwm_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pwm_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pwm_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pwm_leds_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pwm_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pwm_leds_SUPPORTS_ORDS \
	19, /* /pwm_leds/pwm_led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_pwm_leds_EXISTS 1
#define DT_N_INST_0_pwm_leds DT_N_S_pwm_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_pwm_leds_REG_NUM 0
#define DT_N_S_pwm_leds_RANGES_NUM 0
#define DT_N_S_pwm_leds_FOREACH_RANGE(fn) 
#define DT_N_S_pwm_leds_IRQ_NUM 0
#define DT_N_S_pwm_leds_COMPAT_MATCHES_pwm_leds 1
#define DT_N_S_pwm_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pwm_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pwm_leds_P_compatible {"pwm-leds"}
#define DT_N_S_pwm_leds_P_compatible_IDX_0 "pwm-leds"
#define DT_N_S_pwm_leds_P_compatible_IDX_0_STRING_TOKEN pwm_leds
#define DT_N_S_pwm_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN PWM_LEDS
#define DT_N_S_pwm_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pwm_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pwm_leds, compatible, 0)
#define DT_N_S_pwm_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pwm_leds, compatible, 0)
#define DT_N_S_pwm_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pwm_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_pwm_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pwm_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_pwm_leds_P_compatible_LEN 1
#define DT_N_S_pwm_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /pwm_leds/pwm_led_0
 *
 * Node identifier: DT_N_S_pwm_leds_S_pwm_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pwm_leds_S_pwm_led_0_PATH "/pwm_leds/pwm_led_0"

/* Node's name with unit-address: */
#define DT_N_S_pwm_leds_S_pwm_led_0_FULL_NAME "pwm_led_0"

/* Node parent (/pwm_leds) identifier: */
#define DT_N_S_pwm_leds_S_pwm_led_0_PARENT DT_N_S_pwm_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_pwm_leds_S_pwm_led_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pwm_leds_S_pwm_led_0_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pwm_leds_S_pwm_led_0_REQUIRES_ORDS \
	9, /* /soc/pwm@40050000 */ \
	18, /* /pwm_leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pwm_leds_S_pwm_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pwm_leds_S_pwm_led_0_EXISTS 1
#define DT_N_ALIAS_pwm_led0     DT_N_S_pwm_leds_S_pwm_led_0
#define DT_N_NODELABEL_pwm_led0 DT_N_S_pwm_leds_S_pwm_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pwm_leds_S_pwm_led_0_REG_NUM 0
#define DT_N_S_pwm_leds_S_pwm_led_0_RANGES_NUM 0
#define DT_N_S_pwm_leds_S_pwm_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_pwm_leds_S_pwm_led_0_IRQ_NUM 0
#define DT_N_S_pwm_leds_S_pwm_led_0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pwm_leds_S_pwm_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_EXISTS 1
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_PH DT_N_S_soc_S_pwm_40050000
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_VAL_channel 9
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_VAL_period 20000000
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_VAL_period_EXISTS 1
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_VAL_flags 0
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pwm_leds_S_pwm_led_0, pwms, 0)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pwm_leds_S_pwm_led_0, pwms, 0)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pwm_leds_S_pwm_led_0, pwms, 0, __VA_ARGS__)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pwm_leds_S_pwm_led_0, pwms, 0, __VA_ARGS__)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_LEN 1
#define DT_N_S_pwm_leds_S_pwm_led_0_P_pwms_EXISTS 1
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label "PWM_LED"
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_STRING_TOKEN PWM_LED
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_STRING_UPPER_TOKEN PWM_LED
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 0) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 1) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 2) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 3) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 4) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 5) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 6)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 6)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 6, __VA_ARGS__)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pwm_leds_S_pwm_led_0, label, 6, __VA_ARGS__)
#define DT_N_S_pwm_leds_S_pwm_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/adc_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_adc_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_PATH "/soc/pin-controller@40014000/adc_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FULL_NAME "adc_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_SUPPORTS_ORDS \
	21, /* /soc/adc@4004c000 */ \
	43, /* /soc/pin-controller@40014000/adc_default/group1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_EXISTS 1
#define DT_N_NODELABEL_adc_default DT_N_S_soc_S_pin_controller_40014000_S_adc_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/adc@4004c000
 *
 * Node identifier: DT_N_S_soc_S_adc_4004c000
 *
 * Binding (compatible = raspberrypi,pico-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/raspberrypi,pico-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_4004c000_PATH "/soc/adc@4004c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_4004c000_FULL_NAME "adc@4004c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_4004c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_4004c000_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_4004c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_4004c000_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_4004c000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	20, /* /soc/pin-controller@40014000/adc_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_4004c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_4004c000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_adc DT_N_S_soc_S_adc_4004c000
#define DT_N_NODELABEL_adc               DT_N_S_soc_S_adc_4004c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_4004c000_REG_NUM 1
#define DT_N_S_soc_S_adc_4004c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_REG_IDX_0_VAL_ADDRESS 1074053120 /* 0x4004c000 */
#define DT_N_S_soc_S_adc_4004c000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_adc_4004c000_RANGES_NUM 0
#define DT_N_S_soc_S_adc_4004c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_4004c000_IRQ_NUM 1
#define DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_IRQ_NAME_adc0_VAL_irq DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_adc_4004c000_IRQ_NAME_adc0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_IRQ_NAME_adc0_VAL_priority DT_N_S_soc_S_adc_4004c000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_adc_4004c000_IRQ_NAME_adc0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_COMPAT_MATCHES_raspberrypi_pico_adc 1
#define DT_N_S_soc_S_adc_4004c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_adc_4004c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_COMPAT_MODEL_IDX_0 "pico-adc"
#define DT_N_S_soc_S_adc_4004c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_NUM 1
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_adc_4004c000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_adc_default

/* Generic property macros: */
#define DT_N_S_soc_S_adc_4004c000_P_reg {1074053120 /* 0x4004c000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_adc_4004c000_P_reg_IDX_0 1074053120
#define DT_N_S_soc_S_adc_4004c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_adc_4004c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, reg, 0) \
	fn(DT_N_S_soc_S_adc_4004c000, reg, 1)
#define DT_N_S_soc_S_adc_4004c000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, reg, 1)
#define DT_N_S_soc_S_adc_4004c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_4004c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_vref_mv 3300
#define DT_N_S_soc_S_adc_4004c000_P_vref_mv_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_status "okay"
#define DT_N_S_soc_S_adc_4004c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_adc_4004c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_adc_4004c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_adc_4004c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_adc_4004c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_adc_4004c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, status, 0) \
	fn(DT_N_S_soc_S_adc_4004c000, status, 1) \
	fn(DT_N_S_soc_S_adc_4004c000, status, 2) \
	fn(DT_N_S_soc_S_adc_4004c000, status, 3)
#define DT_N_S_soc_S_adc_4004c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, status, 3)
#define DT_N_S_soc_S_adc_4004c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_4004c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_4004c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_4004c000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_compatible {"raspberrypi,pico-adc"}
#define DT_N_S_soc_S_adc_4004c000_P_compatible_IDX_0 "raspberrypi,pico-adc"
#define DT_N_S_soc_S_adc_4004c000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_adc
#define DT_N_S_soc_S_adc_4004c000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_ADC
#define DT_N_S_soc_S_adc_4004c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, compatible, 0)
#define DT_N_S_soc_S_adc_4004c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, compatible, 0)
#define DT_N_S_soc_S_adc_4004c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_4004c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_interrupts {22 /* 0x16 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, interrupts, 0) \
	fn(DT_N_S_soc_S_adc_4004c000, interrupts, 1)
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, interrupts, 1)
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_4004c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_4004c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names {"adc0"}
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_IDX_0 "adc0"
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_IDX_0_STRING_TOKEN adc0
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN ADC0
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, interrupt_names, 0)
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, interrupt_names, 0)
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_adc_4004c000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_wakeup_source 0
#define DT_N_S_soc_S_adc_4004c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_pin_controller_40014000_S_adc_default
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_adc_default
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_0, 0)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_0, 0)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_names, 0)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_names, 0)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_adc_4004c000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_adc_4004c000_P_resets_IDX_0_VAL_id 0
#define DT_N_S_soc_S_adc_4004c000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_adc_4004c000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_4004c000, resets, 0)
#define DT_N_S_soc_S_adc_4004c000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_4004c000, resets, 0)
#define DT_N_S_soc_S_adc_4004c000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_4004c000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_4004c000_P_resets_LEN 1
#define DT_N_S_soc_S_adc_4004c000_P_resets_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/i2c0_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_PATH "/soc/pin-controller@40014000/i2c0_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FULL_NAME "i2c0_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_SUPPORTS_ORDS \
	23, /* /soc/i2c@40044000 */ \
	44, /* /soc/pin-controller@40014000/i2c0_default/group1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_EXISTS 1
#define DT_N_NODELABEL_i2c0_default DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/i2c@40044000
 *
 * Node identifier: DT_N_S_soc_S_i2c_40044000
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_40044000_PATH "/soc/i2c@40044000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_40044000_FULL_NAME "i2c@40044000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_40044000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_40044000_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40044000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_40044000_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_40044000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	6, /* /soc/system-clk */ \
	22, /* /soc/pin-controller@40014000/i2c0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_40044000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_40044000_EXISTS 1
#define DT_N_INST_0_snps_designware_i2c DT_N_S_soc_S_i2c_40044000
#define DT_N_NODELABEL_i2c0             DT_N_S_soc_S_i2c_40044000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_40044000_REG_NUM 1
#define DT_N_S_soc_S_i2c_40044000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_REG_IDX_0_VAL_ADDRESS 1074020352 /* 0x40044000 */
#define DT_N_S_soc_S_i2c_40044000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_40044000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_40044000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_40044000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_VAL_irq 23
#define DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_IRQ_NAME_i2c0_VAL_irq DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_i2c_40044000_IRQ_NAME_i2c0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_IRQ_NAME_i2c0_VAL_priority DT_N_S_soc_S_i2c_40044000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_i2c_40044000_IRQ_NAME_i2c0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_soc_S_i2c_40044000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_COMPAT_VENDOR_IDX_0 "Synopsys, Inc."
#define DT_N_S_soc_S_i2c_40044000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_COMPAT_MODEL_IDX_0 "designware-i2c"
#define DT_N_S_soc_S_i2c_40044000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_NUM 1
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_i2c_40044000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_40044000_P_interrupts {23 /* 0x17 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_IDX_0 23
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2c_40044000, interrupts, 1)
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, interrupts, 1)
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40044000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_40044000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_status "okay"
#define DT_N_S_soc_S_i2c_40044000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_40044000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_40044000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_40044000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_40044000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_40044000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, status, 0) \
	fn(DT_N_S_soc_S_i2c_40044000, status, 1) \
	fn(DT_N_S_soc_S_i2c_40044000, status, 2) \
	fn(DT_N_S_soc_S_i2c_40044000, status, 3)
#define DT_N_S_soc_S_i2c_40044000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, status, 3)
#define DT_N_S_soc_S_i2c_40044000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40044000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40044000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40044000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_compatible {"snps,designware-i2c"}
#define DT_N_S_soc_S_i2c_40044000_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_soc_S_i2c_40044000_P_compatible_IDX_0_STRING_TOKEN snps_designware_i2c
#define DT_N_S_soc_S_i2c_40044000_P_compatible_IDX_0_STRING_UPPER_TOKEN SNPS_DESIGNWARE_I2C
#define DT_N_S_soc_S_i2c_40044000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, compatible, 0)
#define DT_N_S_soc_S_i2c_40044000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, compatible, 0)
#define DT_N_S_soc_S_i2c_40044000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_40044000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_reg {1074020352 /* 0x40044000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_40044000_P_reg_IDX_0 1074020352
#define DT_N_S_soc_S_i2c_40044000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_40044000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_40044000, reg, 1)
#define DT_N_S_soc_S_i2c_40044000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, reg, 1)
#define DT_N_S_soc_S_i2c_40044000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40044000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40044000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names {"i2c0"}
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_IDX_0 "i2c0"
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_IDX_0_STRING_TOKEN i2c0
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN I2C0
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, interrupt_names, 0)
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, interrupt_names, 0)
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_i2c_40044000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_clocks_IDX_0_PH DT_N_S_soc_S_system_clk
#define DT_N_S_soc_S_i2c_40044000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, clocks, 0)
#define DT_N_S_soc_S_i2c_40044000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, clocks, 0)
#define DT_N_S_soc_S_i2c_40044000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_40044000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_40044000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40044000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_i2c_40044000_P_pinctrl_names_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/i2c1_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_PATH "/soc/pin-controller@40014000/i2c1_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FULL_NAME "i2c1_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_SUPPORTS_ORDS \
	25, /* /soc/i2c@40048000 */ \
	45, /* /soc/pin-controller@40014000/i2c1_default/group1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_EXISTS 1
#define DT_N_NODELABEL_i2c1_default DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/i2c@40048000
 *
 * Node identifier: DT_N_S_soc_S_i2c_40048000
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_40048000_PATH "/soc/i2c@40048000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_40048000_FULL_NAME "i2c@40048000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_40048000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_40048000_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40048000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_40048000_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_40048000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	6, /* /soc/system-clk */ \
	24, /* /soc/pin-controller@40014000/i2c1_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_40048000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_40048000_EXISTS 1
#define DT_N_INST_1_snps_designware_i2c DT_N_S_soc_S_i2c_40048000
#define DT_N_NODELABEL_i2c1             DT_N_S_soc_S_i2c_40048000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_40048000_REG_NUM 1
#define DT_N_S_soc_S_i2c_40048000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_REG_IDX_0_VAL_ADDRESS 1074036736 /* 0x40048000 */
#define DT_N_S_soc_S_i2c_40048000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_40048000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_40048000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_40048000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_VAL_irq 24
#define DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_IRQ_NAME_i2c1_VAL_irq DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_i2c_40048000_IRQ_NAME_i2c1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_IRQ_NAME_i2c1_VAL_priority DT_N_S_soc_S_i2c_40048000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_i2c_40048000_IRQ_NAME_i2c1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_soc_S_i2c_40048000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_COMPAT_VENDOR_IDX_0 "Synopsys, Inc."
#define DT_N_S_soc_S_i2c_40048000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_COMPAT_MODEL_IDX_0 "designware-i2c"
#define DT_N_S_soc_S_i2c_40048000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_NUM 1
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_i2c_40048000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_40048000_P_interrupts {24 /* 0x18 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_IDX_0 24
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2c_40048000, interrupts, 1)
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, interrupts, 1)
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40048000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_40048000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_status "okay"
#define DT_N_S_soc_S_i2c_40048000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_40048000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_40048000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_40048000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_40048000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_40048000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, status, 0) \
	fn(DT_N_S_soc_S_i2c_40048000, status, 1) \
	fn(DT_N_S_soc_S_i2c_40048000, status, 2) \
	fn(DT_N_S_soc_S_i2c_40048000, status, 3)
#define DT_N_S_soc_S_i2c_40048000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, status, 3)
#define DT_N_S_soc_S_i2c_40048000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40048000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40048000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40048000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_compatible {"snps,designware-i2c"}
#define DT_N_S_soc_S_i2c_40048000_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_soc_S_i2c_40048000_P_compatible_IDX_0_STRING_TOKEN snps_designware_i2c
#define DT_N_S_soc_S_i2c_40048000_P_compatible_IDX_0_STRING_UPPER_TOKEN SNPS_DESIGNWARE_I2C
#define DT_N_S_soc_S_i2c_40048000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, compatible, 0)
#define DT_N_S_soc_S_i2c_40048000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, compatible, 0)
#define DT_N_S_soc_S_i2c_40048000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_40048000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_reg {1074036736 /* 0x40048000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_40048000_P_reg_IDX_0 1074036736
#define DT_N_S_soc_S_i2c_40048000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_40048000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_40048000, reg, 1)
#define DT_N_S_soc_S_i2c_40048000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, reg, 1)
#define DT_N_S_soc_S_i2c_40048000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_40048000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_40048000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names {"i2c1"}
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_IDX_0 "i2c1"
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_IDX_0_STRING_TOKEN i2c1
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN I2C1
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, interrupt_names, 0)
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, interrupt_names, 0)
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_i2c_40048000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_clocks_IDX_0_PH DT_N_S_soc_S_system_clk
#define DT_N_S_soc_S_i2c_40048000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, clocks, 0)
#define DT_N_S_soc_S_i2c_40048000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, clocks, 0)
#define DT_N_S_soc_S_i2c_40048000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_40048000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_40048000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40048000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_i2c_40048000_P_pinctrl_names_EXISTS 1

/*
 * Devicetree node: /soc/memory@20000000
 *
 * Node identifier: DT_N_S_soc_S_memory_20000000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_20000000_PATH "/soc/memory@20000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_20000000_FULL_NAME "memory@20000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_20000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_20000000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_20000000_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_20000000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_20000000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_20000000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_20000000_REG_NUM 1
#define DT_N_S_soc_S_memory_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_soc_S_memory_20000000_REG_IDX_0_VAL_SIZE 270336 /* 0x42000 */
#define DT_N_S_soc_S_memory_20000000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_20000000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_20000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_20000000_P_reg {536870912 /* 0x20000000 */, 270336 /* 0x42000 */}
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_0 536870912
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_1 270336
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20000000, reg, 0) \
	fn(DT_N_S_soc_S_memory_20000000, reg, 1)
#define DT_N_S_soc_S_memory_20000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_20000000, reg, 1)
#define DT_N_S_soc_S_memory_20000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_20000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_20000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20000000, compatible, 0)
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20000000, compatible, 0)
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20000000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_20000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_20000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/peripheral-clk
 *
 * Node identifier: DT_N_S_soc_S_peripheral_clk
 *
 * Binding (compatible = fixed-clock):
 *   $ZEPHYR_BASE/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_peripheral_clk_PATH "/soc/peripheral-clk"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_peripheral_clk_FULL_NAME "peripheral-clk"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_peripheral_clk_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_peripheral_clk_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_peripheral_clk_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_peripheral_clk_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_peripheral_clk_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_peripheral_clk_SUPPORTS_ORDS \
	29, /* /soc/spi@4003c000 */ \
	30, /* /soc/spi@40040000 */ \
	33, /* /soc/uart@40034000 */ \
	34, /* /soc/uart@40038000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_peripheral_clk_EXISTS 1
#define DT_N_INST_0_fixed_clock       DT_N_S_soc_S_peripheral_clk
#define DT_N_NODELABEL_peripheral_clk DT_N_S_soc_S_peripheral_clk

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_peripheral_clk_REG_NUM 0
#define DT_N_S_soc_S_peripheral_clk_RANGES_NUM 0
#define DT_N_S_soc_S_peripheral_clk_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_peripheral_clk_IRQ_NUM 0
#define DT_N_S_soc_S_peripheral_clk_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_soc_S_peripheral_clk_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_peripheral_clk_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_peripheral_clk_P_clock_frequency 125000000
#define DT_N_S_soc_S_peripheral_clk_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/spi0_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_spi0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_PATH "/soc/pin-controller@40014000/spi0_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FULL_NAME "spi0_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_SUPPORTS_ORDS \
	29, /* /soc/spi@4003c000 */ \
	49, /* /soc/pin-controller@40014000/spi0_default/group1 */ \
	50, /* /soc/pin-controller@40014000/spi0_default/group2 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_EXISTS 1
#define DT_N_NODELABEL_spi0_default DT_N_S_soc_S_pin_controller_40014000_S_spi0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/spi@4003c000
 *
 * Node identifier: DT_N_S_soc_S_spi_4003c000
 *
 * Binding (compatible = raspberrypi,pico-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/raspberrypi,pico-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_4003c000_PATH "/soc/spi@4003c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_4003c000_FULL_NAME "spi@4003c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_4003c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_4003c000_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_4003c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_4003c000_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_4003c000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	27, /* /soc/peripheral-clk */ \
	28, /* /soc/pin-controller@40014000/spi0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_4003c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_4003c000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_spi DT_N_S_soc_S_spi_4003c000
#define DT_N_INST_0_arm_pl022            DT_N_S_soc_S_spi_4003c000
#define DT_N_NODELABEL_spi0              DT_N_S_soc_S_spi_4003c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_4003c000_REG_NUM 1
#define DT_N_S_soc_S_spi_4003c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_REG_IDX_0_VAL_ADDRESS 1073987584 /* 0x4003c000 */
#define DT_N_S_soc_S_spi_4003c000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_4003c000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_4003c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_4003c000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_VAL_irq 18
#define DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_IRQ_NAME_spi0_VAL_irq DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_spi_4003c000_IRQ_NAME_spi0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_IRQ_NAME_spi0_VAL_priority DT_N_S_soc_S_spi_4003c000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_spi_4003c000_IRQ_NAME_spi0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_MATCHES_raspberrypi_pico_spi 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_spi_4003c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_MODEL_IDX_0 "pico-spi"
#define DT_N_S_soc_S_spi_4003c000_COMPAT_MATCHES_arm_pl022 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_VENDOR_IDX_1 "ARM Ltd."
#define DT_N_S_soc_S_spi_4003c000_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_COMPAT_MODEL_IDX_1 "pl022"
#define DT_N_S_soc_S_spi_4003c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_NUM 1
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_spi_4003c000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_spi0_default

/* Generic property macros: */
#define DT_N_S_soc_S_spi_4003c000_P_reg {1073987584 /* 0x4003c000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_4003c000_P_reg_IDX_0 1073987584
#define DT_N_S_soc_S_spi_4003c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_4003c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, reg, 0) \
	fn(DT_N_S_soc_S_spi_4003c000, reg, 1)
#define DT_N_S_soc_S_spi_4003c000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, reg, 1)
#define DT_N_S_soc_S_spi_4003c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4003c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_clocks_IDX_0_PH DT_N_S_soc_S_peripheral_clk
#define DT_N_S_soc_S_spi_4003c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, clocks, 0)
#define DT_N_S_soc_S_spi_4003c000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, clocks, 0)
#define DT_N_S_soc_S_spi_4003c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_4003c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_clock_frequency 8000000
#define DT_N_S_soc_S_spi_4003c000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_status "okay"
#define DT_N_S_soc_S_spi_4003c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_4003c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_4003c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_4003c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_4003c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_4003c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, status, 0) \
	fn(DT_N_S_soc_S_spi_4003c000, status, 1) \
	fn(DT_N_S_soc_S_spi_4003c000, status, 2) \
	fn(DT_N_S_soc_S_spi_4003c000, status, 3)
#define DT_N_S_soc_S_spi_4003c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, status, 3)
#define DT_N_S_soc_S_spi_4003c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4003c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4003c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4003c000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_compatible {"raspberrypi,pico-spi", "arm,pl022"}
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_0 "raspberrypi,pico-spi"
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_spi
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_SPI
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_1 "arm,pl022"
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_1_STRING_TOKEN arm_pl022
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_1_STRING_UPPER_TOKEN ARM_PL022
#define DT_N_S_soc_S_spi_4003c000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, compatible, 0) \
	fn(DT_N_S_soc_S_spi_4003c000, compatible, 1)
#define DT_N_S_soc_S_spi_4003c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, compatible, 1)
#define DT_N_S_soc_S_spi_4003c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4003c000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_compatible_LEN 2
#define DT_N_S_soc_S_spi_4003c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_interrupts {18 /* 0x12 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_IDX_0 18
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_4003c000, interrupts, 1)
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, interrupts, 1)
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4003c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_4003c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names {"spi0"}
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_IDX_0 "spi0"
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_IDX_0_STRING_TOKEN spi0
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN SPI0
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, interrupt_names, 0)
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, interrupt_names, 0)
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_spi_4003c000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_4003c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_pin_controller_40014000_S_spi0_default
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_spi0_default
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_spi_4003c000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_spi_4003c000_P_resets_IDX_0_VAL_id 16
#define DT_N_S_soc_S_spi_4003c000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_spi_4003c000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4003c000, resets, 0)
#define DT_N_S_soc_S_spi_4003c000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_4003c000, resets, 0)
#define DT_N_S_soc_S_spi_4003c000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_4003c000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4003c000_P_resets_LEN 1
#define DT_N_S_soc_S_spi_4003c000_P_resets_EXISTS 1

/*
 * Devicetree node: /soc/spi@40040000
 *
 * Node identifier: DT_N_S_soc_S_spi_40040000
 *
 * Binding (compatible = raspberrypi,pico-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/raspberrypi,pico-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_40040000_PATH "/soc/spi@40040000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_40040000_FULL_NAME "spi@40040000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_40040000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_40040000_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40040000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_40040000_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_40040000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	27, /* /soc/peripheral-clk */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_40040000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_40040000_EXISTS 1
#define DT_N_INST_1_raspberrypi_pico_spi DT_N_S_soc_S_spi_40040000
#define DT_N_INST_1_arm_pl022            DT_N_S_soc_S_spi_40040000
#define DT_N_NODELABEL_spi1              DT_N_S_soc_S_spi_40040000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_40040000_REG_NUM 1
#define DT_N_S_soc_S_spi_40040000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_REG_IDX_0_VAL_ADDRESS 1074003968 /* 0x40040000 */
#define DT_N_S_soc_S_spi_40040000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_40040000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_40040000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_40040000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_VAL_irq 19
#define DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_IRQ_NAME_spi1_VAL_irq DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_spi_40040000_IRQ_NAME_spi1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_IRQ_NAME_spi1_VAL_priority DT_N_S_soc_S_spi_40040000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_spi_40040000_IRQ_NAME_spi1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_MATCHES_raspberrypi_pico_spi 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_spi_40040000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_MODEL_IDX_0 "pico-spi"
#define DT_N_S_soc_S_spi_40040000_COMPAT_MATCHES_arm_pl022 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_VENDOR_IDX_1 "ARM Ltd."
#define DT_N_S_soc_S_spi_40040000_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_COMPAT_MODEL_IDX_1 "pl022"
#define DT_N_S_soc_S_spi_40040000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_40040000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_40040000_P_reg {1074003968 /* 0x40040000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_40040000_P_reg_IDX_0 1074003968
#define DT_N_S_soc_S_spi_40040000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_40040000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, reg, 0) \
	fn(DT_N_S_soc_S_spi_40040000, reg, 1)
#define DT_N_S_soc_S_spi_40040000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, reg, 1)
#define DT_N_S_soc_S_spi_40040000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_clocks_IDX_0_PH DT_N_S_soc_S_peripheral_clk
#define DT_N_S_soc_S_spi_40040000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, clocks, 0)
#define DT_N_S_soc_S_spi_40040000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, clocks, 0)
#define DT_N_S_soc_S_spi_40040000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_40040000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_status "disabled"
#define DT_N_S_soc_S_spi_40040000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_40040000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40040000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_40040000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_40040000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40040000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, status, 0) \
	fn(DT_N_S_soc_S_spi_40040000, status, 1) \
	fn(DT_N_S_soc_S_spi_40040000, status, 2) \
	fn(DT_N_S_soc_S_spi_40040000, status, 3) \
	fn(DT_N_S_soc_S_spi_40040000, status, 4) \
	fn(DT_N_S_soc_S_spi_40040000, status, 5) \
	fn(DT_N_S_soc_S_spi_40040000, status, 6) \
	fn(DT_N_S_soc_S_spi_40040000, status, 7)
#define DT_N_S_soc_S_spi_40040000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 7)
#define DT_N_S_soc_S_spi_40040000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_compatible {"raspberrypi,pico-spi", "arm,pl022"}
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_0 "raspberrypi,pico-spi"
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_spi
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_SPI
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_1 "arm,pl022"
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_1_STRING_TOKEN arm_pl022
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_1_STRING_UPPER_TOKEN ARM_PL022
#define DT_N_S_soc_S_spi_40040000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, compatible, 0) \
	fn(DT_N_S_soc_S_spi_40040000, compatible, 1)
#define DT_N_S_soc_S_spi_40040000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, compatible, 1)
#define DT_N_S_soc_S_spi_40040000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_compatible_LEN 2
#define DT_N_S_soc_S_spi_40040000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_interrupts {19 /* 0x13 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_spi_40040000_P_interrupts_IDX_0 19
#define DT_N_S_soc_S_spi_40040000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_40040000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_40040000, interrupts, 1)
#define DT_N_S_soc_S_spi_40040000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, interrupts, 1)
#define DT_N_S_soc_S_spi_40040000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40040000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_40040000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names {"spi1"}
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_IDX_0 "spi1"
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_IDX_0_STRING_TOKEN spi1
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN SPI1
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, interrupt_names, 0)
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, interrupt_names, 0)
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_spi_40040000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_40040000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_spi_40040000_P_resets_IDX_0_VAL_id 17
#define DT_N_S_soc_S_spi_40040000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_spi_40040000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40040000, resets, 0)
#define DT_N_S_soc_S_spi_40040000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40040000, resets, 0)
#define DT_N_S_soc_S_spi_40040000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40040000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40040000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40040000_P_resets_LEN 1
#define DT_N_S_soc_S_spi_40040000_P_resets_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 *
 * Binding (compatible = arm,armv6m-systick):
 *   $ZEPHYR_BASE/dts/bindings/timer/arm,armv6m-systick.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_timer_e000e010_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv6m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv6m_systick 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0 "armv6m-systick"
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, reg, 0) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1)
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e000e010, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1)
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e000e010, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv6m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv6m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_TOKEN arm_armv6m_systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_ARMV6M_SYSTICK
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source 0
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/uart0_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_uart0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_PATH "/soc/pin-controller@40014000/uart0_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FULL_NAME "uart0_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_SUPPORTS_ORDS \
	33, /* /soc/uart@40034000 */ \
	51, /* /soc/pin-controller@40014000/uart0_default/group1 */ \
	52, /* /soc/pin-controller@40014000/uart0_default/group2 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_EXISTS 1
#define DT_N_NODELABEL_uart0_default DT_N_S_soc_S_pin_controller_40014000_S_uart0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/uart@40034000
 *
 * Node identifier: DT_N_S_soc_S_uart_40034000
 *
 * Binding (compatible = raspberrypi,pico-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/raspberrypi,pico-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40034000_PATH "/soc/uart@40034000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40034000_FULL_NAME "uart@40034000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40034000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_40034000_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40034000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40034000_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40034000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	27, /* /soc/peripheral-clk */ \
	32, /* /soc/pin-controller@40014000/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40034000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40034000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_uart DT_N_S_soc_S_uart_40034000
#define DT_N_NODELABEL_uart0              DT_N_S_soc_S_uart_40034000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40034000_REG_NUM 1
#define DT_N_S_soc_S_uart_40034000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_REG_IDX_0_VAL_ADDRESS 1073954816 /* 0x40034000 */
#define DT_N_S_soc_S_uart_40034000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_40034000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_40034000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_40034000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_VAL_irq 20
#define DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_IRQ_NAME_uart0_VAL_irq DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_uart_40034000_IRQ_NAME_uart0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_IRQ_NAME_uart0_VAL_priority DT_N_S_soc_S_uart_40034000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_uart_40034000_IRQ_NAME_uart0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_COMPAT_MATCHES_raspberrypi_pico_uart 1
#define DT_N_S_soc_S_uart_40034000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_uart_40034000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_COMPAT_MODEL_IDX_0 "pico-uart"
#define DT_N_S_soc_S_uart_40034000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40034000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_40034000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_40034000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_40034000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_40034000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_uart0_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40034000_P_reg {1073954816 /* 0x40034000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_40034000_P_reg_IDX_0 1073954816
#define DT_N_S_soc_S_uart_40034000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_uart_40034000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40034000, reg, 1)
#define DT_N_S_soc_S_uart_40034000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, reg, 1)
#define DT_N_S_soc_S_uart_40034000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40034000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_interrupts {20 /* 0x14 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_40034000_P_interrupts_IDX_0 20
#define DT_N_S_soc_S_uart_40034000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_40034000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40034000, interrupts, 1)
#define DT_N_S_soc_S_uart_40034000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, interrupts, 1)
#define DT_N_S_soc_S_uart_40034000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40034000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_current_speed 115200
#define DT_N_S_soc_S_uart_40034000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40034000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_status "okay"
#define DT_N_S_soc_S_uart_40034000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_40034000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_40034000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_40034000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_40034000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_40034000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, status, 0) \
	fn(DT_N_S_soc_S_uart_40034000, status, 1) \
	fn(DT_N_S_soc_S_uart_40034000, status, 2) \
	fn(DT_N_S_soc_S_uart_40034000, status, 3)
#define DT_N_S_soc_S_uart_40034000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, status, 3)
#define DT_N_S_soc_S_uart_40034000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40034000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40034000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40034000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40034000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_compatible {"raspberrypi,pico-uart"}
#define DT_N_S_soc_S_uart_40034000_P_compatible_IDX_0 "raspberrypi,pico-uart"
#define DT_N_S_soc_S_uart_40034000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_uart
#define DT_N_S_soc_S_uart_40034000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_UART
#define DT_N_S_soc_S_uart_40034000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, compatible, 0)
#define DT_N_S_soc_S_uart_40034000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, compatible, 0)
#define DT_N_S_soc_S_uart_40034000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40034000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names {"uart0"}
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_IDX_0 "uart0"
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_IDX_0_STRING_TOKEN uart0
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN UART0
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_uart_40034000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_clocks_IDX_0_PH DT_N_S_soc_S_peripheral_clk
#define DT_N_S_soc_S_uart_40034000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, clocks, 0)
#define DT_N_S_soc_S_uart_40034000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, clocks, 0)
#define DT_N_S_soc_S_uart_40034000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40034000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40034000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_pin_controller_40014000_S_uart0_default
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_pin_controller_40014000_S_uart0_default
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_40034000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_uart_40034000_P_resets_IDX_0_VAL_id 22
#define DT_N_S_soc_S_uart_40034000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_uart_40034000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40034000, resets, 0)
#define DT_N_S_soc_S_uart_40034000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40034000, resets, 0)
#define DT_N_S_soc_S_uart_40034000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40034000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40034000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40034000_P_resets_LEN 1
#define DT_N_S_soc_S_uart_40034000_P_resets_EXISTS 1

/*
 * Devicetree node: /soc/uart@40038000
 *
 * Node identifier: DT_N_S_soc_S_uart_40038000
 *
 * Binding (compatible = raspberrypi,pico-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/raspberrypi,pico-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40038000_PATH "/soc/uart@40038000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40038000_FULL_NAME "uart@40038000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40038000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_40038000_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40038000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40038000_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40038000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */ \
	27, /* /soc/peripheral-clk */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40038000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40038000_EXISTS 1
#define DT_N_INST_1_raspberrypi_pico_uart DT_N_S_soc_S_uart_40038000
#define DT_N_NODELABEL_uart1              DT_N_S_soc_S_uart_40038000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40038000_REG_NUM 1
#define DT_N_S_soc_S_uart_40038000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_REG_IDX_0_VAL_ADDRESS 1073971200 /* 0x40038000 */
#define DT_N_S_soc_S_uart_40038000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_40038000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_40038000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_40038000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_VAL_irq 21
#define DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_IRQ_NAME_uart1_VAL_irq DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_uart_40038000_IRQ_NAME_uart1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_IRQ_NAME_uart1_VAL_priority DT_N_S_soc_S_uart_40038000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_uart_40038000_IRQ_NAME_uart1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_COMPAT_MATCHES_raspberrypi_pico_uart 1
#define DT_N_S_soc_S_uart_40038000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_uart_40038000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_COMPAT_MODEL_IDX_0 "pico-uart"
#define DT_N_S_soc_S_uart_40038000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40038000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40038000_P_reg {1073971200 /* 0x40038000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_40038000_P_reg_IDX_0 1073971200
#define DT_N_S_soc_S_uart_40038000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_uart_40038000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40038000, reg, 1)
#define DT_N_S_soc_S_uart_40038000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, reg, 1)
#define DT_N_S_soc_S_uart_40038000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_interrupts {21 /* 0x15 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_40038000_P_interrupts_IDX_0 21
#define DT_N_S_soc_S_uart_40038000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_40038000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40038000, interrupts, 1)
#define DT_N_S_soc_S_uart_40038000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, interrupts, 1)
#define DT_N_S_soc_S_uart_40038000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40038000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_status "disabled"
#define DT_N_S_soc_S_uart_40038000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_40038000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40038000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_40038000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_40038000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40038000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, status, 0) \
	fn(DT_N_S_soc_S_uart_40038000, status, 1) \
	fn(DT_N_S_soc_S_uart_40038000, status, 2) \
	fn(DT_N_S_soc_S_uart_40038000, status, 3) \
	fn(DT_N_S_soc_S_uart_40038000, status, 4) \
	fn(DT_N_S_soc_S_uart_40038000, status, 5) \
	fn(DT_N_S_soc_S_uart_40038000, status, 6) \
	fn(DT_N_S_soc_S_uart_40038000, status, 7)
#define DT_N_S_soc_S_uart_40038000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 7)
#define DT_N_S_soc_S_uart_40038000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40038000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_40038000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_compatible {"raspberrypi,pico-uart"}
#define DT_N_S_soc_S_uart_40038000_P_compatible_IDX_0 "raspberrypi,pico-uart"
#define DT_N_S_soc_S_uart_40038000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_uart
#define DT_N_S_soc_S_uart_40038000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_UART
#define DT_N_S_soc_S_uart_40038000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, compatible, 0)
#define DT_N_S_soc_S_uart_40038000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, compatible, 0)
#define DT_N_S_soc_S_uart_40038000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40038000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names {"uart1"}
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_IDX_0 "uart1"
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_IDX_0_STRING_TOKEN uart1
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN UART1
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_uart_40038000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_clocks_IDX_0_PH DT_N_S_soc_S_peripheral_clk
#define DT_N_S_soc_S_uart_40038000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, clocks, 0)
#define DT_N_S_soc_S_uart_40038000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, clocks, 0)
#define DT_N_S_soc_S_uart_40038000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40038000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40038000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_uart_40038000_P_resets_IDX_0_VAL_id 23
#define DT_N_S_soc_S_uart_40038000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_uart_40038000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40038000, resets, 0)
#define DT_N_S_soc_S_uart_40038000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_40038000, resets, 0)
#define DT_N_S_soc_S_uart_40038000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40038000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_40038000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40038000_P_resets_LEN 1
#define DT_N_S_soc_S_uart_40038000_P_resets_EXISTS 1

/*
 * Devicetree node: /soc/usbd@50100000
 *
 * Node identifier: DT_N_S_soc_S_usbd_50100000
 *
 * Binding (compatible = raspberrypi,pico-usbd):
 *   $ZEPHYR_BASE/dts/bindings/usb/raspberrypi,pico-usbd.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usbd_50100000_PATH "/soc/usbd@50100000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usbd_50100000_FULL_NAME "usbd@50100000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usbd_50100000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_usbd_50100000_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_usbd_50100000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usbd_50100000_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usbd_50100000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */ \
	5, /* /soc/reset-controller@4000c000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usbd_50100000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usbd_50100000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_usbd DT_N_S_soc_S_usbd_50100000
#define DT_N_NODELABEL_usbd               DT_N_S_soc_S_usbd_50100000
#define DT_N_NODELABEL_zephyr_udc0        DT_N_S_soc_S_usbd_50100000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usbd_50100000_REG_NUM 1
#define DT_N_S_soc_S_usbd_50100000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_REG_IDX_0_VAL_ADDRESS 1343225856 /* 0x50100000 */
#define DT_N_S_soc_S_usbd_50100000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_usbd_50100000_RANGES_NUM 0
#define DT_N_S_soc_S_usbd_50100000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usbd_50100000_IRQ_NUM 1
#define DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_VAL_irq 5
#define DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_IRQ_NAME_usbctrl_VAL_irq DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_usbd_50100000_IRQ_NAME_usbctrl_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_IRQ_NAME_usbctrl_VAL_priority DT_N_S_soc_S_usbd_50100000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_usbd_50100000_IRQ_NAME_usbctrl_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_COMPAT_MATCHES_raspberrypi_pico_usbd 1
#define DT_N_S_soc_S_usbd_50100000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_usbd_50100000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_COMPAT_MODEL_IDX_0 "pico-usbd"
#define DT_N_S_soc_S_usbd_50100000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usbd_50100000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usbd_50100000_P_reg {1343225856 /* 0x50100000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_usbd_50100000_P_reg_IDX_0 1343225856
#define DT_N_S_soc_S_usbd_50100000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_usbd_50100000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_50100000, reg, 0) \
	fn(DT_N_S_soc_S_usbd_50100000, reg, 1)
#define DT_N_S_soc_S_usbd_50100000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usbd_50100000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, reg, 1)
#define DT_N_S_soc_S_usbd_50100000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_50100000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usbd_50100000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_interrupts {5 /* 0x5 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_IDX_0 5
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_50100000, interrupts, 0) \
	fn(DT_N_S_soc_S_usbd_50100000, interrupts, 1)
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usbd_50100000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, interrupts, 1)
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_50100000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usbd_50100000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_num_bidir_endpoints 16
#define DT_N_S_soc_S_usbd_50100000_P_num_bidir_endpoints_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_status "okay"
#define DT_N_S_soc_S_usbd_50100000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_usbd_50100000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usbd_50100000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_usbd_50100000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_usbd_50100000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usbd_50100000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_50100000, status, 0) \
	fn(DT_N_S_soc_S_usbd_50100000, status, 1) \
	fn(DT_N_S_soc_S_usbd_50100000, status, 2) \
	fn(DT_N_S_soc_S_usbd_50100000, status, 3)
#define DT_N_S_soc_S_usbd_50100000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usbd_50100000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, status, 3)
#define DT_N_S_soc_S_usbd_50100000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_50100000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_50100000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_50100000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usbd_50100000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usbd_50100000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_status_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_compatible {"raspberrypi,pico-usbd"}
#define DT_N_S_soc_S_usbd_50100000_P_compatible_IDX_0 "raspberrypi,pico-usbd"
#define DT_N_S_soc_S_usbd_50100000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_usbd
#define DT_N_S_soc_S_usbd_50100000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_USBD
#define DT_N_S_soc_S_usbd_50100000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_50100000, compatible, 0)
#define DT_N_S_soc_S_usbd_50100000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usbd_50100000, compatible, 0)
#define DT_N_S_soc_S_usbd_50100000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usbd_50100000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_compatible_LEN 1
#define DT_N_S_soc_S_usbd_50100000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names {"usbctrl"}
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_IDX_0 "usbctrl"
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_IDX_0_STRING_TOKEN usbctrl
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN USBCTRL
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_50100000, interrupt_names, 0)
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usbd_50100000, interrupt_names, 0)
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usbd_50100000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_usbd_50100000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_wakeup_source 0
#define DT_N_S_soc_S_usbd_50100000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_resets_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_resets_IDX_0_PH DT_N_S_soc_S_reset_controller_4000c000
#define DT_N_S_soc_S_usbd_50100000_P_resets_IDX_0_VAL_id 24
#define DT_N_S_soc_S_usbd_50100000_P_resets_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_usbd_50100000_P_resets_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_50100000, resets, 0)
#define DT_N_S_soc_S_usbd_50100000_P_resets_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usbd_50100000, resets, 0)
#define DT_N_S_soc_S_usbd_50100000_P_resets_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_resets_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usbd_50100000, resets, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_50100000_P_resets_LEN 1
#define DT_N_S_soc_S_usbd_50100000_P_resets_EXISTS 1

/*
 * Devicetree node: /xtal-clk
 *
 * Node identifier: DT_N_S_xtal_clk
 *
 * Binding (compatible = fixed-clock):
 *   $ZEPHYR_BASE/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_xtal_clk_PATH "/xtal-clk"

/* Node's name with unit-address: */
#define DT_N_S_xtal_clk_FULL_NAME "xtal-clk"

/* Node parent (/) identifier: */
#define DT_N_S_xtal_clk_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_xtal_clk_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_xtal_clk_FOREACH_CHILD(fn) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_xtal_clk_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_xtal_clk_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_xtal_clk_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_xtal_clk_SUPPORTS_ORDS \
	37, /* /soc/watchdog@40058000 */

/* Existence and alternate IDs: */
#define DT_N_S_xtal_clk_EXISTS 1
#define DT_N_INST_2_fixed_clock DT_N_S_xtal_clk
#define DT_N_NODELABEL_xtal_clk DT_N_S_xtal_clk

/* Macros for properties that are special in the specification: */
#define DT_N_S_xtal_clk_REG_NUM 0
#define DT_N_S_xtal_clk_RANGES_NUM 0
#define DT_N_S_xtal_clk_FOREACH_RANGE(fn) 
#define DT_N_S_xtal_clk_IRQ_NUM 0
#define DT_N_S_xtal_clk_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_xtal_clk_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_xtal_clk_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_xtal_clk_P_clock_frequency 12000000
#define DT_N_S_xtal_clk_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@40058000
 *
 * Node identifier: DT_N_S_soc_S_watchdog_40058000
 *
 * Binding (compatible = raspberrypi,pico-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/raspberrypi,pico-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_40058000_PATH "/soc/watchdog@40058000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_40058000_FULL_NAME "watchdog@40058000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_40058000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_40058000_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_40058000_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_40058000_REQUIRES_ORDS \
	3, /* /soc */ \
	36, /* /xtal-clk */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_40058000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_40058000_EXISTS 1
#define DT_N_ALIAS_watchdog0                  DT_N_S_soc_S_watchdog_40058000
#define DT_N_INST_0_raspberrypi_pico_watchdog DT_N_S_soc_S_watchdog_40058000
#define DT_N_NODELABEL_wdt0                   DT_N_S_soc_S_watchdog_40058000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_40058000_REG_NUM 1
#define DT_N_S_soc_S_watchdog_40058000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_REG_IDX_0_VAL_ADDRESS 1074102272 /* 0x40058000 */
#define DT_N_S_soc_S_watchdog_40058000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_watchdog_40058000_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_40058000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_40058000_IRQ_NUM 0
#define DT_N_S_soc_S_watchdog_40058000_COMPAT_MATCHES_raspberrypi_pico_watchdog 1
#define DT_N_S_soc_S_watchdog_40058000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_watchdog_40058000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_COMPAT_MODEL_IDX_0 "pico-watchdog"
#define DT_N_S_soc_S_watchdog_40058000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_40058000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_40058000_P_reg {1074102272 /* 0x40058000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_watchdog_40058000_P_reg_IDX_0 1074102272
#define DT_N_S_soc_S_watchdog_40058000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_watchdog_40058000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_40058000, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_40058000, reg, 1)
#define DT_N_S_soc_S_watchdog_40058000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_40058000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, reg, 1)
#define DT_N_S_soc_S_watchdog_40058000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_40058000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_40058000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_40058000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_IDX_0_PH DT_N_S_xtal_clk
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_40058000, clocks, 0)
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_40058000, clocks, 0)
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_40058000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_40058000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_40058000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_status "okay"
#define DT_N_S_soc_S_watchdog_40058000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_watchdog_40058000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_40058000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_watchdog_40058000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_watchdog_40058000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_40058000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_40058000, status, 0) \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 1) \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 2) \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 3)
#define DT_N_S_soc_S_watchdog_40058000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_40058000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 3)
#define DT_N_S_soc_S_watchdog_40058000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_40058000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_40058000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_40058000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_compatible {"raspberrypi,pico-watchdog"}
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_IDX_0 "raspberrypi,pico-watchdog"
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_watchdog
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_WATCHDOG
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_40058000, compatible, 0)
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_40058000, compatible, 0)
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_40058000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_40058000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_40058000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_40058000_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_40058000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@10000000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_10000000
 *
 * Binding (compatible = raspberrypi,pico-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/raspberrypi,pico-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_10000000_PATH "/soc/flash-controller@10000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_10000000_FULL_NAME "flash-controller@10000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_10000000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_10000000_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_10000000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_10000000_SUPPORTS_ORDS \
	39, /* /soc/flash-controller@10000000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_10000000_EXISTS 1
#define DT_N_INST_0_raspberrypi_pico_flash_controller DT_N_S_soc_S_flash_controller_10000000
#define DT_N_NODELABEL_flash_controller               DT_N_S_soc_S_flash_controller_10000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_10000000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_10000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_REG_IDX_0_VAL_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_soc_S_flash_controller_10000000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_10000000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_NUM 1
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_IDX_0_VAL_irq 15
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flash_controller_10000000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_COMPAT_MATCHES_raspberrypi_pico_flash_controller 1
#define DT_N_S_soc_S_flash_controller_10000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_COMPAT_VENDOR_IDX_0 "Raspberry Pi Foundation"
#define DT_N_S_soc_S_flash_controller_10000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_COMPAT_MODEL_IDX_0 "pico-flash-controller"
#define DT_N_S_soc_S_flash_controller_10000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_10000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_10000000_P_reg {268435456 /* 0x10000000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_IDX_0 268435456
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible {"raspberrypi,pico-flash-controller"}
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_IDX_0 "raspberrypi,pico-flash-controller"
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_IDX_0_STRING_TOKEN raspberrypi_pico_flash_controller
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_IDX_0_STRING_UPPER_TOKEN RASPBERRYPI_PICO_FLASH_CONTROLLER
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_10000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts {15 /* 0xf */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_IDX_0 15
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 1)
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 1)
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_10000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@10000000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_10000000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_PATH "/soc/flash-controller@10000000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@10000000) identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_10000000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_REQUIRES_ORDS \
	38, /* /soc/flash-controller@10000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_SUPPORTS_ORDS \
	40, /* /soc/flash-controller@10000000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_10000000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_10000000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_REG_IDX_0_VAL_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_REG_IDX_0_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_erase_block_size 4096
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_write_block_size 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg {268435456 /* 0x10000000 */, 2097152 /* 0x200000 */}
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_IDX_0 268435456
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_IDX_1 2097152
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@10000000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_PATH "/soc/flash-controller@10000000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@10000000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_10000000_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_REQUIRES_ORDS \
	39, /* /soc/flash-controller@10000000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	41, /* /soc/flash-controller@10000000/flash@0/partitions/partition@0 */ \
	42, /* /soc/flash-controller@10000000/flash@0/partitions/partition@100 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@10000000/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_PATH "/soc/flash-controller@10000000/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/soc/flash-controller@10000000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	40, /* /soc/flash-controller@10000000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_second_stage_bootloader DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label "second_stage_bootloader"
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN second_stage_bootloader
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN SECOND_STAGE_BOOTLOADER
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 9) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 10) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 11) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 12) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 13) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 14) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 15) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 16) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 17) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 18) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 19) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 20) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 21) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 22)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 14) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 15) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 16) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 17) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 18) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 19) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 20) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 21) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 22)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 14, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 15, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 16, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 17, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 18, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 19, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 20, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 21, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 22, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 14, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 15, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 16, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 17, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 18, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 19, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 20, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 21, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, label, 22, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_read_only 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 256
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@10000000/flash@0/partitions/partition@100
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_PATH "/soc/flash-controller@10000000/flash@0/partitions/partition@100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FULL_NAME "partition@100"

/* Node parent (/soc/flash-controller@10000000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_PARENT DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_REQUIRES_ORDS \
	40, /* /soc/flash-controller@10000000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_EXISTS 1
#define DT_N_NODELABEL_code_partition DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_REG_IDX_0_VAL_ADDRESS 256 /* 0x100 */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_REG_IDX_0_VAL_SIZE 2096896 /* 0x1fff00 */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label "code-partition"
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_STRING_TOKEN code_partition
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_STRING_UPPER_TOKEN CODE_PARTITION
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 9) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 10) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 11) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 12) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 13)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 13)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 13, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, label, 13, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_read_only 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg {256 /* 0x100 */, 2096896 /* 0x1fff00 */}
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_IDX_0 256
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_IDX_1 2096896
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 1)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/adc_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_PATH "/soc/pin-controller@40014000/adc_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/adc_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_adc_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_ORD 43

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_REQUIRES_ORDS \
	20, /* /soc/pin-controller@40014000/adc_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux {431 /* 0x1af */, 447 /* 0x1bf */, 463 /* 0x1cf */, 479 /* 0x1df */}
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_0 431
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_1 447
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_2 463
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_3 479
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_IDX_3_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 1) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 2) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 3)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 3)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1, pinmux, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_LEN 4
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_input_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/i2c0_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_PATH "/soc/pin-controller@40014000/i2c0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/i2c0_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_ORD 44

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_REQUIRES_ORDS \
	22, /* /soc/pin-controller@40014000/i2c0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux {67 /* 0x43 */, 83 /* 0x53 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_IDX_0 67
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_IDX_1 83
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_input_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_input_schmitt_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/i2c1_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_PATH "/soc/pin-controller@40014000/i2c1_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/i2c1_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_ORD 45

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_REQUIRES_ORDS \
	24, /* /soc/pin-controller@40014000/i2c1_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux {227 /* 0xe3 */, 243 /* 0xf3 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_IDX_0 227
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_IDX_1 243
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 1)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_input_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_input_schmitt_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/pwm_ch1b_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_PATH "/soc/pin-controller@40014000/pwm_ch1b_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/pwm_ch1b_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_ORD 46

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_REQUIRES_ORDS \
	8, /* /soc/pin-controller@40014000/pwm_ch1b_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux {20 /* 0x14 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_IDX_0 20
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_IDX_1 4
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_input_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/pwm_ch4b_default
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_PATH "/soc/pin-controller@40014000/pwm_ch4b_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FULL_NAME "pwm_ch4b_default"

/* Node parent (/soc/pin-controller@40014000) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_PARENT DT_N_S_soc_S_pin_controller_40014000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_ORD 47

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_REQUIRES_ORDS \
	7, /* /soc/pin-controller@40014000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_SUPPORTS_ORDS \
	48, /* /soc/pin-controller@40014000/pwm_ch4b_default/group1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_EXISTS 1
#define DT_N_NODELABEL_pwm_ch4b_default DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/pin-controller@40014000/pwm_ch4b_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_PATH "/soc/pin-controller@40014000/pwm_ch4b_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/pwm_ch4b_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_ORD 48

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_REQUIRES_ORDS \
	47, /* /soc/pin-controller@40014000/pwm_ch4b_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux {404 /* 0x194 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_IDX_0 404
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_input_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/spi0_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_PATH "/soc/pin-controller@40014000/spi0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/spi0_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_spi0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_ORD 49

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_REQUIRES_ORDS \
	28, /* /soc/pin-controller@40014000/spi0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux {273 /* 0x111 */, 289 /* 0x121 */, 305 /* 0x131 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_IDX_0 273
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_IDX_1 289
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_IDX_2 305
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 0) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 1) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 2)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 2)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_LEN 3
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_input_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/spi0_default/group2
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_PATH "/soc/pin-controller@40014000/spi0_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FULL_NAME "group2"

/* Node parent (/soc/pin-controller@40014000/spi0_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_PARENT DT_N_S_soc_S_pin_controller_40014000_S_spi0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_ORD 50

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_REQUIRES_ORDS \
	28, /* /soc/pin-controller@40014000/spi0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux {257 /* 0x101 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_IDX_0 257
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_input_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/uart0_default/group1
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_PATH "/soc/pin-controller@40014000/uart0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FULL_NAME "group1"

/* Node parent (/soc/pin-controller@40014000/uart0_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_PARENT DT_N_S_soc_S_pin_controller_40014000_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_ORD 51

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_REQUIRES_ORDS \
	32, /* /soc/pin-controller@40014000/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux {2 /* 0x2 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_IDX_0 2
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_input_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pin-controller@40014000/uart0_default/group2
 *
 * Node identifier: DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_PATH "/soc/pin-controller@40014000/uart0_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FULL_NAME "group2"

/* Node parent (/soc/pin-controller@40014000/uart0_default) identifier: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_PARENT DT_N_S_soc_S_pin_controller_40014000_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_ORD 52

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_REQUIRES_ORDS \
	32, /* /soc/pin-controller@40014000/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_REG_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_RANGES_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_IRQ_NUM 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux {18 /* 0x12 */}
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_IDX_0 18
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_drive_strength 4
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_drive_strength_ENUM_IDX 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_slew_rate 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_bias_disable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_bias_pull_up 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_bias_pull_down 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_input_enable 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_input_schmitt_enable 0
#define DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/pwm@40050000/channel0@0
 *
 * Node identifier: DT_N_S_soc_S_pwm_40050000_S_channel0_0
 */

/* Node's full path: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_PATH "/soc/pwm@40050000/channel0@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FULL_NAME "channel0@0"

/* Node parent (/soc/pwm@40050000) identifier: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_PARENT DT_N_S_soc_S_pwm_40050000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_ORD 53

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_REQUIRES_ORDS \
	9, /* /soc/pwm@40050000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_REG_NUM 1
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_RANGES_NUM 0
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_IRQ_NUM 0
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg {0 /* 0x0 */}
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, reg, 0)
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, reg, 0)
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_S_channel0_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/pwm@40050000/channel1@1
 *
 * Node identifier: DT_N_S_soc_S_pwm_40050000_S_channel1_1
 */

/* Node's full path: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_PATH "/soc/pwm@40050000/channel1@1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FULL_NAME "channel1@1"

/* Node parent (/soc/pwm@40050000) identifier: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_PARENT DT_N_S_soc_S_pwm_40050000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_ORD 54

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_REQUIRES_ORDS \
	9, /* /soc/pwm@40050000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_REG_NUM 1
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_RANGES_NUM 0
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_IRQ_NUM 0
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg {1 /* 0x1 */}
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_IDX_0 1
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, reg, 0)
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, reg, 0)
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_40050000_S_channel1_1_P_reg_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_20000000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_10000000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_10000000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_40034000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_40034000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_flash_controller_10000000) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100) fn(DT_N_S_soc_S_peripheral_clk) fn(DT_N_S_soc_S_system_clk) fn(DT_N_S_soc_S_reset_controller_4000c000) fn(DT_N_S_soc_S_pin_controller_40014000) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1) fn(DT_N_S_soc_S_gpio_40014000) fn(DT_N_S_soc_S_uart_40034000) fn(DT_N_S_soc_S_uart_40038000) fn(DT_N_S_soc_S_spi_4003c000) fn(DT_N_S_soc_S_spi_40040000) fn(DT_N_S_soc_S_adc_4004c000) fn(DT_N_S_soc_S_i2c_40044000) fn(DT_N_S_soc_S_i2c_40048000) fn(DT_N_S_soc_S_watchdog_40058000) fn(DT_N_S_soc_S_usbd_50100000) fn(DT_N_S_soc_S_pwm_40050000) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_xtal_clk) fn(DT_N_S_pwm_leds) fn(DT_N_S_pwm_leds_S_pwm_led_0) fn(DT_N_S_servo1) fn(DT_N_S_servo0)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_flash_controller_10000000) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100) fn(DT_N_S_soc_S_peripheral_clk) fn(DT_N_S_soc_S_system_clk) fn(DT_N_S_soc_S_reset_controller_4000c000) fn(DT_N_S_soc_S_pin_controller_40014000) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_uart0_default_S_group2) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_i2c1_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_spi0_default_S_group2) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch4b_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_adc_default_S_group1) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default) fn(DT_N_S_soc_S_pin_controller_40014000_S_pwm_ch1b_default_S_group1) fn(DT_N_S_soc_S_gpio_40014000) fn(DT_N_S_soc_S_uart_40034000) fn(DT_N_S_soc_S_spi_4003c000) fn(DT_N_S_soc_S_adc_4004c000) fn(DT_N_S_soc_S_i2c_40044000) fn(DT_N_S_soc_S_i2c_40048000) fn(DT_N_S_soc_S_watchdog_40058000) fn(DT_N_S_soc_S_usbd_50100000) fn(DT_N_S_soc_S_pwm_40050000) fn(DT_N_S_soc_S_pwm_40050000_S_channel0_0) fn(DT_N_S_soc_S_pwm_40050000_S_channel1_1) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_xtal_clk) fn(DT_N_S_pwm_leds) fn(DT_N_S_servo1) fn(DT_N_S_servo0)
#define DT_COMPAT_fixed_partitions_LABEL_second_stage_bootloader DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_second_stage_bootloader_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_code_partition DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions_S_partition_100
#define DT_COMPAT_fixed_partitions_LABEL_code_partition_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v6m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv6m_systick 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_reset 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_pinctrl 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_gpio 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_uart 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_spi 1
#define DT_COMPAT_HAS_OKAY_arm_pl022 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_adc 1
#define DT_COMPAT_HAS_OKAY_snps_designware_i2c 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_watchdog 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_usbd 1
#define DT_COMPAT_HAS_OKAY_raspberrypi_pico_pwm 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m0_ 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1
#define DT_COMPAT_HAS_OKAY_pwm_leds 1
#define DT_COMPAT_HAS_OKAY_pwm_servo 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v6m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv6m_systick_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 3
#define DT_N_INST_raspberrypi_pico_reset_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_pinctrl_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_gpio_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_uart_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_spi_NUM_OKAY 1
#define DT_N_INST_arm_pl022_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_adc_NUM_OKAY 1
#define DT_N_INST_snps_designware_i2c_NUM_OKAY 2
#define DT_N_INST_raspberrypi_pico_watchdog_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_usbd_NUM_OKAY 1
#define DT_N_INST_raspberrypi_pico_pwm_NUM_OKAY 1
#define DT_N_INST_arm_cortex_m0__NUM_OKAY 2
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_N_INST_pwm_leds_NUM_OKAY 1
#define DT_N_INST_pwm_servo_NUM_OKAY 2
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v6m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v6m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v6m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v6m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv6m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv6m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv6m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv6m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_20000000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_10000000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_10000000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_soc_S_peripheral_clk) fn(DT_N_S_soc_S_system_clk) fn(DT_N_S_xtal_clk)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_soc_S_peripheral_clk, __VA_ARGS__) fn(DT_N_S_soc_S_system_clk, __VA_ARGS__) fn(DT_N_S_xtal_clk, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_reset(fn) fn(DT_N_S_soc_S_reset_controller_4000c000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_reset(fn, ...) fn(DT_N_S_soc_S_reset_controller_4000c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_reset(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_reset(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_pinctrl(fn) fn(DT_N_S_soc_S_pin_controller_40014000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_pinctrl(fn, ...) fn(DT_N_S_soc_S_pin_controller_40014000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_gpio(fn) fn(DT_N_S_soc_S_gpio_40014000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_40014000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_uart(fn) fn(DT_N_S_soc_S_uart_40034000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_uart(fn, ...) fn(DT_N_S_soc_S_uart_40034000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_spi(fn) fn(DT_N_S_soc_S_spi_4003c000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_spi(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_spi(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_spi(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_pl022(fn) fn(DT_N_S_soc_S_spi_4003c000)
#define DT_FOREACH_OKAY_VARGS_arm_pl022(fn, ...) fn(DT_N_S_soc_S_spi_4003c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_pl022(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_pl022(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_adc(fn) fn(DT_N_S_soc_S_adc_4004c000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_adc(fn, ...) fn(DT_N_S_soc_S_adc_4004c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_adc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_adc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_snps_designware_i2c(fn) fn(DT_N_S_soc_S_i2c_40044000) fn(DT_N_S_soc_S_i2c_40048000)
#define DT_FOREACH_OKAY_VARGS_snps_designware_i2c(fn, ...) fn(DT_N_S_soc_S_i2c_40044000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40048000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_snps_designware_i2c(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_snps_designware_i2c(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_watchdog(fn) fn(DT_N_S_soc_S_watchdog_40058000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_watchdog(fn, ...) fn(DT_N_S_soc_S_watchdog_40058000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_watchdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_watchdog(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_usbd(fn) fn(DT_N_S_soc_S_usbd_50100000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_usbd(fn, ...) fn(DT_N_S_soc_S_usbd_50100000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_usbd(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_usbd(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_raspberrypi_pico_pwm(fn) fn(DT_N_S_soc_S_pwm_40050000)
#define DT_FOREACH_OKAY_VARGS_raspberrypi_pico_pwm(fn, ...) fn(DT_N_S_soc_S_pwm_40050000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_raspberrypi_pico_pwm(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_raspberrypi_pico_pwm(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m0_(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m0_(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m0_(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m0_(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_pwm_leds(fn) fn(DT_N_S_pwm_leds)
#define DT_FOREACH_OKAY_VARGS_pwm_leds(fn, ...) fn(DT_N_S_pwm_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_pwm_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_pwm_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_pwm_servo(fn) fn(DT_N_S_servo1) fn(DT_N_S_servo0)
#define DT_FOREACH_OKAY_VARGS_pwm_servo(fn, ...) fn(DT_N_S_servo1, __VA_ARGS__) fn(DT_N_S_servo0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_pwm_servo(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_pwm_servo(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
